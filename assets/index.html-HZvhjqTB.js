import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as t,c,a,b as s,d as e,e as i}from"./app-db_OQQsY.js";const d={},o={id:"_3-1、docker-安装",tabindex:"-1"},p=a("a",{class:"header-anchor",href:"#_3-1、docker-安装","aria-hidden":"true"},"#",-1),m={href:"https://www.runoob.com/docker/centos-docker-install.html",target:"_blank",rel:"noopener noreferrer"},u=i(`<hr><p><strong>使用官方安装脚本自动安装</strong></p><p>安装命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token function">docker</span> <span class="token parameter variable">--mirror</span> Aliyun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用yum安装docker（推荐）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p><strong>手动安装</strong></p><ul><li>卸载旧版本</li></ul><p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装工具包</li></ul><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\\</span>
  device-mapper-persistent-data <span class="token punctuation">\\</span>
  lvm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置仓库</li></ul><p>使用官方源地址（比较慢，不推荐）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阿里云（推荐）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>清华大学源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装 Docker Engine-Community</li></ul><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果提示您接受 GPG 密钥，请选是。</p><blockquote><p><strong>有多个 Docker 仓库吗？</strong></p><p>如果启用了多个 Docker 仓库，则在未在 yum install 或 yum update 命令中指定版本的情况下，进行的安装或更新将始终安装最高版本，这可能不适合您的稳定性需求。</p></blockquote><p>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。</p><p><strong>要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：</strong></p><p>1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum list docker-ce <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span>

docker-ce.x86_64  <span class="token number">3</span>:18.09.1-3.el7                     docker-ce-stable
docker-ce.x86_64  <span class="token number">3</span>:18.09.0-3.el7                     docker-ce-stable
docker-ce.x86_64  <span class="token number">18.06</span>.1.ce-3.el7                    docker-ce-stable
docker-ce.x86_64  <span class="token number">18.06</span>.0.ce-3.el7                    docker-ce-stable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：<code>docker-ce-18.09.1</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>sudo yum install docker<span class="token operator">-</span>ce<span class="token operator">-</span><span class="token generics"><span class="token punctuation">&lt;</span>VERSION_STRING<span class="token punctuation">&gt;</span></span> docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli<span class="token operator">-</span><span class="token generics"><span class="token punctuation">&lt;</span>VERSION_STRING<span class="token punctuation">&gt;</span></span> containerd<span class="token punctuation">.</span>io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动 Docker。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo systemctl start docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过运行 hello-world 镜像来验证是否正确安装了 Docker Engine-Community 。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo docker run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>卸载 docker</strong></p><p>删除安装包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum remove docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除镜像、容器、配置文件等内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,42),g={id:"_3-2、常用命令",tabindex:"-1"},v=a("a",{class:"header-anchor",href:"#_3-2、常用命令","aria-hidden":"true"},"#",-1),b={href:"https://blog.csdn.net/leilei1366615/article/details/106267225",target:"_blank",rel:"noopener noreferrer"},k=i(`<p>个人理解 docker中的镜像 就像是咱们java 中的Class ，而容器呢 是基于这个镜像构建出的实例 类似于咱java 中 根据Class构造出的一个个实例对象 ，本人是初学者 理解有误还请见谅，并麻烦您说说您的看法让彼此相互学习…</p><p>按我理解 简言之</p><pre><code>docker 镜像： ----java中 class

docker容器 ： ----java中 class new 出来的实例对象
</code></pre><p>本篇文章不仅仅是生硬的命令大全，也是我个人对docker学习使用的一步步总结，通过一个个示例来加深各位看官对docker相关命令的理解以及记忆，在有趣的同时穿插知识点，您花费半小时时间，照着我的思路走一遍，一定会有所收获。</p><h3 id="一-docker-基础命令" tabindex="-1"><a class="header-anchor" href="#一-docker-基础命令" aria-hidden="true">#</a> （一）docker 基础命令</h3><p><strong>启动docker</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>关闭docker</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重启docker</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>docker设置随服务启动而自启动</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看docker 运行状态</strong></p><p>------如果是在运行中 输入命令后 会看到绿色的active</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看docker 版本号信息</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>docker 帮助命令</strong></p><p>忘记了某些命令便可使用此进行查看与回顾</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如 咱忘记了 拉取命令 不知道可以带哪些参数 咱可以这样使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-16709865349641.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="二-docker-镜像命令" tabindex="-1"><a class="header-anchor" href="#二-docker-镜像命令" aria-hidden="true">#</a> （二）docker 镜像命令</h3><p><strong>查看自己服务器中docker 镜像列表</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>搜索镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search 镜像名
<span class="token function">docker</span> search <span class="token parameter variable">--filter</span><span class="token operator">=</span>STARS<span class="token operator">=</span><span class="token number">9000</span> mysql 搜索 STARS <span class="token operator">&gt;</span><span class="token number">9000</span>的 mysql 镜像
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-16709865349642.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>拉取镜像</strong> 不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull 镜像名 
<span class="token function">docker</span> pull 镜像名:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>拉取最新版 mysql</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-16709865349643.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>咱再来拉取一个指定版本号 镜像 至于版本号呢 可以在docker hub中查看</p>`,37),h={href:"https://hub.docker.com/search?type=image",target:"_blank",rel:"noopener noreferrer"},f=a("figure",null,[a("img",{src:"https://gitlab.com/apzs/image/-/raw/master/image/format,png-16709865349654.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),x=a("p",null,"例如 拉取 mysql 5.7.30 ------------------这里出现了一些小东西 感觉挺新奇的 随着学习深入再回过头来看吧",-1),y=a("figure",null,[a("img",{src:"https://gitlab.com/apzs/image/-/raw/master/image/format,png-16709865349655.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),z={href:"https://blog.csdn.net/leilei1366615/article/details/106269231",target:"_blank",rel:"noopener noreferrer"},_=i(`<p><strong>运行镜像</strong> ----咱拉取一个tomcat 跑起来试一试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run 镜像名
<span class="token function">docker</span> run 镜像名:Tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ex：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull tomcat

<span class="token function">docker</span> run tomcat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-16709865349656.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>发现咱运行后 出现tomcat 默认占用的8080 端口 说明该镜像已经是启动了 ，但是 咱好像鼠标没有回到咱服务器上了 ，这怎么办呢 ？</p><p>使用 <code>Ctrl+C</code> （注：此方式虽然可以退出容器，但此种命令操作方式却是错误的，详细缘由请见下文的容器命令）</p><p><strong>docker中 run 命令是十分复杂的 有什么持久运行 映射端口 设置容器别名 数据卷挂载等</strong></p><hr><p>一通测试，发现我们拉了好多镜像了，但我们现在根本用不着，这些无用镜像怎么删除呢？</p><p><strong>删除镜像</strong> ------当前镜像没有被任何容器使用才可以删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#删除一个</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像名/镜像ID

<span class="token comment">#删除多个 其镜像ID或镜像用用空格隔开即可 </span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像名/镜像ID 镜像名/镜像ID 镜像名/镜像ID

<span class="token comment">#删除全部镜像  -a 意思为显示全部, -q 意思为只显示ID</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>强制删除镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">rm</span> 镜像名称/镜像ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>镜像的基础命令就到这里 下方会使用更复杂的 docker run 命令 来根据镜像启动容器</p><p><strong>保存镜像</strong><br> 将我们的镜像 保存为tar 压缩文件 这样方便镜像转移和保存 ,然后 可以在任何一台安装了docker的服务器上 加载这个镜像</p><p>命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save 镜像名/镜像ID <span class="token parameter variable">-o</span> 镜像保存在哪个位置与名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>exmaple:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save tomcat <span class="token parameter variable">-o</span> /myimg.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2020061321233250.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>保存镜像任务执行完毕，我们来看下指定位置下是否有该tar？</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlaWxlaTEzNjY2MTU=,size_16,color_FFFFFF,t_70.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>加载镜像</strong><br> 任何装 docker 的地方加载镜像保存文件,使其恢复为一个镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> 镜像保存文件位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlaWxlaTEzNjY2MTU=,size_16,color_FFFFFF,t_70-16709865349657.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>加载文件 恢复为镜像</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/20200613213225208.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>查看镜像 测试镜像功能是否正常</strong></p><p>我们来把解压的镜像 run一下。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlaWxlaTEzNjY2MTU=,size_16,color_FFFFFF,t_70-16709865349668.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>镜像标签</strong><br> 有的时候呢，我们需要对一个镜像进行分类或者版本迭代操作，比如我们一个微服务已经打为docker镜像，但是想根据环境进行区分为develop环境与alpha环境，这个时候呢，我们就可以使用Tag，来进对镜像做一个标签添加，从而行进区分；版本迭代逻辑也是一样，根据不同的tag进行区分</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>app:1.0.0 基础镜像
<span class="token comment"># 分离为开发环境</span>
app:develop-1.0.0   
<span class="token comment"># 分离为alpha环境</span>
app:alpha-1.0.0   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag SOURCE_IMAGE<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span> TARGET_IMAGE<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>

<span class="token function">docker</span> tag 源镜像名:TAG 想要生成新的镜像名:新的TAG

<span class="token comment"># 如果省略TAG 则会为镜像默认打上latest TAG</span>
<span class="token function">docker</span> tag aaa bbb
<span class="token comment"># 上方操作等于 docker tag aaa:latest bbb:test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ex：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 我们根据镜像 quay.io/minio/minio 添加一个新的镜像 名为 aaa 标签Tag设置为1.2.3</span>
<span class="token function">docker</span> tag quay.io/minio/minio:1.2.3 aaa:1.2.3

<span class="token comment"># 我们根据镜像 app-user:1.0.0 添加一个新的镜像 名为 app-user 标签Tag设置为alpha-1.0.0</span>
<span class="token function">docker</span> tag app-user:1.0.0 app-user:alpha-1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3a312631bd04dbc67a1a1d41560858a8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="三-docker-容器命令" tabindex="-1"><a class="header-anchor" href="#三-docker-容器命令" aria-hidden="true">#</a> （三）docker 容器命令</h3><p>前言已经说了 docker 容器 就好比 咱java中的new出来对象（docker run 镜像 产生一个该镜像具体容器实例）,docker 容器的启动需要 镜像的支持</p><p>先放上 docker 容器查看命令</p><p><strong>查看正在运行容器列表</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看所有容器</strong> -----包含正在运行 和已停止的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>容器怎么来呢 可以通过run 镜像 来构建 自己的容器实例</strong></p><p><strong>运行一个容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -it 表示 与容器进行交互式启动 -d 表示可后台运行容器 （守护式运行）  --name 给要运行的容器 起的名字  /bin/bash  交互路径</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> 要取的别名 镜像名:Tag /bin/bash 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如我们要启动一个redis 把它的别名取为redis001 并交互式运行 需要的命令 —我这里指定版本号为5.0.5</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#1. 拉取redis 镜像</span>
<span class="token function">docker</span> pull redis:5.0.5
<span class="token comment">#2.命令启动</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis001 redis:5.0.5 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-16709865349669.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#3.查看已运行容器</span>
<span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496610.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改容器为自启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span>  update <span class="token parameter variable">--restart</span><span class="token operator">=</span>always 容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发现看到了 redis 使用了6379 端口 那么我们在关闭防火墙或开启了安全组的情况下 是否可以进行访问呢？</p><p>为了 区分 咱们使用linux 命令 查看一下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息</span>
<span class="token function">netstat</span> <span class="token parameter variable">-untlp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496611.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>惊讶的发现，我们redis容器启动占用的 6379端口netstat 没有显示出来？什么情况？赶紧使用 redis desktop manger 连接测试一下</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496612.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>为什么不行呢 已经确定了 docker 中 redis 容器已经是在运行中 且占有端口 6379啊？</strong></p><p><strong>因为：占用的6379端口 仅仅是在容器中内部本身的端口,与宿主机的6379端口并无联系，我们通过宿主机Ip:6379访问此redis示例，那自然是找不到的哟！</strong></p><hr><p><strong>这里，来补充一点Docker容器的知识！</strong></p><p><strong>每一个 Docker容器都是独立和安全的应用平台（我们可以理解为，每一个docker容器都相当于在我们的服务器上占用资源然后开辟了属于自己的一个空间（也可以理解为服务器））</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/d3ffd76e30f032506708efe7608ade2d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>这是Docker 一大特点，每个容器之间环境都是隔离的!!!</strong></p><p>我们甚至可以在一个服务器上，使用docker镜像，来跑出N个 mysql实例（尽管，他们的默认端口都是一样的，但还是那句话，容器间，环境是隔离的。A容器中的3306 与B容器的3306毫无关系，因为其不在一个世界呀!）</p><p><strong>默认情况下，我们是无法通过宿主机（安装docker的服务器）端口来直接访问容器的 ,因为docker容器自己开辟空间的端口与宿主机端口没有联系…</strong></p><p>如果外部想要访问容器，那必须得让容器中的端口与宿主机的端口建立联系绑定起来，这个正式的概念叫做 <code>容器端口映射</code></p><p>有了端口映射，我们就可以将宿主机端口与 容器端口绑定起来，比如 我们建立宿主机的6379端口与容器redis6379端口绑定起来，那么再访问宿主机Ip:6379 就可以访问到对应容器了！</p><p>接下来 进行 <strong>容器端口映射</strong>演示</p><p>首先<strong>停止容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 先停止咱之前运行的 redis 容器 </span>
<span class="token function">docker</span> stop 容器名/容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496713.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后<strong>删除容器</strong> -----不经意间 咱发现已经运行过这么多容器了 咱进行清理一下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496714.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#删除一个容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> 容器名/容器ID
<span class="token comment">#删除多个容器 空格隔开要删除的容器名或容器ID</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> 容器名/容器ID 容器名/容器ID 容器名/容器ID
<span class="token comment">#删除全部容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496715.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样 容器就已经删除完毕了 ，咱们接着弄 前边说的 端口映射</p><p><strong>容器端口与服务器端口映射</strong></p><p>命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-p</span> 宿主机端口:容器端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还是使用前方的 redis 镜像 尝试 将6379端口 映射到服务器的8888 如果成功了的话 那么咱们访问服务器的8888端口就会访问到咱们的 docker 中 的容器 redis002</p><p>-p 8888:6379 解析 将容器内部的 6379端口与docker 宿主机（docker装在哪台服务器 哪台服务器就是宿主机）8888 端口进行映射 那通过外部访问宿主机8888端口 即可访问到 docker 容器 6379 端口了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> redis002 <span class="token parameter variable">-p</span> <span class="token number">8888</span>:6379 redis:5.0.5 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496716.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在运行后 发现服务器的 8888 端口显示已被docker-proxy 所占用了 那么此时咱再用工具进行连接测试呢？</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496717.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>那么容器端口映射有没有什么限制呢？</strong></p><p>有的，虽说每个容器之间，环境都是隔离的，但是宿主机每个端口都是一个，8888端口被redis002容器绑定了，那么其他所有的容器都不可以使用8888这个端口了!!!</p><hr><p>有时候，我们需要进入容器内部，修改其配置文件，那么如何才能进入容器内呢？</p><p><strong>进入容器方式一</strong> 这里咱就进入 前面的 redis001容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器名/容器ID /bin/bash

<span class="token comment">#进入 前面的 redis001容器   </span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis001 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496718.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到 我已经从主机alibyleilei 跳到了容器ID 对应下的 /data 已经是进入到容器内部了</p><p><strong>进入容器方式二</strong> —推荐使用 exec 方式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> attach 容器名/容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那怎么退出容器呢 ？</p><p><strong>从容器内 退出到自己服务器中</strong> 需注意 两个退出命令的区别</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#-----直接退出  未添加 -d(持久化运行容器) 时 执行此参数 容器会被关闭  </span>
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 优雅退出 --- 无论是否添加-d 参数 执行此命令容器都不会被关闭</span>
Ctrl + p + q
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>停止容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重启容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>启动容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>kill 容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span> 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>容器文件拷贝</strong> —无论容器是否开启 都可以进行拷贝</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#docker cp 容器ID/名称:文件路径  要拷贝到外部的路径   |     要拷贝到外部的路径  容器ID/名称:文件路径</span>
<span class="token comment">#从容器内 拷出</span>
<span class="token function">docker</span> <span class="token function">cp</span> 容器ID/名称: 容器内路径  容器外路径
<span class="token comment">#从外部 拷贝文件到容器内</span>
<span class="token function">docker</span>  <span class="token function">cp</span> 容器外路径 容器ID/名称: 容器内路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>查看容器日志</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span>要查看末尾多少行 默认all 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496719.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们在运维的时候，通常给一些软件喜欢设置开机自启动，例如 mysql、redis,这样测试环境服务器重启时可节省不少运维时间成本，那么我们如果是docker容器 是否也可以设置开机自启动容器呢？</p><p>答案是 OKKKKK!</p><p>启动容器时，使用docker run命令时 添加参数<code>--restart=always</code> 便表示，该容器随docker服务启动而自动启动</p><p>ex:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> redis002 <span class="token parameter variable">-p</span> <span class="token number">8888</span>:6379 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always  redis:5.0.5 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>这个时候有小伙伴着急了，我都已经启动一个容器好久了，跑了很多数据了，现在才告诉我可以设置自启动？我把容器删了再启动，我数据咋办？？？</strong></p><p><strong>哎！小伙汁，这个时候不要慌，我告诉你两个办法！</strong></p><p><strong>方法一：担心数据丢了，这说明你在跑容器的时候没有进行数据挂载吧？？？</strong></p><p><strong>你问我，什么是数据挂载？</strong></p><p>简单来讲，就是将容器内的数据与外部宿主机文件绑定起来，类似一个双持久化，当容器删除时，宿主机文件数据目录仍在，下次启动容器只要将数据目录指向宿主机数据所在位置即可恢复！</p>`,126),w={href:"https://blog.csdn.net/leilei1366615/article/details/106269231",target:"_blank",rel:"noopener noreferrer"},D=i(`<p>命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> 宿主机文件存储位置:容器内文件位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如此操作，就将 容器内指定文件挂载到了宿主机对应位置，-v命令可以多次使用，即一个容器可以同时挂载多个文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> 宿主机文件存储位置:容器内文件位置 <span class="token parameter variable">-v</span> 宿主机文件存储位置:容器内文件位置 <span class="token parameter variable">-v</span> 宿主机文件存储位置:容器内文件位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 运行一个docker redis 容器 进行 端口映射 两个数据卷挂载 设置开机自启动</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis505 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always  <span class="token parameter variable">-v</span> /var/lib/redis/data/:/data <span class="token parameter variable">-v</span> /var/lib/redis/conf/:/usr/local/etc/redis/redis.conf  redis:5.0.5 <span class="token parameter variable">--requirepass</span> <span class="token string">&quot;password&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>此方法完了你很无语？那还不是得删容器？是呀！没错！那么为什么你有数据恢复需求而没有想到数据持久化，数据恢复备份，数据卷挂载？自己DEMO的吃亏，是为了平时开发少扣脑壳多摸鱼！</strong></p><p><strong>方法二：不想删容器，又想让这个容器设置开机自启动，那么我们修改其启动配置即可！</strong></p><p>命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span>  update <span class="token parameter variable">--restart</span><span class="token operator">=</span>always 容器Id 或者 容器名

或

<span class="token function">docker</span> container update <span class="token parameter variable">--restart</span><span class="token operator">=</span>always 容器Id 或者 容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，虽然不删容器就设置了自启动需求满足了，但是，危不危险，这个容器有没有需要数据恢复的情况？自己考量吧！！！</p><p><strong>更换容器名</strong></p><p>想给容器换个霸气炫酷吊炸天的名字？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rename</span> 容器ID/容器名 新容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>ex:</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/cba7a339ffed1980db842f87276661f3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="四-自己提交一个镜像" tabindex="-1"><a class="header-anchor" href="#四-自己提交一个镜像" aria-hidden="true">#</a> （四）自己提交一个镜像</h3><p>我们运行的容器可能在镜像的基础上做了一些修改，有时候我们希望保存起来，封装成一个更新的镜像，这时候我们就需要使用 commit 命令来构建一个新的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;提交信息&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;作者信息&quot;</span> 容器名/容器ID 提交后的镜像名:Tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们拉取一个tomcat镜像 并持久化运行 且设置与宿主机进行端口映射</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull tomcat

<span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p8080:8080</span> <span class="token parameter variable">--name</span> tom tomcat /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 咱的端口 发现访问404 这是因为咱配置了阿里云镜像后 所拉取得镜像都是最基础班的 仅仅包含其容器必要数据 例如 容器中 vim vi ll 命令都没有</p><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496720.png" alt="" loading="lazy"><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496721.png" alt="" loading="lazy"></p><p>咱们的webapps 下一个文件都没有 ，访问肯定404罗</p><p>不断查看 发现咱 webapps.dist 下是有文件的 我们把它拷贝的webapps 下 然后打包成一个新的镜像 后 访问查看是否进入到首页 不进入404页面</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496822.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>exit 退出容器</p><p>使用 提交命令 将在运行的tomcat 容器 打包为一个全新的镜像 名字为tom Tag为1.0</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;leilei&quot;</span> <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;第一次打包镜像，打包后直接访问还会404吗&quot;</span> 231f2eae6896 tom:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496823.png" alt="" loading="lazy"><br> 为了区分 咱停止并删除之前tomcat 的容器<br><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496824.png" alt="" loading="lazy"></p><p>接下来 运行咱自己打包的镜像 tom:1.0</p><p>设置容器名字为lei 映射端口为6500:8080</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span>  <span class="token parameter variable">-p6500:8080</span> <span class="token parameter variable">--name</span> lei tom:1.0 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496825.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496826.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问6500 端口进入到了 tomcat 首页 说明 咱commit 镜像成功了</p><h3 id="五-docker-运维命令" tabindex="-1"><a class="header-anchor" href="#五-docker-运维命令" aria-hidden="true">#</a> （五）docker 运维命令</h3><p>可能有时候发布会遇到如下错误:</p><p><code>docker: write /var/lib/docker/tmp/GetImageBlob325372670: no space left on device</code></p><p>这个错误是docker在写入的时候报错无机器无空间</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/fbd50d429b6161ccf7d73687bc63ef06.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>查看docker工作目录</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> info <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;Docker Root Dir&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/9e6acfeb2e77bb2d25e63a7c1bff7709.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>查看docker磁盘占用总体情况</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">du</span> <span class="token parameter variable">-hs</span> /var/lib/docker/ 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看Docker的磁盘使用具体情况</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> system <span class="token function">df</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/a33dbf0f51a3f2ac179d102466e6517f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>删除 无用的容器和 镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#  删除异常停止的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> Exited <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">\`</span></span> 
 
<span class="token comment">#  删除名称或标签为none的镜像</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span>  <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;&lt;none&gt;&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $3}&#39;</span><span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>清除所有无容器使用的镜像</strong></p><p>注意，此命令只要是镜像无容器使用（容器正常运行）都会被删除，包括容器临时停止</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> system prune <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查找大文件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +100M <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">du</span> <span class="token parameter variable">-h</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/f19ff29dbc1a1cd739f26dd9e69d2f96.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>查找指定docker使用目录下大于指定大小文件</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>find / -type f -size +100M -print0 | xargs -0 du -h | sort -nr |grep &#39;/var/lib/docker/overlay2/*&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ex：我这里是查找 /var/lib/docker/overlay2/* 开头的且大于100m的文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/5b95b414c6fa466b71ea2c507019df8d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>如果看到了这里，大兄弟，你的docker便是入门了；但前路还长，让我们再继续深入，攀登技术的高峰吧，记得点个关注哟！</strong></p><h3 id="六-手动部署jar文件" tabindex="-1"><a class="header-anchor" href="#六-手动部署jar文件" aria-hidden="true">#</a> （六）手动部署jar文件</h3><p>目录结构：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221215161858131.png" alt="image-20221215161858131" tabindex="0" loading="lazy"><figcaption>image-20221215161858131</figcaption></figure><p><code>Dockerfile</code>文件</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 基础镜像为centos</span>
<span class="token instruction"><span class="token keyword">FROM</span> centos:centos7</span>

<span class="token comment"># 作者</span>
<span class="token instruction"><span class="token keyword">MAINTAINER</span> apzs</span>

<span class="token comment"># 为Dockerfile中所有RUN、CMD、ENTRYPOINT、COPY和ADD指令设定工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/local/mydata</span>

<span class="token comment"># 添加jdk压缩包至 /usr/local 目录，压缩包会自动解压，解压后目录名称为jdk1.8.0_101 (如果不知道名字，可以在自己电脑上先把tar.gz这个文件解压，即可看到命名为 jdk1.8.0_101 )</span>
<span class="token instruction"><span class="token keyword">ADD</span> jdk-8u101-linux-x64.tar.gz /usr/local/env/jdk/</span>

<span class="token comment"># 配置JAVA_HOME环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME /usr/local/env/jdk/jdk1.8.0_101/</span>
 
<span class="token comment"># 将JAVA_HOME/bin 添加至PATH环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH <span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$PATH</span></span>

<span class="token comment"># 将这两个文件移动到指定目录</span>
<span class="token instruction"><span class="token keyword">ADD</span> librxtxSerial.so <span class="token variable">$JAVA_HOME</span>/jre/lib/amd64</span>
<span class="token instruction"><span class="token keyword">ADD</span> RXTXcomm.jar <span class="token variable">$JAVA_HOME</span>/jre/lib/ext</span>

<span class="token comment"># 开放的端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token comment"># VOLUME 指定了临时文件目录为/env/jdk/tmp</span>
<span class="token comment"># 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/env/jdk/tmp</span>
<span class="token instruction"><span class="token keyword">VOLUME</span> /env/jdk/tmp</span>

<span class="token comment"># 把本路径的sensor.jar复制到相对于相对于WORKDIR的位置(即/usr/local/mydata/sensor.jar)</span>
<span class="token instruction"><span class="token keyword">COPY</span> sensor.jar sensor.jar</span>

<span class="token comment"># 容器启动时执行的命令(sensor.jar相对于WORKDIR,即/usr/local/mydata/sensor.jar)</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;sensor.jar&quot;</span>]</span>

<span class="token comment"># 安装vim</span>
<span class="token comment"># RUN yum -y install vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像命令(<code>.</code>表示寻找当前目录的Dockerfile文件)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> ./Dockerfile <span class="token parameter variable">-t</span> sensorImage <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建容器</p><p>如果docker部署<code>spring boot</code>应用需要连接<code>mysql</code>不能使用<code>127.0.0.1</code>连接，这是因为docker部署的<code>spring boot</code>应用也是一个小型的<code>linux</code>虚拟机，因此不能访问外面的宿主机（即安装<code>docker</code>应用的主机）因此可以在<code>spring.datasource.url</code>里配置域名访问，然后创建容器时指定在<code>Hosts</code>文件添加域名映射 (相当于让yml里指定的<code>jdbc:mysql://www.sensor.com:3306/tonrain</code>找到真正的ip)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> sensor --add-host www.sensor.com:192.168.56.10 <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-d</span> sensorImage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者通过设置<code>Environment</code>添加启动参数（启动参数配置比yml里的配置优先级高）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> sensor <span class="token parameter variable">-e</span> <span class="token assign-left variable">spring.datasource.url</span><span class="token operator">=</span><span class="token string">&#39;jdbc:mysql://192.168.56.10:3306/tonrain?useSSL=false&#39;</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-d</span> sensorImage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>导出镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save 镜像名/镜像ID <span class="token parameter variable">-o</span> 镜像保存在哪个位置与名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>exmaple:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save tomcat <span class="token parameter variable">-o</span> /myimg.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>导入镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> 镜像保存文件位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,80);function I(j,q){const n=l("ExternalLinkIcon");return t(),c("div",null,[a("h2",o,[p,s(" 3.1、"),a("a",m,[s("Docker 安装"),e(n)])]),u,a("h2",g,[v,s(" 3.2、"),a("a",b,[s("常用命令"),e(n)])]),k,a("p",null,[a("a",h,[s("docker官方镜像搜索"),e(n)])]),f,x,y,a("p",null,[s("为什么提示文件存在 >>>> 请戳： "),a("a",z,[s("docker 文件分层与数据卷挂载"),e(n)])]),_,a("p",null,[s("具体请参考："),a("a",w,[s("docker 文件分层与数据卷挂载"),e(n)])]),D])}const A=r(d,[["render",I],["__file","index.html.vue"]]);export{A as default};
