import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e}from"./app-db_OQQsY.js";const t={},o=e(`<h1 id="web-api-dom和bom" tabindex="-1"><a class="header-anchor" href="#web-api-dom和bom" aria-hidden="true">#</a> Web Api（DOM和BOM）</h1><h2 id="一、web-api-简介" tabindex="-1"><a class="header-anchor" href="#一、web-api-简介" aria-hidden="true">#</a> 一、Web Api 简介</h2><h3 id="_1-web-apis-和-js-基础关联性" tabindex="-1"><a class="header-anchor" href="#_1-web-apis-和-js-基础关联性" aria-hidden="true">#</a> 1. Web APIs 和 JS 基础关联性</h3><h4 id="_1-1-js-组成" tabindex="-1"><a class="header-anchor" href="#_1-1-js-组成" aria-hidden="true">#</a> 1.1 JS 组成</h4><ul><li>ECMAScript: JS 语法</li><li>BOM: Web API</li><li>DOM: Web API</li></ul><h3 id="_2-api-和-web-api" tabindex="-1"><a class="header-anchor" href="#_2-api-和-web-api" aria-hidden="true">#</a> 2. API 和 Web API</h3><h4 id="_2-1-api" tabindex="-1"><a class="header-anchor" href="#_2-1-api" aria-hidden="true">#</a> 2.1 API</h4><p>API：Application Programming Interface，应用程序接口。</p><h4 id="_2-2-web-api" tabindex="-1"><a class="header-anchor" href="#_2-2-web-api" aria-hidden="true">#</a> 2.2 Web API</h4><p>Web API 是浏览器提供得一套操作浏览器功能和页面元素得 API（BOM 和 DOM）。</p><h2 id="二、dom-基础" tabindex="-1"><a class="header-anchor" href="#二、dom-基础" aria-hidden="true">#</a> 二、DOM 基础</h2><h3 id="_1-dom-简介" tabindex="-1"><a class="header-anchor" href="#_1-dom-简介" aria-hidden="true">#</a> 1. DOM 简介</h3><h4 id="_1-1-什么是-dom" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-dom" aria-hidden="true">#</a> 1.1 什么是 DOM</h4><p>文档对象模型（Document Object Model，简称DOM )，是W3C组织推荐的处理可扩展标记语言（HTML或者XML)的标准编程接口。</p><p>W3C已经定义了一系列的DOM接口，通过这些DOM接口可以改变网页的内容、结构和样式。</p><h4 id="_1-2-dom-树" tabindex="-1"><a class="header-anchor" href="#_1-2-dom-树" aria-hidden="true">#</a> 1.2 DOM 树</h4><ul><li>文档：一个页面就是一个文档，DOM中使用document表示</li><li>元素：页面中的所有标签都是元素，DOM中使用element表示</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示</li></ul><p>以上内容都称之为对象</p><h3 id="_2-获取元素" tabindex="-1"><a class="header-anchor" href="#_2-获取元素" aria-hidden="true">#</a> 2. 获取元素</h3><h4 id="_2-1-如何获取页面元素" tabindex="-1"><a class="header-anchor" href="#_2-1-如何获取页面元素" aria-hidden="true">#</a> 2.1 如何获取页面元素</h4><p>DOM 在我们实际开发中主要用来操作元素。我们如何来获取页面中的元素呢?</p><p>获取页面中的元素可以使用以下几种方式:</p><ul><li>根据ID获取</li><li>根据标签名获取</li><li>通过HTML5新增的方法获取</li><li>特殊元素获取</li></ul><h4 id="_2-2-根据-id-获取" tabindex="-1"><a class="header-anchor" href="#_2-2-根据-id-获取" aria-hidden="true">#</a> 2.2 根据 ID 获取</h4><p>使用 <code>getElementByld()</code> 方法可以获取带有 ID 的元素对象，并返回一个 <code>Element</code> 对象。</p><ul><li><code>console.dir()</code> 可打印元素的属性和方法</li></ul><h4 id="_2-3-根据标签名获取" tabindex="-1"><a class="header-anchor" href="#_2-3-根据标签名获取" aria-hidden="true">#</a> 2.3 根据标签名获取</h4><p>使用 <code>getElementsByTagName()</code> 方法可以返回带有指定标签名的对象的集合。</p><ul><li>返回的是 <strong>元素对象的集合，伪数组形式表示</strong>。</li><li>可以遍历返回的伪数组。</li><li>得到的元素对象是动态的。</li><li>若没有元素，则返回空的伪数组 <code>[]</code>。</li></ul><p>指定父元素，父元素必须是指定的单个元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若给 <code>ol</code> 指定了 id: <code>ol</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;ol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ol<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-通过-html5-新增方法获取" tabindex="-1"><a class="header-anchor" href="#_2-4-通过-html5-新增方法获取" aria-hidden="true">#</a> 2.4 通过 HTML5 新增方法获取</h4><ol><li>根据类名返回元素对象集合。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39;类名&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>根据指定选择器返回第一个元素对象。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;选择器&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>返回指定选择器的所有元素集合。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;选择器&#39;</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于这些获取事件，要不就是返回一个元素对象，要不就是返回一个对象集合。对于返回的对象集合，都可以是作为一种伪数组，可以通过 <code>elems.length</code> 来获取元素对象个数。</p><h4 id="_2-5-获取特殊元素" tabindex="-1"><a class="header-anchor" href="#_2-5-获取特殊元素" aria-hidden="true">#</a> 2.5 获取特殊元素</h4><ol><li>获取 <code>body</code> 元素</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>获取 <code>html</code> 元素</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-事件基础" tabindex="-1"><a class="header-anchor" href="#_3-事件基础" aria-hidden="true">#</a> 3. 事件基础</h3><h4 id="_3-1-事件概述" tabindex="-1"><a class="header-anchor" href="#_3-1-事件概述" aria-hidden="true">#</a> 3.1 事件概述</h4><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解︰触发--响应机制。</p><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p><h4 id="_3-2-事件三要素" tabindex="-1"><a class="header-anchor" href="#_3-2-事件三要素" aria-hidden="true">#</a> 3.2 事件三要素</h4><ul><li>事件源：事件被触发的对象（按钮）。</li><li>事件类型：如何触发、什么事件（点击按钮）。</li><li>事件处理程序：可通过一个函数赋值的方式实现。</li></ul><ol><li>获取事件源</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>唐伯虎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>注册事件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>添加事件处理程序</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;点秋香&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行事件的步骤</p><ol><li>获取事件源</li><li>注册事件（绑定事件）</li><li>添加事件处理程序（函数赋值）</li></ol><h4 id="_3-4-常见鼠标事件" tabindex="-1"><a class="header-anchor" href="#_3-4-常见鼠标事件" aria-hidden="true">#</a> 3.4 常见鼠标事件</h4><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td><code>onclick</code></td><td>鼠标点击左键触发</td></tr><tr><td><code>onmouseover</code></td><td>鼠标经过触发</td></tr><tr><td><code>onmouseout</code></td><td>鼠标离开触发</td></tr><tr><td><code>onfocus</code></td><td>获得鼠标焦点触发</td></tr><tr><td><code>onblur</code></td><td>失去鼠标焦点触发</td></tr><tr><td><code>onmousemove</code></td><td>鼠标移动触发</td></tr><tr><td><code>onmouseup</code></td><td>鼠标弹起触发</td></tr><tr><td><code>onmousedown</code></td><td>鼠标按下触发</td></tr></tbody></table><h3 id="_4-操作元素" tabindex="-1"><a class="header-anchor" href="#_4-操作元素" aria-hidden="true">#</a> 4. 操作元素</h3><p>使用 JavaScript DOM 可以改变网页内容、结构和样式。以下是元素的属性。</p><h4 id="_4-1-改变元素内容" tabindex="-1"><a class="header-anchor" href="#_4-1-改变元素内容" aria-hidden="true">#</a> 4.1 改变元素内容</h4><p>从起始位置到终止位置的内容,但它去除html标签，同时空格和换行也会去掉</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span>innerText
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>element<span class="token punctuation">.</span>innerHTML
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-2-innertext-和-innerhtml-的区别" tabindex="-1"><a class="header-anchor" href="#_4-2-innertext-和-innerhtml-的区别" aria-hidden="true">#</a> 4.2 innerText 和 innerHTML 的区别</h4><ol><li>innerText不识别 html 标签，innerHTML识别 html 标签。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39; &lt;strong&gt;今天是：&lt;/strong&gt;2021-3-23&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><code>innerText</code> 会去除空格和换行，<code>innerHTML</code> 保留换行和空格。</li></ol><h4 id="_4-3-常用元素的属性操作" tabindex="-1"><a class="header-anchor" href="#_4-3-常用元素的属性操作" aria-hidden="true">#</a> 4.3 常用元素的属性操作</h4><ol><li><code>innerText</code>、<code>innerHTML</code> 改变元素内容</li><li><code>src</code>、<code>href</code></li><li><code>id</code>、<code>alt</code>、<code>title</code></li></ol><p>示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> vsc <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;vsc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> zh <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;zh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
vsc<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;images/vscode.jpg&#39;</span><span class="token punctuation">;</span>
    img<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;vscode&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-表单元素的属性操作" tabindex="-1"><a class="header-anchor" href="#_4-4-表单元素的属性操作" aria-hidden="true">#</a> 4.4 表单元素的属性操作</h4><p>利用 DOM 可以操控以下表单元素的属性。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type, value, checked, selected, disabled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-5-样式属性操作" tabindex="-1"><a class="header-anchor" href="#_4-5-样式属性操作" aria-hidden="true">#</a> 4.5 样式属性操作</h4><p>我们可以通过JS修改元素的大小、颜色、位置等样式。</p><ol><li><code>element.style</code>：行内样式操作</li><li><code>element.className</code>：类名样式操作</li></ol><blockquote><ol><li>Js 里面的样式采取驼峰命名法比如 <code>fontSize</code>、<code>backgroundColor</code></li><li>JS修改 <code>style</code> 样式操作，产生的是行内样式，css 权重比较高</li><li>如果样式修改较多，可以采取操作类名方式更改元素样式</li><li>class 因为是个保留字，因此使用 <code>className</code> 来操作元素类名属性</li><li><code>className</code> 会直接更改元素的类名，会覆盖原先的类名。</li></ol></blockquote><h4 id="_4-6-排他思想" tabindex="-1"><a class="header-anchor" href="#_4-6-排他思想" aria-hidden="true">#</a> 4.6 排他思想</h4><p>如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式（留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                btns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据这个算法可以用来实现鼠标经过每一行时背景变色。</p><h4 id="_4-7-h5自定义属性" tabindex="-1"><a class="header-anchor" href="#_4-7-h5自定义属性" aria-hidden="true">#</a> 4.7 H5自定义属性</h4><p>自定义属性目的：是为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中。</p><h5 id="_4-7-1-设置h5自定义属性" tabindex="-1"><a class="header-anchor" href="#_4-7-1-设置h5自定义属性" aria-hidden="true">#</a> 4.7.1 设置H5自定义属性</h5><p>H5规定自定义属性以 <code>data-</code> 开头作为属性名并赋值。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4-7-2-获取h5自定义属性" tabindex="-1"><a class="header-anchor" href="#_4-7-2-获取h5自定义属性" aria-hidden="true">#</a> 4.7.2 获取H5自定义属性</h5><ol><li>兼容性获取 <code>element.getAttribute(&#39;data-index&#39;)</code></li><li>H5新增方法 <code>element.dataset.index</code> 或 <code>element.dataset[&#39;index&#39;]</code> 获取。（&gt;=ie11）</li><li>如果自定义属性里面有多个链接的单词，则使用驼峰命名法获取。</li></ol><p>Warning</p><p>对于 <code>element.dataset.index</code> 和 <code>element.dataset[&#39;index&#39;]</code> 方法，注意 <code>index</code> 和 <code>data-index</code> 中的要对应。</p><h4 id="_4-8-元素属性操作" tabindex="-1"><a class="header-anchor" href="#_4-8-元素属性操作" aria-hidden="true">#</a> 4.8 元素属性操作</h4><h5 id="_4-8-1-获取属性值" tabindex="-1"><a class="header-anchor" href="#_4-8-1-获取属性值" aria-hidden="true">#</a> 4.8.1 获取属性值</h5><ul><li><code>element.属性</code>;：一般用于获取本身自带属性值。</li><li><code>element.getAttribute(&#39;属性&#39;);</code>：主要获得自定义的属性（标准）我们程序员自定义的属性。</li></ul><h5 id="_4-8-2-设置属性值" tabindex="-1"><a class="header-anchor" href="#_4-8-2-设置属性值" aria-hidden="true">#</a> 4.8.2 设置属性值</h5><ul><li><code>element.属性=&#39;值&#39;;</code>：设置内置属性值。</li><li><code>element.setAttribute(&#39;属性&#39;, &#39;值&#39;);</code>：设置自定义属性。</li></ul><p>对于 <code>element.setAttribute</code> 方法，若属已存在，则更新该属性值；否则，创建一个新属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;footer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用 <code>element.属性</code> 获取或设置类名时，要用 <code>className</code>，而对于 <code>element.setAttribute()</code> 方法，直接使用 <code>class</code>，即：<code>div.setAttribute(&#39;class&#39;, &#39;footer&#39;)</code>。</p></blockquote><h5 id="_4-8-3-移除属性" tabindex="-1"><a class="header-anchor" href="#_4-8-3-移除属性" aria-hidden="true">#</a> 4.8.3 移除属性</h5><ul><li><code>element.removeAttribute(属性);</code></li></ul><h3 id="_5-结点操作" tabindex="-1"><a class="header-anchor" href="#_5-结点操作" aria-hidden="true">#</a> 5. 结点操作</h3><h4 id="_5-1为什么学节点操作" tabindex="-1"><a class="header-anchor" href="#_5-1为什么学节点操作" aria-hidden="true">#</a> 5.1为什么学节点操作</h4><p>获取元素通常使用两种方式:</p><ol><li>利用DOM提供的方法获取元素，缺点：逻辑性不强、繁琐 <ul><li><code>document.getElementByld()</code></li><li><code>document.getElementsByTagName()</code></li><li><code>document.querySelector()</code></li></ul></li><li>利用 <strong>节点层级关系</strong> 获取元素 <ul><li>利用父子兄节点关系获取元素</li><li>优点：逻辑性强</li><li>缺点：兼容性稍差</li></ul></li></ol><h4 id="_5-2-节点概述" tabindex="-1"><a class="header-anchor" href="#_5-2-节点概述" aria-hidden="true">#</a> 5.2 节点概述</h4><p>网页中的所有内容都是节点(标签、属性、文本、注释等），在DOM中，节点使用 <code>node</code> 来表示。</p><p>HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p><p>一般地，节点至少拥有 <code>nodeType</code> (节点类型)、<code>nodeName</code> (节点名称）和 <code>nodeValue</code> (节点值）这三个基本属性。</p><p><strong>三种基本节点类型：</strong></p><ul><li>元素节点 <code>nodeType</code> 为 <code>1</code></li><li>属性节点 <code>nodeType</code> 为 <code>2</code></li><li>文本节点 <code>nodeType</code> 为 <code>3</code>（文字、空格、换行）</li></ul><p>实际开发中，主要操作的还是元素节点。</p><h4 id="_5-3-节点层级" tabindex="-1"><a class="header-anchor" href="#_5-3-节点层级" aria-hidden="true">#</a> 5.3 节点层级</h4><h5 id="_5-3-1-父级节点" tabindex="-1"><a class="header-anchor" href="#_5-3-1-父级节点" aria-hidden="true">#</a> 5.3.1 父级节点</h5><p>获取离元素最近的父节点，若找不到则返回 <code>null</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node<span class="token punctuation">.</span>parentNode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5-3-2-子节点" tabindex="-1"><a class="header-anchor" href="#_5-3-2-子节点" aria-hidden="true">#</a> 5.3.2 子节点</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>parentNode<span class="token punctuation">.</span>childNodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>parentNode.childNodes</code> 返回包含指定 <strong>节点的子节点的集合</strong>，该集合为即时更新的集合。</p><p>注意：<code>parentNode.childNodes</code> 包含了所有的子节点，包括元素节点，文本节点等。 如果只想要获得里面的元素节点，则需要专门处理。所以我们一般不提倡使用 <code>childNodes</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 筛选元素节点</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>更加好的方法：获取子元素节点</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>子节点方法：</p><p>① 获取 <strong>所有结点</strong> 中的第一个和最后一个：</p><ul><li><code>parentNode.firstChild</code></li><li><code>parentNode.lastChild</code></li></ul><p>② 获取 <strong>元素节点</strong>中第一个和最后一个</p><ul><li><code>parentNode.firstElementChild</code></li><li><code>parentNode.lastElementChild</code></li></ul><p>（&gt;=IE9）</p><p>③ <strong>实际开发</strong>：</p><ul><li><code>parentNode.children[0]</code></li><li><code>parentNode.children[parentNode.children.length -1]</code></li></ul><h5 id="_5-3-3-兄弟节点" tabindex="-1"><a class="header-anchor" href="#_5-3-3-兄弟节点" aria-hidden="true">#</a> 5.3.3 兄弟节点</h5><ol><li>返回下一个兄弟节点：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node<span class="token punctuation">.</span>nextSibling
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>返回上一个的兄弟节点：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node.previousSibling
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>nextsibling</code> / <code>previousSibling</code> 返回当前元素的下/上一个兄弟节点，找不到则返回 <code>null</code>。这个兄弟节点可能是是所有的节点之一（即元素节点、文本节点等）。</p><ol start="3"><li>返回下一个 <strong>兄弟元素节点</strong>（≥IE9）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node<span class="token punctuation">.</span>nextElementSibling
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>返回上一个 <strong>兄弟元素节点</strong>（≥IE9）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node<span class="token punctuation">.</span>previousElementSibling
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>nextElementSibling</code> / <code>previousElementSibling</code> 返回当前元素下/上一个兄弟元素节点，找不到则返回 <code>null</code>。</p><p>这两个方法（<code>nextElementSibling</code> / <code>previousElementSibling</code>）有兼容性问题，IE9 以上才支持。</p><p>解决方法：封装一个函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 处理 &lt;IE9 兼容性问题</span>
<span class="token keyword">function</span> <span class="token function">getNextElementSibling</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> n<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-4-创建并添加节点" tabindex="-1"><a class="header-anchor" href="#_5-3-4-创建并添加节点" aria-hidden="true">#</a> 5.3.4 创建并添加节点</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;tagName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>document.createElement()</code> 方法创建由 <code>tagName</code> 指定的 HTML 元素。因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为 <strong>动态创建元素节点</strong>。</p><p>在创建了元素节点后，还需要将节点添加到页面中。<code>appendChild()</code> 方法可以给元素节点添加子元素节点，若某元素已存在则重复添加，在页面已存在的元素 <strong>后面追加新节点</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>chileNode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似的，也可以使用 <code>insertBefore()</code> 方法在指定元素的前面插入节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> insertedNode <span class="token operator">=</span> parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> referenceNode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>insertedNode</code>：同 <code>newNode</code>，待插入的新节点。</li><li><code>parentNode</code>：被插入的父节点。</li><li><code>newNode</code>：待插入的新节点。</li><li><code>referenceNode</code>：指定元素节点，新节点将插入到该元素节点的前面。</li></ul><p>在一个页面中要添加元素节点，先创建节点，然后添加节点。</p><h5 id="_5-3-5-删除节点" tabindex="-1"><a class="header-anchor" href="#_5-3-5-删除节点" aria-hidden="true">#</a> 5.3.5 删除节点</h5><p>DOM 提供了 <code>removeChild(childNode)</code> 方法，删除一个子节点，并返回删除的节点。其中 <code>childNode</code> 为待删除的子节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式一</span>
parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>childNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方式二</span>
<span class="token keyword">let</span> oldChild <span class="token operator">=</span> parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>childNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-6-复制节点" tabindex="-1"><a class="header-anchor" href="#_5-3-6-复制节点" aria-hidden="true">#</a> 5.3.6 复制节点</h5><p><code>node.cloneNode()</code> 方法返回调用该方法的节点的一个副本。也称为克隆节点/拷贝节点。其中 <code>node</code> 为被克隆的元素节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> newClone <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>deep<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于 <code>deep</code> 参数，可以为 <code>true</code> 或 <code>false</code>，或为空的：</p><table><thead><tr><th><code>deep</code> 参数值</th><th>含义</th></tr></thead><tbody><tr><td><code>true</code></td><td>深拷贝，同时复制节点本身和里面的子节点</td></tr><tr><td><code>false</code></td><td>浅拷贝，只复制节点本身，不复制子节点</td></tr><tr><td><code>空</code></td><td>空，同 <code>false</code></td></tr></tbody></table><h5 id="_5-3-7-三种动态创建元素的区别" tabindex="-1"><a class="header-anchor" href="#_5-3-7-三种动态创建元素的区别" aria-hidden="true">#</a> 5.3.7 三种动态创建元素的区别</h5><ul><li><code>document.write()</code></li><li><code>element.innerHTML</code></li><li><code>element.createElement()</code></li></ul><p>区别：</p><ol><li><code>document.write()</code> 创建元素，是直接将内容写入页面的内容流，但是 <strong>当文档流执行完毕，会导致页面全部重绘</strong>。即覆盖原本的页面。</li><li><code>innerHTML</code> 是将内容写入某个 DOM 节点，不会导致页面全部重绘。</li><li><code>innerHTML</code> 创建多个元素效率更高（<strong>不要拼接字符串，采取数组形式拼接</strong>），结构稍微复杂。</li><li><code>createElement()</code> 创建多个元素效率稍低一点点，但是结构更清晰。</li></ol><p>总结：不同浏览器下，<code>innerHTML</code> 效率要比 <code>creatElement</code>高。</p><h3 id="_6-dom-学习阶段核心总结" tabindex="-1"><a class="header-anchor" href="#_6-dom-学习阶段核心总结" aria-hidden="true">#</a> 6. DOM 学习阶段核心总结</h3><p>关于 dom 操作，我们主要针对于元素的操作。主要有创（建）、增、删、改、查、属性操作、事件操作。</p><h4 id="_6-1-创" tabindex="-1"><a class="header-anchor" href="#_6-1-创" aria-hidden="true">#</a> 6.1 创</h4><ul><li><code>document.write</code></li><li><code>innerHTML</code></li><li><code>createElement</code></li></ul><h4 id="_6-2-增" tabindex="-1"><a class="header-anchor" href="#_6-2-增" aria-hidden="true">#</a> 6.2 增</h4><ul><li><code>appendChild</code></li><li><code>insertBefore</code></li></ul><h4 id="_6-3-删" tabindex="-1"><a class="header-anchor" href="#_6-3-删" aria-hidden="true">#</a> 6.3 删</h4><ul><li><code>removeChild</code></li></ul><h4 id="_6-4-改" tabindex="-1"><a class="header-anchor" href="#_6-4-改" aria-hidden="true">#</a> 6.4 改</h4><p>主要修改 dom 的元素属性，dom 元素的内容、属性，表单的值等。</p><ul><li>修改元素属性：<code>src</code>、<code>href</code>、<code>title</code> 等</li><li>修改普通元素内容：<code>innerHTML</code>、<code>innerText</code></li><li>修改表单元素：<code>value</code>、<code>type</code>、<code>disabled</code> 等</li><li>修改元素样式：<code>style</code>、<code>className</code></li></ul><h4 id="_6-5-查" tabindex="-1"><a class="header-anchor" href="#_6-5-查" aria-hidden="true">#</a> 6.5 查</h4><p>主要获取查询dom的元素</p><ul><li>DOM提供的API 方法：<code>getElementById</code>、<code>getElementsByTagName</code>（<strong>古老用法不太推荐</strong>）</li><li>H5提供的新方法：<code>querySelector</code>、<code>querySelectorAll</code> 提倡</li><li>利用节点操作获取元素：父（<code>parentNode</code>)、子（<code>children</code>）、兄（<code>previousElementSibling</code>、 <code>nextElementSibling</code>）提倡</li></ul><h4 id="_6-6-属性操作" tabindex="-1"><a class="header-anchor" href="#_6-6-属性操作" aria-hidden="true">#</a> 6.6 属性操作</h4><p>主要针对于自定义属性</p><ul><li><code>setAttribute</code>：设置dom的属性值</li><li><code>getAttribute</code>：得到dom的属性值</li><li><code>removeAttribute</code>：移除属性</li></ul><h4 id="_6-7-事件操作" tabindex="-1"><a class="header-anchor" href="#_6-7-事件操作" aria-hidden="true">#</a> 6.7 事件操作</h4><p>给元素注册事件，格式：<code>事件源.事件类型 = 事件处理程序</code></p><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td><code>onclick</code></td><td>鼠标点击左键触发</td></tr><tr><td><code>onmouseover</code></td><td>鼠标经过触发</td></tr><tr><td><code>onmouseout</code></td><td>鼠标离开触发</td></tr><tr><td><code>onfocus</code></td><td>获得鼠标焦点触发</td></tr><tr><td><code>onblur</code></td><td>失去鼠标焦点触发</td></tr><tr><td><code>onmousemove</code></td><td>鼠标移动触发</td></tr><tr><td><code>onmouseup</code></td><td>鼠标弹起触发</td></tr><tr><td><code>onmousedown</code></td><td>鼠标按下触发</td></tr></tbody></table><h2 id="三、事件高级" tabindex="-1"><a class="header-anchor" href="#三、事件高级" aria-hidden="true">#</a> 三、事件高级</h2><h3 id="_1-注册事件-绑定事件" tabindex="-1"><a class="header-anchor" href="#_1-注册事件-绑定事件" aria-hidden="true">#</a> 1. 注册事件（绑定事件）</h3><h4 id="_1-1-注册事件概述" tabindex="-1"><a class="header-anchor" href="#_1-1-注册事件概述" aria-hidden="true">#</a> 1.1 注册事件概述</h4><p>给元素添加事件，称为注册事件或者绑定事件。 注册事件有两种方式：<strong>传统方式</strong> 和 <strong>事件监听注册方式</strong>。</p><h5 id="_1-1-1-传统注册方式" tabindex="-1"><a class="header-anchor" href="#_1-1-1-传统注册方式" aria-hidden="true">#</a> 1.1.1 传统注册方式</h5><ul><li>利用on 开头的事件onclick</li><li><code>&lt;button onclick=&quot;alert(&#39;hi~&#39;)&quot;&gt;&lt;/button&gt;</code></li><li><code>btn.onclick = function() {};</code></li><li>特点：注册事件的 <strong>唯一性</strong></li><li>同一个元素同一个事件只能设置一个处理函数，最 后注册的处理函数将会 <strong>覆盖</strong> 前面注册的处理函数。</li></ul><h5 id="_1-1-2-事件监听注册方式" tabindex="-1"><a class="header-anchor" href="#_1-1-2-事件监听注册方式" aria-hidden="true">#</a> 1.1.2 事件监听注册方式</h5><ul><li>w3c 标准推荐方式</li><li><code>addEventListener()</code> 它是一个方法</li><li>IE9 之前的 IE 不支持此方法，可使用 <code>attachEvent()</code> 代替</li><li>特点：<strong>同一个元素同一个事件可以注册多个监听器</strong></li><li>按注册顺序依次执行</li></ul><h4 id="_1-2-addeventlistener-事件监听方式" tabindex="-1"><a class="header-anchor" href="#_1-2-addeventlistener-事件监听方式" aria-hidden="true">#</a> 1.2 addEventListener 事件监听方式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">[</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>eventTarget.addEventListener()</code> 方法将指定的监听器注册到 <code>eventTarget</code>（目标对象）上，当该对 象触发指定的事件时，就会执行事件处理函数。</p><p>该方法接收三个参数：</p><ul><li><code>type</code>：事件类型字符串，比如 <code>click</code> 、<code>mouseover</code>，注意这里不要带 on。</li><li><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</li><li><code>useCapture</code>：可选参数，是一个布尔值，默认是 <code>false</code>。学完 DOM 事件流后，我们再进一步学习。</li></ul><p>Warning</p><p>≥IE9 版本支持</p><h4 id="_1-3-attachevent-事件监听方式-ie8以及早期版本独有" tabindex="-1"><a class="header-anchor" href="#_1-3-attachevent-事件监听方式-ie8以及早期版本独有" aria-hidden="true">#</a> 1.3 attachEvent 事件监听方式（IE8以及早期版本独有）</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eventTarget<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span>eventNameWithOn<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>eventTarget.attachEvent()</code> 方法将指定的监听器注册到 <code>eventTarget</code>（目标对象）上，当该对象触 发指定的事件时，指定的回调函数就会被执行。 该方法接收两个参数：</p><ul><li><code>eventNameWithOn</code>：事件类型字符串，比如 <code>onclick</code>、<code>onmouseover</code>，这里要带 <code>on</code></li><li><code>callback</code>：事件处理函数，当目标触发事件时回调函数被调用</li></ul><p>Warning</p><p>IE8 及早期版本独有，在 chrome 不起作用。如要兼容，可自定义兼容新函数。</p><h3 id="_2-删除事件-解绑事件" tabindex="-1"><a class="header-anchor" href="#_2-删除事件-解绑事件" aria-hidden="true">#</a> 2. 删除事件（解绑事件）</h3><h4 id="_2-1-传统注册方式" tabindex="-1"><a class="header-anchor" href="#_2-1-传统注册方式" aria-hidden="true">#</a> 2.1 传统注册方式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eventTarget<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-2-方法监听注册方式" tabindex="-1"><a class="header-anchor" href="#_2-2-方法监听注册方式" aria-hidden="true">#</a> 2.2 方法监听注册方式</h4><h5 id="_2-2-1-removeeventlistener-≥ie9" tabindex="-1"><a class="header-anchor" href="#_2-2-1-removeeventlistener-≥ie9" aria-hidden="true">#</a> 2.2.1 removeEventListener（≥IE9）</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eventTarget<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">[</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Tip</p><p>一个对象可能绑定了很多事件，对于 <code>removeEventListener</code> 方法，需要指定要删除的事件 <code>listener</code>。所以在注册事件的时候需要提前将事件函数封装在一个变量里。然后把变量传给 <code>removeEventListener</code> 方法。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">func1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I \\&#39;m click(addEventListener)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> func1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> func1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-2-detachevent-仅适用于ie8及以下" tabindex="-1"><a class="header-anchor" href="#_2-2-2-detachevent-仅适用于ie8及以下" aria-hidden="true">#</a> 2.2.2 detachEvent（仅适用于IE8及以下）</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eventTarget<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span>eventNameWithOn<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-dom-事件流" tabindex="-1"><a class="header-anchor" href="#_3-dom-事件流" aria-hidden="true">#</a> 3. DOM 事件流</h3><h4 id="_3-1-定义" tabindex="-1"><a class="header-anchor" href="#_3-1-定义" aria-hidden="true">#</a> 3.1 定义</h4><p><strong>事件流</strong> 描述的是从页面中接收事件的顺序。</p><p><strong>事件</strong> 发生时会在元素节点之间 <strong>按照特定的顺序</strong> 传播，这个传播过程即 <strong>DOM 事件流</strong>。</p><p>比如我们给一个 <code>div</code> 注册了点击事件。 DOM 事件流分为3个阶段：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>捕获阶段 =&gt; 当前目标阶段 =&gt; 冒泡阶段
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><strong>事件冒泡</strong>：IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</p></li><li><p><strong>事件捕获</strong>：网景最早提出，由DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</p><p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具 体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（最具体元素）之后漂浮到水面上，这个过 程相当于事件冒泡。</p></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/js1.3f1t9u88n880-17035169371341.png" alt="js1" tabindex="0" loading="lazy"><figcaption>js1</figcaption></figure><h4 id="_3-2-注意" tabindex="-1"><a class="header-anchor" href="#_3-2-注意" aria-hidden="true">#</a> 3.2 注意</h4><ol><li>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</li><li><code>onclick</code> 和 <code>attachEvent</code> 只能得到冒泡阶段。</li><li><code>addEventListener(type, listener[, useCapture])</code> 第三个参数如果是 <code>true</code>，表示在事件捕 获阶段调用事件处理程序；如果是 <code>false</code>（不写默认就是 <code>false</code>），表示在事件冒泡阶段调用事件处理 程序。</li><li>实际开发中我们很少使用事件捕获，我们 <strong>更关注事件冒泡</strong>。</li><li><strong>有些事件是没有冒泡的</strong>，比如 <code>onblur</code>、<code>onfocus</code>、<code>onmouseenter</code>、<code>onmouseleave</code></li><li><strong>事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件，我们后面讲解</strong>。</li></ol><h3 id="_4-事件对象" tabindex="-1"><a class="header-anchor" href="#_4-事件对象" aria-hidden="true">#</a> 4. 事件对象</h3><h4 id="_4-1-什么是事件对象" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是事件对象" aria-hidden="true">#</a> 4.1 什么是事件对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eventTarget<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>）
<span class="token comment">// 这个event 就是事件对象，我们还喜欢的写成 e 或者evt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>官方解释：<code>event</code> 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。</li><li>简单理解：事件发生后，跟 <strong>事件相关的一系列信息数据的集合</strong> 都放到这个对象里面，这个对象就是事件对象 <code>event</code>，它有很多属性和方法。</li></ul><p>比如：</p><ol><li>谁绑定了这个事件。</li><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</li></ol><h4 id="_4-2-事件对象的使用语法" tabindex="-1"><a class="header-anchor" href="#_4-2-事件对象的使用语法" aria-hidden="true">#</a> 4.2 事件对象的使用语法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>eventTarget<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 这个event 就是事件对象，我们还喜欢的写成e 或者evt</span>
<span class="token punctuation">}</span>
eventTarget<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 这个event 就是事件对象，我们还喜欢的写成e 或者evt</span>
<span class="token punctuation">}</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>event</code> 是个形参，系统帮我们设定为事件对象，不需要传递实参过去。 当我们注册事件时，<code>event</code> 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）。</p><h4 id="_4-3-事件对象的兼容性方案" tabindex="-1"><a class="header-anchor" href="#_4-3-事件对象的兼容性方案" aria-hidden="true">#</a> 4.3 事件对象的兼容性方案</h4><p>事件对象本身的获取存在兼容问题：</p><ol><li>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 <code>e</code> 就可以获取到。</li><li>在IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 <code>window.event</code> 中获取查找。</li></ol><p>解决方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-4-事件对象的常见属性和方法" tabindex="-1"><a class="header-anchor" href="#_4-4-事件对象的常见属性和方法" aria-hidden="true">#</a> 4.4 事件对象的常见属性和方法</h4><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td><code>e.target</code></td><td>返回触发事件的对象（标准）</td></tr><tr><td><code>e.srcElement</code></td><td>返回触发事件的对象（非标准）</td></tr><tr><td><code>e.type</code></td><td>返回事件类型</td></tr><tr><td><code>e.preventDefault()</code></td><td>阻止默认事件（标准）</td></tr><tr><td><code>e.returnValue = true</code></td><td>阻止默认事件（非标准，IE678）</td></tr><tr><td><code>e.stopPropagation()</code></td><td>阻止冒泡（标准）</td></tr><tr><td><code>e.cancelBubble</code></td><td>阻止冒泡（非标准，IE678）</td></tr></tbody></table><p>Warning</p><p>非标准（IE678）方案只需要了解。</p><h5 id="_4-4-1-事件对象属性-e-target-和-this-的比较" tabindex="-1"><a class="header-anchor" href="#_4-4-1-事件对象属性-e-target-和-this-的比较" aria-hidden="true">#</a> 4.4.1 事件对象属性 <code>e.target</code> 和 <code>this</code> 的比较</h5><ul><li><code>e.target</code>：<code>e.target</code> 返回的是触发事件的对象（元素），点击了哪个元素触发了事件，就返回那个元素。</li><li><code>this</code>：事件绑定的元素，这个事件函数的调用者。</li></ul><p>Tip</p><p>点击了某一个元素节点，这个节点不一定绑定了事件。但是由于 DOM 事件流的冒泡现象，会触发其父节点所绑定的事件。</p><p>一个简单的例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 点击 li 中的 123</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;li&gt;...&lt;/li&gt;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;ul&gt;...&lt;/ul&gt;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-4-2-阻止事件默认行为" tabindex="-1"><a class="header-anchor" href="#_4-4-2-阻止事件默认行为" aria-hidden="true">#</a> 4.4.2 阻止事件默认行为</h5><p>阻止 a 链接跳转:</p><ul><li>标准</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a<span class="token punctuation">.</span><span class="token function">addEventListener</span> <span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>兼容IE678</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	e<span class="token punctuation">.</span>returnValue<span class="token punctuation">;</span>
	<span class="token comment">// 或者</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-阻止事件冒泡" tabindex="-1"><a class="header-anchor" href="#_5-阻止事件冒泡" aria-hidden="true">#</a> 5. 阻止事件冒泡</h3><h4 id="_5-1-阻止事件冒泡的两种方式" tabindex="-1"><a class="header-anchor" href="#_5-1-阻止事件冒泡的两种方式" aria-hidden="true">#</a> 5.1 阻止事件冒泡的两种方式</h4><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点。 事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p><p>阻止事件冒泡：</p><ul><li>标准写法：利用事件对象里面的<code>stopPropagation()</code>方法。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>非标准写法：IE 6-8 利用事件对象<code>cancelBubble</code>属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>给相应的子元素节点设置事件的 <code>stopPropagation()</code> 方法，相当于在这个节点阻断了事件冒泡。事件无法继续传递至父节点。</p><p>一个例子：点击 son 子盒子，在设置阻断事件冒泡前，点击子盒子也触发了父盒子 fahter 的事件。设置了之后，打印台不再输出 father。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>father<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>son<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> father <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.father&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> son <span class="token operator">=</span> father<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>
    father<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;fahter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    son<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-阻止事件冒泡的兼容性解决方案" tabindex="-1"><a class="header-anchor" href="#_5-2-阻止事件冒泡的兼容性解决方案" aria-hidden="true">#</a> 5.2 阻止事件冒泡的兼容性解决方案</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-事件委托-代理、委派" tabindex="-1"><a class="header-anchor" href="#_6-事件委托-代理、委派" aria-hidden="true">#</a> 6. 事件委托（代理、委派）</h3><h4 id="_6-1-前言" tabindex="-1"><a class="header-anchor" href="#_6-1-前言" aria-hidden="true">#</a> 6.1 前言</h4><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。生活中有如下场景：</p><ul><li>咱们班有100个学生，快递员有100个快递，如果一个个的送花费时间较长。同时每个学生领取的时候，也需 要排队领取，也花费时间较长，何如？</li><li><strong>解决方案</strong>：快递员把100个快递，委托给班主任，班主任把这些快递放到办公室，同学们下课自行领取即可。</li><li><strong>优势</strong>：快递员省事，委托给班主任就可以走了。同学们领取也方便，因为相信班主任。</li></ul><p>事件冒泡本身的特性，<strong>会带来的坏处，也会带来的好处</strong>，需要我们灵活掌握。程序中也有如此场景：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>知否知否，应该有弹框在手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击每个 <code>li</code> 都会弹出对话框，以前需要给每个 <code>li</code> 注册事件，是非常辛苦的，而且访问 DOM 的次数越多，这就会延长整个页面的交互就绪时间。</p><h4 id="_6-2-事件委托的原理" tabindex="-1"><a class="header-anchor" href="#_6-2-事件委托的原理" aria-hidden="true">#</a> 6.2 事件委托的原理</h4><ul><li>事件委托：也称为事件代理，在jQuery 里面称为事件委派。</li><li>原理：<strong>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</strong>。 以上案例：给 <code>ul</code> 注册点击事件，然后利用事件对象的 <code>target</code> 来找到当前点击的 <code>li</code>，因为点击 <code>li</code>，事件会冒泡到ul 上，<code>ul</code> 有注册事件，就会触发事件监听器。</li><li>作用：我们 <strong>只操作了一次 DOM ，提高了程序的性能。</strong></li></ul><h3 id="_7-常用的鼠标事件" tabindex="-1"><a class="header-anchor" href="#_7-常用的鼠标事件" aria-hidden="true">#</a> 7. 常用的鼠标事件</h3><h4 id="_7-1-常用的鼠标事件" tabindex="-1"><a class="header-anchor" href="#_7-1-常用的鼠标事件" aria-hidden="true">#</a> 7.1 常用的鼠标事件</h4><ol><li><p>禁止鼠标右键菜单 <code>contextmenu</code> 主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;contextmenu&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>禁止鼠标选中（<code>selectstart</code> 开始选中）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;selectstart&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_7-2-鼠标事件对象" tabindex="-1"><a class="header-anchor" href="#_7-2-鼠标事件对象" aria-hidden="true">#</a> 7.2 鼠标事件对象</h4><p><code>event</code> 对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象 <code>MouseEvent</code> 和键盘事件对象 <code>KeyboardEvent</code>。</p><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td><code>e.clientX</code></td><td>返回鼠标相对于浏览器窗口可视区的 <code>X</code> 坐标</td></tr><tr><td><code>e.clientY</code></td><td>返回鼠标相对于浏览器窗口可视区的 <code>Y</code> 坐标</td></tr><tr><td><code>e.pageX</code></td><td>返回鼠标相对于文档页面的 <code>X</code> 坐标IE9+支持</td></tr><tr><td><code>e.pageY</code></td><td>返回鼠标相对于文档页面的 <code>Y</code> 坐标IE9+支持</td></tr><tr><td><code>e.screenX</code></td><td>返回鼠标相对于电脑屏幕的 <code>X</code> 坐标</td></tr><tr><td><code>e.screenY</code></td><td>返回鼠标相对于电脑屏幕的 <code>Y</code> 坐标</td></tr></tbody></table><h3 id="_8-常用的键盘事件" tabindex="-1"><a class="header-anchor" href="#_8-常用的键盘事件" aria-hidden="true">#</a> 8. 常用的键盘事件</h3><h4 id="_8-1-常用的键盘事件" tabindex="-1"><a class="header-anchor" href="#_8-1-常用的键盘事件" aria-hidden="true">#</a> 8.1 常用的键盘事件</h4><p>事件除了使用鼠标触发，还可以使用键盘触发。</p><table><thead><tr><th>键盘事件</th><th>触发事件</th></tr></thead><tbody><tr><td><code>onkeyup</code></td><td>某个键盘按键被松开时触发</td></tr><tr><td><code>onkeydown</code></td><td>某个键盘按键被按下时触发</td></tr><tr><td><code>onkeypress</code></td><td>某个键盘按键被按下时触发，但是不识别功能键（ctrl、shif、箭头等）</td></tr></tbody></table><p><code>onkeypress</code> 已废弃。虽然还是有浏览器支持，但是未来可能会停止支持。请使用 <code>keydown</code> 代替。</p><h4 id="_8-2-键盘事件对象" tabindex="-1"><a class="header-anchor" href="#_8-2-键盘事件对象" aria-hidden="true">#</a> 8.2 键盘事件对象</h4><table><thead><tr><th>键盘事件对象属性</th><th>说明</th></tr></thead><tbody><tr><td><code>key</code></td><td>返回物理按键的名称值（推荐使用）</td></tr><tr><td><code>keyCode</code></td><td>返回该键的ASCII值</td></tr></tbody></table><p><code>keyCode</code> 已废弃: 该特性已经从 Web 标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。一定要用，请使用 <code>key</code> 代替。——MDN</p><h2 id="四、bom-基础" tabindex="-1"><a class="header-anchor" href="#四、bom-基础" aria-hidden="true">#</a> 四、BOM 基础</h2><h3 id="_1-bom-概述" tabindex="-1"><a class="header-anchor" href="#_1-bom-概述" aria-hidden="true">#</a> 1. BOM 概述</h3><h4 id="_1-1-bom-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-bom-概述" aria-hidden="true">#</a> 1.1 BOM 概述</h4><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 <code>window</code>。</p><p>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p><p>BOM 缺乏标准，JavaScript 语法的标准化组织是ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分</p><h4 id="_1-2-dom-vs-bom" tabindex="-1"><a class="header-anchor" href="#_1-2-dom-vs-bom" aria-hidden="true">#</a> 1.2 DOM vs BOM</h4><table><thead><tr><th>DOM</th><th>BOM</th></tr></thead><tbody><tr><td>文档对象模型</td><td>浏览器对象模型</td></tr><tr><td>DOM 就是把「文档」当做一个「对象」来看待</td><td>把「浏览器」当做一个「对象」来看待</td></tr><tr><td>DOM 的顶级对象是 <code>document</code></td><td>BOM 的顶级对象是 <code>window</code></td></tr><tr><td>DOM 主要学习的是操作页面元素</td><td>BOM 学习的是浏览器窗口交互的一些对象</td></tr><tr><td>DOM 是W3C 标准规范</td><td>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</td></tr></tbody></table><h4 id="_1-3-bom-的构成" tabindex="-1"><a class="header-anchor" href="#_1-3-bom-的构成" aria-hidden="true">#</a> 1.3 BOM 的构成</h4><p>BOM 比 DOM 更加强大，包含了 DOM。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/bom1.3ss67gfjn6c-17035169461284.png" alt="bom1" tabindex="0" loading="lazy"><figcaption>bom1</figcaption></figure><p><strong><code>window</code> 对象是浏览器的顶级对象</strong>，它具有双重角色。</p><ol><li>它是JS 访问浏览器窗口的一个接口。</li><li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 <code>window</code> 对象的属性和方法。 在调用的时候可以省略 <code>window</code>，前面学习的对话框都属于 <code>window</code> 对象方法，如 <code>alert()</code>、<code>prompt()</code> 等。</li></ol><p>Tip</p><p><code>window</code> 下的一个特殊属性 <code>window.name</code>。</p><h3 id="_2-window-对象的常见事件" tabindex="-1"><a class="header-anchor" href="#_2-window-对象的常见事件" aria-hidden="true">#</a> 2. window 对象的常见事件</h3><h4 id="_2-1-窗口加载事件" tabindex="-1"><a class="header-anchor" href="#_2-1-窗口加载事件" aria-hidden="true">#</a> 2.1 窗口加载事件</h4><h5 id="_2-1-1-onload" tabindex="-1"><a class="header-anchor" href="#_2-1-1-onload" aria-hidden="true">#</a> 2.1.1 onload</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>window.onload</code> 是窗口（页面）加载事件,当文档内容完全加载完成会触发该事件（<strong>包括图像、脚本文件、CSS文件等</strong>）, 就调用的处理函数。</p><p>注意：</p><ol><li>有了 <code>window.onload</code> 就可以把 JS 代码写到页面元素的上方，因为onload 是等页面内容全部加载完毕， 再去执行处理函数。</li><li><code>window.onload</code> 传统注册事件方式只能写一次，如果有多个，会以最后一个 <code>window.onload</code> 为准。</li><li>如果使用 <code>addEventListener</code> 则没有限制。</li></ol><h5 id="_2-1-2-domcontentloaded" tabindex="-1"><a class="header-anchor" href="#_2-1-2-domcontentloaded" aria-hidden="true">#</a> 2.1.2 DOMContentLoaded</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>DOMContentLoaded</code> 事件触发时，仅当DOM加载完成，<strong>不包括样式表，图片，flash等等</strong>。（Ie9以上才支持。）</p><p>Tip</p><p>如果页面的图片很多的话, 从用户访问到 <code>onload</code> 触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 <code>DOMContentLoaded</code> 事件比较合适。</p><h3 id="_2-2-调整窗口大小事件" tabindex="-1"><a class="header-anchor" href="#_2-2-调整窗口大小事件" aria-hidden="true">#</a> 2.2 调整窗口大小事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>window.onresize</code> 是调整窗口大小加载事件, 当触发时就调用的处理函数。 注意：</p><ol><li>只要窗口大小发生像素变化，就会触发这个事件。</li><li>我们经常 <strong>利用这个事件完成响应式布局</strong>。</li><li><code>window.innerWidth</code> 是当前屏幕的宽度</li></ol><h3 id="_3-定时器" tabindex="-1"><a class="header-anchor" href="#_3-定时器" aria-hidden="true">#</a> 3. 定时器</h3><h4 id="_3-1-两种定时器" tabindex="-1"><a class="header-anchor" href="#_3-1-两种定时器" aria-hidden="true">#</a> 3.1 两种定时器</h4><p><code>window</code> 对象给我们提供了2 个非常好用的方法——定时器。</p><ul><li><code>setTimeout()</code></li><li><code>setInterval()</code></li></ul><h4 id="_3-2-settimeout-定时器" tabindex="-1"><a class="header-anchor" href="#_3-2-settimeout-定时器" aria-hidden="true">#</a> 3.2 setTimeout() 定时器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>调用函数 <span class="token punctuation">[</span><span class="token punctuation">,</span> 延迟的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>setTimeout()</code> 方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p><p>注意：</p><ol><li><code>window</code> 可以省略。</li><li>这个调用函数可以 <strong>直接写函数，或者写函数名或者采取字符串&#39;函数名()&#39;</strong> 三种形式。第三种不推荐。</li><li>延迟的毫秒数省略默认是 <code>0</code>，如果写，<strong>必须是毫秒</strong>。</li><li>因为定时器可能有很多，所以我们 <strong>经常给定时器赋值一个标识符</strong>。</li></ol><p><code>setTimeout()</code> 这个调用函数我们也称为 <strong>回调函数callback</strong>。 普通函数是按照代码顺序直接调用。而这个函数，需要等待时间，时间到了才去调用这个函数，因此称为回调函数。</p><p>简单理解：回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。</p><p>以前我们讲的 <code>element.onclick = function(){}</code> 或者 <code>element.addEventListener(“click”, fn);</code> 里面的函数也是回调函数。</p><h4 id="_3-3-停止-settimeout-定时器" tabindex="-1"><a class="header-anchor" href="#_3-3-停止-settimeout-定时器" aria-hidden="true">#</a> 3.3 停止 setTimeout() 定时器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutID<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>clearTimeout()</code> 方法用于取消先前通过调用 <code>setTimeout()</code> 建立的定时器。</p><p>Tip</p><ol><li><code>window</code> 可以省略。</li><li>里面的 <strong>参数就是定时器的标识符</strong>。</li></ol><h4 id="_3-4-setinterval-定时器" tabindex="-1"><a class="header-anchor" href="#_3-4-setinterval-定时器" aria-hidden="true">#</a> 3.4 setInterval() 定时器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>回调函数 <span class="token punctuation">[</span><span class="token punctuation">,</span> 间隔的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>setInterval()</code> 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</p><p>注意：</p><ol><li><code>window</code> 可以省略。</li><li>这个调用函数可以 <strong>直接写函数，或者写函数名或者采取字符串&#39;函数名()&#39;</strong> 三种形式。</li><li>间隔的毫秒数省略默认是 <code>0</code>，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数。</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li><li><strong>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次</strong>。</li></ol><h4 id="_3-4-倒计时案例分析" tabindex="-1"><a class="header-anchor" href="#_3-4-倒计时案例分析" aria-hidden="true">#</a> 3.4 倒计时案例分析</h4><p>Tip</p><p>定时器案例分析：三个盒子分别放时、分、秒。</p><ol><li>这个倒计时是不断变化的，因此需要定时器来自动变化（setInterval）</li><li>三个黑色盒子里面分别存放时分秒</li><li>三个黑色盒子利用innerHTML 放入计算的小时分钟秒数</li><li>第一次执行也是间隔毫秒数，因此刚刷新页面会有空白</li><li>最好采取封装函数的方式，这样可以先调用一次这个函数，防止刚开始刷新页面有空白问题</li></ol><h4 id="_3-5-停止-setinterval-定时器" tabindex="-1"><a class="header-anchor" href="#_3-5-停止-setinterval-定时器" aria-hidden="true">#</a> 3.5 停止 setInterval() 定时器</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalID<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>clearInterval()</code> 方法取消了先前通过调用 <code>setInterval()</code> 建立的定时器。</p><p>注意：</p><ol><li><code>window</code> 可以省略。</li><li>里面的参数就是定时器的标识符。</li></ol><h4 id="_3-6-this-指向问题" tabindex="-1"><a class="header-anchor" href="#_3-6-this-指向问题" aria-hidden="true">#</a> 3.6 this 指向问题</h4><p><code>this</code> 的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定 <code>this</code> 到底指向谁，一般情况下的最终指向的是那个调用它的对象 现阶段，我们先了解一下几个 <code>this</code> 指向：</p><ol><li>全局作用域或者普通函数中 <code>this</code> 指向全局对象 <code>window</code>（注意定时器里面的 <code>this</code> 指向 <code>window</code>）</li><li>方法调用中谁调用 <code>this</code> 指向谁</li><li>构造函数中 <code>this</code> 指向构造函数的实例</li></ol><h3 id="_4-js-执行机制" tabindex="-1"><a class="header-anchor" href="#_4-js-执行机制" aria-hidden="true">#</a> 4. JS 执行机制</h3><h4 id="_4-1-js-是单线程" tabindex="-1"><a class="header-anchor" href="#_4-1-js-是单线程" aria-hidden="true">#</a> 4.1 JS 是单线程</h4><p>JavaScript 语言的一大特点就是 <strong>单线程</strong>，也就是说，<strong>同一个时间只能做一件事</strong>。这是因为 Javascript 这门脚 本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作DOM 而诞生的。比如我们对 某个DOM 元素进行添加和删除操作，不能同时进行。应该先进行添加，之后再删除。</p><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是：如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><h4 id="_4-2-同步和异步概述" tabindex="-1"><a class="header-anchor" href="#_4-2-同步和异步概述" aria-hidden="true">#</a> 4.2 同步和异步概述</h4><p>先来看一个问题：以下代码执行的结果是什么？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么以下代码执行的结果又是什么？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创 建多个线程。于是，JS 中出现了 <strong>同步和异步</strong>。</p><h5 id="_4-2-1-同步" tabindex="-1"><a class="header-anchor" href="#_4-2-1-同步" aria-hidden="true">#</a> 4.2.1 同步</h5><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做 法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><h5 id="_4-2-2-异步" tabindex="-1"><a class="header-anchor" href="#_4-2-2-异步" aria-hidden="true">#</a> 4.2.2 异步</h5><p>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做 饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><p><strong>他们的本质区别：这条流水线上各个流程的执行顺序不同</strong>。</p><h4 id="_4-3-同步和异步任务" tabindex="-1"><a class="header-anchor" href="#_4-3-同步和异步任务" aria-hidden="true">#</a> 4.3 同步和异步任务</h4><h5 id="_4-3-1-同步任务" tabindex="-1"><a class="header-anchor" href="#_4-3-1-同步任务" aria-hidden="true">#</a> 4.3.1 同步任务</h5><p>同步任务都在主线程上执行，形成一个 <strong>执行栈</strong>。</p><h5 id="_4-3-2-异步任务" tabindex="-1"><a class="header-anchor" href="#_4-3-2-异步任务" aria-hidden="true">#</a> 4.3.2 异步任务</h5><p>JS 的异步是通过回调函数实现的。 一般而言，异步任务有以下三种类型：</p><ol><li>普通事件，如 <code>click</code>、<code>resize</code> 等</li><li>资源加载，如 <code>load</code>、<code>error</code> 等</li><li>定时器，包括 <code>setInterval</code>、<code>setTimeout</code> 等异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）。</li></ol><h4 id="_4-4-js-执行机制" tabindex="-1"><a class="header-anchor" href="#_4-4-js-执行机制" aria-hidden="true">#</a> 4.4 JS 执行机制</h4><ol><li>先执行 <strong>执行栈中的同步任务</strong>。</li><li>异步任务（回调函数）放入任务队列中。</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取 <strong>任务队列</strong> 中的异步任务，于是被读取的异步务结束等待状态，进入执行栈，开始执行。</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/bom2.40uo3yu1dv20-17035169566817.png" alt="bom2" tabindex="0" loading="lazy"><figcaption>bom2</figcaption></figure><p>举例分析：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>若不触发点击事件，结果将依次输出 <code>1</code>、<code>2</code>、<code>3</code>；</li><li>若点击事件在 3 秒前触发，则依次输出 <code>1</code>、<code>2</code>、<code>click</code>、<code>3</code></li><li>若点击事件在 3 秒后触发，则依次输出 <code>1</code>、<code>2</code>、<code>3</code>、<code>click</code></li></ul><h4 id="_4-5-事件循环" tabindex="-1"><a class="header-anchor" href="#_4-5-事件循环" aria-hidden="true">#</a> 4.5 事件循环</h4><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为 <strong>事件循环（event loop）</strong>。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/bom3.720uz5f9vh00-170351696364310.png" alt="bom3" tabindex="0" loading="lazy"><figcaption>bom3</figcaption></figure><h3 id="_5-location-对象" tabindex="-1"><a class="header-anchor" href="#_5-location-对象" aria-hidden="true">#</a> 5. location 对象</h3><h4 id="_5-1-什么是-location-对象" tabindex="-1"><a class="header-anchor" href="#_5-1-什么是-location-对象" aria-hidden="true">#</a> 5.1 什么是 location 对象</h4><p><code>window</code> 对象给我们提供了一个 <code>location</code> 属性用于 <strong>获取或设置窗体的URL</strong>，并且可以用于 <strong>解析 URL</strong>。因为这个属性返回的是一个对象，所以我们将这个属性也称为 <code>location</code> 对象。</p><h4 id="_5-2-url" tabindex="-1"><a class="header-anchor" href="#_5-2-url" aria-hidden="true">#</a> 5.2 URL</h4><p>统一资源定位符（Uniform Resource Locator, URL）是互联网上标准资源的地址。互联网上的每个文件都有 一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。 URL 的一般语法格式为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>格式
protocol://host[:port]/path/[?query]#fragment
举例
http://www.itcast.cn/index.html?name=andy&amp;age=18#link
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td><code>protocol</code></td><td>通信协议（http、ftp）</td></tr><tr><td><code>host</code></td><td>主机（域名）</td></tr><tr><td><code>port</code></td><td>端口号（可选），省略时使用方案的默认端口，如http默认端口80</td></tr><tr><td><code>path</code></td><td>路径，由零或多个 <code>/</code> 隔开的字符串，一般表示主机上的一个目录或文件地址</td></tr><tr><td><code>query</code></td><td>参数，以键值对的形式，通过 <code>&amp;</code> 符号分隔开</td></tr><tr><td><code>fragment</code></td><td>片段，<code>#</code> 后面内容，常见于链接、锚点</td></tr></tbody></table><h4 id="_5-3-location-对象的属性" tabindex="-1"><a class="header-anchor" href="#_5-3-location-对象的属性" aria-hidden="true">#</a> 5.3 location 对象的属性</h4><table><thead><tr><th>location对象属性</th><th>返回值</th></tr></thead><tbody><tr><td><code>location.href</code></td><td>获取或者设置 整个URL</td></tr><tr><td><code>location.host</code></td><td>返回主机（域名）</td></tr><tr><td><code>location.port</code></td><td>返回端口号，未写则返回空字符串</td></tr><tr><td><code>location.pathname</code></td><td>返回路径</td></tr><tr><td><code>location.search</code></td><td>返回参数</td></tr><tr><td><code>location.hash</code></td><td>返回片段，<code>#</code> 后面内容，常见于链接、锚点</td></tr></tbody></table><p>Tip</p><p>重点记住：<code>href</code> 和 <code>search</code></p><h4 id="_5-4-location-对象的方法" tabindex="-1"><a class="header-anchor" href="#_5-4-location-对象的方法" aria-hidden="true">#</a> 5.4 location 对象的方法</h4><table><thead><tr><th>location对象方法</th><th>返回值</th></tr></thead><tbody><tr><td><code>location.assign()</code></td><td>跟 <code>href</code> 一样，可以跳转页面（也称为重定向页面）</td></tr><tr><td><code>location.replace()</code></td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td><code>location.reload()</code></td><td>重新加载页面，相当于刷新按钿或者 f5 如果参数为 <code>true</code> 强制刷新 ctrl+f5</td></tr></tbody></table><h3 id="_6-navigator-对象" tabindex="-1"><a class="header-anchor" href="#_6-navigator-对象" aria-hidden="true">#</a> 6. navigator 对象</h3><p><code>navigator</code> 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 <code>userAgent</code>，该属性可以返回由客 户机发送服务器的 <code>user-agent</code> 头部的值。 下面前端代码可以判断用户那个终端打开页面，实现跳转：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">//手机</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">//电脑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-history-对象" tabindex="-1"><a class="header-anchor" href="#_7-history-对象" aria-hidden="true">#</a> 7. history 对象</h3><p><code>window</code> 对象给我们提供了一个 <code>history</code> 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p><table><thead><tr><th><code>history</code>对象方法</th><th>作用</th></tr></thead><tbody><tr><td><code>back()</code></td><td>网页地址后退功能</td></tr><tr><td><code>forward()</code></td><td>前进功能</td></tr><tr><td><code>go(参数)</code></td><td>前进后退功能，参数为 <code>1</code>，前进一个页面，<code>-1</code> 后退一个页面</td></tr></tbody></table><p><code>history</code> 对象一般在实际开发中比较少用，但是会在一些OA 办公系统中见到。</p><h2 id="五、pc-端网页特效" tabindex="-1"><a class="header-anchor" href="#五、pc-端网页特效" aria-hidden="true">#</a> 五、PC 端网页特效</h2><p>在前面学习了JS基础、DOM 和 BOM 的基本操作后，这部分主要学习这些知识的拓展应用。</p><h3 id="_1-元素偏移量-offset-系列" tabindex="-1"><a class="header-anchor" href="#_1-元素偏移量-offset-系列" aria-hidden="true">#</a> 1. 元素偏移量 offset 系列</h3><h4 id="_1-1-offset-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-offset-概述" aria-hidden="true">#</a> 1.1 offset 概述</h4><p><code>offset</code> 翻译过来就是偏移量，我们使用 <code>offset</code> 系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p><ul><li>获得元素距离带有定位父元素的位置</li><li>获得元素自身的大小（宽度高度）</li><li>注意：返回的数值都不带单位</li></ul><p><code>offset</code> 系列常用属性： <img src="https://gitlab.com/apzs/image/-/raw/master/image/offset1.33r96uboi540-170351698601613.jpg" alt="offset1" loading="lazy"></p><h4 id="_1-2-offset-与-style-区别" tabindex="-1"><a class="header-anchor" href="#_1-2-offset-与-style-区别" aria-hidden="true">#</a> 1.2 offset 与 style 区别</h4><h5 id="_1-2-1-offset" tabindex="-1"><a class="header-anchor" href="#_1-2-1-offset" aria-hidden="true">#</a> 1.2.1 offset</h5><ul><li><code>offset</code> 可以得到任意样式表中的样式值</li><li><code>offset</code> 系列获得的数值是没有单位的</li><li><code>offsetWidt</code>h 包含 <code>padding+border+width</code></li><li><code>offsetWidth</code> 等属性是只读属性，只能获取不能赋值</li><li><strong>所以，我们想要获取元素大小位置，用 <code>offset</code>更合适</strong></li></ul><h5 id="_1-2-2-style" tabindex="-1"><a class="header-anchor" href="#_1-2-2-style" aria-hidden="true">#</a> 1.2.2 style</h5><ul><li><code>style</code> 只能得到行内样式表中的样式值</li><li><code>style.width</code> 获得的是带有单位的字符串</li><li><code>style.width</code> 获得不包含 <code>padding</code> 和 <code>border</code> 的值</li><li><code>style.width</code> 是可读写属性，可以获取也可以赋值</li><li><strong>所以，我们想要给元素更改值，则需要用 <code>style</code> 改变</strong></li></ul><h4 id="_1-3-案例1-获取鼠标在盒子内部的坐标" tabindex="-1"><a class="header-anchor" href="#_1-3-案例1-获取鼠标在盒子内部的坐标" aria-hidden="true">#</a> 1.3 案例1：获取鼠标在盒子内部的坐标</h4><h5 id="_1-3-1-分析" tabindex="-1"><a class="header-anchor" href="#_1-3-1-分析" aria-hidden="true">#</a> 1.3.1 分析</h5><ol><li>我们在盒子内点击，想要得到鼠标距离盒子左右的距离。</li><li>首先得到鼠标在页面中的坐标（e.pageX, e.pageY）</li><li>其次得到盒子在页面中的距离( box.offsetLeft, box.offsetTop)</li><li>用鼠标距离页面的坐标减去盒子在页面中的距离，得到鼠标在盒子内的坐标</li><li>如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动事件mousemove</li></ol><h5 id="_1-3-2-代码" tabindex="-1"><a class="header-anchor" href="#_1-3-2-代码" aria-hidden="true">#</a> 1.3.2 代码</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.box&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mousemove&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> box<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
    <span class="token keyword">let</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> box<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>  <span class="token string">&quot;鼠标距离盒子坐标是：(&quot;</span> <span class="token operator">+</span>x <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-4-案例2-模态框拖拽" tabindex="-1"><a class="header-anchor" href="#_1-4-案例2-模态框拖拽" aria-hidden="true">#</a> 1.4 案例2：模态框拖拽</h4><p>弹出框，我们也称为模态框。</p><ol><li>点击弹出层，会弹出模态框，并且显示灰色半透明的遮挡层。</li><li>点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</li><li>鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</li><li>鼠标松开，可以停止拖动模态框移动。</li></ol><h5 id="_1-4-1-分析" tabindex="-1"><a class="header-anchor" href="#_1-4-1-分析" aria-hidden="true">#</a> 1.4.1 分析</h5><ol><li>点击弹出层，模态框和遮挡层就会显示出来 display:block;</li><li>点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;</li><li>在页面中拖拽的原理：鼠标按下并且移动，之后松开鼠标</li><li>触发事件是鼠标按下 mousedown，鼠标移动 mousemove 鼠标松开 mouseup</li><li>拖拽过程: 鼠标移动过程中，获得最新的值赋值给模态框的left和top值，这样模态框可以跟着鼠标走了</li><li>鼠标按下触发的事件源是最上面一行，就是id 为 title</li><li>鼠标的坐标减去鼠标在盒子内的坐标，才是模态框真正的位置。</li><li>鼠标按下，我们要得到鼠标在盒子的坐标。</li><li>鼠标移动，就让模态框的坐标设置为：鼠标坐标减去盒子坐标即可，注意移动事件写到按下事件里面。</li><li>鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除</li></ol><h5 id="_1-4-2-代码" tabindex="-1"><a class="header-anchor" href="#_1-4-2-代码" aria-hidden="true">#</a> 1.4.2 代码</h5><p>Tip</p><p>我用阿里云盘分享了「模态框拖拽案例」，你可以不限速下载，链接：https://www.aliyundrive.com/s/uQHM8DpTh5F</p><h4 id="_1-5-案例2-京东放大镜" tabindex="-1"><a class="header-anchor" href="#_1-5-案例2-京东放大镜" aria-hidden="true">#</a> 1.5 案例2：京东放大镜</h4><p>Tip</p><p>代码：我用阿里云盘分享了「04-京东放大镜效果」，你可以不限速下载🚀 链接：https://www.aliyundrive.com/s/M9eJn6rAR28</p><h3 id="_2-元素可视区-client-系列" tabindex="-1"><a class="header-anchor" href="#_2-元素可视区-client-系列" aria-hidden="true">#</a> 2. 元素可视区 client 系列</h3><h4 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义" aria-hidden="true">#</a> 2.1 定义</h4><p><code>client</code> 翻译过来就是客户端，我们使用 <code>client</code> 系列的相关属性来获取元素可视区的相关信息。通过<code>client</code> 系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p><table><thead><tr><th>client系列属性</th><th>作用</th></tr></thead><tbody><tr><td><code>element.clientTop</code></td><td>返回元素上边框的大小</td></tr><tr><td><code>element.clientLeft</code></td><td>返回元素左边框大大小</td></tr><tr><td><code>element.clientWidth</code></td><td>返回自身包括 <code>padding</code>、内容区的宽度，不含边框，返回数值不带单位</td></tr><tr><td><code>element.clientHeight</code></td><td>返回自身包括 <code>padding</code>、内容区的高度，不含边框，返回数值不带单位</td></tr></tbody></table><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/client1.6bor0qa82lk0-170351699981616.png" alt="client1" tabindex="0" loading="lazy"><figcaption>client1</figcaption></figure><h4 id="_2-2-案例-淘宝-flexible-js-源码分析" tabindex="-1"><a class="header-anchor" href="#_2-2-案例-淘宝-flexible-js-源码分析" aria-hidden="true">#</a> 2.2 案例：淘宝 flexible.js 源码分析</h4><p>flexible 项目地址：https://github.com/amfe/lib-flexible</p><h5 id="_2-2-1-立即执行函数" tabindex="-1"><a class="header-anchor" href="#_2-2-1-立即执行函数" aria-hidden="true">#</a> 2.2.1 立即执行函数</h5><p>立即执行函数是指函数定义好后，不需要调用直接执行。即一引入 JS 文件，则该函数自动执行。</p><p>语法：<code>(function() {})()</code> 或者 <code>(function(){}())</code></p><p>主要作用：</p><ul><li>创建一个独立的作用域</li><li>避免了命名冲突问题</li></ul><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以传参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-2-pageshow-事件" tabindex="-1"><a class="header-anchor" href="#_2-2-2-pageshow-事件" aria-hidden="true">#</a> 2.2.2 pageShow 事件</h5><p>下面三种情况都会刷新页面都会触发load 事件。</p><ol><li>a标签的超链接</li><li>F5或者刷新按钮（强制刷新）</li><li>前进后退按钮</li></ol><p>但是火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了 DOM 和 JavaScript 的状态；实际上是将整个页面都保存在了内存里。</p><p>所以此时后退按钮不能刷新页面。</p><p>此时可以使用 <code>pageshow</code> 事件来触发。，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页 面中，<code>pageshow</code> 会在 <code>load</code> 事件触发后触发；根据事件对象中的 <code>persisted</code> 来判断是否是缓存中的页面触发的<code>pageshow</code> 事件，注意这个事件给 <code>window</code> 添加。</p><p>Warning</p><p>多个立即执行函数间要加分号 <code>;</code> 隔开。</p><h3 id="_3-元素滚动-scroll-系列" tabindex="-1"><a class="header-anchor" href="#_3-元素滚动-scroll-系列" aria-hidden="true">#</a> 3. 元素滚动 scroll 系列</h3><h4 id="_3-1-元素scroll-系列属性" tabindex="-1"><a class="header-anchor" href="#_3-1-元素scroll-系列属性" aria-hidden="true">#</a> 3.1 元素scroll 系列属性</h4><p><code>scroll</code> 翻译过来就是滚动的，我们使用 <code>scroll</code> 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p><table><thead><tr><th>scroll系列属性</th><th>作用</th></tr></thead><tbody><tr><td><code>element.scrollTop</code></td><td>返回被卷上去的上侧距离，返回数值不带单位</td></tr><tr><td><code>element.scrollLeft</code></td><td>返回被卷上去的左侧距离，返回数值不带单位</td></tr><tr><td><code>element.scrollWidth</code></td><td>返回自身实际宽度，不含边框，返回数值不带单位</td></tr><tr><td><code>element.scrollHeight</code></td><td>返回自身实际高度，不含边框，返回数值不带单位</td></tr></tbody></table><p>如下图所示 <img src="https://gitlab.com/apzs/image/-/raw/master/image/scroll1.4xrvppmwt800-170351700697119.png" alt="scroll1" loading="lazy"></p><h4 id="_3-2-页面被卷去的头部" tabindex="-1"><a class="header-anchor" href="#_3-2-页面被卷去的头部" aria-hidden="true">#</a> 3.2 页面被卷去的头部</h4><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏 掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 <code>onscroll</code> 事件。</p><p><strong>获取页面被卷去的头部</strong>：</p><ul><li><strong>页面</strong> 被卷去的头部：可以通过 <code>window.pageYOffset</code> 获得，如果是被卷去的左侧 <code>window.pageXOffset</code></li><li>注意，元素被卷去的头部是 <code>element.scrollTop</code>，左侧 <code>element.scrollLeft</code></li></ul><h4 id="_3-3-案例-仿淘宝固定右侧侧边栏" tabindex="-1"><a class="header-anchor" href="#_3-3-案例-仿淘宝固定右侧侧边栏" aria-hidden="true">#</a> 3.3 案例：仿淘宝固定右侧侧边栏</h4><p>Tip</p><p>我用阿里云盘分享了「05-仿淘宝侧边栏.html」，你可以不限速下载🚀 链接：https://www.aliyundrive.com/s/c1sic4RxuLf</p><p>需求（自己动手实践）：</p><ol><li>原先侧边栏是绝对定位</li><li>当页面滚动到一定位置，侧边栏改为固定定位</li><li>页面继续滚动，会让返回顶部显示出来</li></ol><p>要点：</p><ol><li>需要用到页面滚动事件 <code>scroll</code> 因为是页面滚动，所以事件源是 <code>document</code></li><li>滚动到某个位置，就是判断页面被卷去的上部值。</li><li>页面被卷去的头部：可以通过 <code>window.pageYOffset</code> 获得如果是被卷去的左侧 <code>window.pageXOffset</code></li><li>注意，元素被卷去的头部是 <code>element.scrollTop</code> , 如果是页面被卷去的头部则是 <code>window.pageYOffset</code></li><li>其实这个值可以通过盒子的 <code>offsetTop</code> 可以得到，如果大于等于这个值，就可以让盒子固定定位了</li></ol><h4 id="_3-4-三大系列总结" tabindex="-1"><a class="header-anchor" href="#_3-4-三大系列总结" aria-hidden="true">#</a> 3.4 三大系列总结</h4><h5 id="_3-4-1-对比" tabindex="-1"><a class="header-anchor" href="#_3-4-1-对比" aria-hidden="true">#</a> 3.4.1 对比</h5><table><thead><tr><th>三大系列大小对比</th><th>作用</th></tr></thead><tbody><tr><td><code>element.offsetWidth</code></td><td>返回自身包括 <code>padding</code>、边框、内容区的宽度，返回数值不带单位</td></tr><tr><td><code>element.clientWidth</code></td><td>返回自身包括 <code>padding</code>、内容区的宽度，不含边框，返回数值不带单位</td></tr><tr><td><code>element.scrollWidth</code></td><td>返回自身实际的宽度，不含边框，返回数值不带单位</td></tr></tbody></table><h5 id="_3-4-2-主要用法" tabindex="-1"><a class="header-anchor" href="#_3-4-2-主要用法" aria-hidden="true">#</a> 3.4.2 主要用法</h5><ol><li><code>offset</code> 系列经常用于获得元素位置 <code>offsetLeft</code>、<code>offsetTop</code></li><li><code>client</code> 经常用于获取元素大小 <code>clientWidth</code> 、<code>clientHeight</code></li><li><code>scroll</code> 经常用于获取滚动距离 <code>scrollTop</code>、<code>scrollLeft</code></li><li>注意页面滚动的距离通过 <code>window.pageXOffset</code> 获得</li></ol><h5 id="_3-5-mouseenter-和-mouseover-的区别" tabindex="-1"><a class="header-anchor" href="#_3-5-mouseenter-和-mouseover-的区别" aria-hidden="true">#</a> 3.5 mouseenter 和 mouseover 的区别</h5><ul><li>当鼠标移动到元素上时就会触发 <code>mouseenter</code> 事件</li><li>类似 <code>mouseover</code>，它们两者之间的差别是</li><li><code>mouseover</code> 鼠标经过自身盒子会触发，经过子盒子还会触发。<code>mouseenter</code> 只会经过自身盒子触发</li><li>之所以这样，就是因为 <code>mouseenter</code> 不会冒泡</li><li>跟 <code>mouseenter</code> 搭配鼠标离开 <code>mouseleave</code> 同样不会冒泡</li></ul><h3 id="_4-动画函数封装" tabindex="-1"><a class="header-anchor" href="#_4-动画函数封装" aria-hidden="true">#</a> 4. 动画函数封装</h3><h4 id="_4-1-动画实现原理" tabindex="-1"><a class="header-anchor" href="#_4-1-动画实现原理" aria-hidden="true">#</a> 4.1 动画实现原理</h4><p>核心原理：通过定时器 <code>setInterval()</code> 不断移动盒子位置。 实现步骤：</p><ol><li>获得盒子当前位置</li><li>让盒子在当前位置加上 1 个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位（<code>position: absolute</code>），才能使用 <code>element.style.left</code></li></ol><h4 id="_4-2-动画函数简单封装" tabindex="-1"><a class="header-anchor" href="#_4-2-动画函数简单封装" aria-hidden="true">#</a> 4.2 动画函数简单封装</h4><p>注意函数需要传递 2 个参数，<strong>动画对象和移动到的距离</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置定时器</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 清除定时器</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-动画函数给不同元素记录不同定时器" tabindex="-1"><a class="header-anchor" href="#_4-3-动画函数给不同元素记录不同定时器" aria-hidden="true">#</a> 4.3 动画函数给不同元素记录不同定时器</h4><p>如果多个元素都使用这个动画函数，每次都要 <code>var</code> 声明定时器。我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p><p>核心原理：利用 JS 是一门动态语言，可以很方便的给当前对象添加属性。</p><p>举例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 封装动画函数</span>
<span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 给不同节点对象 obj 设置定时器</span>
    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 清除对象自己的定时器</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-缓动效果原理" tabindex="-1"><a class="header-anchor" href="#_4-4-缓动效果原理" aria-hidden="true">#</a> 4.4 缓动效果原理</h4><p>之前讲的是匀速动画：盒子当前位置 = 盒子当前位置 + 固定值盒子当前位置=盒子当前位置+固定值</p><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来 思路：</p><ol><li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</li><li><strong>核心算法</strong>：每次移动的距离步长 = (目标值 - 现在的位置) / 10每次移动的距离步长=(目标值−现在的位置)/10</li><li>停止的条件是：让当前盒子位置等于目标位置就停止定时器</li><li>注意步长值需要取整</li></ol><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缓冲动画核心算法</span>
        <span class="token keyword">let</span> step <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-5-动画函数多个目标值之间移动" tabindex="-1"><a class="header-anchor" href="#_4-5-动画函数多个目标值之间移动" aria-hidden="true">#</a> 4.5 动画函数多个目标值之间移动</h4><p>可以让动画函数从 <code>800</code> 移动到 <code>500</code>。 当我们点击按钮时候，判断步长是正值还是负值：</p><ol><li>如果是正值，则步长往大了取整（<code>Math.ceil()</code>）</li><li>如果是负值，则步长向小了取整（<code>Math.floor()</code>）</li></ol><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缓冲动画核心算法</span>
        <span class="token keyword">let</span> step <span class="token operator">=</span> target <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
        <span class="token comment">// 左右移动步值正负处理</span>
        step <span class="token operator">=</span> step <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span>  Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span>  Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-6-动画函数添加回调函数" tabindex="-1"><a class="header-anchor" href="#_4-6-动画函数添加回调函数" aria-hidden="true">#</a> 4.6 动画函数添加回调函数</h4><ul><li><strong>回调函数原理</strong>：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后， 再执行传进去的这个函数，这个过程就叫做 <strong>回调（<code>callback</code>）</strong>。</li><li><strong>回调函数写的位置：定时器结束的位置</strong>。</li></ul><p>案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 增加回调函数形参 callback</span>
<span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缓冲动画核心算法</span>
        <span class="token keyword">let</span> step <span class="token operator">=</span> target <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
        <span class="token comment">// 左右移动步值正负处理</span>
        step <span class="token operator">=</span> step <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断，回调函数 callback 存在则调用</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 回调函数作为实参传入</span>
<span class="token function">animate</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    span<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-7-动画函数封装到单独js文件里面" tabindex="-1"><a class="header-anchor" href="#_4-7-动画函数封装到单独js文件里面" aria-hidden="true">#</a> 4.7 动画函数封装到单独JS文件里面</h4><p>因为以后经常使用这个动画函数，可以单独封装到一个JS文件里面，使用的时候引用这个JS文件即可。</p><ol><li>单独新建一个 JS 文件。</li><li>HTML文件引入 JS 文件。</li></ol><h3 id="_5-常见网页特效案例" tabindex="-1"><a class="header-anchor" href="#_5-常见网页特效案例" aria-hidden="true">#</a> 5. 常见网页特效案例</h3><h4 id="_5-1-案例1-轮播图" tabindex="-1"><a class="header-anchor" href="#_5-1-案例1-轮播图" aria-hidden="true">#</a> 5.1 案例1：轮播图</h4><p>Tip</p><p>轮播图是JS的一个经典案例，建议自己动手实践一遍，项目源码地址：https://hacker-c.github.io/PinYouGou-Shopping/</p><p>轮播图也称为焦点图，是网页中比较常见的网页特效。</p><p>功能需求：</p><ol><li>鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</li><li>点击右侧按钮一次，图片往左播放一张，以此类推，左侧按钮同理。</li><li>图片播放的同时，下面小圆圈模块跟随一起变化。</li><li>点击小圆圈，可以播放相应图片。</li><li>鼠标不经过轮播图，轮播图也会自动播放图片。</li><li>鼠标经过，轮播图模块，自动播放停止。</li></ol><details style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:15px;color:rgb(52, 73, 94);font-family:&quot;Source Sans Pro&quot;, &quot;Helvetica Neue&quot;, Arial, sans-serif;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;white-space:normal;widows:2;word-spacing:0px;-webkit-text-stroke-width:0px;background-color:rgb(255, 255, 255);text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial;cursor:pointer;"><summary style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;">思路分析点击展开</summary><h4 id="_511-总体分析" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_511-%e6%80%bb%e4%bd%93%e5%88%86%e6%9e%90" data-id="_511-总体分析" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li></ol><h4 id="_512-动态生成小圆圈" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_512-%e5%8a%a8%e6%80%81%e7%94%9f%e6%88%90%e5%b0%8f%e5%9c%86%e5%9c%88" data-id="_512-动态生成小圆圈" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li></ol><h4 id="_513-小圆圈的排他思想" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_513-%e5%b0%8f%e5%9c%86%e5%9c%88%e7%9a%84%e6%8e%92%e4%bb%96%e6%80%9d%e6%83%b3" data-id="_513-小圆圈的排他思想" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li></ol><h4 id="_514-点击小圆圈滚动图片" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_514-%e7%82%b9%e5%87%bb%e5%b0%8f%e5%9c%86%e5%9c%88%e6%bb%9a%e5%8a%a8%e5%9b%be%e7%89%87" data-id="_514-点击小圆圈滚动图片" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li></ol><h4 id="_515-右侧按钮功能" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_515-%e5%8f%b3%e4%be%a7%e6%8c%89%e9%92%ae%e5%8a%9f%e8%83%bd" data-id="_515-右侧按钮功能" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><p style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:1.2em 0px;font-size:1rem !important;line-height:1.6rem;word-spacing:0.05rem;"></p><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li></ol><h4 id="_516-克隆第一张图片" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_516-%e5%85%8b%e9%9a%86%e7%ac%ac%e4%b8%80%e5%bc%a0%e5%9b%be%e7%89%87" data-id="_516-克隆第一张图片" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li></ol><h4 id="_517-点击右侧按钮，小圆圈跟随变化" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_517-%e7%82%b9%e5%87%bb%e5%8f%b3%e4%be%a7%e6%8c%89%e9%92%ae%ef%bc%8c%e5%b0%8f%e5%9c%86%e5%9c%88%e8%b7%9f%e9%9a%8f%e5%8f%98%e5%8c%96" data-id="_517-点击右侧按钮，小圆圈跟随变化" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li></ol><h4 id="_518-自动播放功能" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_518-%e8%87%aa%e5%8a%a8%e6%92%ad%e6%94%be%e5%8a%9f%e8%83%bd" data-id="_518-自动播放功能" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li></ol><h4 id="_519-节流阀" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-size:1.25rem;font-family:consolas, &quot;Microsoft YaHei&quot; !important;color:rgb(44, 62, 80);font-weight:600;"><a href="https://docs.mphy.top/#/WebApi/ch05?id=_519-%e8%8a%82%e6%b5%81%e9%98%80" data-id="_519-节流阀" class="anchor" style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;display:inline-block;text-decoration:none;transition:all 0.3s ease 0s;color:var(--theme-color,#42b983);font-weight:600;"><span style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(52, 73, 94);"></span></a></h4><ul style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><strong style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;color:rgb(44, 62, 80);font-weight:600;"></strong></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><ol style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;line-height:1.6rem;word-spacing:0.05rem;padding-left:1.5rem;"><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li><li style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;margin:8px;font-size:1rem !important;"><code style="-webkit-font-smoothing:antialiased;-webkit-tap-highlight-color:transparent;text-size-adjust:none;box-sizing:border-box;font-family:&quot;Roboto Mono&quot;, Monaco, courier, monospace;font-size:0.8rem;background-color:rgb(248, 248, 248);border-radius:2px;color:rgb(233, 105, 0);margin:0px 2px;padding:3px 5px;white-space:pre-wrap;"></code></li></ol></li></ul></details><h4 id="_5-2-案例2-返回顶部" tabindex="-1"><a class="header-anchor" href="#_5-2-案例2-返回顶部" aria-hidden="true">#</a> 5.2 案例2：返回顶部</h4><h5 id="_5-2-1-window-scroll" tabindex="-1"><a class="header-anchor" href="#_5-2-1-window-scroll" aria-hidden="true">#</a> 5.2.1 window.scroll</h5><p>滚动窗口至文档中的特定位置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：里面的 <code>x</code> 和 <code>y</code> 不跟单位，直接写数字。</p><h5 id="_5-2-2-带有动画的返回顶部" tabindex="-1"><a class="header-anchor" href="#_5-2-2-带有动画的返回顶部" aria-hidden="true">#</a> 5.2.2 带有动画的返回顶部</h5><ol><li>此时可以继续使用我们封装的动画函数</li><li>只需要把所有的 <code>left</code> 相关的值改为跟页面垂直滚动距离相关就可以了</li><li>页面滚动了多少，可以通过 <code>window.pageYOffset</code> 得到</li><li>最后是页面滚动，使用 <code>window.scroll(x, y)</code></li></ol><h5 id="_5-2-3-修改后的缓存动画函数" tabindex="-1"><a class="header-anchor" href="#_5-2-3-修改后的缓存动画函数" aria-hidden="true">#</a> 5.2.3 修改后的缓存动画函数</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> target<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缓冲动画核心算法</span>
        <span class="token keyword">let</span> step <span class="token operator">=</span> target <span class="token operator">-</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span>
        step <span class="token operator">=</span> step <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        window<span class="token punctuation">.</span><span class="token function">scroll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">+</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">animate</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-3-案例3-筋斗云" tabindex="-1"><a class="header-anchor" href="#_5-3-案例3-筋斗云" aria-hidden="true">#</a> 5.3 案例3：筋斗云</h4><h5 id="_5-3-1-效果" tabindex="-1"><a class="header-anchor" href="#_5-3-1-效果" aria-hidden="true">#</a> 5.3.1 效果</h5><ul><li>鼠标经过某个小 <code>li</code>，筋斗云跟这到当前小 <code>li</code> 位置</li><li>鼠标离开这个小 <code>li</code>，筋斗云复原为原来的位置</li><li>鼠标点击了某个小 <code>li</code>，筋斗云就会留在点击这个小 <code>li</code> 的位置</li></ul><h5 id="_5-3-2-实现" tabindex="-1"><a class="header-anchor" href="#_5-3-2-实现" aria-hidden="true">#</a> 5.3.2 实现</h5><ol><li>利用动画函数做动画效果</li><li>原先筋斗云的起始位置是 <code>0</code></li><li>鼠标经过某个小 <code>li</code>，把当前小 <code>li</code> 的 <code>offsetLeft</code> 位置做为目标值即可</li><li>鼠标离开某个小 <code>li</code>，就把目标值设为 <code>0</code></li><li>如果点击了某个小 <code>li</code>，就把 <code>li</code> 当前的位置存储起来，做为筋斗云的起始位置</li></ol><p>核心代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// (1) 鼠标经过把当前小li 的位置做为目标值</span>
    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseenter&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">animate</span><span class="token punctuation">(</span>cloud<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// (2) 鼠标离开就回到起始的位置 </span>
    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseleave&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">animate</span><span class="token punctuation">(</span>cloud<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// (3) 当我们鼠标点击，就把当前位置做为目标值</span>
    lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、移动端网页特效" tabindex="-1"><a class="header-anchor" href="#六、移动端网页特效" aria-hidden="true">#</a> 六、移动端网页特效</h2><h3 id="_1-触摸事件" tabindex="-1"><a class="header-anchor" href="#_1-触摸事件" aria-hidden="true">#</a> 1. 触摸事件</h3><h4 id="_1-1-触屏事件概述" tabindex="-1"><a class="header-anchor" href="#_1-1-触屏事件概述" aria-hidden="true">#</a> 1.1 触屏事件概述</h4><p>移动端浏览器兼容性较好，我们不需要考虑以前JS 的兼容性问题，可以放心的使用原生JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 <code>touch</code>（也称触摸事件），Android 和IOS 都有。</p><p><code>touch</code> 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控 笔）对屏幕或者触控板操作。</p><p>常见的触屏事件如下：</p><table><thead><tr><th>触屏</th><th>touch 事件说明</th></tr></thead><tbody><tr><td><code>touchstart</code></td><td>手指触摸到一个 DOM 元素时触发</td></tr><tr><td><code>touchmove</code></td><td>手指在一个 DOM 元素上滑动时触发</td></tr><tr><td><code>touchend</code></td><td>手指从一个 DOM 元素上移开时触发</td></tr></tbody></table><h4 id="_1-2-触摸事件对象-touchevent" tabindex="-1"><a class="header-anchor" href="#_1-2-触摸事件对象-touchevent" aria-hidden="true">#</a> 1.2 触摸事件对象（<code>TouchEvent</code>）</h4><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><p><code>touchstart</code>、<code>touchmove</code>、<code>touchend</code> 三个事件都会各自有事件对象。</p><p>触摸事件对象重点我们看三个常见对象列表：</p><table><thead><tr><th>触摸列表</th><th>说明</th></tr></thead><tbody><tr><td><code>touches</code></td><td>正在触摸屏幕的所有手指的一个列表</td></tr><tr><td><code>targetTouches</code></td><td>正在触摸当前 DOM 元素上的手指的一个列表</td></tr><tr><td><code>changedTouches</code></td><td>手指状态发生了改变的列表，从无到有，从有到无变化</td></tr></tbody></table><p>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</p><h4 id="_1-3-移动端拖动元素" tabindex="-1"><a class="header-anchor" href="#_1-3-移动端拖动元素" aria-hidden="true">#</a> 1.3 移动端拖动元素</h4><ol><li><code>touchstart、touchmove、touchend</code> 可以实现拖动元素</li><li>但是拖动元素需要当前手指的坐标值我们可以使用 <code>targetTouches[0]</code> 里面的 <code>pageX</code> 和 <code>pageY</code></li><li>移动端拖动的原理：手指移动中，计算出手指移动的距离。然后用盒子原来的位置+ 手指移动的距离</li><li>手指移动的距离：手指滑动中的位置减去手指刚开始触摸的位置</li></ol><p>拖动元素三步曲：</p><ul><li>（1）触摸元素 <code>touchstart</code> ：获取手指初始坐标，同时获得盒子原来的位置</li><li>（2）移动手指 <code>touchmove</code> ：计算手指的滑动距离，并且移动盒子</li><li>（3）离开手指 <code>touchend</code> :</li></ul><p>注意：手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 <code>e.preventDefault();</code></p><h3 id="_2-移动端常见特效" tabindex="-1"><a class="header-anchor" href="#_2-移动端常见特效" aria-hidden="true">#</a> 2. 移动端常见特效</h3><p>案例省略，只记录笔记。</p><h4 id="_2-1-classlist" tabindex="-1"><a class="header-anchor" href="#_2-1-classlist" aria-hidden="true">#</a> 2.1 classList</h4><p><code>classList</code> 属性是 HTML5 新增的一个属性，返回元素的类名。但是 ie10 以上版本支持。 该属性用于在元素中添加，移除及切换 CSS 类。有以下方法</p><p>添加类：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>focus<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;current&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>移除类：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>focus<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;current&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换类：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>focus<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;current&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意以上方法里面，所有类名都不带点</p><h4 id="_2-2-click-延时解决方案" tabindex="-1"><a class="header-anchor" href="#_2-2-click-延时解决方案" aria-hidden="true">#</a> 2.2 click 延时解决方案</h4><p>移动端 <code>click</code> 事件会有 <code>300ms</code> 的延时，原因是移动端屏幕双击会缩放（double tap to zoom）页面。 解决方案：</p><h5 id="_1-禁用缩放" tabindex="-1"><a class="header-anchor" href="#_1-禁用缩放" aria-hidden="true">#</a> （1）禁用缩放</h5><p>浏览器禁用默认的双击缩放行为并且去掉300ms 的点击延迟。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;user-scalable=no&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-利用touch事件自己封装这个事件解决-300ms-延迟。" tabindex="-1"><a class="header-anchor" href="#_2-利用touch事件自己封装这个事件解决-300ms-延迟。" aria-hidden="true">#</a> （2）利用touch事件自己封装这个事件解决 <code>300ms</code> 延迟。</h5><p>原理就是：</p><ol><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕，用离开的时间减去触摸的时间</li><li>如果时间小于 <code>150ms</code>，并且没有滑动过屏幕，那么我们就定义为点击</li></ol><p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//封装tap，解决click 300ms 延时</span>
<span class="token keyword">function</span> <span class="token function">tap</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> isMove <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录触摸时候的时间变量</span>
  obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touchstart&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录触摸时间</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touchmove&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isMove <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;touchend&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果手指触摸和离开时间小于150ms 算点击</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMove <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行回调函数</span>
    <span class="token punctuation">}</span>
    isMove <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 取反重置</span>
    startTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//调用</span>
<span class="token function">tap</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 执行代码});</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-使用插件-fastclick" tabindex="-1"><a class="header-anchor" href="#_3-使用插件-fastclick" aria-hidden="true">#</a> （3）使用插件 fastclick</h5><p>使用 fastclick 插件解决300ms 延迟。官网：https://github.com/ftlabs/fastclick</p><ol><li>引入</li><li>按照文档说明使用</li></ol><p>例如，在原生 JS 中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;addEventListener&#39;</span> <span class="token keyword">in</span> document<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    FastClick<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、本地存储" tabindex="-1"><a class="header-anchor" href="#七、本地存储" aria-hidden="true">#</a> 七、本地存储</h2><h3 id="_1-本地存储概述" tabindex="-1"><a class="header-anchor" href="#_1-本地存储概述" aria-hidden="true">#</a> 1. 本地存储概述</h3><h4 id="_1-1-背景" tabindex="-1"><a class="header-anchor" href="#_1-1-背景" aria-hidden="true">#</a> 1.1 背景</h4><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经 常性在本地存储大量的数据，HTML5 规范提出了相关解决方案。</p><h4 id="_1-2-本地存储特性" tabindex="-1"><a class="header-anchor" href="#_1-2-本地存储特性" aria-hidden="true">#</a> 1.2 本地存储特性</h4><ul><li>数据存储在用户浏览器中</li><li>设置、读取方便、甚至页面刷新不丢失数据</li><li>容量较大，<code>sessionStorage</code> 约5M、<code>localStorage</code> 约20M</li><li>只能存储字符串，可以将对象 <code>JSON.stringify()</code> 编码后存储</li></ul><h3 id="_2-window-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_2-window-sessionstorage" aria-hidden="true">#</a> 2. window.sessionStorage</h3><h4 id="_2-1-特点" tabindex="-1"><a class="header-anchor" href="#_2-1-特点" aria-hidden="true">#</a> 2.1 特点</h4><ul><li>生命周期为 <strong>关闭浏览器窗口</strong></li><li>在同一个窗口（页面）下数据可以共享</li><li>以键值对的形式存储使用</li></ul><h4 id="_2-2-相关操作" tabindex="-1"><a class="header-anchor" href="#_2-2-相关操作" aria-hidden="true">#</a> 2.2 相关操作</h4><ol><li>存储数据：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>获取数据：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>删除数据：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>删除所有数据：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-window-localstorage" tabindex="-1"><a class="header-anchor" href="#_3-window-localstorage" aria-hidden="true">#</a> 3. window.localStorage</h3><h4 id="_3-1-特点" tabindex="-1"><a class="header-anchor" href="#_3-1-特点" aria-hidden="true">#</a> 3.1 特点</h4><ul><li>生命周期 <strong>永久生效</strong>，除非手动删除否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用</li></ul><h4 id="_3-2-相关操作" tabindex="-1"><a class="header-anchor" href="#_3-2-相关操作" aria-hidden="true">#</a> 3.2 相关操作</h4><ol><li>存储数据：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>获取数据：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>删除数据：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>loaclStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>删除所有数据：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-案例-记住用户名" tabindex="-1"><a class="header-anchor" href="#_4-案例-记住用户名" aria-hidden="true">#</a> 4. 案例：记住用户名</h3><h4 id="_4-1-分析" tabindex="-1"><a class="header-anchor" href="#_4-1-分析" aria-hidden="true">#</a> 4.1 分析</h4><p>如果勾选记住用户名，下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名。</p><ul><li>把数据存起来，用到本地存储</li><li>关闭页面，也可以显示用户名，所以用到 <code>localStorage</code></li><li>打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框</li><li>当复选框发生改变的时候 <code>change</code> 事件</li><li>如果勾选，就存储，否则就移除</li></ul><h4 id="_4-2-代码" tabindex="-1"><a class="header-anchor" href="#_4-2-代码" aria-hidden="true">#</a> 4.2 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> nameInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> remember <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#remember&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   nameInput<span class="token punctuation">.</span>value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   remember<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
remember<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>remember<span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> nameInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,635),i=[o];function p(c,l){return a(),s("div",null,i)}const u=n(t,[["render",p],["__file","2.WebApi（BOM和DOM）.html.vue"]]);export{u as default};
