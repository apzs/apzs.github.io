const a=JSON.parse('{"key":"v-7112cb52","path":"/back-base/2.Java%E6%A0%B8%E5%BF%83/07.%20%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92%E6%A1%88%E4%BE%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"7.等待与唤醒案例、线程池、Lambda表达式","lang":"zh-CN","frontmatter":{"title":"7.等待与唤醒案例、线程池、Lambda表达式","icon":"gears","order":7,"category":["后端"],"tag":["java","后端"],"description":"07. 等待与唤醒案例、线程池、Lambda表达式 主要内容 等待与唤醒案例 线程池 Lambda表达式 教学目标 -[ ] 能够理解线程通信概念 -[ ] 能够理解等待唤醒机制 -[ ] 能够描述Java中线程池运行原理 -[ ] 能够理解函数式编程相对于面向对象的优点 -[ ] 能够掌握Lambda表达式的标准格式 -[ ] 能够使用Lambda标准格式使用Runnable与Comparator接口 -[ ] 能够掌握Lambda表达式的省略格式与规则 -[ ] 能够使用Lambda省略格式使用Runnable与Comparator接口 -[ ] 能够通过Lambda的标准格式使用自定义的接口（有且仅有一个抽象方法） -[ ] 能够通过Lambda的省略格式使用自定义的接口（有且仅有一个抽象方法） -[ ] 能够明确Lambda的两项使用前提","head":[["meta",{"property":"og:url","content":"https://apzs.github.io/back-base/2.Java%E6%A0%B8%E5%BF%83/07.%20%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92%E6%A1%88%E4%BE%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"apzs"}],["meta",{"property":"og:title","content":"7.等待与唤醒案例、线程池、Lambda表达式"}],["meta",{"property":"og:description","content":"07. 等待与唤醒案例、线程池、Lambda表达式 主要内容 等待与唤醒案例 线程池 Lambda表达式 教学目标 -[ ] 能够理解线程通信概念 -[ ] 能够理解等待唤醒机制 -[ ] 能够描述Java中线程池运行原理 -[ ] 能够理解函数式编程相对于面向对象的优点 -[ ] 能够掌握Lambda表达式的标准格式 -[ ] 能够使用Lambda标准格式使用Runnable与Comparator接口 -[ ] 能够掌握Lambda表达式的省略格式与规则 -[ ] 能够使用Lambda省略格式使用Runnable与Comparator接口 -[ ] 能够通过Lambda的标准格式使用自定义的接口（有且仅有一个抽象方法） -[ ] 能够通过Lambda的省略格式使用自定义的接口（有且仅有一个抽象方法） -[ ] 能够明确Lambda的两项使用前提"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-10T13:06:08.000Z"}],["meta",{"property":"article:author","content":"apzs"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:modified_time","content":"2024-03-10T13:06:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.等待与唤醒案例、线程池、Lambda表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-10T13:06:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"apzs\\",\\"url\\":\\"https://apzs.eu.org\\"}]}"]]},"headers":[{"level":2,"title":"07. 等待与唤醒案例、线程池、Lambda表达式","slug":"_07-等待与唤醒案例、线程池、lambda表达式","link":"#_07-等待与唤醒案例、线程池、lambda表达式","children":[{"level":3,"title":"主要内容","slug":"主要内容","link":"#主要内容","children":[]},{"level":3,"title":"教学目标","slug":"教学目标","link":"#教学目标","children":[]}]},{"level":2,"title":"第一章 等待唤醒机制","slug":"第一章-等待唤醒机制","link":"#第一章-等待唤醒机制","children":[{"level":3,"title":"1.1 线程间通信","slug":"_1-1-线程间通信","link":"#_1-1-线程间通信","children":[]},{"level":3,"title":"1.2 等待唤醒机制","slug":"_1-2-等待唤醒机制","link":"#_1-2-等待唤醒机制","children":[]},{"level":3,"title":"1.3 生产者与消费者问题","slug":"_1-3-生产者与消费者问题","link":"#_1-3-生产者与消费者问题","children":[]}]},{"level":2,"title":"第二章 线程池","slug":"第二章-线程池","link":"#第二章-线程池","children":[{"level":3,"title":"2.1 线程池思想概述","slug":"_2-1-线程池思想概述","link":"#_2-1-线程池思想概述","children":[]},{"level":3,"title":"2.2 线程池概念","slug":"_2-2-线程池概念","link":"#_2-2-线程池概念","children":[]},{"level":3,"title":"2.3 线程池的使用","slug":"_2-3-线程池的使用","link":"#_2-3-线程池的使用","children":[]}]},{"level":2,"title":"第三章 Lambda表达式","slug":"第三章-lambda表达式","link":"#第三章-lambda表达式","children":[{"level":3,"title":"3.1 函数式编程思想概述","slug":"_3-1-函数式编程思想概述","link":"#_3-1-函数式编程思想概述","children":[]},{"level":3,"title":"3.2 冗余的Runnable代码","slug":"_3-2-冗余的runnable代码","link":"#_3-2-冗余的runnable代码","children":[]},{"level":3,"title":"3.3 编程思想转换","slug":"_3-3-编程思想转换","link":"#_3-3-编程思想转换","children":[]},{"level":3,"title":"3.4 体验Lambda的更优写法","slug":"_3-4-体验lambda的更优写法","link":"#_3-4-体验lambda的更优写法","children":[]},{"level":3,"title":"3.5 回顾匿名内部类","slug":"_3-5-回顾匿名内部类","link":"#_3-5-回顾匿名内部类","children":[]},{"level":3,"title":"3.6 Lambda标准格式","slug":"_3-6-lambda标准格式","link":"#_3-6-lambda标准格式","children":[]},{"level":3,"title":"3.7 练习：使用Lambda标准格式（无参无返回）","slug":"_3-7-练习-使用lambda标准格式-无参无返回","link":"#_3-7-练习-使用lambda标准格式-无参无返回","children":[]},{"level":3,"title":"3.8 Lambda的参数和返回值","slug":"_3-8-lambda的参数和返回值","link":"#_3-8-lambda的参数和返回值","children":[]},{"level":3,"title":"3.9 练习：使用Lambda标准格式（有参有返回）","slug":"_3-9-练习-使用lambda标准格式-有参有返回","link":"#_3-9-练习-使用lambda标准格式-有参有返回","children":[]},{"level":3,"title":"3.10 Lambda省略格式","slug":"_3-10-lambda省略格式","link":"#_3-10-lambda省略格式","children":[]},{"level":3,"title":"3.11 练习：使用Lambda省略格式","slug":"_3-11-练习-使用lambda省略格式","link":"#_3-11-练习-使用lambda省略格式","children":[]},{"level":3,"title":"3.12 Lambda的使用前提","slug":"_3-12-lambda的使用前提","link":"#_3-12-lambda的使用前提","children":[]}]}],"git":{"createdTime":1710049926000,"updatedTime":1710075968000,"contributors":[{"name":"zhaoshuo","email":"apzs@foxmaill.com","commits":2}]},"readingTime":{"minutes":20.4,"words":6120},"filePathRelative":"back-base/2.Java核心/07. 等待与唤醒案例、线程池、Lambda表达式.md","localizedDate":"2024年3月10日","excerpt":"<h2> 07. 等待与唤醒案例、线程池、Lambda表达式</h2>\\n<h3> 主要内容</h3>\\n<ul>\\n<li>等待与唤醒案例</li>\\n<li>线程池</li>\\n<li>Lambda表达式</li>\\n</ul>\\n<h3> 教学目标</h3>\\n<p>-[ ] 能够理解线程通信概念\\n-[ ] 能够理解等待唤醒机制\\n-[ ] 能够描述Java中线程池运行原理\\n-[ ] 能够理解函数式编程相对于面向对象的优点\\n-[ ] 能够掌握Lambda表达式的标准格式\\n-[ ] 能够使用Lambda标准格式使用Runnable与Comparator接口\\n-[ ] 能够掌握Lambda表达式的省略格式与规则\\n-[ ] 能够使用Lambda省略格式使用Runnable与Comparator接口\\n-[ ] 能够通过Lambda的标准格式使用自定义的接口（有且仅有一个抽象方法）\\n-[ ] 能够通过Lambda的省略格式使用自定义的接口（有且仅有一个抽象方法）\\n-[ ] 能够明确Lambda的两项使用前提</p>","autoDesc":true}');export{a as data};
