import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-YilgCgZO.js";const t={},p=e(`<h1 id="javascript-基础" tabindex="-1"><a class="header-anchor" href="#javascript-基础" aria-hidden="true">#</a> JavaScript 基础</h1><h2 id="一、初识js" tabindex="-1"><a class="header-anchor" href="#一、初识js" aria-hidden="true">#</a> 一、初识JS</h2><h3 id="_1-javascript历史" tabindex="-1"><a class="header-anchor" href="#_1-javascript历史" aria-hidden="true">#</a> 1. JavaScript历史</h3><p>布兰登艾奇（Brendan Eich， 1961年～）。 神奇的大哥在1995年利用10天完成JavaScript设计。 网景公司最初命名为LiveScript ，后来在与Sun合作之后将其改名为JavaScript.</p><h3 id="_2-javascript是什么" tabindex="-1"><a class="header-anchor" href="#_2-javascript是什么" aria-hidden="true">#</a> 2. JavaScript是什么</h3><p>lavaScript是世界上最流行的语言之一，是一种运行在客户端的脚本语言（Script是脚本的意思）脚本语言：不需要编译，运行过程中由js解释器（js引擎）逐行来进行解释并执行。 现在也可以基于Nodejs技术进行服务器端编程</p><h3 id="_3-javascript的作" tabindex="-1"><a class="header-anchor" href="#_3-javascript的作" aria-hidden="true">#</a> 3. JavaScript的作</h3><ul><li>表单动态校验（密码强度检测） （ JS产生最初的目的）</li><li>网页特效</li><li>服务端开发（Node.js）</li><li>桌面程序（Electron）</li><li>App(Cordova)</li><li>控制硬件—物联网（Ruff游戏F发(cocos2d-js)</li></ul><h3 id="_4-浏览器执行js简介" tabindex="-1"><a class="header-anchor" href="#_4-浏览器执行js简介" aria-hidden="true">#</a> 4. 浏览器执行JS简介</h3><p>浏览器分成两部分：<mark>渲染引擎和JS引擎</mark></p><ul><li>渲染引擎：用来解析HTML与CSS ，俗称内核，比如chrome浏览器的blink ，老版本的webkit</li><li>JS引擎：也称为JS解释器。用来读取网页中的JavaScript代码，对其处理后运行，比如chrome浏览器的V8</li></ul><p><mark>浏览器本身并不会执行JS代码，而是通过内置JavaScript引擎（解释器）来执行JS代码。JS引擎执行代码时逐行解释每一句源码（转换为机器语言） ，然后由计算机去执行，所以JavaScript语言归为脚本语言，会逐行解释执行。</mark></p><h3 id="_5-js三大组成" tabindex="-1"><a class="header-anchor" href="#_5-js三大组成" aria-hidden="true">#</a> 5. JS三大组成</h3><ul><li>ECMAScript</li><li>DOM</li><li>BOM</li></ul><h4 id="_5-1-ecmascript" tabindex="-1"><a class="header-anchor" href="#_5-1-ecmascript" aria-hidden="true">#</a> 5.1 ECMAScript</h4><p>ECMAScript是由ECMA国际（原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广 泛，它往往被称为JavaScript或JScript ，但实际上后两者是ECMAScript语言的实现和扩展。</p><p>ECMAScript</p><ul><li>lavaScript 网景公司</li><li>Jscript 微软公司</li></ul><p>ECMAScript ： <strong>ECMAScript规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</strong></p><h4 id="_5-2-dom—文档对象模型" tabindex="-1"><a class="header-anchor" href="#_5-2-dom—文档对象模型" aria-hidden="true">#</a> 5.2 DOM—文档对象模型</h4><p>文档对象模型（Document Object Model ，简称DOM ） ，是W3C组织推荐的处理可扩展标记语言的标准编程接口通过DOM提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p><h4 id="_5-3-bom—浏览器对象模型" tabindex="-1"><a class="header-anchor" href="#_5-3-bom—浏览器对象模型" aria-hidden="true">#</a> 5.3 BOM—浏览器对象模型</h4><p>浏览器对象模型 （Browser Object Model ，简称BOM）是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p><h3 id="_6-js-初体验" tabindex="-1"><a class="header-anchor" href="#_6-js-初体验" aria-hidden="true">#</a> 6. JS 初体验</h3><p>JS有3种书写位置，分别为行内、内嵌和外部</p><ol><li><p>行内式JS</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>click<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>可以将单行或少量JS代码写在HTML标签的事件属性中（以on开头的属性） ，如： onclick</li><li>注意单双引号的使用：在HEML中我们推荐使用双引号，JS中我们推荐使用单引号。</li><li>可读性差，在html中编写JS大量代码时，不方便阅读；引号易错，引号多层嵌套匹配时，非常容易弄混；</li><li>特殊情况下使用</li></ul></li><li><p>内嵌式</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>学习时常用。</p></li><li><p>外部JS文件</p></li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>newFile.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>利于HTML页面代码结构化，把大段JS代码独立到HTML页面之外，既美观，也方便文件级别的复用</li><li><mark>引用外部JS文件的script标签中间不可写代码</mark></li><li>适合于JS代码量比较大的情况</li></ul><h3 id="_7-js-注释" tabindex="-1"><a class="header-anchor" href="#_7-js-注释" aria-hidden="true">#</a> 7. JS 注释</h3><ul><li><p>单行注释：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单行注释</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>多行注释：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*
多行注释
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_8-js输入输出语句" tabindex="-1"><a class="header-anchor" href="#_8-js输入输出语句" aria-hidden="true">#</a> 8. JS输入输出语句</h3><ol><li>输入框</li></ol><p><code>prompt</code> 方法返回一个 <code>string</code> 类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的名字：&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>警示框</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>控制台打印</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是程序员能看到的。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、变量" tabindex="-1"><a class="header-anchor" href="#二、变量" aria-hidden="true">#</a> 二、变量</h2><h3 id="_1-变量的实质" tabindex="-1"><a class="header-anchor" href="#_1-变量的实质" aria-hidden="true">#</a> 1. 变量的实质</h3><p>变量是程序在内存中申请的一块用来存放数据的空间。</p><h3 id="_2-变量的声明" tabindex="-1"><a class="header-anchor" href="#_2-变量的声明" aria-hidden="true">#</a> 2. 变量的声明</h3><ol><li>声明变量</li><li>赋值</li></ol><h4 id="_2-1-声明变量" tabindex="-1"><a class="header-anchor" href="#_2-1-声明变量" aria-hidden="true">#</a> 2.1 声明变量</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明一个叫age的变量</span>
<span class="token keyword">var</span> age<span class="token punctuation">;</span>
<span class="token keyword">let</span> name<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>var</code> 是一个JS关键字，用来声明变量（variable变量的意思），使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</li><li><code>age</code> 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</li></ul><h3 id="_3-变量的初始化" tabindex="-1"><a class="header-anchor" href="#_3-变量的初始化" aria-hidden="true">#</a> 3. 变量的初始化</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化：声明并赋值</p><h3 id="_4-更新赋值" tabindex="-1"><a class="header-anchor" href="#_4-更新赋值" aria-hidden="true">#</a> 4. 更新赋值</h3><p>一个变量可以被重复赋值，变量值也会更新。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
age <span class="token operator">=</span> <span class="token number">81</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-同时声明多个变量" tabindex="-1"><a class="header-anchor" href="#_5-同时声明多个变量" aria-hidden="true">#</a> 5. 同时声明多个变量</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span>
    url <span class="token operator">=</span> <span class="token string">&#39;https://apzs.eu.org&#39;</span><span class="token punctuation">,</span>
    myname <span class="token operator">=</span> <span class="token string">&#39;MurphyChen&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-声明不赋值" tabindex="-1"><a class="header-anchor" href="#_6-声明不赋值" aria-hidden="true">#</a> 6. 声明不赋值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> sex<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-直接输出" tabindex="-1"><a class="header-anchor" href="#_7-直接输出" aria-hidden="true">#</a> 7. 直接输出</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-不声明直接赋值" tabindex="-1"><a class="header-anchor" href="#_8-不声明直接赋值" aria-hidden="true">#</a> 8. 不声明直接赋值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>qq <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qq<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 12345 全局变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-命名规范" tabindex="-1"><a class="header-anchor" href="#_9-命名规范" aria-hidden="true">#</a> 9. 命名规范</h3><ul><li>由字母（A—Za—z）、数字（0—9）、下划线（）、美元符号（5）组成，如： usrAge， num01， name</li><li>严格区分大小写。var app；和var App；是两个变量</li><li>不能以数字开头。18age是错误的</li><li>不能是关键字、保留字。例如： var， for， while</li><li>变量名必须有意义。MMD BBD nl— age</li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName推荐翻译网站：有道爱词霸</li><li>尽量不要使用 <code>name</code> 作为变量名</li></ul><h2 id="三、数据类型" tabindex="-1"><a class="header-anchor" href="#三、数据类型" aria-hidden="true">#</a> 三、数据类型</h2><h3 id="_1-数据类型概述" tabindex="-1"><a class="header-anchor" href="#_1-数据类型概述" aria-hidden="true">#</a> 1. 数据类型概述</h3><h4 id="_1-1-为什么需要数据类型" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么需要数据类型" aria-hidden="true">#</a> 1.1 为什么需要数据类型</h4><p>在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。</p><p>简单来说，数据类型就是数据的类别型号。比如姓名“张三” ，年龄18，这些数据的类型是不一样的。</p><h4 id="_1-2-变量的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-2-变量的数据类型" aria-hidden="true">#</a> 1.2 变量的数据类型</h4><p>变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。<mark>JavaScript是一种弱类型或者说动态语言</mark>。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">//这是一个数字型var arerouok =的； //这是一个字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码运行时，变量的数据类型是由JS引擎根据=右边变量值的数据类型来判断的，运行完毕之后，变量就确定了数据类型 JavaScript拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token comment">// x为数字</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&quot;Bill&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// x为字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-简单数据类型" tabindex="-1"><a class="header-anchor" href="#_2-简单数据类型" aria-hidden="true">#</a> 2. 简单数据类型</h3><h4 id="_2-1-简单数据类型-基本数据类型" tabindex="-1"><a class="header-anchor" href="#_2-1-简单数据类型-基本数据类型" aria-hidden="true">#</a> 2.1 简单数据类型（基本数据类型）</h4><p>JavaScript中的简单数据类型及其说明如下：</p><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整值和浮点值，如21、0.21</td><td><code>0</code></td></tr><tr><td>Boolean</td><td>布尔值类型，如true、 false，等价于1和0</td><td><code>false</code></td></tr><tr><td>String</td><td>字符串类型，如“张三”注意js 里面，字符串都带引号</td><td><code>&quot;&quot;</code></td></tr><tr><td>Undefined</td><td><code>var a;</code> 声明了变量a但是没有给值，此时a =undefined</td><td><code>undefined</code></td></tr><tr><td>Null</td><td><code>var a = null;</code> 声明了变量a为空值</td><td><code>null</code></td></tr></tbody></table><h4 id="_2-2-数字型-number" tabindex="-1"><a class="header-anchor" href="#_2-2-数字型-number" aria-hidden="true">#</a> 2.2 数字型 Number</h4><h5 id="_1-数字型进制" tabindex="-1"><a class="header-anchor" href="#_1-数字型进制" aria-hidden="true">#</a> 1. 数字型进制</h5><p>常见：二进制、八进制、十进制、十六进制</p><ul><li><code>0123</code>: <code>0</code> 开头表示八进制</li><li><code>0b11</code>: <code>0b</code> 开头表示二进制</li><li><code>0x11</code>: <code>0x</code> 开头表示十六进制</li><li>直接打印出来会转化为十进制</li></ul><h5 id="_2-数字型范围" tabindex="-1"><a class="header-anchor" href="#_2-数字型范围" aria-hidden="true">#</a> 2. 数字型范围</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-特殊值" tabindex="-1"><a class="header-anchor" href="#_3-特殊值" aria-hidden="true">#</a> 3. 特殊值</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Infinity</code>：无穷大</li><li><code>-Infinity</code>：无穷小</li><li><code>NaN</code>：Not a number，代表一个非数值。</li></ul><h5 id="_4-isnan" tabindex="-1"><a class="header-anchor" href="#_4-isnan" aria-hidden="true">#</a> 4. isNaN()</h5><p><code>isNaN</code> 方法用来判断一个变量和或者一个值是数字类型，若不是数字类型则返回 <code>true</code>；否则返回 <code>false</code>。</p><h4 id="_2-3-字符串型-string" tabindex="-1"><a class="header-anchor" href="#_2-3-字符串型-string" aria-hidden="true">#</a> 2.3 字符串型 String</h4><h5 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1. 定义</h5><p>字符长型可以是引号中的任意文本，其语法为双引号 <code>&quot;&quot;</code> 和单引号 <code>&#39;&#39;</code>。</p><h5 id="_2-字符串引号嵌套" tabindex="-1"><a class="header-anchor" href="#_2-字符串引号嵌套" aria-hidden="true">#</a> 2. 字符串引号嵌套</h5><p>JS可以用单引号嵌套双引号，或者用双引号嵌套单引号（外双内单，外单内双）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> strmsg<span class="token operator">=</span> <span class="token string">&#39;我是&quot;高帅富&quot;程序员&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> strmsg<span class="token operator">=</span> <span class="token string">&quot;我是&#39;高帅富&#39;程序员&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-字符串转义符" tabindex="-1"><a class="header-anchor" href="#_3-字符串转义符" aria-hidden="true">#</a> 3. 字符串转义符</h5><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符转义符都是\\开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td><code>\\n</code></td><td>换行符， n是 newline 的意思</td></tr><tr><td><code>\\\\</code></td><td>\\</td></tr><tr><td><code>\\&#39;</code></td><td>单引号&#39;</td></tr><tr><td><code>\\&quot;</code></td><td>双引号&quot;</td></tr><tr><td><code>\\t</code></td><td>tab 缩进</td></tr><tr><td><code>\\b</code></td><td>空格，b 是 blank 的意思</td></tr></tbody></table><h5 id="_4-获取字符串长度-length" tabindex="-1"><a class="header-anchor" href="#_4-获取字符串长度-length" aria-hidden="true">#</a> 4. 获取字符串长度 length</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-字符串拼接" tabindex="-1"><a class="header-anchor" href="#_4-字符串拼接" aria-hidden="true">#</a> 4. 字符串拼接</h5><p>多个字符串之间可以使用+进行拼接，其拼接方式为 <mark>字符串+任何类型=拼接之后的新字符串</mark> 拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p><h5 id="_5-字符串拼接加强" tabindex="-1"><a class="header-anchor" href="#_5-字符串拼接加强" aria-hidden="true">#</a> 5. 字符串拼接加强</h5><p>将字符串和变量相加，以后要更新最终的结果字符串，只需更新变量的值。</p><h4 id="_2-4-布尔型-boolean" tabindex="-1"><a class="header-anchor" href="#_2-4-布尔型-boolean" aria-hidden="true">#</a> 2.4 布尔型 Boolean</h4><ul><li>布尔型有两个值，<code>true</code> 和 <code>false</code></li><li>布尔型（<code>true</code>，<code>false</code>）在参与加法时当作 <code>1</code> 和 <code>0</code> 使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-undefined" tabindex="-1"><a class="header-anchor" href="#_2-5-undefined" aria-hidden="true">#</a> 2.5 Undefined</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefinedaaa</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-6-空值-null" tabindex="-1"><a class="header-anchor" href="#_2-6-空值-null" aria-hidden="true">#</a> 2.6 空值 Null</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nullaaa</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-获取变量数据类型" tabindex="-1"><a class="header-anchor" href="#_3-获取变量数据类型" aria-hidden="true">#</a> 3. 获取变量数据类型</h3><h4 id="_3-1-typeof-获取变量数据类型" tabindex="-1"><a class="header-anchor" href="#_3-1-typeof-获取变量数据类型" aria-hidden="true">#</a> 3.1 typeof 获取变量数据类型</h4><p><code>typeof variable</code> （<code>typeof(variable)</code>） 返回一个字符串，值为该变量的数据类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-字面量" tabindex="-1"><a class="header-anchor" href="#_3-2-字面量" aria-hidden="true">#</a> 3.2 字面量</h4><p>字面量是在源代码中一个固定的表示法，通俗来说，就是字面量如何表达这个值。</p><ul><li>数字字面量：<code>1</code>、<code>0</code></li><li>字符串字面量：<code>mphy</code>、<code>aaa</code></li><li>布尔字面量：<code>true</code>、<code>false</code></li></ul><h3 id="_4-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_4-数据类型转换" aria-hidden="true">#</a> 4. 数据类型转换</h3><h4 id="_4-1-什么是数据类型转换" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是数据类型转换" aria-hidden="true">#</a> 4.1 什么是数据类型转换</h4><p>使用表单、prompt获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。 通俗来说，就是把一种数据类型的变量转换成另外一种数据类型 我们通常会实现3种方式的转换：</p><ul><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ul><h4 id="_4-2-转换成字符串的三种方法" tabindex="-1"><a class="header-anchor" href="#_4-2-转换成字符串的三种方法" aria-hidden="true">#</a> 4.2 转换成字符串的三种方法</h4><p>一般用第三种方式，隐式转换。</p><ul><li><code>toString()</code> 方法</li><li><code>String()</code> 方法</li><li>加号 <code>+</code> 拼接字符串</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引申：数字字符长转数字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">-</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-转换为数字型" tabindex="-1"><a class="header-anchor" href="#_4-3-转换为数字型" aria-hidden="true">#</a> 4.3 转换为数字型</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><code>parseInt(str)</code> 函数</td><td>string-&gt;整数型</td><td>parseInt(&#39;10&#39;)</td></tr><tr><td><code>parseFloat()</code> 函数</td><td>string-&gt;浮点型</td><td>parseFloat(&#39;3.14&#39;)</td></tr><tr><td><code>Number()</code> 强转换函数</td><td>string-&gt;数字型</td><td>Number(&#39;12&#39;)</td></tr><tr><td>JS 隐式转换</td><td>算术运算符隐式转换为数字型</td><td><code>&#39;12&#39;- 0</code> 或 <code>&#39;12&#39; - &#39;&#39;</code> 或 <code>&#39;12&#39;*1</code></td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;3.14&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span> <span class="token operator">-</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;999&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 999</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;3.14159&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;120px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 120</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;100.32&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100.32</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span> <span class="token operator">-</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>数字字符串（<code>&#39;12.3&#39;</code>，<code>12</code>）之间进行加法运算实际上是字符串的拼接，结果还是字符串；而数字字符串之间的减法运算是算术运算，结果是数字型。</li><li>一个数字字符长和一个数字相乘，结果是算数运算结果，为数字型。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 102</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">-</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;3.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 103.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">-</span> <span class="token string">&#39;3.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6.8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 36</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-转换为布尔型" tabindex="-1"><a class="header-anchor" href="#_4-4-转换为布尔型" aria-hidden="true">#</a> 4.4 转换为布尔型</h4><p>使用 <code>Boolean()</code> 函数转换。</p><ul><li>转换值为 <code>false</code>：<code>&#39;&#39;</code>, <code>0</code>, <code>NaN</code>, <code>null</code>, <code>undefined</code>（5个）</li><li>其他的转换值均为 <code>true</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-标识符、关键字、保留字" tabindex="-1"><a class="header-anchor" href="#_5-标识符、关键字、保留字" aria-hidden="true">#</a> 5. 标识符、关键字、保留字</h3><h4 id="_5-1-标识符" tabindex="-1"><a class="header-anchor" href="#_5-1-标识符" aria-hidden="true">#</a> 5.1 标识符</h4><p>标识（zhi）符：就是指开发人员为变量、属性、函数、参数取的名字。标识符不能是关键字或保留字。</p><h4 id="_5-2-关键字" tabindex="-1"><a class="header-anchor" href="#_5-2-关键字" aria-hidden="true">#</a> 5.2 关键字</h4><p>关键字：是指JS本身已经使用了的字，不能再用它们充当变量名、方法名。</p><p>包括: break, case, catch, continue, default, delete, do, else, finally. for, function, if, in instanceof, new. return, switch, this, throw, try, typeof, var, void, while, with等。</p><h4 id="_5-3-保留字" tabindex="-1"><a class="header-anchor" href="#_5-3-保留字" aria-hidden="true">#</a> 5.3 保留字</h4><p>保留字：实际上就是预留的“关键字” ，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p><p>包括: boolean, byte, char, class, const, debugger, double, enum, export, extends fimal, float. goto, implements, import, int, interface, long, mative, package private, protected, public, short, static, super, synchronized, throws, transient volatile等。</p><h3 id="_6-拓展-8-种基本数据类型" tabindex="-1"><a class="header-anchor" href="#_6-拓展-8-种基本数据类型" aria-hidden="true">#</a> 6. 拓展：8 种基本数据类型</h3><p>8 种基本数据类型中，前 7 种为基本数据类型，最后 1 种为复杂数据类型（<code>object</code>）。</p><ul><li><code>number</code>：用于任何类型的数字：整数或浮点数，在 \\pm(2^{53}-1)±(253−1) 范围内的整数。</li><li><code>bigint</code>：用于任意长的整数。</li><li><code>string</code>：字符串，一个字符串可以包含 0 个或多个字符，没有单独的单字符类型。</li><li><code>boolean</code>：值为 <code>true</code> 或 <code>false</code></li><li><code>null</code>：未知的值，只有一个 <code>null</code> 值的独立类型。</li><li><code>undefined</code>：未定义得值，只有一个 <code>undefined</code> 值的独立类型。</li><li><code>symbol</code>：用于唯一的标识符。</li><li><code>object</code>：用于更复杂的数据结构。</li></ul><p>使用 <code>typeof</code> 运算符查看变量的数据类型：</p><ul><li>两种形式：<code>typeof x</code> 或 <code>typeof(x)</code></li><li>以字符串的形式返回类型名称：例如 <code>string</code></li><li><code>typeof null</code> 会返回 <code>&quot;object&quot;</code> —— 这是 JavaScript 编程语言的一个错误，实际上它并不是一个 <code>object</code>。</li></ul><h2 id="四、js-运算符" tabindex="-1"><a class="header-anchor" href="#四、js-运算符" aria-hidden="true">#</a> 四、JS 运算符</h2><p>运算符（ operator ）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。 JavaScript常用的运算符有：</p><ul><li>算术运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h3 id="_1-算数运算符" tabindex="-1"><a class="header-anchor" href="#_1-算数运算符" aria-hidden="true">#</a> 1. 算数运算符</h3><ul><li><code>+</code></li><li><code>-</code></li><li><code>*</code></li><li><code>/</code></li><li><code>%</code></li></ul><h4 id="_1-1-浮点数的精度问题" tabindex="-1"><a class="header-anchor" href="#_1-1-浮点数的精度问题" aria-hidden="true">#</a> 1.1 浮点数的精度问题</h4><p>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span><span class="token number">0.1</span><span class="token operator">+</span><span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment">//结果不是0.3,而是: 0.30000000000000004 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.07</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果不是7， 而是： 7.000000000000001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ol><li>JS 中不要直接用浮点数之间进行运算，会产生精度误差。</li><li>不要直接拿两个浮点数进行比较！</li></ol><h4 id="_1-2-表达式和返回值" tabindex="-1"><a class="header-anchor" href="#_1-2-表达式和返回值" aria-hidden="true">#</a> 1.2 表达式和返回值</h4><p>表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合 简单理解：是由数字、运算符、变量等组成的式子</p><p><mark>表达式最终都会有一个结果，返回给我们，我们成为返回值</mark></p><h3 id="_2-递增递减运算符" tabindex="-1"><a class="header-anchor" href="#_2-递增递减运算符" aria-hidden="true">#</a> 2. 递增递减运算符</h3><h4 id="_2-1-递增和递减运算符概述" tabindex="-1"><a class="header-anchor" href="#_2-1-递增和递减运算符概述" aria-hidden="true">#</a> 2.1 递增和递减运算符概述</h4><p>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（-- ）运算符来完成。 在JavaScript 中，递增（++）和递减（-- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，</p><p>我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。</p><p>注意：递增和递减运算符必须和变量配合使用。</p><ul><li>后置递增运算符 <code>i++</code></li><li>前置递增运算符 <code>++i</code></li><li>后置递减运算符 <code>i--</code></li><li>前置递减运算符 <code>--i</code></li></ul><h4 id="_2-2-前置递增和后置递增小结" tabindex="-1"><a class="header-anchor" href="#_2-2-前置递增和后置递增小结" aria-hidden="true">#</a> 2.2 前置递增和后置递增小结</h4><ul><li>前置递增和后置递增运算符可以简化代码的编写，让变量的值+ 1 比以前写法更简单</li><li>单独使用时，运行结果相同</li><li>与其他代码联用时，执行结果会不同</li><li>后置：先原值运算，后自加（先人后己）</li><li>前置：先自加，后运算（先已后人）</li><li>开发时，大多使用后置递增/减，并且代码独占一行，例如：num++; 或者num--;</li></ul><h3 id="_3-比较运算符" tabindex="-1"><a class="header-anchor" href="#_3-比较运算符" aria-hidden="true">#</a> 3. 比较运算符</h3><h4 id="_3-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-概述" aria-hidden="true">#</a> 3.1 概述</h4><p>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值 （true / false）作为比较运算的结果。</p><table><thead><tr><th>比较运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;=</code></td><td>大于或等于</td></tr><tr><td><code>&gt;=</code></td><td>小于或等于</td></tr><tr><td><code>==</code></td><td>判等于</td></tr><tr><td><code>!=</code></td><td>判不等</td></tr><tr><td><code>===</code></td><td>全等于。要求值和数据类型均一致，则返回 <code>true</code></td></tr><tr><td><code>!==</code></td><td>全不等于。要求值和数据类型至少一个不一致，则返回 <code>true</code></td></tr></tbody></table><h4 id="_3-2-关于-与" tabindex="-1"><a class="header-anchor" href="#_3-2-关于-与" aria-hidden="true">#</a> 3.2 关于 == 与 ===</h4><h5 id="_3-2-1-区别" tabindex="-1"><a class="header-anchor" href="#_3-2-1-区别" aria-hidden="true">#</a> 3.2.1. 区别</h5><p>需要注意的是 <code>==</code> 和 <code>===</code> 的区别。</p><ul><li><code>==</code> 比较的时候只判断值，因为会进行隐式转换。值相等则返回 <code>true</code></li><li><code>===</code> 比较判断的时同时需要值相等和类型相同，两者均满足则返回 <code>true</code></li></ul><h5 id="_3-2-2-规律" tabindex="-1"><a class="header-anchor" href="#_3-2-2-规律" aria-hidden="true">#</a> 3.2.2 规律</h5><p>结合以下例子体会。</p><ul><li><code>&#39;&#39;</code>、<code>0</code>、<code>false</code> 之间（或 <code>&#39;1&#39;</code>、<code>1</code>、<code>true</code>之间）进行 <code>==</code> 比较的结果为 <code>true</code></li><li><code>NaN</code> 与其他任何数据类型之间 <code>==</code> 比较结果为 <code>false</code></li><li><code>null</code> 只有在和自身以及 <code>undefined</code> 之间 <code>==</code> 比较时结果为 <code>true</code></li><li><code>undefined</code> 只有在和自身以及 <code>null</code> 之间 <code>==</code> 比较时结果为 <code>true</code></li><li>数字和数字字符串的值相等，则 <code>==</code> 比较的结果为 <code>true</code></li><li>以上这些例子在全等比较 <code>===</code> 下的结果均为 <code>false</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;18&#39;</span> <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// truw</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// truw</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;NaN与其他值比较:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;null与其他值：&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;undefined与其他值比较:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_4-逻辑运算符" aria-hidden="true">#</a> 4. 逻辑运算符</h3><h4 id="_4-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-1-概述" aria-hidden="true">#</a> 4.1 概述</h4><ul><li>逻辑与 <code>&amp;&amp;</code></li><li>逻辑或 <code>||</code></li><li>逻辑非 <code>!</code></li></ul><h4 id="_4-2-逻辑中断-短路操作" tabindex="-1"><a class="header-anchor" href="#_4-2-逻辑中断-短路操作" aria-hidden="true">#</a> 4.2 逻辑中断（短路操作）</h4><p>原理：多个表达式进行逻辑运算，当左边的表达式值可以确定最终结果时，不再继续运算右边其余的表达式。</p><h5 id="_4-2-1-逻辑与" tabindex="-1"><a class="header-anchor" href="#_4-2-1-逻辑与" aria-hidden="true">#</a> 4.2.1 逻辑与 &amp;&amp;</h5><ul><li>语法：<code>expr1 &amp;&amp; expr2 &amp;&amp; ...</code></li><li>若 <code>expr1</code> 为真，则返回 <code>expr2</code></li><li>若 <code>expr1</code> 为假，则返回 <code>expr1</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 456</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-2-逻辑或" tabindex="-1"><a class="header-anchor" href="#_4-2-2-逻辑或" aria-hidden="true">#</a> 4.2.2 逻辑或 ||</h5><ul><li>语法：<code>expr1 || expr2 || ...</code></li><li>若 <code>expr1</code> 为假，则返回 <code>expr2</code></li><li>若 <code>expr1</code> 为真，则返回 <code>expr1</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span>  <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_5-赋值运算符" aria-hidden="true">#</a> 5. 赋值运算符</h3><ul><li><code>+=</code></li><li><code>-=</code></li><li><code>*=</code></li><li><code>/=</code></li></ul><h3 id="_6-拓展-js特殊运算符" tabindex="-1"><a class="header-anchor" href="#_6-拓展-js特殊运算符" aria-hidden="true">#</a> 6. 拓展：JS特殊运算符</h3><h4 id="_6-1-数字转化-单目运算符" tabindex="-1"><a class="header-anchor" href="#_6-1-数字转化-单目运算符" aria-hidden="true">#</a> 6.1 数字转化：单目运算符 <code>+</code></h4><p>单目运算符 <code>+</code> 作用于数字无效，结果不变。但是可以用来转化非数字类型为数字，等效于 <code>Number()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token string">&quot;123.4&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于非数字型之间的数学运算，很简洁：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;12&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;24&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>a <span class="token operator">+</span> <span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 36</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-逗号运算符" tabindex="-1"><a class="header-anchor" href="#_6-2-逗号运算符" aria-hidden="true">#</a> 6.2 逗号运算符 <code>,</code></h4><p>逗号运算符能让我们处理多个语句，使用 <code>,</code> 将它们分开。每个语句都运行了，<strong>但是只有最后的语句的结果会被返回</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-布尔值转换符" tabindex="-1"><a class="header-anchor" href="#_6-3-布尔值转换符" aria-hidden="true">#</a> 6.3 布尔值转换符 <code>!!</code></h4><p>两个相邻的非逻辑运算符组成的 <code>!!</code>，可以将一个值转换为对应的布尔值。等效于 <code>Boolean()</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-空值合并运算符" tabindex="-1"><a class="header-anchor" href="#_6-4-空值合并运算符" aria-hidden="true">#</a> 6.4 空值合并运算符 <code>??</code></h4><p>我们将值既不是 <code>null</code> 也不是 <code>undefined</code> 的表达式定义为已定义的值（defined）。即：<code>??</code>。</p><p><code>a ?? b</code> 结果为：</p><ul><li>若 <code>a</code> 已定义，则结果为 <code>a</code></li><li>若 <code>a</code> 不是已定义的，则结果为 <code>b</code></li></ul><p>等价于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>a <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="五、流程控制" tabindex="-1"><a class="header-anchor" href="#五、流程控制" aria-hidden="true">#</a> 五、流程控制</h2><ul><li>顺序结构</li><li>选择分支结构</li><li>循环结构</li></ul><h3 id="_1-顺序结构" tabindex="-1"><a class="header-anchor" href="#_1-顺序结构" aria-hidden="true">#</a> 1. 顺序结构</h3><h3 id="_2-选择结构" tabindex="-1"><a class="header-anchor" href="#_2-选择结构" aria-hidden="true">#</a> 2. 选择结构</h3><ul><li><code>if-else</code></li><li><code>if-else if-else</code></li><li><code>switch-case</code></li></ul><h4 id="_2-1-if-else" tabindex="-1"><a class="header-anchor" href="#_2-1-if-else" aria-hidden="true">#</a> 2.1 if-else</h4><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
   statement1
<span class="token punctuation">[</span><span class="token keyword">else</span>
   statement2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-if-else-if-else" tabindex="-1"><a class="header-anchor" href="#_2-2-if-else-if-else" aria-hidden="true">#</a> 2.2 if-else if-else</h4><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span>
  statement1
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span>
  statement2
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition3<span class="token punctuation">)</span>
  statement3
<span class="token operator">...</span>
<span class="token keyword">else</span>
  statementN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-switch-case" tabindex="-1"><a class="header-anchor" href="#_2-3-switch-case" aria-hidden="true">#</a> 2.3 switch-case</h4><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>
    <span class="token comment">//Statements executed when the</span>
    <span class="token comment">//result of expression matches value1</span>
    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
  <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span>
    <span class="token comment">//Statements executed when the</span>
    <span class="token comment">//result of expression matches value2</span>
    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
  <span class="token operator">...</span>
  <span class="token keyword">case</span> <span class="token literal-property property">valueN</span><span class="token operator">:</span>
    <span class="token comment">//Statements executed when the</span>
    <span class="token comment">//result of expression matches valueN</span>
    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span>
  <span class="token punctuation">[</span><span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token comment">//Statements executed when none of</span>
    <span class="token comment">//the values match the value of the expression</span>
    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-循环" tabindex="-1"><a class="header-anchor" href="#_3-循环" aria-hidden="true">#</a> 3. 循环</h3><h4 id="_3-1-概述-1" tabindex="-1"><a class="header-anchor" href="#_3-1-概述-1" aria-hidden="true">#</a> 3.1 概述</h4><ul><li><code>for</code></li><li><code>while</code></li><li><code>do...while</code></li><li><code>label</code></li><li><code>for...in</code></li><li><code>for...of</code></li></ul><h4 id="_3-2-for-循环" tabindex="-1"><a class="header-anchor" href="#_3-2-for-循环" aria-hidden="true">#</a> 3.2 for 循环</h4><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>initExpr<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>condExpr<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>incExpr<span class="token punctuation">]</span><span class="token punctuation">)</span>
    statement
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>initExpr: 变量初始化</li><li>condExpr: 循环条件</li><li>incExpr：增量表达式</li></ul><p>例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> step <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> step<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Runs 5 times, with values of step 0 through 4.</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Walking east one step&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-while-循环" tabindex="-1"><a class="header-anchor" href="#_3-3-while-循环" aria-hidden="true">#</a> 3.3 while 循环</h4><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> 
    statement
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n<span class="token operator">++</span><span class="token punctuation">;</span>
    x <span class="token operator">+=</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-do-while" tabindex="-1"><a class="header-anchor" href="#_3-4-do-while" aria-hidden="true">#</a> 3.4 do...while</h4><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">do</span> 
    statement
<span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-5-label" tabindex="-1"><a class="header-anchor" href="#_3-5-label" aria-hidden="true">#</a> 3.5 label</h4><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">label</span><span class="token operator">:</span>
statement
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>label</code>: 任何不属于保留关键字的 JavaScript 标识符。</li><li><code>statement</code>: JS 语句。</li></ul><p>说明：</p><p>可使用一个标签来唯一标记一个循环，然后使用 break 或 continue 语句来指示程序是否中断循环或继续执行。</p><p>需要注意的是，JavaScript 没有 goto 语句，<mark>标记只能和 break 或 continue 一起使用。</mark></p><p>在严格模式中，你不能使用 “let” 作为标签名称。它会抛出一个 SyntaxError（因为 let 是一个保留的标识符）。</p><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token literal-property property">aLoop</span><span class="token operator">:</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span> aLoop<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    str <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0134</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-6-break-与-continue" tabindex="-1"><a class="header-anchor" href="#_3-6-break-与-continue" aria-hidden="true">#</a> 3.6 break 与 continue</h4><ul><li><code>break</code>：跳出当前循环，不再进行当前循环。</li><li><code>continue</code>：跳过本轮循环，进行当前循环的下一轮。</li><li><code>break</code> 与 <code>continue</code> 均可配合 <code>label</code> 语句使用来跳转循环。</li></ul><h4 id="_3-7-for-in" tabindex="-1"><a class="header-anchor" href="#_3-7-for-in" aria-hidden="true">#</a> 3.7 for...in</h4><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>variable <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//statements</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li><code>for...in</code> 语句用于对数组或者对象的属性进行循环操作。</li><li><code>for ... in</code> 循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-8-for-of" tabindex="-1"><a class="header-anchor" href="#_3-8-for-of" aria-hidden="true">#</a> 3.8 for...of</h4><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>variable <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//statements</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> iterable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-chrome-代码调试" tabindex="-1"><a class="header-anchor" href="#_4-chrome-代码调试" aria-hidden="true">#</a> 4. chrome 代码调试</h3><ul><li>断点调试：断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</li><li>断点调试可以帮我们观察程序的运行过程</li><li>浏览器中按F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</li><li>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。</li><li>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</li><li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，</li><li>知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li><li>今天学的代码调试非常的简单，只要求同学们记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。</li></ul><h2 id="六、函数" tabindex="-1"><a class="header-anchor" href="#六、函数" aria-hidden="true">#</a> 六、函数</h2><h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h3><p>函数：就是封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的重复使用。 封装：把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。</p><h3 id="_2-函数的声明与调用" tabindex="-1"><a class="header-anchor" href="#_2-函数的声明与调用" aria-hidden="true">#</a> 2. 函数的声明与调用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
<span class="token keyword">function</span> <span class="token function">funcName</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// function statements</span>
<span class="token punctuation">}</span>
<span class="token function">funcName</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-形参与实参" tabindex="-1"><a class="header-anchor" href="#_3-形参与实参" aria-hidden="true">#</a> 3. 形参与实参</h3><p>声明时传入的为形参，调用时传入的为实参。</p><h3 id="_4-实参个数与形参个数不匹配的情况" tabindex="-1"><a class="header-anchor" href="#_4-实参个数与形参个数不匹配的情况" aria-hidden="true">#</a> 4. 实参个数与形参个数不匹配的情况</h3><table><thead><tr><th>参数个数</th><th>说明</th></tr></thead><tbody><tr><td>形参和实参个数相等</td><td>输出正确结果</td></tr><tr><td>实参个数多于形参</td><td>只取到形参的个数</td></tr><tr><td>实参个数少于形参</td><td>多的形参定义为undefined，结果为NaN</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 300, 形参和实参个数相等，输出正确结果</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 500, 实参个数多于形参，只取到形参的个数</span>
<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN, 实参个数少于形参，多的形参定义为undefined，结果为NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在JavaScript中，形参的默认值是 <code>undefined</code>。</p></blockquote><h3 id="_5-声明函数的三种方法" tabindex="-1"><a class="header-anchor" href="#_5-声明函数的三种方法" aria-hidden="true">#</a> 5. 声明函数的三种方法</h3><h4 id="_5-1-function-命令" tabindex="-1"><a class="header-anchor" href="#_5-1-function-命令" aria-hidden="true">#</a> 5.1 function 命令</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">funcName</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// function statements</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-函数表达式" tabindex="-1"><a class="header-anchor" href="#_5-2-函数表达式" aria-hidden="true">#</a> 5.2 函数表达式</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">funcName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// function statements</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-箭头函数" tabindex="-1"><a class="header-anchor" href="#_5-3-箭头函数" aria-hidden="true">#</a> 5.3 箭头函数 <code>=&gt;</code></h4><p>创建一个函数更加简洁的方式，有两种方式：</p><ul><li>不带花括号：<code>(...args) =&gt; expression</code>，计算表达式，直接返回。</li><li>带花括号：<code>(...args) =&gt; { bodu }</code>，可以编写多行多个语句，需要 <code>return</code> 语句返回。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-4-function-构造函数" tabindex="-1"><a class="header-anchor" href="#_5-4-function-构造函数" aria-hidden="true">#</a> 5.4 Function 构造函数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>
    <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">return</span> <span class="token string">&#39;x + y&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-注意" tabindex="-1"><a class="header-anchor" href="#_6-注意" aria-hidden="true">#</a> 6. 注意</h3><ul><li>函数未指定返回值则默认返回 <code>undefined</code></li></ul><h3 id="_7-arguments-的使用" tabindex="-1"><a class="header-anchor" href="#_7-arguments-的使用" aria-hidden="true">#</a> 7. arguments 的使用</h3><p><code>arguments</code> 是所有JS函数内置的对象，但也只有函数具有。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">callee</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">)</span><span class="token operator">:</span> ƒ<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数的 <code>arguments</code> 是一种伪数组：</p><ol><li>具有数组的 <code>length</code> 属性</li><li>按照索引方式进行存储</li><li>没有真正数组的一些方法 <code>pop()</code>、<code>push()</code></li></ol><h2 id="七、数组" tabindex="-1"><a class="header-anchor" href="#七、数组" aria-hidden="true">#</a> 七、数组</h2><h3 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念" aria-hidden="true">#</a> 1. 基本概念</h3><ul><li>JS 数组都是动态创建的，可以自由增加数组长度，这点不同于 C/C++。</li><li>一个 JS 数组内可以存放不同类型的元素，例如 <code>[&#39;abc&#39;, 1, true, undefined]</code>，这点也不同于 C/C++/Java。</li></ul><h3 id="_2-创建数组" tabindex="-1"><a class="header-anchor" href="#_2-创建数组" aria-hidden="true">#</a> 2. 创建数组</h3><h4 id="_2-1-数组字面量创建数组" tabindex="-1"><a class="header-anchor" href="#_2-1-数组字面量创建数组" aria-hidden="true">#</a> 2.1 数组字面量创建数组</h4><ul><li><p>创建空数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建一般数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_2-2-new-array-创建数组对象" tabindex="-1"><a class="header-anchor" href="#_2-2-new-array-创建数组对象" aria-hidden="true">#</a> 2.2 new Array 创建数组对象</h4><ol><li><p>创建空数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建指定长度的数组，有2个空数组元素</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建放有指定元素的数组（[2, 3]）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>一些示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr_0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>
<span class="token keyword">let</span> arr_3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [empty × 2]</span>
<span class="token keyword">let</span> arr_4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [empty × 2]</span>
<span class="token keyword">let</span> arr_5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_3-基本操作" tabindex="-1"><a class="header-anchor" href="#_3-基本操作" aria-hidden="true">#</a> 3. 基本操作</h3><ol><li><p>数组元素访问</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> e <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取数组长度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>数组遍历 方式一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数组逆转</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 反转数组</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 4, 3, 2, 1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_4-检测一个值是否为数组" tabindex="-1"><a class="header-anchor" href="#_4-检测一个值是否为数组" aria-hidden="true">#</a> 4. 检测一个值是否为数组</h3><h4 id="_4-1-instanceof" tabindex="-1"><a class="header-anchor" href="#_4-1-instanceof" aria-hidden="true">#</a> 4.1 instanceof</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">test</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-array-isarray" tabindex="-1"><a class="header-anchor" href="#_4-2-array-isarray" aria-hidden="true">#</a> 4.2 Array.isArray()</h4><p>Array.isArray() 方法用于检测一个值是否为数组。</p><h3 id="_5-添加删除数组元素的方法" tabindex="-1"><a class="header-anchor" href="#_5-添加删除数组元素的方法" aria-hidden="true">#</a> 5. 添加删除数组元素的方法</h3><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td><code>push(arg1,...)</code></td><td>末尾添加一个或多个元素</td><td>返回新的长度</td></tr><tr><td><code>pop()</code></td><td>删除数组最后一个元素，数组长度减 1，无参数，修改了原数组</td><td>返回所删除元素的值</td></tr><tr><td><code>unshift()</code></td><td>向数组的开头添加一个或多个元素，修改了原数组</td><td>返回新的长度</td></tr><tr><td><code>shift()</code></td><td>删除数组的第一个元素，数组长度减 1，无参数，修改了原数组</td><td>返回第一个元素的值</td></tr></tbody></table><h3 id="_6-数组排序" tabindex="-1"><a class="header-anchor" href="#_6-数组排序" aria-hidden="true">#</a> 6. 数组排序</h3><table><thead><tr><th>方法名</th><th>说明</th><th>是否修改原数组</th></tr></thead><tbody><tr><td><code>reverse()</code></td><td>颠倒数组中元素顺序，无参数</td><td>会改变原数组，返回新数组</td></tr><tr><td><code>sort()</code></td><td>对数组的元素进行排序</td><td>会改变原数组，返回新数组</td></tr></tbody></table><p><code>sort</code> 方法对数组进行原地排序，但是默认按照字典序排序。需要传入一个比较函数 <code>cmp(a, b)</code>，然后得到我们需要的排序效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 12, 17, 4, 9 ]</span>

<span class="token keyword">let</span> <span class="token function-variable function">cmp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>

arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 4, 9, 12, 17 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>let cmp = (a, b) =&gt; a - b;</code> 为升序，<code>b - a</code> 为降序。</p><h3 id="_7-数组索引方法" tabindex="-1"><a class="header-anchor" href="#_7-数组索引方法" aria-hidden="true">#</a> 7. 数组索引方法</h3><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td><code>indexOf()</code></td><td>数组中查找指定元素的 <strong>第一个索引</strong></td><td>若存在则返回索引号，否则返回 <code>-1</code></td></tr><tr><td><code>latsIndexOf()</code></td><td>查找指定元素在数组中的 <strong>最后一个的索引</strong></td><td>若存在则返回索引号，否则返回 <code>-1</code></td></tr></tbody></table><p><code>indexOf</code> 前面开始查找，<code>lastIndexOf</code> 从后面开始查找，但索引都是从前往后由 <code>0</code> 算起。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-数组去重" tabindex="-1"><a class="header-anchor" href="#_8-数组去重" aria-hidden="true">#</a> 8. 数组去重</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组去重</span>
<span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, 3, 4, 5 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-数组与字符串互转" tabindex="-1"><a class="header-anchor" href="#_9-数组与字符串互转" aria-hidden="true">#</a> 9. 数组与字符串互转</h3><h4 id="_9-1-数组转换为字符串" tabindex="-1"><a class="header-anchor" href="#_9-1-数组转换为字符串" aria-hidden="true">#</a> 9.1 数组转换为字符串</h4><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th><th>是否改变原数组</th></tr></thead><tbody><tr><td><code>toString()</code></td><td>将数组转换成字符串，逗号分隔每一个</td><td>返回一个字符串</td><td>不改变</td></tr><tr><td><code>join(&#39;分隔符&#39;)</code></td><td>把数组中的所有元素转换为一个字符串，以指定符号分割</td><td>返回一个字符串</td><td>不改变</td></tr></tbody></table><p>示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a,b,c,d,e</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abcde</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a-b-c-d-e</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-2-字符串转换为数组" tabindex="-1"><a class="header-anchor" href="#_9-2-字符串转换为数组" aria-hidden="true">#</a> 9.2 字符串转换为数组</h4><p>使用 <code>split()</code> 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;blue-green-pink-red&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;blue&#39;, &#39;green&#39;, &#39;pink&#39;, &#39;red&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-数组方法-splice" tabindex="-1"><a class="header-anchor" href="#_10-数组方法-splice" aria-hidden="true">#</a> 10. 数组方法 splice</h3><h2 id="八、作用域" tabindex="-1"><a class="header-anchor" href="#八、作用域" aria-hidden="true">#</a> 八、作用域</h2><h3 id="_1-作用域概述" tabindex="-1"><a class="header-anchor" href="#_1-作用域概述" aria-hidden="true">#</a> 1. 作用域概述</h3><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高 程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><h3 id="_2-全局变量" tabindex="-1"><a class="header-anchor" href="#_2-全局变量" aria-hidden="true">#</a> 2. 全局变量</h3><ul><li>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。</li><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下var声明的变量是全局变量。</li><li>特殊情况下，在函数内不使用var声明的变量也是全局变量（不建议使用）</li></ul><h3 id="_3-局部变量" tabindex="-1"><a class="header-anchor" href="#_3-局部变量" aria-hidden="true">#</a> 3. 局部变量</h3><p>在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）</p><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部var声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><h3 id="_4-全局变量与局部变量区别" tabindex="-1"><a class="header-anchor" href="#_4-全局变量与局部变量区别" aria-hidden="true">#</a> 4. 全局变量与局部变量区别</h3><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h3 id="_5-var、let、const" tabindex="-1"><a class="header-anchor" href="#_5-var、let、const" aria-hidden="true">#</a> 5. var、let、const</h3><p>ES6 以前，JS 没有块级作用域。ES6 新增 let 和 const 之后才有了块级作用域。 块级作用域是指用 <code>{}</code> 包括起来的一段代码，例如 if 、while 等等。 函数作用域就是指变量只在函数内部起作用。</p><ul><li>var 声明的是函数作用域的变量</li><li>let 声明的是块级作用域的变量</li><li>const 声明的是块级作用域的变量</li></ul><h3 id="_6-作用域链" tabindex="-1"><a class="header-anchor" href="#_6-作用域链" aria-hidden="true">#</a> 6. 作用域链</h3><ul><li>只要是代码，就至少有一个作用域</li><li>写在函数内部的局部作用域</li><li>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</li><li>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链</li></ul><h2 id="九、声明提升" tabindex="-1"><a class="header-anchor" href="#九、声明提升" aria-hidden="true">#</a> 九、声明提升</h2><ol><li>我们js引擎运行js分为两步： 预解析，代码执行 <ul><li>预解析js引擎会把js里面所有的var 还有function提升到当前作用域的最前面</li><li>代码执行 按照代码书写的顺序从上往下执行</li></ul></li><li>预解析分为变量预解析（变量提升） 和函数预解析（函数提升） <ul><li>变量提升就是把所有的变量声明提升到当前的作用域最前面 不提升赋值操作</li><li>函数提升就是把所有的函数声明提升到当前的作用域最前面，不调用操作</li></ul></li></ol><p>举例一</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>func();
var func = function () {
    console.log(&#39;hello&#39;);
}
// 出错，以上代码相当于：
var func;
func();
func = function () {
    console.log(&#39;hello&#39;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例二</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>f1()
console.log(c);
console.log(b);
console.log(a);
function f1() {
    var a = b = c = 9;
    console.log(a);
    console.log(b);
    console.log(c);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>function f1() {
    var a;
    c = 9;
    b = c;
    a = b;
    console.log(a);
    console.log(b);
    console.log(c); 
}
f1();
console.log(c);
console.log(b);
console.log(a);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>// answer
/*
9
9
9
9
9
error
*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十、对象" tabindex="-1"><a class="header-anchor" href="#十、对象" aria-hidden="true">#</a> 十、对象</h2><h3 id="_1-对象" tabindex="-1"><a class="header-anchor" href="#_1-对象" aria-hidden="true">#</a> 1. 对象</h3><h4 id="_1-1-什么是对象" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是对象" aria-hidden="true">#</a> 1.1 什么是对象？</h4><p>在JavaScript中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>对象是由属性和方法组成的。</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h4 id="_1-2-为什么需要对象" tabindex="-1"><a class="header-anchor" href="#_1-2-为什么需要对象" aria-hidden="true">#</a> 1.2 为什么需要对象？</h4><h3 id="_2-创建对象" tabindex="-1"><a class="header-anchor" href="#_2-创建对象" aria-hidden="true">#</a> 2. 创建对象</h3><ul><li>使用字面量创建对象</li><li>使用 <code>new Object</code> 创建对象</li><li>利用构造函数创建对象</li></ul><h4 id="_2-1-字面量创建" tabindex="-1"><a class="header-anchor" href="#_2-1-字面量创建" aria-hidden="true">#</a> 2.1 字面量创建</h4><p>使用 <code>{}</code> 创建，包含属性和方法，采用键值对表示，创建的对象称为对象字面量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">uname</span><span class="token operator">:</span> <span class="token string">&#39;MurphyChen&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;Hi<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-使用对象的属性和方法" tabindex="-1"><a class="header-anchor" href="#_2-2-使用对象的属性和方法" aria-hidden="true">#</a> 2.2 使用对象的属性和方法</h4><ol><li>调用对象的属性</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>
objectName<span class="token punctuation">.</span>attrName
<span class="token comment">// 方法二</span>
objectName<span class="token punctuation">[</span><span class="token string">&#39;attrName&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 不要忘记引号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>调用对象的方法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>objectName<span class="token punctuation">.</span><span class="token function">funcName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不要忘记括号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-3-使用-newobject-创建对象" tabindex="-1"><a class="header-anchor" href="#_2-3-使用-newobject-创建对象" aria-hidden="true">#</a> 2.3 使用 newObject 创建对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建空对象</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//添加属性</span>
obj<span class="token punctuation">.</span>uname <span class="token operator">=</span> <span class="token string">&#39;MurphyChen&#39;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hi!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-利用构造函数创建对象" tabindex="-1"><a class="header-anchor" href="#_2-4-利用构造函数创建对象" aria-hidden="true">#</a> 2.4 利用构造函数创建对象</h4><p>前两种创建对象的方法，每次都只能创建一个对象。但需要多个具有相同属性和方法的对象的时候，就需要使用构造函数来创建。</p><p>构造函数将相同的属性和方法封装在一个函数里。</p><p>构造函数语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义</span>
<span class="token keyword">function</span> <span class="token function">ConFuncName</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>attr <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">methods</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 调用</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConFuncName</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构造函数名单词首字母均大写</li><li>函数不需要返回值</li></ul><p>举例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> uname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">&#39;刘德华&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> zxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">&#39;张学友&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> ldh<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ldh<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 男</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 张学友</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="构造函数的实质" tabindex="-1"><a class="header-anchor" href="#构造函数的实质" aria-hidden="true">#</a> 构造函数的实质</h5><p><mark>构造函数相当于创建了一个抽象的类</mark>，使用关键字 <code>new</code> 创建一个对象的过程称为类的实例化，对象是具体的。</p><h5 id="new-关键字的执行过程" tabindex="-1"><a class="header-anchor" href="#new-关键字的执行过程" aria-hidden="true">#</a> new 关键字的执行过程</h5><ol><li>在内存中创建一个空的对象；</li><li><code>this</code> 指向这个空对象；</li><li>执行构造函数里面的代码，给空对象添加属性和方法；</li><li>返回此对象。</li></ol><h3 id="_3-遍历对象" tabindex="-1"><a class="header-anchor" href="#_3-遍历对象" aria-hidden="true">#</a> 3. 遍历对象</h3><p><code>for...in</code> 可以对数组和对象进行遍历。</p><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历属性名</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历属性值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一、内置对象" tabindex="-1"><a class="header-anchor" href="#十一、内置对象" aria-hidden="true">#</a> 十一、内置对象</h2><h3 id="_1-内置对象" tabindex="-1"><a class="header-anchor" href="#_1-内置对象" aria-hidden="true">#</a> 1. 内置对象</h3><ul><li>Javascript中的对象分为3种：自定义对象、内置对象、浏览器对象</li><li>前面两种对象是IS基础内容，属于ECMAScript ；第三个浏览器对象属于我们JS独有的，我们JS APl讲解</li><li><strong>内置对象就是指JS语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法）</strong></li></ul><h3 id="_2-数学对象-math" tabindex="-1"><a class="header-anchor" href="#_2-数学对象-math" aria-hidden="true">#</a> 2. 数学对象 Math</h3><h4 id="_2-1-math-的使用" tabindex="-1"><a class="header-anchor" href="#_2-1-math-的使用" aria-hidden="true">#</a> 2.1 Math 的使用</h4><p>查询 MDN 文档</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 89</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.141592653589793</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -Infinity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-自定义自己的-math-对象" tabindex="-1"><a class="header-anchor" href="#_2-1-自定义自己的-math-对象" aria-hidden="true">#</a> 2.1 自定义自己的 Math 对象</h4><p>我们可以自定义自己的对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myMath <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">PI</span><span class="token operator">:</span> <span class="token number">3.141592654</span><span class="token punctuation">,</span>
    <span class="token function-variable function">max</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> max <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            max <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max <span class="token operator">?</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> max<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">min</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> min <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            min <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min <span class="token operator">?</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> min<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> min<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-math-常用方法" tabindex="-1"><a class="header-anchor" href="#_2-3-math-常用方法" aria-hidden="true">#</a> 2.3 Math 常用方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token comment">// 圆周率</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 向下取整</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 向上取整</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 四舍五入，遇到  .5 往大了取</span>
Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 绝对值</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 最大值</span>
Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 最小值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token string">&#39;-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-math-random-随机数" tabindex="-1"><a class="header-anchor" href="#_2-4-math-random-随机数" aria-hidden="true">#</a> 2.4 Math.random 随机数</h4><p><code>Math.random</code> 方法返回一个位于区间 <code>[0, 1)</code> 的伪随机浮点数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.41713485547506424</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取闭区间 <code>[a, b]</code> 之间的整数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ran <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取前闭后开区间 <code>[a, b)</code> 之间的整数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ran <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例：定义自己的取整函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// [a, b)</span>
<span class="token keyword">function</span> <span class="token function">getRandom1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// [a, b]</span>
<span class="token keyword">function</span> <span class="token function">getRandom2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用：随机点名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&#39;Peter&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Murphy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Darcy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token function">getRandom2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> names<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-日期对象-date" tabindex="-1"><a class="header-anchor" href="#_3-日期对象-date" aria-hidden="true">#</a> 3. 日期对象 Date</h3><h4 id="_3-1-时间格式化" tabindex="-1"><a class="header-anchor" href="#_3-1-时间格式化" aria-hidden="true">#</a> 3.1 时间格式化</h4><p><code>Date</code> 对象是一个构造函数，需要使用 <code>new</code> 来创建日期对象（实例化）。</p><p>若没有参数，则默认返回当前系统的当前时间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若有参数，则返回参数里面的时间。 参数常用写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2021-03-15T05:39:52.204Z</span>
<span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2019-10-31T16:00:00.000Z</span>
<span class="token keyword">let</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2019-10-1 8:8:8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2019-10-01T00:08:08.000Z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般使用以下参数形式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2019-10-1 10:10:10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> date4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2019/10/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>常用返回日期格式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2021</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3，注意得到的月份要加 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例一：返回 <code>今天是 2021 年 3 月 15 日 周一</code> 的日期格式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> dates <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> days <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;日&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;一&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;二&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;四&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;五&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;六&#39;</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">今天是 c194a9eg&lt;!-- begin-inline-katex{year} 年 end-inline-katex--&gt;{month} 月 c194a9eg&lt;!-- begin-inline-katex{dates} 日 周end-inline-katex--&gt;{days[day]}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例二：输出时分秒 <code>15:06:09</code> 格式化时间串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> h<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">[</span>h<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> t <span class="token operator">:</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">[</span>h<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">check</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">check</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> h <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> m  <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span>s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-时间戳-获取1971年1月1日至今过去的毫秒数" tabindex="-1"><a class="header-anchor" href="#_3-2-时间戳-获取1971年1月1日至今过去的毫秒数" aria-hidden="true">#</a> 3.2 时间戳（获取1971年1月1日至今过去的毫秒数）</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. valueOf(), getTime()</span>
<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 推荐写法</span>
<span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. H5新增写法</span>
<span class="token keyword">let</span> date2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-字符串对象" tabindex="-1"><a class="header-anchor" href="#_4-字符串对象" aria-hidden="true">#</a> 4. 字符串对象</h3><h4 id="_4-1-基本包装类型" tabindex="-1"><a class="header-anchor" href="#_4-1-基本包装类型" aria-hidden="true">#</a> 4.1 基本包装类型</h4><ul><li>对象才有属性和方法</li><li>复杂数据类型才有属性和方法</li><li>那么为什么简单数据类型 <code>&#39;aaa&#39;</code> 有 <code>length</code> 属性呢？</li><li><strong>基本包装类型：把简单数据类型包装成复杂数据类型，这样基本数据类型也有了属性和方法</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 简单数据类型包装成复杂数据类型</span>
<span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 把临时变量赋值给 str</span>
str <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token comment">// 3. 销毁临时变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>三种基本包装类型： <code>String</code>、<code>Number</code>、<code>Boolean</code></li></ul><h4 id="_4-2-字符串的不可变" tabindex="-1"><a class="header-anchor" href="#_4-2-字符串的不可变" aria-hidden="true">#</a> 4.2 字符串的不可变</h4><p>指的是其值不变。虽然看上去是可以改变的，但其实是地址变了，内存中开辟了一个内存空间。</p><h4 id="_4-3-根据字符串返回位置" tabindex="-1"><a class="header-anchor" href="#_4-3-根据字符串返回位置" aria-hidden="true">#</a> 4.3 根据字符串返回位置</h4><p>语法 从 <code>start</code> 索引开始查找 <code>c</code> 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-4-根据位置返回字符" tabindex="-1"><a class="header-anchor" href="#_4-4-根据位置返回字符" aria-hidden="true">#</a> 4.4 根据位置返回字符</h4><ol><li><p>charAt()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>charCodeAt() 返回该位置的字符的 ASCII 值。一般用于判断用户按下了哪个键。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>str[index] H5 新增写法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h4 id="_4-5-拼接以及截取字符串" tabindex="-1"><a class="header-anchor" href="#_4-5-拼接以及截取字符串" aria-hidden="true">#</a> 4.5 拼接以及截取字符串</h4><ol><li><p>字符长拼接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取子串，[start, start+length]</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>切片，前闭后开：[start, end)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取子串，前闭后开：[start, end)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>Warning</p><p>警告： 尽管 <code>String.prototype.substr()</code> 没有严格被废弃 (as in &quot;removed from the Web standards&quot;), 但它被认作是遗留的函数并且可以的话应该避免使用。它并非JavaScript核心语言的一部分，未来将可能会被移除掉。如果可以的话，使用 <code>substring()</code> 替代它.</p><h4 id="_4-6-替换、转换为数组" tabindex="-1"><a class="header-anchor" href="#_4-6-替换、转换为数组" aria-hidden="true">#</a> 4.6 替换、转换为数组</h4><ul><li><p>替换</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>replace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>，只换一次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>转换为数组</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>split()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;red pink blue&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// [ &#39;red&#39;, &#39;pink&#39;, &#39;blue&#39; ]</span>
<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;red&amp;pink&amp;blue&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// [ &#39;red&#39;, &#39;pink&#39;, &#39;blue&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_4-7-查找某个字符出现的位置和次数" tabindex="-1"><a class="header-anchor" href="#_4-7-查找某个字符出现的位置和次数" aria-hidden="true">#</a> 4.7 查找某个字符出现的位置和次数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 查找某个字符出现的位置和次数</span>
<span class="token keyword">function</span> <span class="token function">findLocation</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> char</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> char<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span>loc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token function">findLocation</span><span class="token punctuation">(</span><span class="token string">&quot;abcaaadef&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>count<span class="token punctuation">,</span> ans<span class="token punctuation">.</span>loc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 [ 0, 3, 4, 5 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-8-统计出现次数最多的字符" tabindex="-1"><a class="header-anchor" href="#_4-8-统计出现次数最多的字符" aria-hidden="true">#</a> 4.8 统计出现次数最多的字符</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">findMost</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">in</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">in</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            temp <span class="token operator">=</span> res<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            ans <span class="token operator">=</span> k<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>ans<span class="token punctuation">,</span> temp<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMost</span><span class="token punctuation">(</span><span class="token string">&quot;abbcaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &#39;a&#39;, 4 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、json" tabindex="-1"><a class="header-anchor" href="#_5、json" aria-hidden="true">#</a> 5、JSON</h3><p><code>JSON.stringify</code>：序列化为json</p><blockquote><p><code>JSON.stringify</code>可以序列化可枚举的属性，如果属性值为undefined则不会序列化该属性，</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> weakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
weakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">clazz</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    b<span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 不被反序列化</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">NaN</span><span class="token punctuation">,</span>
    <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
    <span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">h</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 以下全部不被反序列化</span>
    <span class="token literal-property property">i</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 正则</span>
    <span class="token literal-property property">j</span><span class="token operator">:</span> array<span class="token punctuation">,</span>
    <span class="token literal-property property">k</span><span class="token operator">:</span> map<span class="token punctuation">,</span>
    <span class="token literal-property property">l</span><span class="token operator">:</span> weakMap<span class="token punctuation">,</span>
    <span class="token literal-property property">m</span><span class="token operator">:</span> set<span class="token punctuation">,</span>
    <span class="token literal-property property">n</span><span class="token operator">:</span> clazz<span class="token punctuation">,</span>
    <span class="token function-variable function">o</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 设置不可枚举（序列化的属性必须是可枚举的）</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置可枚举（序列化的属性必须是可枚举的）</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;q&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 结果： &#39;{&quot;a&quot;:1,&quot;c&quot;:null,&quot;d&quot;:null,&quot;e&quot;:null,&quot;f&quot;:true,&quot;g&quot;:[1,2,3,4],&quot;h&quot;:{&quot;a&quot;:1,&quot;b&quot;:2},&quot;i&quot;:{},&quot;j&quot;:[1],&quot;k&quot;:{},&quot;l&quot;:{},&quot;m&quot;:{},&quot;q&quot;:1}&#39;</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>JSON.parse</code>：反序列化为js对象</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JSON.parse(&#39;{&quot;a&quot;:1,&quot;c&quot;:null,&quot;d&quot;:null,&quot;e&quot;:null,&quot;f&quot;:true,&quot;g&quot;:[1,2,3,4],&quot;h&quot;:{&quot;a&quot;:1,&quot;b&quot;:2},&quot;i&quot;:{},&quot;j&quot;:[1],&quot;k&quot;:{},&quot;l&quot;:{},&quot;m&quot;:{},&quot;q&quot;:1}&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20240310191957420.png" alt="image-20240310191957420" tabindex="0" loading="lazy"><figcaption>image-20240310191957420</figcaption></figure><h2 id="十二、复杂类型" tabindex="-1"><a class="header-anchor" href="#十二、复杂类型" aria-hidden="true">#</a> 十二、复杂类型</h2><h3 id="_1-简单类型与复杂类型" tabindex="-1"><a class="header-anchor" href="#_1-简单类型与复杂类型" aria-hidden="true">#</a> 1. 简单类型与复杂类型</h3><p>简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型。</p><ul><li>值类型：简单数据/基本数据类型，在存储时变量中存的是值本身，因此叫做值类型。例如 string, number, boolean, undefined, null</li><li>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址（引用），因此叫做引用数据类型。通过 <code>new</code> 关键字创建的对象（系统对象、自定义对象），如 <code>Object</code>、<code>Date</code> 等。</li></ul><h3 id="_2-堆和栈" tabindex="-1"><a class="header-anchor" href="#_2-堆和栈" aria-hidden="true">#</a> 2. 堆和栈</h3><p>堆栈空间分配区别︰</p><ol><li>栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈； <mark>简单数据类型存放到栈里面</mark></li><li>堆（操作系统）︰存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。 <mark>复杂数据类型存放到堆里面</mark></li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/js1-17035168969751.png" alt="avatar" tabindex="0" loading="lazy"><figcaption>avatar</figcaption></figure><ul><li>简单数据类型 <code>null</code> 返回的是一个空对象：<code>Object</code>。若有一个变量打算存储为对象但是没想好放什么，就可以给 <code>null</code> 值。</li><li>简单数据类型是存放在栈里面，直接开辟空间存放值。</li><li>复杂数据类型，首先在栈里面存放地址（十六进制），然后在堆里面存放值。</li></ul><h3 id="_3-简单数据类型传参" tabindex="-1"><a class="header-anchor" href="#_3-简单数据类型传参" aria-hidden="true">#</a> 3. 简单数据类型传参</h3><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><h3 id="_4-复杂数据类型传参" tabindex="-1"><a class="header-anchor" href="#_4-复杂数据类型传参" aria-hidden="true">#</a> 4. 复杂数据类型传参</h3><p>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><h2 id="十三、异常处理" tabindex="-1"><a class="header-anchor" href="#十三、异常处理" aria-hidden="true">#</a> 十三、异常处理</h2><h3 id="_1-try-catch-finally" tabindex="-1"><a class="header-anchor" href="#_1-try-catch-finally" aria-hidden="true">#</a> 1. try/catch/finally</h3><p><code>try/catch/finally</code> 是 JavaScript 异常处理语句。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
   <span class="token comment">//调试代码块</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//捕获异常，并进行异常处理的代码块</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>
   <span class="token comment">//后期清理代码块</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在正常情况下，JavaScript 按顺序执行 <code>try</code> 子句中的代码，如果没有异常发生，将会忽略 <code>catch</code> 子句，跳转到 <code>finally</code> 子句中继续执行。</p><p>如果在 <code>try</code> 子句运行时发生错误，或者使用 throw 语句主动抛出异常，则执行 <code>catch</code> 子句中的代码，同时传入一个参数，引用 <code>Error</code> 对象。</p><p>不管 <code>try</code> 语句是否完全执行，<code>finally</code> 语句最后都必须要执行，即使使用了跳转语句跳出了异常处理结构，也必须在跳出之前先执行 <code>finally</code> 子句。</p><h3 id="_2-error" tabindex="-1"><a class="header-anchor" href="#_2-error" aria-hidden="true">#</a> 2. Error</h3><p>通过 <code>Error</code> 的构造器可以创建一个错误对象。当运行时错误产生时，<code>Error</code> 的实例对象会被抛出。<code>Error</code> 对象也可用于用户自定义的异常的基础对象。</p><p>创建自定义异常的语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>message</code>：可选。可阅读的错误描述信息。</li></ul><p>ECMA-262 规范了 7 种错误类型，具体说明如下。其中 <code>Error</code> 是基类，其他 6 种错误类型是子类，都继承 <code>Error</code> 基类。<code>Error</code> 类型的主要用途是自定义异常对象。 下面列出了各种内建的标准错误类型。</p><ul><li><code>Error</code>：普通异常。与 <code>throw</code> 语句和 <code>try/catch</code> 语句一起使用，属性 <code>name</code> 可以读写异常类型，<code>message</code> 属性可以读写详细错误信息。</li><li><code>EvalError</code>：不正确的使用 <code>eval()</code> 方法时抛出。</li><li><code>SyntaxError</code>：出现语法错误时抛出。</li><li><code>RangeError</code>：数字超出合法范围时抛出、</li><li><code>ReferenceError</code>：读取不存在的变量时抛出，无效引用。</li><li><code>TypeError</code>：变量或参数不属于有效类型。</li><li><code>URIError</code>：URI 编码和解码错误时抛出。例如，给 <code>encodeURI()</code> 或 <code>decodeURI()</code> 传递的参数无效。</li></ul><h3 id="_3-throw" tabindex="-1"><a class="header-anchor" href="#_3-throw" aria-hidden="true">#</a> 3. throw</h3><p><code>throw</code> 语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（<code>throw</code> 之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个 <code>catch</code> 块。如果调用者函数中没有 <code>catch</code> 块，程序将会终止。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before throw&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;This is a TypeError&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after throw&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这条语句不会执行</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
before throw
TypeError
This is a TypeError
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-关于嵌套的-try-块" tabindex="-1"><a class="header-anchor" href="#_4-关于嵌套的-try-块" aria-hidden="true">#</a> 4. 关于嵌套的 try 块</h3><p>任何给定的异常只会被离它最近的封闭 <code>catch</code> 块捕获一次。当然，在 “inner” 块抛出的任何新异常 （因为 <code>catch</code> 块里的代码也可以抛出异常），将会被 “outer” 块所捕获。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;oops&#39;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[inner] &#39;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[inner] finally&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[outer] &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
[inner] oops
[inner] finally
[outer] oops
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果从 <code>finally</code> 块中返回一个值，那么这个值将会成为整个 <code>try-catch-finally</code> 的返回值，无论是否有 <code>return</code> 语句在 <code>try</code> 和 <code>catch</code> 中。这包括在 <code>catch</code> 块里抛出的异常。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;oops&#39;</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[inner] &#39;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">throw</span> e<span class="token punctuation">;</span> <span class="token comment">// 这里抛出的异常被 return 语句给覆盖了，所以外层无法捕获</span>
   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[inner] finally&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[outer] &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法捕获内层抛出的异常</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;[outer] finally&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
[inner] oops
[inner] finally
[outer] finally
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,508),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","1.JS基础.html.vue"]]);export{d as default};
