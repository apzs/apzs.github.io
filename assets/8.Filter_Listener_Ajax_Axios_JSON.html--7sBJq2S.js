import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-db_OQQsY.js";const u={},i=p(`<h1 id="javaweb基础8——filter-listener-ajax-axios-json" tabindex="-1"><a class="header-anchor" href="#javaweb基础8——filter-listener-ajax-axios-json" aria-hidden="true">#</a> JavaWeb基础8——Filter,Listener,Ajax,Axios,JSON</h1><h2 id="_1-filter过滤器" tabindex="-1"><a class="header-anchor" href="#_1-filter过滤器" aria-hidden="true">#</a> 1，Filter过滤器</h2><h3 id="_1-1-filter概述" tabindex="-1"><a class="header-anchor" href="#_1-1-filter概述" aria-hidden="true">#</a> 1.1 Filter概述</h3><p>Filter 表示<strong>过滤器</strong>，是 **JavaWeb 三大组件(Servlet、Filter、Listener)**之一。</p><p>主要对配置的拦截路径页面进行拦截，先运行拦截页面代码，放行后再运行原页面，之后再回到Filter页面执行剩余代码。</p><p><strong>作用：</strong></p><p>过滤器可以把对资源的请求<strong>拦截</strong>下来，从而实现一些特殊的功能。</p><p>如下图所示，浏览器可以访问服务器上的所有的资源（servlet、jsp、html等）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/ba742901081348608c614b6c10afc457.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而在访问到这些资源之前可以使过滤器拦截来下，也就是说在访问资源之前会先经过 Filter，如下图</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/588abf5b0eaa4084a3eb2e6dd2a9f49b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>拦截器拦截到后可以做什么功能呢？</strong></p><p>过滤器一般完成一些通用的操作，比如<strong>权限控制、统一字符编码、敏感字符处理。</strong></p><p>当每个资源都要写一些代码完成某个功能时，为了实现代码复用，我们可以将这些代码写在过滤器中，因为请求每一个资源都要经过过滤器。</p><blockquote><p><strong>举例：</strong></p><p>比如进入商品展示页面，用户如果登陆过了就跳转到品牌数据展示的页面；如果没有登陆就跳转到登陆页面让用户进行登陆。</p><p>要实现这个效果需要在每一个资源中都写上这段逻辑，而像这种<strong>通用的操作</strong>，我们就可以放在过滤器中进行实现。</p><p>这个就是<strong>权限控制</strong>，以后我们还会进行<strong>细粒度权限控制</strong>。过滤器还可以做 <strong><code>统一编码处理</code>、 <code>敏感字符处理</code></strong> 等等…</p></blockquote><h3 id="_1-2-filter快速入门" tabindex="-1"><a class="header-anchor" href="#_1-2-filter快速入门" aria-hidden="true">#</a> 1.2 Filter快速入门</h3><h4 id="_1-2-1-开发步骤" tabindex="-1"><a class="header-anchor" href="#_1-2-1-开发步骤" aria-hidden="true">#</a> 1.2.1 开发步骤</h4><p>进行 <code>Filter</code> 开发分成以下三步实现</p><p><strong>1.定义类，实现 Filter接口</strong>，并重写其所有方法。<strong>注意</strong>导Filter包要选javax.servlet</p><p>**2.配置Filter拦截资源的路径：**在类上定义 <code>@WebFilter</code> 注解。而注解的 <code>value</code> 属性值 <code>/*</code> 表示拦截所有的资源</p><p><strong>3.在doFilter方法中输出</strong>一句话，并放行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">web<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span>
 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;filter demo...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述代码中的 <code>chain.doFilter(request,response);</code> 就是放行，也就是让其访问本该访问的资源。</p></blockquote><p>也可以快速创建，跟创建Servlet一样，要先在项目结构facet设置源根：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/b2315085f12d42a0832fba00da68e4d3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-2-2-代码演示" tabindex="-1"><a class="header-anchor" href="#_1-2-2-代码演示" aria-hidden="true">#</a> 1.2.2 代码演示</h4><p>创建一个项目，项目下有一个 <code>hello.jsp</code> 页面，项目结构如下：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/ed7c0538829a4a5d869bbe35374034ee.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>pom.xml</code> 配置文件内容如下：导入依赖Servlet、插件Tomcat</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>filter-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hello.jsp</code> 页面内容如下：</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;hello JSP~&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来编写过滤器。过滤器是 Web 三大组件之一，所以我们将 <code>filter</code> 创建在 <code>com.itheima.web.filter</code> 包下，起名为 <code>FilterDemo</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FilterDemo...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启启动服务器，再次重新访问 <code>hello.jsp</code> 页面，这次发现页面没有任何效果，但是在 <code>idea</code> 的控制台可以看到如下内容<img src="https://gitlab.com/apzs/image/-/raw/master/image/fa3175f611384a20ba98fc96bb86432e.png" alt="" loading="lazy"></p><p>上述效果说明 <code>FilterDemo</code> 这个过滤器的 <code>doFilter()</code> 方法执行了，但是没有放行，所以jsp页面是空白的。</p><p>必须在 <code>doFilter()</code> 方法中添加<strong>放行的方法</strong>才能访问到 <code>hello.jsp</code> 页面。</p><p><strong>放行的代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//放行</span>
chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再次重启服务器并访问 <code>hello.jsp</code> 页面，发现这次就可以在浏览器上看到页面效果。</p><p><strong><code>FilterDemo</code> 过滤器完整代码如下：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1.FilterDemo...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>放行后jsp页面就可以打开了。</p><h3 id="_1-2-5-登录拦截标准代码" tabindex="-1"><a class="header-anchor" href="#_1-2-5-登录拦截标准代码" aria-hidden="true">#</a> 1.2.5 登录拦截标准代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//坑点，路径是&quot;/*&quot;，别忘了*</span>
<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">&quot;loginCheckFilter&quot;</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginCheckFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">{</span>
    <span class="token comment">//路径匹配器，支持通配符，别忘了</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AntPathMatcher</span> <span class="token constant">PATH_MATCHER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">//0.要先把请求响应ServletXxx转成它的子接口HttpServletXxx，从而多了一些针对于Http协议的方法</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>
        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> servletResponse<span class="token punctuation">;</span>
 
        <span class="token comment">//1、获取本次请求的URI</span>
        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// /backend/index.html</span>
 
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;拦截到请求：{}&quot;</span><span class="token punctuation">,</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//定义不需要处理的请求路径，前端页面可以放行，只是除登录登出的后端拦截就行。</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                <span class="token string">&quot;/employee/login&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/employee/logout&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/backend/**&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;/front/**&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
 
        <span class="token comment">//2、判断本次请求是否需要处理</span>
        <span class="token keyword">boolean</span> check <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//3、如果不需要处理，则直接放行</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;本次请求{}不需要处理&quot;</span><span class="token punctuation">,</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
        <span class="token comment">//4、判断登录状态，如果已登录，则直接放行</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户已登录，用户id为：{}&quot;</span><span class="token punctuation">,</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户未登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</span>
        <span class="token comment">//必须错误信息NOTLOGIN，因为前端根据msg==“NOTLOGIN”和code==0判断未登录</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;NOTLOGIN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
 
    <span class="token punctuation">}</span>
 
    <span class="token doc-comment comment">/**
     * 路径匹配，检查本次请求是否需要放行
     * <span class="token keyword">@param</span> <span class="token parameter">urls</span>
     * <span class="token keyword">@param</span> <span class="token parameter">requestURI</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls<span class="token punctuation">,</span><span class="token class-name">String</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> url <span class="token operator">:</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//这里是坑点，不能用equals</span>
            <span class="token keyword">boolean</span> match <span class="token operator">=</span> <span class="token constant">PATH_MATCHER</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-filter执行流程" tabindex="-1"><a class="header-anchor" href="#_1-3-filter执行流程" aria-hidden="true">#</a> 1.3 Filter执行流程</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/736790a7cf834d008d32187f073e15a4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Filter的执行流程：</strong></p><p>放行会<strong>携带request资源</strong>访问对应资源，资源访问完成后， 会带着响应数据<strong>回到Filter</strong>中，<strong>继续执行</strong>下面的代码。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/23f8d520d4cb499986d8c723f26c2ac8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>回顾转发和重定向，1.转发执行后会继续执行转发语句下面的代码， 重定向是先执行完重定向前的所有代码，再跳转到新页面。</p><p>2.转发携带request资源，重定向不携带，想携带要用问号追加在链接后面实现参数携带。</p></blockquote><p><strong>代码验证</strong></p><p>接下来我们通过代码验证一下，在 <code>doFilter()</code> 方法前后都加上输出语句，如下<img src="https://gitlab.com/apzs/image/-/raw/master/image/456ed008a6814b3d81cbd7ea0e6ba7fb.png" alt="" loading="lazy"></p><p>同时在 <code>hello.jsp</code> 页面加上输出语句，如下<img src="https://gitlab.com/apzs/image/-/raw/master/image/025bef268d9c4b2db65dbec17e9abf8f.png" alt="" loading="lazy"></p><p>执行访问该资源打印的顺序是按照我们标记的标号进行打印的话，说明我们上边总结出来的流程是没有问题的。启动服务器访问 <code>hello.jsp</code> 页面，在控制台打印的内容如下：<img src="https://gitlab.com/apzs/image/-/raw/master/image/97a366863000469bbc0c4190d0a81e18.png" alt="" loading="lazy"></p><p>以后我们可以将<strong>对请求进行处理的代码</strong>放在<strong>放行之前进行处理</strong>，而如果请求完资源后还要对响应的数据进行处理时可以在放行后进行逻辑处理。</p><h3 id="_1-4-filter拦截路径配置" tabindex="-1"><a class="header-anchor" href="#_1-4-filter拦截路径配置" aria-hidden="true">#</a> 1.4 Filter拦截路径配置</h3><p>拦截路径表示 Filter 会对请求的哪些资源进行拦截，使用 <code>@WebFilter</code> 注解进行配置。如：<code>@WebFilter(&quot;拦截路径&quot;)</code></p><p>拦截路径有如下四种配置方式：</p><ul><li><p><strong>拦截具体的资源：</strong>/index.jsp：只有访问index.jsp时才会被拦截</p></li><li><p>目录拦截：/user/*：访问/user下的所有资源，都会被拦截</p></li><li><p>后缀名拦截：*.jsp：访问后缀名为jsp的资源，都会被拦截</p></li><li><p>拦截所有：/*：访问所有资源，都会被拦截</p></li></ul><p>通过上面拦截路径的学习，大家会发现拦截路径的配置方式和 <strong><code>Servlet</code></strong> 的请求资源路径配置<strong>方式一样</strong>，但是表示的<strong>含义不同</strong>。含义分别为拦截路径和项目访问路径。</p><blockquote><p><strong>回顾：Servlet的urlPattern配置规则</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/04dff13d7d30412699a2b0ec9fb3725b-170947435134611.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><h3 id="_1-5-过滤器链" tabindex="-1"><a class="header-anchor" href="#_1-5-过滤器链" aria-hidden="true">#</a> 1.5 过滤器链</h3><p><strong>1.5.1 概述</strong></p><p>过滤器链是指在一个Web应用，可以配置<strong>多个过滤器</strong>，这多个过滤器称为过滤器链。</p><p>过滤器链中的过滤器的优先级根据类名字母序排列。</p><p>如下图就是一个过滤器链，我们学习过滤器链主要是学习过滤器链执行的流程<img src="https://gitlab.com/apzs/image/-/raw/master/image/c6c884e8a3244a249bea1fd1d6bdde18.png" alt="" loading="lazy"></p><p>上图中的过滤器链执行是按照以下<strong>流程</strong>执行：</p><ol><li><p>执行 <code>Filter1</code> 的放行前逻辑代码</p></li><li><p>执行 <code>Filter1</code> 的放行代码</p></li><li><p>执行 <code>Filter2</code> 的放行前逻辑代码</p></li><li><p>执行 <code>Filter2</code> 的放行代码</p></li><li><p>访问到资源</p></li><li><p>执行 <code>Filter2</code> 的放行后逻辑代码</p></li><li><p>执行 <code>Filter1</code> 的放行后逻辑代码</p></li></ol><p>以上流程串起来就像一条链子，故称之为过滤器链。</p><p><strong>1.5.2 代码演示</strong></p><ul><li>编写第一个过滤器 <code>FilterDemo</code> ，配置成拦截所有资源</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//FilterDemo 字母序在FilterDemo2前，会优先拦截</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
 
        <span class="token comment">//1. 放行前，对 request数据进行处理</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1.FilterDemo...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 放行后，对Response 数据进行处理</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3.FilterDemo...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>编写第二个过滤器 <code>FilterDemo2</code> ，配置拦截所有资源</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo2</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
 
        <span class="token comment">//1. 放行前，对 request数据进行处理</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2.FilterDemo...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//放行</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 放行后，对Response 数据进行处理</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;4.FilterDemo...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改 <code>hello.jsp</code> 页面中脚本的输出语句</li></ul><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;hello JSP~&lt;/h1&gt;
    &lt;%
        System.out.println(&quot;3.hello jsp&quot;);
    %&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>启动服务器，在浏览器输入 <code>http://localhost/filter-demo/hello.jsp</code> 进行测试，在控制台打印内容如下<img src="https://gitlab.com/apzs/image/-/raw/master/image/e8731d45f33a4ea1a7b8e039857ed64d.png" alt="" loading="lazy"></p><p>从结果可以看到确实是按照我们之前说的执行流程进行执行的。</p></li></ul><p><strong>1.5.3 问题</strong></p><p><strong>为什么是先执行 <code>FilterDemo2</code> ，后执行 <code>FilterDemo2</code> 呢？</strong></p><p>我们现在使用的是注解配置Filter，而这种配置方式的<strong>优先级</strong>是按照<strong>过滤器类名(字符串)的自然排序。</strong></p><p>比如有如下两个名称的过滤器 ： <code>BFilterDemo</code> 和 <code>AFilterDemo</code> 。那一定是 <code>AFilterDemo</code> 过滤器先执行。</p><h3 id="_1-6-案例-优化商品展示项目未登录拦截" tabindex="-1"><a class="header-anchor" href="#_1-6-案例-优化商品展示项目未登录拦截" aria-hidden="true">#</a> 1.6 案例，优化商品展示项目未登录拦截</h3><p><strong>1.6.1 需求</strong></p><p>访问服务器资源时，需要先进行登录验证，如果没有登录，则自动跳转到登录页面</p><p><strong>1.6.2 分析</strong></p><p>创建过滤器拦截所有非登录注册相关资源，在过滤器中进行登陆状态校验即可。而在该 <code>Filter</code> 中逻辑如下：<img src="https://gitlab.com/apzs/image/-/raw/master/image/7d35e61113e245918492ca2cd292389c.png" alt="" loading="lazy"></p><p>**注意：**一定要先判断拦截内容是不是登录注册相关资源，例如登录页面的css、js、img等资源要放行。</p><p><strong>1.6.3 代码实现</strong></p><p><strong>1.6.3.1 创建Filter</strong></p><p>在 <code>brand-demo</code> 工程创建 <code>com.itheima.web.filter</code> 包，在该下创建名为 <code>LoginFilter</code> 的过滤器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
      
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1.6.3.2 编写逻辑代码</strong></p><p>在 <code>doFilter()</code> 方法中编写登陆状态校验的逻辑代码。</p><p>我们首先需要从 <code>session</code> 对象中获取用户信息，但是 <strong><code>ServletRequest</code> 类型的 requset 对象没有获取 session 对象的方法</strong>，所以此时需要将 request对象强转成 <code>HttpServletRequest</code> 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后完成以下逻辑</p><ul><li><p>获取Session对象</p></li><li><p>从Session对象中获取名为 <code>user</code> 的数据</p></li><li><p>判断获取到的数据是否是 null</p><ul><li><p>如果不是，说明已经登陆，放行</p></li><li><p>如果是，说明尚未登陆，将提示信息存储到域对象中并跳转到登陆页面</p></li></ul></li></ul><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
   
        <span class="token comment">//1. 判断session中是否有user</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> user <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//2. 判断user是否为null</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 登录过了</span>
            <span class="token comment">//放行</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 没有登陆，存储提示信息，跳转到登录页面</span>
 
            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;login_msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;您尚未登陆！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1.6.3.3 测试并抛出问题</strong></p><p>清除浏览器缓存后，在浏览器上输入 <code>http://localhost:8080/brand-demo/</code> ，可以看到如下页面效果：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2e17e6885bff48a0b90e99d4ed21cde0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面效果可以看出没有登陆确实是跳转到登陆页面了，但是登陆页面为什么展示成这种效果了呢？</p><p><strong>1.6.3.4 问题分析及解决</strong></p><p>因为登陆页面需要 <code>css/login.css</code> 这个文件进行样式的渲染，下图是登陆页面引入的css文件图解<img src="https://gitlab.com/apzs/image/-/raw/master/image/9c3d6b7786414babb7b9dddc4ad9d53d.png" alt="" loading="lazy"></p><p>而在请求这个css资源时被过滤器拦截，就相当于没有加载到样式文件导致的。解决这个问题，只需要对所以的登陆、注册相关的资源进行放行即可。</p><blockquote><p>回顾：</p><p><strong>获取请求行里的URL方法：</strong></p><p>StringBuffer getRequestURL()</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//判断访问资源路径是否和登录注册相关</span>
<span class="token comment">//1,在数组中存储登陆和注册相关的资源路径</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/imgs/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/loginServlet&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/register.jsp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/registerServlet&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/checkCodeServlet&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//2,获取当前访问的资源路径</span>
<span class="token class-name">String</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
<span class="token comment">//3,遍历数组，获取到每一个需要放行的资源路径</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> u <span class="token operator">:</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//4,判断当前访问的资源路径字符串是否包含要放行的的资源路径字符串</span>
    <span class="token comment">/*
    	比如当前访问的资源路径是  /brand-demo/login.jsp
    	而字符串 /brand-demo/login.jsp 包含了  字符串 /login.jsp ，所以这个字符串就需要放行
    */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//找到了，放行</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//break;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1.6.3.5 过滤器完整代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//ServletRequest对象没有getSession方法，要强转成HttpServletRequest </span>
        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
        
        <span class="token comment">//判断访问资源路径是否和登录注册相关</span>
        <span class="token comment">//1,在数组中存储登陆和注册相关的资源路径</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/imgs/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/loginServlet&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/register.jsp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/registerServlet&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/checkCodeServlet&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//2,获取当前访问的资源路径</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
        <span class="token comment">//3,遍历数组，获取到每一个需要放行的资源路径</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> u <span class="token operator">:</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//4,判断当前访问的资源路径字符串是否包含要放行的的资源路径字符串</span>
            <span class="token comment">/*
                比如当前访问的资源路径是  /brand-demo/login.jsp
                而字符串 /brand-demo/login.jsp 包含了  字符串 /login.jsp ，所以这个字符串就需要放行
            */</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//找到了，放行</span>
                chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//break;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
   
        <span class="token comment">//1. 判断session中是否有user</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> user <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//2. 判断user是否为null</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 登录过了</span>
            <span class="token comment">//放行</span>
            <span class="token comment">//参数是强转前后的无所谓</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 没有登陆，存储提示信息，跳转到登录页面</span>
 
            req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;login_msg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;您尚未登陆！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//参数是强转前后的无所谓</span>
            req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-listener监听器" tabindex="-1"><a class="header-anchor" href="#_2-listener监听器" aria-hidden="true">#</a> 2，Listener监听器</h2><h3 id="_2-1-概述" tabindex="-1"><a class="header-anchor" href="#_2-1-概述" aria-hidden="true">#</a> 2.1 概述</h3><p>Listener 表示<strong>监听器</strong>，是 JavaWeb 三大组件(Servlet、Filter、Listener)之一。了解即可，后面学Spring时候会用到。</p><p><strong>监听器就是在 <code>application</code>，<code>session</code>，<code>request</code> 三个对象创建、销毁或者往其中添加修改删除属性时，自动执行代码的功能组件。</strong></p><p><strong><code>application</code> ：</strong></p><p><strong><code>application</code></strong> 是 <code>ServletContext</code> 类型的对象。</p><p><strong><code>ServletContext</code> ：</strong></p><p><strong><code>ServletContext</code></strong> 代表<strong>整个web应用</strong>，在服务器启动的时候，tomcat会<strong>自动创建该对象</strong>。在服务器关闭时会自动销毁该对象。</p><h3 id="_2-2-分类" tabindex="-1"><a class="header-anchor" href="#_2-2-分类" aria-hidden="true">#</a> 2.2 分类</h3><p>JavaWeb 提供了8个监听器：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/b1388b2a43fc4d649ad760c697886b0f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里面只有 <strong><code>ServletContextListener</code></strong> 这个监听器后期我们会接触到，<code>ServletContextListener</code> 是用来<strong>监听 <code>ServletContext</code> 对象的创建和销毁</strong>。</p><p><strong><code>ServletContextListener</code></strong> 接口中有以下两个<strong>方法</strong></p><ul><li><p><code>void contextInitialized(ServletContextEvent sce)</code>：<code>ServletContext</code> 对象被创建了会自动执行的方法</p></li><li><p><code>void contextDestroyed(ServletContextEvent sce)</code>：<code>ServletContext</code> 对象被销毁时会自动执行的方法</p></li></ul><h3 id="_2-3-代码演示" tabindex="-1"><a class="header-anchor" href="#_2-3-代码演示" aria-hidden="true">#</a> 2.3 代码演示</h3><p>我们只演示一下 <code>ServletContextListener</code> 监听器</p><ul><li><p>1.定义一个类，实现<code>ServletContextListener</code> 接口</p></li><li><p>2.重写所有的抽象方法</p></li><li><p>3.使用 <code>@WebListener</code> 进行配置</p></li></ul><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebListener</span>
<span class="token comment">//实现ServletContextListener 接口，用于对ServletContext对象的创建和销毁进行监听，</span>
<span class="token comment">//ServletContext代表整个web应用，在服务器启动的时候，tomcat会自动创建该对象。在服务器关闭时会自动销毁该对象。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextLoaderListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">//ServletContext对象创建时执行方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//加载资源</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ContextLoaderListener...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">//ServletContext对象销毁时执行方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//释放资源</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动服务器，就可以在启动的日志信息中看到 <code>contextInitialized()</code> 方法输出的内容，同时也说明了 <code>ServletContext</code> 对象在服务器启动的时候被创建了。</p><h2 id="_3-ajax" tabindex="-1"><a class="header-anchor" href="#_3-ajax" aria-hidden="true">#</a> 3，AJAX</h2><h3 id="_3-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-概述" aria-hidden="true">#</a> 3.1 概述</h3>`,133),k=n("p",null,[n("em",null,[s("/"),n("em",null,"ˈeɪdʒæks"),s("/")])],-1),r=n("p",null,[n("strong",null,"了解即可"),s("，平时使用都用其异步框架Axios，其封装了AJAX。")],-1),d={href:"https://so.csdn.net/so/search?q=axios&spm=1001.2101.3001.7020",title:"axios",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),v=n("strong",null,"简单来说：",-1),g={href:"https://so.csdn.net/so/search?q=ajax&spm=1001.2101.3001.7020",title:"ajax",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,[n("strong",null,[n("code",null,"AJAX"),s(" (Asynchronous JavaScript And XML)：异步的 JavaScript 和 XML。")])],-1),f=n("p",null,[n("code",null,"JavaScript"),s(" 表明该技术和前端相关；"),n("code",null,"XML"),s(" 是指以此进行"),n("strong",null,"数据交换"),s("。")],-1),q=n("p",null,"AJAX和HTML替代JSP，是前端工程师的任务。",-1),y={href:"https://www.w3school.com.cn/js/js_ajax_http.asp",title:"AJAX - XMLHttpRequest 对象",target:"_blank",rel:"noopener noreferrer"},h=p(`<blockquote><p><strong>回顾：</strong></p><p>XML 指可扩展标记语言（eXtensible Markup Language）。 被设计用来<strong>传输和存储数据。</strong></p></blockquote><p><strong>作用</strong></p><p>AJAX 作用有以下两方面：</p><p><strong>1.与服务器进行数据交换</strong>：<strong>通过AJAX可以给服务器发送请求，服务器将数据直接响应回给浏览器。</strong></p><blockquote><p><strong>之前用JSP做功能的流程：</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/ff89056cb0fb45a79c804b203357046f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图，<code>Servlet</code> 调用完业务逻辑层后将数据存储到域对象中，然后跳转到指定的 <code>jsp</code> 页面，在页面上使用 <code>EL表达式</code> 和 <code>JSTL</code> 标签库进行数据的展示。</p><p><strong>使用AJAX后做功能的流程：</strong></p><p>html+AJAX替换jsp。</p><p>而我们学习了AJAX 后，就可以<strong>使用AJAX和服务器进行通信，以达到使用 HTML+AJAX来替换JSP页面</strong>了。</p><p>如下图，浏览器发送请求servlet，servlet 调用完业务逻辑层后将数据直接响应回给浏览器页面，页面使用 HTML 来进行数据展示。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/652e7a93323144368c7fee1b61a3ea07.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><p><strong>2.异步交互</strong>：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术，如：搜索联想、用户名是否可用校验，等等…</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3a2f6115322e4487a36212e23c0798d8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图所示的效果我们经常见到，在我们输入一些关键字（例如 <code>奥运</code>）后就会在下面联想出相关的内容，而联想出来的这部分数据肯定是存储在百度的服务器上，<strong>此时页面并没有重新刷新</strong>，这就是 <strong>更新局部页面</strong> 的效果。再如下图：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/dec629efe6b24c4e8bb97bd10d09ca97.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们在用户名的输入框输入用户名，当输入框一失去焦点，如果用户名已经被占用就会在下方展示提示的信息；在这整个过程中也<strong>没有页面的刷新</strong>，只是在局部展示出了提示信息，这就是 <strong>更新局部页面</strong> 的效果。</p><h3 id="_3-2-同步、异步优点和使用场景" tabindex="-1"><a class="header-anchor" href="#_3-2-同步、异步优点和使用场景" aria-hidden="true">#</a> 3.2 同步、异步优点和使用场景</h3><p>知道了局部刷新后，接下来我们再聊聊同步和异步:</p><p><strong>同步：</strong></p><ul><li>同步发送请求过程如下<img src="https://gitlab.com/apzs/image/-/raw/master/image/17b7f3e84c98452c8b23a9054cda09e8.png" alt="" loading="lazy"></li></ul><p>浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面<strong>必须等到服务器响应结束</strong>后才能继续做其他的操作。</p><p><strong>异步：</strong></p><ul><li><p>异步发送请求过程如下<img src="https://gitlab.com/apzs/image/-/raw/master/image/6c91aa04bac342c0aeaba8c66919830f.png" alt="" loading="lazy"></p><p>浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还<strong>可以做其他的操作</strong>。</p></li></ul><p><strong>异步的使用场景：</strong></p><p>1、不涉及共享资源，或对共享资源只读，即非互斥操作</p><p>2、没有时序上的严格关系</p><p>3、不需要原子操作，或可以通过其他方式控制原子性</p><p>4、常用于IO操作等耗时操作，因为比较影响客户体验和使用性能</p><p>5、不影响主线程逻辑</p><p>**同步的使用场景：**不使用异步的时候</p><p><strong>同步的好处：</strong></p><p>1、同步流程对结果处理通常更为简单，可以就近处理。</p><p>2、同步流程对结果的处理始终和前文保持在一个上下文内。</p><p>3、同步流程可以很容易捕获、处理异常。</p><p>4、同步流程是最天然的控制过程顺序执行的方式。</p><p><strong>异步的好处：</strong></p><p>1、异步流程可以立即给调用方返回初步的结果。</p><p>2、异步流程可以延迟给调用方最终的结果数据，在此期间可以做更多额外的工作，例如结果记录等等。</p><p>3、异步流程在执行的过程中，可以释放占用的线程等资源，避免阻塞，等到结果产生再重新获取线程处理。</p><p>4、异步流程可以等多次调用的结果出来后，再统一返回一次结果集合，提高响应效率。</p><h3 id="_3-3-快速入门" tabindex="-1"><a class="header-anchor" href="#_3-3-快速入门" aria-hidden="true">#</a> 3.3. 快速入门</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/b237f811b6784abbb4615a73a42e6807.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>服务端实现</strong></p><p>**创建Servlet：**在项目的创建 <code>com.itheima.web.servlet</code> ，并在该包下创建名为 <code>AjaxServlet</code> 的servlet</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/ajaxServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 响应数据</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello ajax~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>客户端实现</strong></p><p>在 <code>webapp</code> 下创建名为 <code>01-ajax-demo1.html</code> 的页面，在该页面书写 <code>ajax</code> 代码</p><ul><li>创建核心对象，不同的浏览器创建的对象是不同的。代码固定，不用背。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// code for IE6, IE5</span>
    xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>发送请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//建立连接</span>
xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/ajax-demo/ajaxServlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//发送请求</span>
xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取响应</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//onreadystatechange 就绪状态发生改变</span>
xhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">//当就绪状态==4，请求发送成功，接收到响应后的状态</span>
        <span class="token comment">//status响应状态码==200，代表受到响应成功</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通过 this.responseText 可以获取到服务端响应的数据</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>完整代码如下：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//1. 创建核心对象</span>
    <span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// code for IE6, IE5</span>
        xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//2. 发送请求</span>
    xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/ajax-demo/ajaxServlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//3. 获取响应</span>
    xhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试</strong></p><p>在浏览器地址栏输入 <code>http://localhost:8080/ajax-demo/01-ajax-demo1.html</code> ，在 <code>01-ajax-demo1.html</code>加载的时候就会发送 <code>ajax</code> 请求，效果如下<img src="https://gitlab.com/apzs/image/-/raw/master/image/e0e053de09744996a5248f39c7a77988.png" alt="" loading="lazy"></p><p>我们可以通过 <code>开发者模式</code> 查看发送的 AJAX 请求。在浏览器上按 <code>F12</code> 快捷键<img src="https://gitlab.com/apzs/image/-/raw/master/image/88a686c7c97a4d70ba042176b935e1a5.png" alt="" loading="lazy"></p><p>这个是查看所有的请求，如果我们只是想看 <strong>异步请求</strong>的话，点击上图中 <code>All</code> 旁边的 <code>XHR</code>，会发现只展示 <strong>Type 是 <code>xhr</code> 的请求</strong>。如下图：<img src="https://gitlab.com/apzs/image/-/raw/master/image/70718d2369bb4cc28143a7ad9306ce37.png" alt="" loading="lazy"></p><h3 id="_3-4-案例-ajax校验用户名是否已存在" tabindex="-1"><a class="header-anchor" href="#_3-4-案例-ajax校验用户名是否已存在" aria-hidden="true">#</a> 3.4 案例，AJAX校验用户名是否已存在</h3><p>需求：在完成用户注册时，当用户名输入框失去焦点时，校验用户名是否在数据库已存在<img src="https://gitlab.com/apzs/image/-/raw/master/image/3a40ee5612e947ab9075905c5d6c5407.png" alt="" loading="lazy"></p><p><strong>分析</strong></p><ul><li><p><strong>前端完成的逻辑</strong></p><ol><li><p>给用户名输入框绑定光标失去焦点事件 <code>onblur</code></p></li><li><p>发送 ajax请求，携带username参数</p></li><li><p>处理响应：是否显示提示信息</p></li></ol></li><li><p><strong>后端完成的逻辑</strong></p><ol><li><p>接收用户名</p></li><li><p>调用service查询User。此案例是为了演示前后端异步交互，所以此处我们不做业务逻辑处理</p></li><li><p>返回标记</p></li></ol></li></ul><p>整体流程如下：<img src="https://gitlab.com/apzs/image/-/raw/master/image/2ac8960fa15049759c55b3f579eb01a5.png" alt="" loading="lazy"></p><p><strong>后端实现</strong></p><p>在 <code>com.ithiema.web.servlet</code> 包中定义名为 <code>SelectUserServlet</code> 的servlet。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/selectUserServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectUserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 接收用户名</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 调用service查询User对象，此处不进行业务逻辑处理，直接给 flag 赋值为 true，表明用户名占用</span>
        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//省略调用业务方法，调用mapper的selectByUsername返回User对象</span>
        <span class="token comment">//3. 响应标记到前端</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前端实现</strong></p><p>将 <code>04-资料\\1. 验证用户名案例\\1. 静态页面</code> 下的文件整体拷贝到项目下 <code>webapp</code> 下。并在 <code>register.html</code> 页面的 <code>body</code> 结束标签前编写 <code>script</code> 标签，在该标签中实现如下逻辑</p><p><strong>第一步：给用户名输入框绑定光标失去焦点事件 <code>onblur</code></strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. 给用户名输入框绑定 失去焦点事件</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第二步：发送 ajax请求，携带username参数</strong></p><p>在 <code>第一步</code> 绑定的匿名函数中书写发送 ajax 请求的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//2. 发送ajax请求</span>
<span class="token comment">//2.1. 创建核心对象</span>
<span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// code for IE6, IE5</span>
    xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//2.2. 发送请求</span>
xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> &quot;http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>ajax<span class="token operator">-</span>demo<span class="token operator">/</span>selectUserServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>
xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.3. 获取响应</span>
xhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//处理响应的结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们发送的是 GET 请求，所以需要在 URL 后拼接从输入框获取的用户名数据。而我们在 <code>第一步</code> 绑定的匿名函数中通过以下代码可以获取用户名数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取用户名的值</span>
<span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token comment">//this ： 给谁绑定的事件，this就代表谁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而携带数据需要将 URL 修改为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/ajax-demo/selectUserServlet?username=&quot;</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>第三步：处理响应：是否显示提示信息</strong></p><p>当 <code>this.readyState == 4 &amp;&amp; this.status == 200</code> 条件满足时，说明已经成功响应数据了。</p><p>此时需要判断响应的数据是否是 &quot;true&quot; 字符串，如果是说明用户名已经占用给出错误提示；如果不是说明用户名未被占用清除错误提示。代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//判断</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText <span class="token operator">==</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//用户名存在，显示提示信息</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;username_err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//用户名不存在 ，清楚提示信息</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;username_err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>综上所述，前端完成代码如下：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. 给用户名输入框绑定 失去焦点事件</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//2. 发送ajax请求</span>
    <span class="token comment">// 获取用户名的值</span>
    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
 
    <span class="token comment">//2.1. 创建核心对象</span>
    <span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// code for IE6, IE5</span>
        xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//2.2. 发送请求</span>
    xhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080/ajax-demo/selectUserServlet?username=&quot;</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//2.3. 获取响应</span>
    xhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//alert(this.responseText);</span>
            <span class="token comment">//判断</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText <span class="token operator">==</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//用户名存在，显示提示信息</span>
                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;username_err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">//用户名不存在 ，清楚提示信息</span>
                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;username_err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-axios异步框架" tabindex="-1"><a class="header-anchor" href="#_4-axios异步框架" aria-hidden="true">#</a> 4，Axios异步框架</h2><h3 id="_4-1-概述" tabindex="-1"><a class="header-anchor" href="#_4-1-概述" aria-hidden="true">#</a> 4.1 概述</h3><p><strong>Axios是什么？</strong></p>`,81),w={href:"https://javascript.info/promise-basics",title:"promise",target:"_blank",rel:"noopener noreferrer"},x={href:"https://nodejs.org/",title:"node.js",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.lullabot.com/articles/what-is-an-isomorphic-application",title:"isomorphic",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,[s("在服务端它使用原生 node.js "),n("code",null,"http"),s(" 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。")],-1),O={href:"https://so.csdn.net/so/search?q=axios&spm=1001.2101.3001.7020",title:"axios",target:"_blank",rel:"noopener noreferrer"},_=n("br",null,null,-1),F={href:"https://so.csdn.net/so/search?q=ajax&spm=1001.2101.3001.7020",title:"ajax",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,[n("strong",null,"Axios作用：")],-1),R=n("p",null,"Axios 对原生的AJAX进行封装，简化书写。",-1),J=n("p",null,[s("Axios官网是："),n("code",null,"https://www.axios-http.cn")],-1),E={href:"https://www.axios-http.cn/docs/intro",title:"起步 | Axios 中文文档 | Axios 中文网",target:"_blank",rel:"noopener noreferrer"},A=p(`<h3 id="_4-2-axios基本使用" tabindex="-1"><a class="header-anchor" href="#_4-2-axios基本使用" aria-hidden="true">#</a> 4.2 <strong>axios</strong>基本使用</h3><h4 id="_4-2-1-引入js文件、发送请求" tabindex="-1"><a class="header-anchor" href="#_4-2-1-引入js文件、发送请求" aria-hidden="true">#</a> 4.2.1 引入js文件、发送请求</h4><p>axios 使用是比较简单的，分为以下两步：</p><p><strong>1.引入 axios 的 js 文件</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--  注意是两对script标签--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/axios-0.18.0.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>js目录下的axios-0.18.0.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* axios v0.18.0 | (c) 2018 by Matt Zabriskie */</span>
<span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;object&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> exports<span class="token operator">&amp;&amp;</span><span class="token string">&quot;object&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> module<span class="token operator">?</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;function&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> define<span class="token operator">&amp;&amp;</span>define<span class="token punctuation">.</span>amd<span class="token operator">?</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> exports<span class="token operator">?</span>exports<span class="token punctuation">.</span>axios<span class="token operator">=</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>e<span class="token punctuation">.</span>axios<span class="token operator">=</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span><span class="token keyword">var</span> o<span class="token operator">=</span>n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">exports</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">id</span><span class="token operator">:</span>r<span class="token punctuation">,</span><span class="token literal-property property">loaded</span><span class="token operator">:</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>o<span class="token punctuation">,</span>o<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span>loaded<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span>exports<span class="token punctuation">}</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>m<span class="token operator">=</span>e<span class="token punctuation">,</span>t<span class="token punctuation">.</span>c<span class="token operator">=</span>n<span class="token punctuation">,</span>t<span class="token punctuation">.</span>p<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">s</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">i</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>request<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>s<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>Axios<span class="token operator">=</span>s<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function-variable function">create</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">r</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>Cancel<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>CancelToken<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>isCancel<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function-variable function">all</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>spread<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>a<span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>default<span class="token operator">=</span>a<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;[object Array]&quot;</span><span class="token operator">===</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;[object ArrayBuffer]&quot;</span><span class="token operator">===</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> FormData<span class="token operator">&amp;&amp;</span>e <span class="token keyword">instanceof</span> <span class="token class-name">FormData</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token operator">=</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> ArrayBuffer<span class="token operator">&amp;&amp;</span>ArrayBuffer<span class="token punctuation">.</span>isView<span class="token operator">?</span>ArrayBuffer<span class="token punctuation">.</span><span class="token function">isView</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">:</span>e<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>buffer<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>buffer <span class="token keyword">instanceof</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">u</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;string&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;number&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token operator">!==</span>e<span class="token operator">&amp;&amp;</span><span class="token string">&quot;object&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;[object Date]&quot;</span><span class="token operator">===</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;[object File]&quot;</span><span class="token operator">===</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">l</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;[object Blob]&quot;</span><span class="token operator">===</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;[object Function]&quot;</span><span class="token operator">===</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">h</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>pipe<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> URLSearchParams<span class="token operator">&amp;&amp;</span>e <span class="token keyword">instanceof</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> navigator<span class="token operator">||</span><span class="token string">&quot;ReactNative&quot;</span><span class="token operator">!==</span>navigator<span class="token punctuation">.</span>product<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> window<span class="token operator">&amp;&amp;</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> document<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!==</span>e<span class="token operator">&amp;&amp;</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> e<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;object&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> e<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">r</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>o<span class="token operator">=</span>e<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">&lt;</span>o<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">t</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> e<span class="token punctuation">)</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">t</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;object&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token string">&quot;object&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token operator">?</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token operator">:</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">v</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">v</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">&amp;&amp;</span><span class="token string">&quot;function&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token operator">?</span>e<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">E</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">:</span>e<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token constant">E</span><span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">C</span><span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">R</span><span class="token operator">=</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">isArray</span><span class="token operator">:</span>r<span class="token punctuation">,</span><span class="token literal-property property">isArrayBuffer</span><span class="token operator">:</span>o<span class="token punctuation">,</span><span class="token literal-property property">isBuffer</span><span class="token operator">:</span><span class="token constant">C</span><span class="token punctuation">,</span><span class="token literal-property property">isFormData</span><span class="token operator">:</span>i<span class="token punctuation">,</span><span class="token literal-property property">isArrayBufferView</span><span class="token operator">:</span>s<span class="token punctuation">,</span><span class="token literal-property property">isString</span><span class="token operator">:</span>u<span class="token punctuation">,</span><span class="token literal-property property">isNumber</span><span class="token operator">:</span>a<span class="token punctuation">,</span><span class="token literal-property property">isObject</span><span class="token operator">:</span>f<span class="token punctuation">,</span><span class="token literal-property property">isUndefined</span><span class="token operator">:</span>c<span class="token punctuation">,</span><span class="token literal-property property">isDate</span><span class="token operator">:</span>p<span class="token punctuation">,</span><span class="token literal-property property">isFile</span><span class="token operator">:</span>d<span class="token punctuation">,</span><span class="token literal-property property">isBlob</span><span class="token operator">:</span>l<span class="token punctuation">,</span><span class="token literal-property property">isFunction</span><span class="token operator">:</span>h<span class="token punctuation">,</span><span class="token literal-property property">isStream</span><span class="token operator">:</span>m<span class="token punctuation">,</span><span class="token literal-property property">isURLSearchParams</span><span class="token operator">:</span>y<span class="token punctuation">,</span><span class="token literal-property property">isStandardBrowserEnv</span><span class="token operator">:</span>g<span class="token punctuation">,</span><span class="token literal-property property">forEach</span><span class="token operator">:</span>v<span class="token punctuation">,</span><span class="token literal-property property">merge</span><span class="token operator">:</span>x<span class="token punctuation">,</span><span class="token literal-property property">extend</span><span class="token operator">:</span>b<span class="token punctuation">,</span><span class="token literal-property property">trim</span><span class="token operator">:</span>w<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>r<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>arguments<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">e</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token operator">!</span><span class="token operator">!</span>e<span class="token punctuation">.</span>constructor<span class="token operator">&amp;&amp;</span><span class="token string">&quot;function&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>isBuffer<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;function&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>readFloatLE<span class="token operator">&amp;&amp;</span><span class="token string">&quot;function&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>slice<span class="token operator">&amp;&amp;</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh &lt;https://feross.org&gt;
 * @license  MIT
 */</span>
    e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token operator">!=</span>e<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">r</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span><span class="token operator">!</span>e<span class="token punctuation">.</span>_isBuffer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token operator">=</span>e<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">request</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">s</span><span class="token punctuation">,</span><span class="token literal-property property">response</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">s</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">request</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;string&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token operator">=</span>i<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">url</span><span class="token operator">:</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">=</span>i<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>method<span class="token operator">=</span>e<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token punctuation">[</span>u<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token operator">=</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span>e<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span>e<span class="token punctuation">.</span>rejected<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">)</span>n<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;delete&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;options&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>n<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">method</span><span class="token operator">:</span>e<span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span>t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;put&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;patch&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>r<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">method</span><span class="token operator">:</span>e<span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span>t<span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span>n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>r<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">!</span>i<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>i<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> XMLHttpRequest<span class="token operator">?</span>e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> process<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span><span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">adapter</span><span class="token operator">:</span><span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">transformRequest</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">s</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span><span class="token function">isFormData</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span>i<span class="token punctuation">.</span><span class="token function">isArrayBuffer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span>i<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span>i<span class="token punctuation">.</span><span class="token function">isStream</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span>i<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">||</span>i<span class="token punctuation">.</span><span class="token function">isBlob</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">?</span>e<span class="token operator">:</span>i<span class="token punctuation">.</span><span class="token function">isArrayBufferView</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">?</span>e<span class="token punctuation">.</span>buffer<span class="token operator">:</span>i<span class="token punctuation">.</span><span class="token function">isURLSearchParams</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">&quot;application/x-www-form-urlencoded;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>i<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">&quot;application/json;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>e<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">transformResponse</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">{</span>e<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">xsrfCookieName</span><span class="token operator">:</span><span class="token string">&quot;XSRF-TOKEN&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">xsrfHeaderName</span><span class="token operator">:</span><span class="token string">&quot;X-XSRF-TOKEN&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">maxContentLength</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function-variable function">validateStatus</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token operator">&gt;=</span><span class="token number">200</span><span class="token operator">&amp;&amp;</span>e<span class="token operator">&lt;</span><span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">common</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">Accept</span><span class="token operator">:</span><span class="token string">&quot;application/json, text/plain, */*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;delete&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;put&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;patch&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>a<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token operator">!==</span>t<span class="token operator">&amp;&amp;</span>r<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">===</span>t<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">,</span><span class="token keyword">delete</span> e<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> window<span class="token operator">&amp;&amp;</span>window<span class="token punctuation">.</span>btoa<span class="token operator">&amp;&amp;</span>window<span class="token punctuation">.</span><span class="token function">btoa</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>f</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> p<span class="token operator">=</span>e<span class="token punctuation">.</span>data<span class="token punctuation">,</span>d<span class="token operator">=</span>e<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function">isFormData</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">delete</span> d<span class="token punctuation">[</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> l<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token string">&quot;onreadystatechange&quot;</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> window<span class="token operator">||</span><span class="token operator">!</span>window<span class="token punctuation">.</span>XDomainRequest<span class="token operator">||</span><span class="token string">&quot;withCredentials&quot;</span><span class="token keyword">in</span> l<span class="token operator">||</span><span class="token function">u</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>XDomainRequest</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token string">&quot;onload&quot;</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>auth<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> y<span class="token operator">=</span>e<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>username<span class="token operator">||</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>w<span class="token operator">=</span>e<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>password<span class="token operator">||</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span>Authorization<span class="token operator">=</span><span class="token string">&quot;Basic &quot;</span><span class="token operator">+</span><span class="token function">c</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token string">&quot;:&quot;</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">i</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>url<span class="token punctuation">,</span>e<span class="token punctuation">.</span>params<span class="token punctuation">,</span>e<span class="token punctuation">.</span>paramsSerializer<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span>timeout<span class="token operator">=</span>e<span class="token punctuation">.</span>timeout<span class="token punctuation">,</span>l<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">===</span>l<span class="token punctuation">.</span>readyState<span class="token operator">||</span>m<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">!==</span>l<span class="token punctuation">.</span>status<span class="token operator">||</span>l<span class="token punctuation">.</span>responseURL<span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token operator">===</span>l<span class="token punctuation">.</span>responseURL<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;file:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token string">&quot;getAllResponseHeaders&quot;</span><span class="token keyword">in</span> l<span class="token operator">?</span><span class="token function">s</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>r<span class="token operator">=</span>e<span class="token punctuation">.</span>responseType<span class="token operator">&amp;&amp;</span><span class="token string">&quot;text&quot;</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>responseType<span class="token operator">?</span>l<span class="token punctuation">.</span>response<span class="token operator">:</span>l<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>r<span class="token punctuation">,</span><span class="token literal-property property">status</span><span class="token operator">:</span><span class="token number">1223</span><span class="token operator">===</span>l<span class="token punctuation">.</span>status<span class="token operator">?</span><span class="token number">204</span><span class="token operator">:</span>l<span class="token punctuation">.</span>status<span class="token punctuation">,</span><span class="token literal-property property">statusText</span><span class="token operator">:</span><span class="token number">1223</span><span class="token operator">===</span>l<span class="token punctuation">.</span>status<span class="token operator">?</span><span class="token string">&quot;No Content&quot;</span><span class="token operator">:</span>l<span class="token punctuation">.</span>statusText<span class="token punctuation">,</span><span class="token literal-property property">headers</span><span class="token operator">:</span>n<span class="token punctuation">,</span><span class="token literal-property property">config</span><span class="token operator">:</span>e<span class="token punctuation">,</span><span class="token literal-property property">request</span><span class="token operator">:</span>l<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">o</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>f<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span><span class="token function-variable function">onerror</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">&quot;Network Error&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span><span class="token function-variable function">ontimeout</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">&quot;timeout of &quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>timeout<span class="token operator">+</span><span class="token string">&quot;ms exceeded&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token string">&quot;ECONNABORTED&quot;</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">isStandardBrowserEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> g<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>withCredentials<span class="token operator">||</span><span class="token function">u</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>xsrfCookieName<span class="token operator">?</span>g<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>xsrfCookieName<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>xsrfHeaderName<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;setRequestHeader&quot;</span><span class="token keyword">in</span> l<span class="token operator">&amp;&amp;</span>r<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> p<span class="token operator">&amp;&amp;</span><span class="token string">&quot;content-type&quot;</span><span class="token operator">===</span>t<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">delete</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">:</span>l<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>withCredentials<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>withCredentials<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>responseType<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">{</span>l<span class="token punctuation">.</span>responseType<span class="token operator">=</span>e<span class="token punctuation">.</span>responseType<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token operator">!==</span>e<span class="token punctuation">.</span>responseType<span class="token punctuation">)</span><span class="token keyword">throw</span> t<span class="token punctuation">}</span><span class="token string">&quot;function&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>onDownloadProgress<span class="token operator">&amp;&amp;</span>l<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;progress&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>onDownloadProgress<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;function&quot;</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token punctuation">.</span>onUploadProgress<span class="token operator">&amp;&amp;</span>l<span class="token punctuation">.</span>upload<span class="token operator">&amp;&amp;</span>l<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;progress&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>onUploadProgress<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>cancelToken<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>cancelToken<span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>l<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">===</span>p<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span>n<span class="token punctuation">.</span>config<span class="token punctuation">.</span>validateStatus<span class="token punctuation">;</span>n<span class="token punctuation">.</span>status<span class="token operator">&amp;&amp;</span>o<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">o</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token string">&quot;Request failed with status code &quot;</span><span class="token operator">+</span>n<span class="token punctuation">.</span>status<span class="token punctuation">,</span>n<span class="token punctuation">.</span>config<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>request<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">e</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">r</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token punctuation">,</span>o</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">.</span>config<span class="token operator">=</span>t<span class="token punctuation">,</span>n<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>request<span class="token operator">=</span>r<span class="token punctuation">,</span>e<span class="token punctuation">.</span>response<span class="token operator">=</span>o<span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%40</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%3A</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%24</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%2C</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%20</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%5B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token string">&quot;[&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">%5D</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span><span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>i<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">isURLSearchParams</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>i<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token operator">!==</span>e<span class="token operator">&amp;&amp;</span><span class="token string">&quot;undefined&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> e<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">?</span>t<span class="token operator">+=</span><span class="token string">&quot;[]&quot;</span><span class="token operator">:</span>e<span class="token operator">=</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>o<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">?</span>e<span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>o<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;=&quot;</span><span class="token operator">+</span><span class="token function">r</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token operator">+=</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;?&quot;</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">&quot;?&quot;</span><span class="token operator">:</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;content-length&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;etag&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;expires&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;from&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;if-modified-since&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;if-unmodified-since&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;last-modified&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;max-forwards&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;proxy-authorization&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;referer&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;retry-after&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;user-agent&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token operator">?</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>o<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token string">&quot;set-cookie&quot;</span><span class="token operator">===</span>t<span class="token operator">?</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">?</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">?</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;, &quot;</span><span class="token operator">+</span>n<span class="token operator">:</span>n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">:</span>s<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">isStandardBrowserEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token keyword">return</span> n<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;href&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">=</span>o<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;href&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">href</span><span class="token operator">:</span>o<span class="token punctuation">.</span>href<span class="token punctuation">,</span><span class="token literal-property property">protocol</span><span class="token operator">:</span>o<span class="token punctuation">.</span>protocol<span class="token operator">?</span>o<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">:$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">host</span><span class="token operator">:</span>o<span class="token punctuation">.</span>host<span class="token punctuation">,</span><span class="token literal-property property">search</span><span class="token operator">:</span>o<span class="token punctuation">.</span>search<span class="token operator">?</span>o<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">hash</span><span class="token operator">:</span>o<span class="token punctuation">.</span>hash<span class="token operator">?</span>o<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">hostname</span><span class="token operator">:</span>o<span class="token punctuation">.</span>hostname<span class="token punctuation">,</span><span class="token literal-property property">port</span><span class="token operator">:</span>o<span class="token punctuation">.</span>port<span class="token punctuation">,</span><span class="token literal-property property">pathname</span><span class="token operator">:</span><span class="token string">&quot;/&quot;</span><span class="token operator">===</span>o<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span>o<span class="token punctuation">.</span>pathname<span class="token operator">:</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>o<span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> t<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(msie|trident)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token operator">=</span><span class="token function">e</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">e</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span>n<span class="token punctuation">;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span>protocol<span class="token operator">===</span>t<span class="token punctuation">.</span>protocol<span class="token operator">&amp;&amp;</span>o<span class="token punctuation">.</span>host<span class="token operator">===</span>t<span class="token punctuation">.</span>host<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span><span class="token string">&quot;String contains an invalid character&quot;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token function">String</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">=</span>o<span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">|</span>u<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span>u<span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">+=</span>a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token operator">&amp;</span>t<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token operator">-</span>u<span class="token operator">%</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">=</span>i<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>u<span class="token operator">+=</span><span class="token number">.75</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">&gt;</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">n</span><span class="token punctuation">;</span>t<span class="token operator">=</span>t<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token operator">|</span>r<span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span><span class="token punctuation">;</span>n<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>code<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&quot;InvalidCharacterError&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>r<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">isStandardBrowserEnv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token function-variable function">write</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token punctuation">,</span>i<span class="token punctuation">,</span>s</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token string">&quot;=&quot;</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>u<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;expires=&quot;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>u<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;path=&quot;</span><span class="token operator">+</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>u<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;domain=&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">===</span><span class="token operator">!</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>u<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;secure&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span>cookie<span class="token operator">=</span>u<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">read</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> t<span class="token operator">=</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;(^|;\\\\s*)(&quot;</span><span class="token operator">+</span>e<span class="token operator">+</span><span class="token string">&quot;)=([^;]*)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token operator">?</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">remove</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">864e5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token function-variable function">write</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">read</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">remove</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">use</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">fulfilled</span><span class="token operator">:</span>e<span class="token punctuation">,</span><span class="token literal-property property">rejected</span><span class="token operator">:</span>t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eject</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">forEach</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>o<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token operator">!==</span>t<span class="token operator">&amp;&amp;</span><span class="token function">e</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>r<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span>cancelToken<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>cancelToken<span class="token punctuation">.</span><span class="token function">throwIfRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">r</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>baseURL<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">a</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>url<span class="token operator">=</span><span class="token function">c</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>baseURL<span class="token punctuation">,</span>e<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>headers<span class="token operator">=</span>e<span class="token punctuation">.</span>headers<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">i</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">,</span>e<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>e<span class="token punctuation">.</span>transformRequest<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>headers<span class="token operator">=</span>o<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>e<span class="token punctuation">.</span>method<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>headers<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;delete&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;head&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;put&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;patch&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;common&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">delete</span> e<span class="token punctuation">.</span>headers<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t<span class="token operator">=</span>e<span class="token punctuation">.</span>adapter<span class="token operator">||</span>u<span class="token punctuation">.</span>adapter<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">t</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">r</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">i</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">,</span>t<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>e<span class="token punctuation">.</span>transformResponse<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">s</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>response<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">i</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span>t<span class="token punctuation">.</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>e<span class="token punctuation">.</span>transformResponse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token operator">||</span><span class="token operator">!</span>e<span class="token punctuation">.</span>__CANCEL__<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token operator">?</span>e<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span>e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">=</span>e<span class="token punctuation">}</span>n<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">&quot;Cancel&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">?</span><span class="token string">&quot;: &quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__CANCEL__<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;function&quot;</span><span class="token operator">!=</span><span class="token keyword">typeof</span> e<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;executor must be a function.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> t<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>promise<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">=</span>e<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span>reason<span class="token operator">||</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>reason<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">o</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">t</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">throwIfRequested</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">source</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">r</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token operator">=</span>t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token literal-property property">token</span><span class="token operator">:</span>t<span class="token punctuation">,</span><span class="token literal-property property">cancel</span><span class="token operator">:</span>e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>exports<span class="token operator">=</span>r<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function-variable function">exports</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">e</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//# sourceMappingURL=axios.min.map</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.使用axios 发送请求，并获取响应结果</strong></p><p><strong>发送 get 请求</strong></p><p>方法一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二（推荐，请求方法别名方式发请求和箭头函数）：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//箭头函数可以让then里this指向vue，而不是窗口。可以直接this.data而不是_this.data</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/books&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>箭头函数可以让then里this指向vue，而不是窗口。可以直接this.data而不是_this.data</p></blockquote><p><strong>发送 post 请求</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">&quot;username=zhangsan&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以请求方法别名方式发请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;username=zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>axios()</code> 是用来发送异步请求的，小括号中使用 js 对象传递请求相关的参数：</p><ul><li><p><code>method</code> 属性：用来设置请求方式的。取值为 <code>get</code> 或者 <code>post</code>。</p></li><li><p><code>url</code> 属性：用来书写请求的资源路径。如果是 <code>get</code> 请求，需要将请求参数拼接到路径的后面，格式为： <code>url?参数名=参数值&amp;参数名2=参数值2</code>。</p></li><li><p><code>data</code> 属性：作为请求体被发送的数据。也就是说如果是 <code>post</code> 请求的话，数据需要作为 <code>data</code> 属性的值。</p></li></ul><p><code>then()</code> 需要传递一个匿名函数。我们将 <code>then()</code> 中传递的匿名函数称为 <strong>回调函数</strong>，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 <code>resp</code> 参数是对响应的数据进行封装的对象，通过 <code>resp.data</code> 可以获取到响应的数据。</p><h4 id="_4-2-2-请求方法别名方式发请求" tabindex="-1"><a class="header-anchor" href="#_4-2-2-请求方法别名方式发请求" aria-hidden="true">#</a> 4.2.2 <strong>请求方法别名方式发请求</strong></h4><p>为了方便起见， Axios 已经为所有支持的请求方法提供了别名。如下：</p><ul><li><p><code>get</code> 请求 ： <code>axios.get(url[,config])</code></p></li><li><p><code>post</code> 请求：<code>axios.post(url[,data[,config])</code></p></li><li><p><code>delete</code> 请求 ： <code>axios.delete(url[,config])</code></p></li><li><p><code>head</code> 请求 ： <code>axios.head(url[,config])</code></p></li><li><p><code>options</code> 请求 ： <code>axios.option(url[,config])</code></p></li><li><p><code>put</code> 请求：<code>axios.put(url[,data[,config])</code></p></li><li><p><code>patch</code> 请求：<code>axios.patch(url[,data[,config])</code></p></li></ul><p>而我们只关注 <code>get</code> 请求和 <code>post</code> 请求。</p><p>入门案例中的 <code>get</code> 请求代码可以改为如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet?username=zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>入门案例中的 <code>post</code> 请求代码可以改为如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;username=zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-快速入门-请求用户名" tabindex="-1"><a class="header-anchor" href="#_4-3-快速入门-请求用户名" aria-hidden="true">#</a> 4.3 快速入门，请求用户名</h3><p><strong>后端实现</strong></p><p>定义一个用于接收请求的servlet，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/axiosServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AxiosServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;get...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1. 接收请求参数</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 响应数据</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello Axios~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;post...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前端实现</strong></p><ul><li><p>引入 js 文件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/axios-0.18.0.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>发送 ajax 请求</p><ul><li>get 请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet?username=zhangsan&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>post 请求</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">&quot;username=zhangsan&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>整体页面代码如下：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--  注意是两对script标签--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/axios-0.18.0.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//1. get</span>
   <span class="token comment">/* axios({
        method:&quot;get&quot;,
        url:&quot;http://localhost:8080/ajax-demo/axiosServlet?username=zhangsan&quot;
    }).then(function (resp) {
        alert(resp.data);
    })*/</span>
 
    <span class="token comment">//2. post  在js中{} 表示一个js对象，而这个js对象中有三个属性</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">&quot;username=zhangsan&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">//3.  请求方法别名</span>
    <span class="token comment">// axios.post(&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;,&quot;username=zhangsan&quot;).then(function (resp) {</span>
    <span class="token comment">//     alert(resp.data);</span>
    <span class="token comment">// })</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/f7e1d18f159c4664a95b9f1fcb4bd52b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_5-json" tabindex="-1"><a class="header-anchor" href="#_5-json" aria-hidden="true">#</a> 5，JSON</h2><h3 id="_5-1-概述" tabindex="-1"><a class="header-anchor" href="#_5-1-概述" aria-hidden="true">#</a> 5.1 概述</h3><p><strong>概念：<code>JavaScript Object Notation</code>。JavaScript 对象表示法.</strong></p><p>notation译为符号、表示法。</p><p><strong><code>JSON</code> 的格式：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> json<span class="token operator">=</span><span class="token punctuation">{</span>
	<span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
	<span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>
	<span class="token string-property property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;北京&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**JSON字符串的格式：**大括号外必须是单引号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token string">&#39;{&quot;key&quot;:value,&quot;key&quot;:value,...}&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>回顾JavaScript对象的定义格式</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> js<span class="token operator">=</span><span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>
	<span class="token literal-property property">city</span><span class="token operator">:</span><span class="token string">&quot;北京&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>通过上面 js 对象格式和 json 格式进行对比，发现两个格式特别像。</p><p>js 对象中的键可以使用引号（可以是单引号，也可以是双引号）；而 <code>json</code> 格式中的键要求<strong>必须使用双引号</strong>括起来，这是 <code>json</code> 格式的规定。</p><p><strong>JSON作用：</strong></p><p>由于其语法格式简单，层次结构鲜明，现多用于作为<strong>数据载体</strong>，在网络中进行数据传输。</p><p>以后我们会以 json 格式的数据进行<strong>前后端交互</strong>。前端发送请求时，如果是复杂的数据就会<strong>以 json 提交给后端</strong>；而后端如果需要响应一些复杂的数据时，也需要以 <strong>json 格式将数据响应</strong>回给浏览器。</p><p><strong>服务端给浏览器响应简单数据：</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/a53f3aeb31114a09a4919ea1b5177a61.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>xml描述数据的写：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>city</span><span class="token punctuation">&gt;</span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>city</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>json</code> 描述数据的写法：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>	
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span>
    <span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;北京&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两种格式进行对比后就会发现 <code>json</code> 格式数据的简单，以及所占的字节数少等优点。</p><h3 id="_5-2-json-基础语法" tabindex="-1"><a class="header-anchor" href="#_5-2-json-基础语法" aria-hidden="true">#</a> 5.2 JSON 基础语法</h3><h4 id="_5-2-1-定义格式" tabindex="-1"><a class="header-anchor" href="#_5-2-1-定义格式" aria-hidden="true">#</a> 5.2.1 定义格式</h4><p><strong>定义JSON：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>**定义JSON字符串：**大括号外必须是单引号</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token string">&#39;{&quot;key&quot;:value,&quot;key&quot;:value,...}&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong></p><p><strong><code>JSON</code> 串的键要求必须使用双引号括起来</strong>，而值根据要表示的类型确定。value 的数据类型分为如下</p><ul><li><p>数字（整数或浮点数）</p></li><li><p>字符串（使用双引号括起来）</p></li><li><p>逻辑值（true或者false）</p></li><li><p>数组（在方括号中）</p></li><li><p>对象（在花括号中）</p></li><li><p>null</p></li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:23,&quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p><strong>代码演示</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//定义JSON字符串</span>
    <span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:23,&quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]}&#39;</span>
    <span class="token comment">//定义JavaScript字符串</span>
    <span class="token comment">//var jsonStr = {name:&quot;zhangsan&quot;,age:23,addr:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]}</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过浏览器打开，页面效果如下图所示</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/8ce3f69ce70d4a6e8f619b7a6965101c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_5-2-2-js和json转换" tabindex="-1"><a class="header-anchor" href="#_5-2-2-js和json转换" aria-hidden="true">#</a> 5.2.2 js和JSON转换</h4><p><strong>axios可以自动转换“js对象”或“JSON串”成JSON。</strong></p><ul><li><code>parse(str)</code> ：<strong>将 JSON串转换为 js 对象</strong>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jsObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>代码演示：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//1. 定义JSON字符串</span>
    <span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;zhangsan&quot;,&quot;age&quot;:23,&quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]}&#39;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//2. 将 JSON 字符串转为 JS 对象</span>
    <span class="token keyword">let</span> jsObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>jsObject<span class="token punctuation">)</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>jsObject<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token comment">//3. 将 JS 对象转换为 JSON 字符串</span>
    <span class="token keyword">let</span> jsonStr2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>jsonStr2<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>axios也可以自动将js对象或JSON串转成JSON：</strong></p><p><code>axios</code> 是一个很强大的工具。我们只需要将需要提交的参数封装成 js 对象，并将该 js 对象作为 <code>axios</code> 的 <code>data</code> 属性值进行，它会自动将 js 对象转换为 <code>JSON</code> 串进行提交。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//这里定义JavaScript对象，而不是JSON对象。axios可以自动将js对象转JSON对象。</span>
<span class="token keyword">var</span> jsObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//必须是post，JSON必须放在请求体</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span>jsObject  <span class="token comment">//这里 axios 会将该js对象转换为 json 串的</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-3-axios携带json发送异步请求" tabindex="-1"><a class="header-anchor" href="#_5-2-3-axios携带json发送异步请求" aria-hidden="true">#</a> 5.2.3 axios携带JSON发送异步请求</h4><blockquote><p><strong><code>axios</code> 直接携带请求参数发送请求</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">&quot;username=zhangsan&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong><code>axios</code> 携带JSON请求参数发送请求</strong></p><p>提前定义一个 js 对象，用来封装需要提交的参数，然后使用 <code>JSON.stringify(js对象)</code> 转换为 <code>JSON</code> 串，再<strong>将该 <code>JSON</code> 串</strong>作为 <code>axios</code> 的 <code>data</code> 属性值<strong>进行请求参数的提交</strong>。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jsObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//必须是post，JSON必须放在请求体</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsObject<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>axios也可以自动将js对象或JSON串转成JSON：</strong></p><p><code>axios</code> 是一个很强大的工具。我们只需要将需要提交的参数封装成 js 对象，并将该 js 对象作为 <code>axios</code> 的 <code>data</code> 属性值进行，它会自动将 js 对象转换为 <code>JSON</code> 串进行提交。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jsObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//必须是post，JSON必须放在请求体</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/ajax-demo/axiosServlet&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span>jsObject  <span class="token comment">//这里 axios 会将该js对象转换为 json 串的</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong></p><ul><li><p>js 提供的 <code>JSON</code> 对象我们只需要了解一下即可。因为 <strong><code>axios</code> 会自动对 js 对象和 <code>JSON</code> 串进行想换转换</strong>。</p></li><li><p>发送异步请求时，**如果请求参数是 <code>JSON</code> 格式，那请求方式必须是 <code>POST</code>。**因为 <strong><code>JSON</code> 串需要放在请求体中</strong>。</p></li></ul></blockquote><h3 id="_5-3-fastjson-json串和java对象的转换" tabindex="-1"><a class="header-anchor" href="#_5-3-fastjson-json串和java对象的转换" aria-hidden="true">#</a> 5.3 Fastjson，JSON串和Java对象的转换</h3><blockquote><p>JSON不能用request.getParameter()接收，要获取请求体request.getReader()，再通过fastJSON转换成java对象。</p></blockquote><p><strong>json 的作用：</strong></p><p><strong>以后我们会以 json 格式的数据进行前后端交互</strong>。前端发送请求时，如果是复杂的数据就会<strong>以 json 提交给后端</strong>；而后端如果需要响应一些复杂的数据时，也需要以 <strong>json 格式将数据响应</strong>回给浏览器。<img src="https://gitlab.com/apzs/image/-/raw/master/image/cabf514b03ad4843be69d5ccb20a898b.png" alt="" loading="lazy"></p><p><strong>使用axios，请求响应数据的获取方式：</strong></p><ul><li><p>**请求数据：**先获取请求体request.getReader()，再JSON字符串转为Java对象</p></li><li><p>**响应数据：**Java对象转为JSON字符串，用response.setContentType(&quot;text/json;charset=utf-8&quot;)和getWriter().write(jsonString)设置响应数据，axios的then里就可以获取到响应信息。</p></li></ul><p><strong>Fastjson 概述</strong></p><p><strong><code>Fastjson</code> 是</strong>阿里巴巴提供的<strong>一个</strong>Java语言编写的高性能功能完善的 <strong><code>JSON</code> 库</strong>，是目前Java语言中最快的 <code>JSON</code> 库，可以<strong>实现 <code>Java</code> 对象和 <code>JSON</code> 字符串的相互转换。</strong></p><p><strong>Fastjson 使用</strong></p><p><code>Fastjson</code> 使用也是比较简单的，分为以下三步完成</p><ol><li><p><strong>导入坐标</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.62<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Java对象转JSON</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 Java 对象转换为 JSON 串，只需要使用 <code>Fastjson</code> 提供的 <code>JSON</code> 类中的 <code>toJSONString()</code> 静态方法即可。</p></li><li><p><strong>JSON字符串转Java对象</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 json 转换为 Java 对象，只需要使用 <code>Fastjson</code> 提供的 <code>JSON</code> 类中的 <code>parseObject()</code> 静态方法即可。</p></li></ol><p><strong>代码演示，将Java对象和JSON字符串互相转换：</strong></p><ul><li><p>引入坐标</p></li><li><p>创建一个类，专门用来测试 Java 对象和 JSON 串的相互转换，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonDemo</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 将Java对象转为JSON字符串</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setPassWord</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{&quot;id&quot;:1,&quot;passWord&quot;:&quot;123&quot;,&quot;username&quot;:&quot;zhangsan&quot;}</span>
 
 
        <span class="token comment">//2. 将JSON字符串转为Java对象</span>
        <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;id\\&quot;:1,\\&quot;passWord\\&quot;:\\&quot;123\\&quot;,\\&quot;username\\&quot;:\\&quot;zhangsan\\&quot;}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_6-案例-axios-json-品牌列表查询和添加" tabindex="-1"><a class="header-anchor" href="#_6-案例-axios-json-品牌列表查询和添加" aria-hidden="true">#</a> 6，案例，Axios + JSON 品牌列表查询和添加</h2><h3 id="_6-0-需求" tabindex="-1"><a class="header-anchor" href="#_6-0-需求" aria-hidden="true">#</a> 6.0 需求</h3><blockquote><p>仅用于学习axios+json，下一节讲vue框架时候会优化循环渲染和条件渲染</p></blockquote><p>使用Axios + JSON 完成品牌列表数据查询和添加。页面效果还是下图所示：<img src="https://gitlab.com/apzs/image/-/raw/master/image/d05d575e42e04090b404ade9e78fff36.png" alt="" loading="lazy"></p><h3 id="_6-1-坑点" tabindex="-1"><a class="header-anchor" href="#_6-1-坑点" aria-hidden="true">#</a> 6.1 坑点</h3><p>js中定义JSON串要记得属性名有转义后的双引号。</p><p>报错：java.sql.SQLException: Could not retrieve transation read-only status server</p><p>mysql版本很高，你驱动很低，所以使用版本差不多的驱动，pom.xml更改依赖版本。</p><h3 id="_6-2-查询所有功能" tabindex="-1"><a class="header-anchor" href="#_6-2-查询所有功能" aria-hidden="true">#</a> 6.2 查询所有功能</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/653dcffe8e734134be44a72b2bc596be.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图所示就该功能的整体流程。前后端需以 JSON 格式进行数据的传递；由于此功能是查询所有的功能，前端发送 ajax 请求不需要携带参数，而后端响应数据需以如下格式的 json 数据<img src="https://gitlab.com/apzs/image/-/raw/master/image/aa15745bcdcb4ed2a1a07b401f1ebfe4.png" alt="" loading="lazy"></p><blockquote><p><strong>jsp方案：</strong></p><p>过去使用 jsp方案是Servlet调用业务中selectAll方法获取<code>List&lt;Brand&gt;</code>对象brands，将其setAtrribute后转发到brand.jsp。brand.jsp通过el表达式展示请求域数据，通过jstl语句循环、条件渲染。</p><p><strong>axios+html方案：</strong></p><p>axios+html方案是Servlet调用业务中selectAll方法获取<code>List&lt;Brand&gt;</code>对象brands，将其转json串响应。brand.html通过axios请求后台url，then里获取到响应的json，通过innerHTML填写表格内数据。</p></blockquote><p><strong>环境准备</strong></p>`,114),z=n("code",null,"brand-demo",-1),C={href:"https://blog.csdn.net/qq_40991313/article/details/126024588?spm=1001.2014.3001.5501",title:"JavaWeb基础6——Request,Response,JSP&MVC_vincewm的博客-CSDN博客",target:"_blank",rel:"noopener noreferrer"},T=p(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/c45459c4ea5248b3806bbaba7a12f484.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>pom.xml导入依赖Mybatis、mysql、Servlet、</p><p><strong>注意：</strong></p><ul><li><p>在给定的原始工程中已经给定一些代码。而在此案例中我们只关注前后端交互代码实现</p></li><li><p>要根据自己的数据库环境去修改连接数据库的信息，在 <code>mybatis-config.xml</code> 核心配置文件中修改</p></li></ul><p><strong>后端实现</strong></p><p>在 <code>com.itheima.web</code> 包下创建名为 <code>SelectAllServlet</code> 的 <code>servlet</code>，具体的逻辑如下：</p><ul><li><p>调用 service 的 <code>selectAll()</code> 方法进行查询所有的逻辑处理</p></li><li><p>将查询到的集合数据转换为 json 数据。我们将此过程称为 <strong>序列化</strong>；如果是将 json 数据转换为 Java 对象，我们称之为 <strong>反序列化</strong></p></li><li><p>将 json 数据响应回给浏览器。这里一定要设置响应数据的类型及字符集 <code>response.setContentType(&quot;text/json;charset=utf-8&quot;);</code></p></li></ul><p><code>SelectAllServlet</code> 代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/selectAllServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectAllServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">BrandService</span> brandService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 调用Service查询</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> brands <span class="token operator">=</span> brandService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//2. 将集合转换为JSON数据   序列化</span>
        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//3. 响应数据  application/json   text/json</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/json;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//后端发JSON串，前端then里的响应数据是json数组</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动Tomcat，查看后端页面/selectAllServlet，可以看到响应的JSON数据：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0e9b151f8ce84da9833dadd6c2b33a37.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>前端实现</strong></p><p><strong>1.引入 js 文件</strong></p><p>在 <code>brand.html</code> 页面引入 <code>axios</code> 的 js 文件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/axios-0.18.0.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2.绑定 <code>页面加载完毕</code> 事件</strong></p><p>在 <code>brand.html</code> 页面绑定加载完毕事件，该事件是在页面加载完毕后被触发，代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//页面加载完毕事件</span>
window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.发送异步请求</strong></p><p>在页面加载完毕事件绑定的匿名函数中发送异步请求，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">//2. 发送ajax请求</span>
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/brand-demo/selectAllServlet&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.处理响应数据</strong></p><p>在 <code>then</code> 中的回调函数中通过 <code>resp.data</code> 可以获取响应回来的数据，而数据格式如下<img src="https://gitlab.com/apzs/image/-/raw/master/image/aeab9752d7ce42c9b0f8a81b82951b57.png" alt="" loading="lazy"></p><p>现在我们需要拼接字符串，将下面表格中的所有的 <code>tr</code> 拼接到一个字符串中，然后使用 <code>document.getElementById(&quot;brandTable&quot;).innerHTML = 拼接好的字符串</code> 就可以动态的展示出用户想看到的数据<img src="https://gitlab.com/apzs/image/-/raw/master/image/152cea33dc694bf8a7cf9120d957a965.png" alt="" loading="lazy"></p><p>而表头行是固定的，所以先定义初始值是表头行数据的字符串，如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取数据</span>
<span class="token keyword">let</span> brands <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token keyword">let</span> tableData <span class="token operator">=</span> <span class="token string">&quot; &lt;tr&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;th&gt;序号&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;th&gt;品牌名称&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;th&gt;企业名称&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;th&gt;排序&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;th&gt;品牌介绍&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;th&gt;状态&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;th&gt;操作&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;    &lt;/tr&gt;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来遍历响应回来的数据 <code>brands</code> ，拿到每一条品牌数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> brands<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    let brand <span class="token operator">=</span> brands<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着就是从 <code>brand</code> 对象中获取数据并且拼接 <code>数据行</code>，累加到 <code>tableData</code> 字符串变量中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tableData <span class="token operator">+=</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;    &lt;tr align=\\&quot;center\\&quot;&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>brandName<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>companyName<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>ordered<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>description<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>status<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;        &lt;td&gt;&lt;a href=\\&quot;#\\&quot;&gt;修改&lt;/a&gt; &lt;a href=\\&quot;#\\&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;    &lt;/tr&gt;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后再将拼接好的字符串写到表格中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置表格数据</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;brandTable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> tableData<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>整体页面代码如下：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addBrand.html<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>新增<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandTable<span class="token punctuation">&quot;</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100%<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/axios-0.18.0.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//1. 当页面加载完成后，发送ajax请求</span>
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//2. 发送ajax请求</span>
        <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/brand-demo/selectAllServlet&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//获取数据</span>
            <span class="token keyword">let</span> brands <span class="token operator">=</span> resp<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
            <span class="token comment">//先这样循环渲染，后面用vue后会优化</span>
            <span class="token keyword">let</span> tableData <span class="token operator">=</span> <span class="token string">&quot; &lt;tr&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;th&gt;序号&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;th&gt;品牌名称&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;th&gt;企业名称&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;th&gt;排序&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;th&gt;品牌介绍&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;th&gt;状态&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;th&gt;操作&lt;/th&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;    &lt;/tr&gt;&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//后端发JSON串，前端then里的响应数据是json数组</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> brands<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> brand <span class="token operator">=</span> brands<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
                tableData <span class="token operator">+=</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;    &lt;tr align=\\&quot;center\\&quot;&gt;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>brandName<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>companyName<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>ordered<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>description<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;        &lt;td&gt;&quot;</span><span class="token operator">+</span>brand<span class="token punctuation">.</span>status<span class="token operator">+</span><span class="token string">&quot;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;        &lt;td&gt;&lt;a href=\\&quot;#\\&quot;&gt;修改&lt;/a&gt; &lt;a href=\\&quot;#\\&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\\n&quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;    &lt;/tr&gt;&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 设置表格数据</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;brandTable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> tableData<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>先这样循环渲染，后面用vue后会优化</p></blockquote><h3 id="_6-3-添加品牌功能-异步提交表单" tabindex="-1"><a class="header-anchor" href="#_6-3-添加品牌功能-异步提交表单" aria-hidden="true">#</a> 6.3 添加品牌功能，异步提交表单</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4a3c9c9f348e4f9584c25cb93f77a87d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上所示，当我们点击 <code>新增</code> 按钮，会跳转到 <code>addBrand.html</code> 页面。在 <code>addBrand.html</code> 页面输入数据后点击 <code>提交</code> 按钮，就会将数据提交到后端，而后端将数据保存到数据库中。</p><p>具体的前后端交互的流程如下：<img src="https://gitlab.com/apzs/image/-/raw/master/image/2a517542b0ee447a9c185ecc5501048b.png" alt="" loading="lazy"></p><p><strong>说明：</strong></p><p>前端需要将用户输入的数据提交到后端，这部分数据需要以 json 格式进行提交，数据格式如下：<img src="https://gitlab.com/apzs/image/-/raw/master/image/ab61d6c112ec465f953105dd4e3a9bfe.png" alt="" loading="lazy"></p><blockquote><p>submit提交表单：<input type="submit">，是同步的</p><p>button提交表单：点击事件提交，是异步的</p></blockquote><p><strong>后端实现</strong></p><p>在 <code>com.itheima.web</code> 包下创建名为 <code>AddServlet</code> 的 <code>servlet</code>，具体的逻辑如下：</p><ul><li><p>获取请求参数</p><p>由于前端提交的是 json 格式的数据，所以我们不能使用 <code>request.getParameter()</code> 方法获取请求参数</p><ul><li><p>如果提交的数据格式是 <code>username=zhangsan&amp;age=23</code> ，后端就可以使用 <code>request.getParameter()</code> 方法获取</p></li><li><p>如果提交的数据格式是 json，后端就需要通过 request 对象获取输入流，再通过输入流读取数据</p></li></ul></li><li><p>将获取到的请求参数（json格式的数据）转换为 <code>Brand</code> 对象</p></li><li><p>调用 service 的 <code>add()</code> 方法进行添加数据的逻辑处理</p></li><li><p>将 json 数据响应回给浏览器。</p></li></ul><p><code>AddServlet</code> 代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/addServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">private</span> <span class="token class-name">BrandService</span> brandService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
 
        <span class="token comment">//1. 接收数据,request.getParameter 不能接收json的数据</span>
       <span class="token comment">/* String brandName = request.getParameter(&quot;brandName&quot;);
        System.out.println(brandName);*/</span>
 
        <span class="token comment">// 获取请求体数据</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> params <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将JSON字符串转为Java对象</span>
        <span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token class-name">Brand</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 调用service 添加</span>
        brandService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. 响应成功标识</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>前端实现</strong></p><p>在 <code>addBrand.html</code> 页面给 <code>提交</code> 按钮绑定点击事件，并在绑定的匿名函数中发送异步请求，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. 给按钮绑定单击事件</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//2. 发送ajax请求</span>
    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/brand-demo/addServlet&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token operator">??</span><span class="token operator">?</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断响应数据是否为 success</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/brand-demo/brand.html&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们只需要考虑如何获取页面上用户输入的数据即可。</p><p>首先我们先定义如下的一个 js 对象，该对象是用来封装页面上输入的数据，并将该对象作为上面发送异步请求时 <code>data</code> 属性的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将表单数据转为json</span>
<span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">brandName</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">companyName</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ordered</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">status</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来获取输入框输入的数据，并将获取到的数据赋值给 <code>formData</code> 对象指定的属性。比如获取用户名的输入框数据，并把该数据赋值给 <code>formData</code> 对象的 <code>brandName</code> 属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取表单数据</span>
<span class="token keyword">let</span> brandName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;brandName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token comment">// 设置数据</span>
formData<span class="token punctuation">.</span>brandName <span class="token operator">=</span> brandName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**说明：其他的输入框都用同样的方式获取并赋值。**但是有一个比较特殊，就是状态数据，如下图是页面内容<img src="https://gitlab.com/apzs/image/-/raw/master/image/f6f57b06ee2e445d909f2cae096e2bf1.png" alt="" loading="lazy"></p><p>我们需要判断哪儿个被选中，再将选中的单选框数据赋值给 <code>formData</code> 对象的 <code>status</code> 属性，代码实现如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> status <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> status<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//</span>
        formData<span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>整体页面代码如下：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>添加品牌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>添加品牌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    品牌名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    企业名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>companyName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>companyName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    排序：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ordered<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ordered<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    描述信息：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>description<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>description<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    状态：
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>禁用
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>启用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/axios-0.18.0.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">//1. 给按钮绑定单击事件</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将表单数据转为json</span>
        <span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">brandName</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">companyName</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">ordered</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">description</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">status</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取表单数据</span>
        <span class="token keyword">let</span> brandName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;brandName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token comment">// 设置数据</span>
        formData<span class="token punctuation">.</span>brandName <span class="token operator">=</span> brandName<span class="token punctuation">;</span>
 
        <span class="token comment">// 获取表单数据</span>
        <span class="token keyword">let</span> companyName <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;companyName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token comment">// 设置数据</span>
        formData<span class="token punctuation">.</span>companyName <span class="token operator">=</span> companyName<span class="token punctuation">;</span>
 
        <span class="token comment">// 获取表单数据</span>
        <span class="token keyword">let</span> ordered <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;ordered&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token comment">// 设置数据</span>
        formData<span class="token punctuation">.</span>ordered <span class="token operator">=</span> ordered<span class="token punctuation">;</span>
 
        <span class="token comment">// 获取表单数据</span>
        <span class="token keyword">let</span> description <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token comment">// 设置数据</span>
        formData<span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>
 
        <span class="token keyword">let</span> status <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> status<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//</span>
                formData<span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//console.log(formData);</span>
        <span class="token comment">//2. 发送ajax请求</span>
        <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:8080/brand-demo/addServlet&quot;</span><span class="token punctuation">,</span>
            <span class="token comment">//data后放JSON，js会自动转成JSON字符串</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span>formData
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断响应数据是否为 success</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/brand-demo/brand.html&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><p><code>查询所有</code> 功能和 <code>添加品牌</code> 功能就全部实现，大家肯定会感觉前端的代码很复杂；而这只是暂时的，后面学习了 <code>vue</code> 前端框架后，这部分前端代码就可以进行很大程度的简化。</p>`,62);function L(I,H){const a=e("ExternalLinkIcon");return c(),l("div",null,[i,n("blockquote",null,[k,r,n("p",null,[n("a",d,[s("axios"),t(a)]),s("是通过promise实现对ajax技术的一种封装，就像jQuery实现ajax封装一样。"),m,v,s(),n("a",g,[s("ajax"),t(a)]),s("技术实现了网页的局部数据刷新，axios实现了对ajax的封装。")])]),b,f,q,n("p",null,[n("a",y,[s("AJAX - XMLHttpRequest 对象"),t(a)])]),h,n("p",null,[s("Axios 是一个基于 "),n("em",null,[n("a",w,[s("promise"),t(a)])]),s(" 的网络请求库，作用于"),n("a",x,[s("node.js"),t(a)]),s(" 和浏览器中。 它是 "),n("em",null,[n("a",j,[s("isomorphic"),t(a)])]),s(" 的(即同一套代码可以运行在浏览器和node.js中)。")]),S,n("blockquote",null,[n("p",null,[n("a",O,[s("axios"),t(a)]),s("是通过promise实现对ajax技术的一种封装，就像jQuery实现ajax封装一样。"),_,s(" 简单来说： "),n("a",F,[s("ajax"),t(a)]),s("技术实现了网页的局部数据刷新，axios实现了对ajax的封装。")])]),N,R,J,n("p",null,[n("a",E,[s("起步 | Axios 中文文档 | Axios 中文网"),t(a)])]),A,n("p",null,[z,s("工程目录结构如下：是上上一节的讲JSP时的项目"),n("a",C,[s("JavaWeb基础6——Request,Response,JSP&MVC_vincewm的博客-CSDN博客"),t(a)])]),T])}const U=o(u,[["render",L],["__file","8.Filter_Listener_Ajax_Axios_JSON.html.vue"]]);export{U as default};
