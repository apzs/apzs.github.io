import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as d,c as r,a as e,b as a,d as l,e as n}from"./app-YilgCgZO.js";const c={},o=n(`<h2 id="《arthas基础学习》" tabindex="-1"><a class="header-anchor" href="#《arthas基础学习》" aria-hidden="true">#</a> 《Arthas基础学习》</h2><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><h3 id="arthas-阿尔萨斯-能为你做什么" tabindex="-1"><a class="header-anchor" href="#arthas-阿尔萨斯-能为你做什么" aria-hidden="true">#</a> Arthas（阿尔萨斯） 能为你做什么？</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305153259359.png" alt="image-20200305153259359" tabindex="0" loading="lazy"><figcaption>image-20200305153259359</figcaption></figure><p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p><p>当你遇到以下类似问题而束手无策时，<code>Arthas</code>可以帮助你解决：</p><ol><li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li><li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况？</li><li>有什么办法可以监控到JVM的实时运行状态？</li><li>怎么快速定位应用的热点，生成火焰图？</li></ol><h3 id="运行环境要求" tabindex="-1"><a class="header-anchor" href="#运行环境要求" aria-hidden="true">#</a> 运行环境要求</h3><p><code>Arthas</code>支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p><h2 id="快速安装" tabindex="-1"><a class="header-anchor" href="#快速安装" aria-hidden="true">#</a> 快速安装</h2><p>下载<code>arthas-boot.jar</code>，然后用<code>java -jar</code>的方式启动：</p><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -O https://alibaba.github.io/arthas/arthas-boot.jar
java -jar arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注：在运行第2条命令之前，先运行一个java进程在内存中，不然会出现找不到java进程的错误。</p><p>打印帮助信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar arthas-boot.jar -h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果下载速度比较慢，可以使用aliyun的镜像：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar arthas-boot.jar --repo-mirror aliyun --use-http
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="windows下安装" tabindex="-1"><a class="header-anchor" href="#windows下安装" aria-hidden="true">#</a> Windows下安装</h3><ol><li><p>在c:\\下创建目录arthas，在windows命令窗口下，使用curl命令下载阿里服务器上的jar包，大小108k</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305153935492.png" alt="image-20200305153935492" tabindex="0" loading="lazy"><figcaption>image-20200305153935492</figcaption></figure></li><li><p>使用java启动arthas-boot.jar，来安装arthas，大小约10M。运行此命令会发现java进程，输入1按回车。则自动从远程主机上下载arthas到本地目录</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305154855501.png" alt="image-20200305154855501" tabindex="0" loading="lazy"><figcaption>image-20200305154855501</figcaption></figure></li><li><p>查看安装好的目录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>C:\\Users\\Administrator\\.arthas\\lib\\3.1.7\\arthas\\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305155123449.png" alt="image-20200305155123449" style="zoom:80%;"></li></ol><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ol><li>下载arthas-boot.jar包</li><li>执行arthas-boo.jar包，前提是必须要有java进程在运行。第一次执行这个jar包，会自动从服务器上下载arthas，大小是11M</li></ol><h2 id="从maven仓库下载全量包" tabindex="-1"><a class="header-anchor" href="#从maven仓库下载全量包" aria-hidden="true">#</a> 从Maven仓库下载全量包</h2>`,23),p={href:"https://maven.aliyun.com/",target:"_blank",rel:"noopener noreferrer"},u=n(`<h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h3><ol><li>比如要下载<code>3.1.7</code>版本，下载的url是：</li></ol><p>https://maven.aliyun.com/repository/public/com/taobao/arthas/arthas-packaging/3.1.7/arthas-packaging-3.1.7-bin.zip</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305160520986.png" alt="image-20200305160520986" tabindex="0" loading="lazy"><figcaption>image-20200305160520986</figcaption></figure><ol start="2"><li>解压后，在文件夹里有<code>arthas-boot.jar</code>，直接用<code>java -jar</code>的方式启动：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注：如果是Linux，可以使用以下命令解压到指定的arthas目录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>unzip -d arthas arthas-packaging-3.1.7-bin.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310141654101.png" alt="image-20200310141654101" style="zoom:80%;"><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><ol><li>在Linux下在线安装的方式与在Windows下的安装相同</li><li>如果要使用离线的安装方式，先下载完成的zip到本地，再解压到任意的目录即可</li></ol><h3 id="卸载" tabindex="-1"><a class="header-anchor" href="#卸载" aria-hidden="true">#</a> 卸载</h3><h4 id="在-linux-unix-mac-平台" tabindex="-1"><a class="header-anchor" href="#在-linux-unix-mac-平台" aria-hidden="true">#</a> 在 Linux/Unix/Mac 平台</h4><p>删除下面文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rm -rf ~/.arthas/
rm -rf ~/logs/arthas
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="windows平台" tabindex="-1"><a class="header-anchor" href="#windows平台" aria-hidden="true">#</a> Windows平台</h4><p>直接删除user home下面的<code>.arthas</code>和<code>logs/arthas</code>目录</p><ol><li><p>安装主目录</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305155611311.png" alt="image-20200305155611311" tabindex="0" loading="lazy"><figcaption>image-20200305155611311</figcaption></figure></li><li><p>日志记录目录</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305155504945.png" alt="image-20200305155504945" tabindex="0" loading="lazy"><figcaption>image-20200305155504945</figcaption></figure></li></ol><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><p>因为jar包是绿色，要卸载的话，直接删除2个目录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.arthas安装目录
logs的日志记录目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速入门-attach一个进程" tabindex="-1"><a class="header-anchor" href="#快速入门-attach一个进程" aria-hidden="true">#</a> 快速入门：attach一个进程</h2><h3 id="目标-通过案例快速入门" tabindex="-1"><a class="header-anchor" href="#目标-通过案例快速入门" aria-hidden="true">#</a> 目标：通过案例快速入门</h3><ol><li>执行一个jar包</li><li>通过arthas来attach粘附</li></ol><h3 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1" aria-hidden="true">#</a> 步骤</h3><h4 id="_1-准备代码" tabindex="-1"><a class="header-anchor" href="#_1-准备代码" aria-hidden="true">#</a> 1. 准备代码</h4><p>以下是一个简单的Java程序，每隔一秒生成一个随机数，再执行质因数分解，并打印出分解结果。代码的内容不用理会这不是现在关注的点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathGame</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
    <span class="token comment">//用于统计生成的不合法变量的个数</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> illegalArgumentCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MathGame</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MathGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//死循环，每过1秒调用1次下面的方法(不是开启一个线程)</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            game<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//分解质因数</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//随机生成一个整数，有可能正，有可能负</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">;</span>
            <span class="token comment">//调用方法进行质因数分解</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primeFactors <span class="token operator">=</span> <span class="token function">primeFactors</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//打印结果</span>
            <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> primeFactors<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;illegalArgumentCount:%3d, &quot;</span><span class="token punctuation">,</span> illegalArgumentCount<span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//打印质因数分解的结果</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primeFactors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> factor <span class="token operator">:</span> primeFactors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//计算number的质因数分解</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">primeFactors</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果小于2，则抛出异常，并且计数加1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            illegalArgumentCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;number is: &quot;</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">&quot;, need &gt;= 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
			 <span class="token comment">//用于保存每个质数</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//分解过程，从2开始看能不能整除</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//如果i大于number就退出循环</span>
            <span class="token comment">//能整除，则i为一个因数，number为整除的结果再继续从2开始除</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                number <span class="token operator">=</span> number <span class="token operator">/</span> i<span class="token punctuation">;</span>
                i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//否则i++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-启动demo" tabindex="-1"><a class="header-anchor" href="#_2-启动demo" aria-hidden="true">#</a> 2. 启动Demo</h4><h5 id="命令-1" tabindex="-1"><a class="header-anchor" href="#命令-1" aria-hidden="true">#</a> 命令</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>下载已经打包好的arthas-demo.jar
curl -O https://alibaba.github.io/arthas/arthas-demo.jar

在命令行下执行
java -jar arthas-demo.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h5><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305161852822.png" alt="image-20200305161852822" style="zoom:80%;"><h4 id="_3-启动arthas" tabindex="-1"><a class="header-anchor" href="#_3-启动arthas" aria-hidden="true">#</a> 3. 启动arthas</h4><ol><li>因为arthas-demo.jar进程打开了一个窗口，所以另开一个命令窗口执行arthas-boot.jar</li><li>选择要粘附的进程：arthas-demo.jar</li></ol><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305162944714.png" alt="image-20200305162944714" style="zoom:80%;"><ol start="3"><li>如果粘附成功，在arthas-demo.jar那个窗口中会出现日志记录的信息，记录在c:\\Users\\Administrator\\logs目录下</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305163414111.png" alt="image-20200305163414111" tabindex="0" loading="lazy"><figcaption>image-20200305163414111</figcaption></figure><ol start="4"><li>如果端口号被占用，也可以通过以下命令换成另一个端口号执行</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar arthas-boot.jar --telnet-port 9998 --http-port -1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-通过浏览器连接arthas" tabindex="-1"><a class="header-anchor" href="#_4-通过浏览器连接arthas" aria-hidden="true">#</a> 4. 通过浏览器连接arthas</h4><p>Arthas目前支持Web Console，用户在attach成功之后，可以直接访问：http://127.0.0.1:3658/。</p><p>可以填入IP，远程连接其它机器上的arthas。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310091357372.png" alt="image-20200310091357372" tabindex="0" loading="lazy"><figcaption>image-20200310091357372</figcaption></figure><p>默认情况下，arthas只listen 127.0.0.1，所以如果想从远程连接，则可以使用 <code>--target-ip</code>参数指定listen的IP</p><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h3><ol><li>启动被诊断进程</li><li>启动arthas-boot.jar，粘贴上面的进程</li><li>不但可以通过命令行的方式来操作arthas也可以通过浏览器来访问arthas</li></ol><h2 id="快速入门-常用命令接触" tabindex="-1"><a class="header-anchor" href="#快速入门-常用命令接触" aria-hidden="true">#</a> 快速入门：常用命令接触</h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><ol><li>dashboard仪表板</li><li>通过thread命令来获取到<code>arthas-demo</code>进程的Main Class</li><li>通过jad来反编译Main Class</li><li>watch</li></ol><h3 id="命令介绍" tabindex="-1"><a class="header-anchor" href="#命令介绍" aria-hidden="true">#</a> 命令介绍</h3><h4 id="_1-dashboard仪表板" tabindex="-1"><a class="header-anchor" href="#_1-dashboard仪表板" aria-hidden="true">#</a> 1. dashboard仪表板</h4><p>输入dashboard(仪表板)，按<code>回车/enter</code>，会展示当前进程的信息，按<code>ctrl+c</code>可以中断执行。</p><p>注：输入前面部分字母，按tab可以自动补全命令</p><ol><li>第一部分是显示JVM中运行的所有线程：所在线程组，优先级，线程的状态，CPU的占用率，是否是后台进程等</li><li>第二部分显示的JVM内存的使用情况</li><li>第三部分是操作系统的一些信息和Java版本号</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305164047346.png" alt="image-20200305164047346" tabindex="0" loading="lazy"><figcaption>image-20200305164047346</figcaption></figure><h4 id="_2-通过thread命令来获取到arthas-demo进程的main-class" tabindex="-1"><a class="header-anchor" href="#_2-通过thread命令来获取到arthas-demo进程的main-class" aria-hidden="true">#</a> 2. 通过thread命令来获取到<code>arthas-demo</code>进程的Main Class</h4><p>获取到arthas-demo进程的Main Class</p><p><code>thread 1</code>会打印线程ID 1的栈，通常是main函数的线程。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305192646737.png" alt="image-20200305192646737" tabindex="0" loading="lazy"><figcaption>image-20200305192646737</figcaption></figure><h4 id="_3-通过jad来反编译main-class" tabindex="-1"><a class="header-anchor" href="#_3-通过jad来反编译main-class" aria-hidden="true">#</a> 3. 通过jad来反编译Main Class</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jad demo.MathGame
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305194029146.png" alt="image-20200305194029146" style="zoom:80%;"><h4 id="_4-watch监视" tabindex="-1"><a class="header-anchor" href="#_4-watch监视" aria-hidden="true">#</a> 4. watch监视</h4><p>通过watch命令来查看<code>demo.MathGame#primeFactors</code>函数的返回值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ watch demo.MathGame primeFactors returnObj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200305194740589.png" alt="image-20200305194740589" tabindex="0" loading="lazy"><figcaption>image-20200305194740589</figcaption></figure><h4 id="_5-退出arthas" tabindex="-1"><a class="header-anchor" href="#_5-退出arthas" aria-hidden="true">#</a> 5. 退出arthas</h4><p>如果只是退出当前的连接，可以用<code>quit</code>或者<code>exit</code>命令。Attach到目标进程上的arthas还会继续运行，端口会保持开放，下次连接时可以直接连接上。</p><p>如果想完全退出arthas，可以执行<code>stop</code>命令。</p><h3 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4" aria-hidden="true">#</a> 小结</h3><ol><li><p>如何启动arthas?</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>说说以下命令的作用</p></li></ol><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>dashboard</td><td>显示JVM中内存的情况，JVM中环境信息</td></tr><tr><td>thread</td><td>显示当前进程所有线程信息</td></tr><tr><td>jad</td><td>反编译指定的类或方法</td></tr><tr><td>watch</td><td>监视某个方法的执行情况，监视了返回值</td></tr><tr><td>quit，exit, stop</td><td>退出或停止arthas</td></tr></tbody></table><h2 id="基础命令之一" tabindex="-1"><a class="header-anchor" href="#基础命令之一" aria-hidden="true">#</a> 基础命令之一</h2><h3 id="目标-1" tabindex="-1"><a class="header-anchor" href="#目标-1" aria-hidden="true">#</a> 目标</h3><ol><li>help</li><li>cat</li><li>grep</li><li>pwd</li><li>cls</li></ol><h3 id="help" tabindex="-1"><a class="header-anchor" href="#help" aria-hidden="true">#</a> help</h3><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h4><p>查看命令帮助信息</p><h4 id="效果-1" tabindex="-1"><a class="header-anchor" href="#效果-1" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310092304402.png" alt="image-20200310092304402" tabindex="0" loading="lazy"><figcaption>image-20200310092304402</figcaption></figure><h3 id="cat" tabindex="-1"><a class="header-anchor" href="#cat" aria-hidden="true">#</a> cat</h3><h4 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h4><p>打印文件内容，和linux里的cat命令类似</p><p>如果没有写路径，则显示当前目录下的文件</p><h4 id="效果-2" tabindex="-1"><a class="header-anchor" href="#效果-2" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310094255080.png" alt="image-20200310094255080" tabindex="0" loading="lazy"><figcaption>image-20200310094255080</figcaption></figure><h3 id="grep" tabindex="-1"><a class="header-anchor" href="#grep" aria-hidden="true">#</a> grep</h3><h4 id="作用-2" tabindex="-1"><a class="header-anchor" href="#作用-2" aria-hidden="true">#</a> 作用</h4><p>匹配查找，和linux里的grep命令类似，但它只能用于管道命令</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><table><thead><tr><th>参数列表</th><th>作用</th></tr></thead><tbody><tr><td>-n</td><td>显示行号</td></tr><tr><td>-i</td><td>忽略大小写查找</td></tr><tr><td>-m 行数</td><td>最大显示行数，要与查询字符串一起使用</td></tr><tr><td>-e &quot;正则表达式&quot;</td><td>使用正则表达式查找</td></tr></tbody></table><h4 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>只显示包含java字符串的行系统属性
sysprop | grep java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310100425059.png" alt="image-20200310100425059" style="zoom:80%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>显示包含java字符串的行和行号的系统属性
sysprop | grep java -n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310100505632.png" alt="image-20200310100505632" style="zoom:80%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>显示包含system字符串的10行信息
thread | grep system -m 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310101905466.png" alt="image-20200310101905466" tabindex="0" loading="lazy"><figcaption>image-20200310101905466</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>使用正则表达式，显示包含2个o字符的线程信息
thread | grep -e &quot;o+&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310120512042.png" alt="image-20200310120512042" tabindex="0" loading="lazy"><figcaption>image-20200310120512042</figcaption></figure><h3 id="pwd" tabindex="-1"><a class="header-anchor" href="#pwd" aria-hidden="true">#</a> pwd</h3><h4 id="作用-3" tabindex="-1"><a class="header-anchor" href="#作用-3" aria-hidden="true">#</a> 作用</h4><p>返回当前的工作目录，和linux命令类似</p><p>pwd: Print Work Directory 打印当前工作目录</p><h4 id="效果-3" tabindex="-1"><a class="header-anchor" href="#效果-3" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310121645656.png" alt="image-20200310121645656" tabindex="0" loading="lazy"><figcaption>image-20200310121645656</figcaption></figure><h3 id="cls" tabindex="-1"><a class="header-anchor" href="#cls" aria-hidden="true">#</a> cls</h3><h4 id="作用-4" tabindex="-1"><a class="header-anchor" href="#作用-4" aria-hidden="true">#</a> 作用</h4><p>清空当前屏幕区域</p><h3 id="小结-5" tabindex="-1"><a class="header-anchor" href="#小结-5" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th>基础命令</th><th>作用</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="基础命令之二" tabindex="-1"><a class="header-anchor" href="#基础命令之二" aria-hidden="true">#</a> 基础命令之二</h2><h3 id="目标-2" tabindex="-1"><a class="header-anchor" href="#目标-2" aria-hidden="true">#</a> 目标</h3><ol><li>session</li><li>reset</li><li>version</li><li>quit</li><li>stop</li><li>keymap</li></ol><h3 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> session</h3><h4 id="作用-5" tabindex="-1"><a class="header-anchor" href="#作用-5" aria-hidden="true">#</a> 作用</h4><p>查看当前会话的信息</p><h4 id="效果-4" tabindex="-1"><a class="header-anchor" href="#效果-4" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310121756253.png" alt="image-20200310121756253" tabindex="0" loading="lazy"><figcaption>image-20200310121756253</figcaption></figure><h3 id="reset" tabindex="-1"><a class="header-anchor" href="#reset" aria-hidden="true">#</a> reset</h3><h4 id="作用-6" tabindex="-1"><a class="header-anchor" href="#作用-6" aria-hidden="true">#</a> 作用</h4><p>重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</p><h4 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>还原指定类
reset Test

还原所有以List结尾的类
reset *List

还原所有的类
reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="效果-5" tabindex="-1"><a class="header-anchor" href="#效果-5" aria-hidden="true">#</a> 效果</h4><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310133822171.png" alt="image-20200310133822171" style="zoom:80%;"><h3 id="version" tabindex="-1"><a class="header-anchor" href="#version" aria-hidden="true">#</a> version</h3><h4 id="作用-7" tabindex="-1"><a class="header-anchor" href="#作用-7" aria-hidden="true">#</a> 作用</h4><p>输出当前目标 Java 进程所加载的 Arthas 版本号</p><h4 id="效果-6" tabindex="-1"><a class="header-anchor" href="#效果-6" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310135728790.png" alt="image-20200310135728790" tabindex="0" loading="lazy"><figcaption>image-20200310135728790</figcaption></figure><h4 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h4><h4 id="作用-8" tabindex="-1"><a class="header-anchor" href="#作用-8" aria-hidden="true">#</a> 作用</h4><p>打印命令历史</p><h4 id="效果-7" tabindex="-1"><a class="header-anchor" href="#效果-7" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310135806184.png" alt="image-20200310135806184" tabindex="0" loading="lazy"><figcaption>image-20200310135806184</figcaption></figure><h3 id="quit" tabindex="-1"><a class="header-anchor" href="#quit" aria-hidden="true">#</a> quit</h3><h4 id="作用-9" tabindex="-1"><a class="header-anchor" href="#作用-9" aria-hidden="true">#</a> 作用</h4><p>退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</p><h3 id="stop" tabindex="-1"><a class="header-anchor" href="#stop" aria-hidden="true">#</a> stop</h3><h4 id="作用-10" tabindex="-1"><a class="header-anchor" href="#作用-10" aria-hidden="true">#</a> 作用</h4><p>关闭 Arthas 服务端，所有 Arthas 客户端全部退出</p><h4 id="效果-8" tabindex="-1"><a class="header-anchor" href="#效果-8" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310140114118.png" alt="image-20200310140114118" tabindex="0" loading="lazy"><figcaption>image-20200310140114118</figcaption></figure><h3 id="keymap" tabindex="-1"><a class="header-anchor" href="#keymap" aria-hidden="true">#</a> keymap</h3><h4 id="作用-11" tabindex="-1"><a class="header-anchor" href="#作用-11" aria-hidden="true">#</a> 作用</h4><p>Arthas快捷键列表及自定义快捷键</p><h4 id="效果-9" tabindex="-1"><a class="header-anchor" href="#效果-9" aria-hidden="true">#</a> 效果</h4><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310140330818.png" alt="image-20200310140330818" style="zoom:80%;"><h4 id="arthas-命令行快捷键" tabindex="-1"><a class="header-anchor" href="#arthas-命令行快捷键" aria-hidden="true">#</a> Arthas 命令行快捷键</h4><table><thead><tr><th>快捷键说明</th><th>命令说明</th></tr></thead><tbody><tr><td>ctrl + a</td><td>跳到行首</td></tr><tr><td>ctrl + e</td><td>跳到行尾</td></tr><tr><td>ctrl + f</td><td>向前移动一个单词</td></tr><tr><td>ctrl + b</td><td>向后移动一个单词</td></tr><tr><td>键盘左方向键</td><td>光标向前移动一个字符</td></tr><tr><td>键盘右方向键</td><td>光标向后移动一个字符</td></tr><tr><td>键盘下方向键</td><td>下翻显示下一个命令</td></tr><tr><td>键盘上方向键</td><td>上翻显示上一个命令</td></tr><tr><td>ctrl + h</td><td>向后删除一个字符</td></tr><tr><td>ctrl + shift + /</td><td>向后删除一个字符</td></tr><tr><td>ctrl + u</td><td>撤销上一个命令，相当于清空当前行</td></tr><tr><td>ctrl + d</td><td>删除当前光标所在字符</td></tr><tr><td>ctrl + k</td><td>删除当前光标到行尾的所有字符</td></tr><tr><td>ctrl + i</td><td>自动补全，相当于敲<code>TAB</code></td></tr><tr><td>ctrl + j</td><td>结束当前行，相当于敲回车</td></tr><tr><td>ctrl + m</td><td>结束当前行，相当于敲回车</td></tr></tbody></table><ul><li>任何时候 <code>tab</code> 键，会根据当前的输入给出提示</li><li>命令后敲 <code>-</code> 或 <code>--</code> ，然后按 <code>tab</code> 键，可以展示出此命令具体的选项</li></ul><h3 id="后台异步命令相关快捷键" tabindex="-1"><a class="header-anchor" href="#后台异步命令相关快捷键" aria-hidden="true">#</a> 后台异步命令相关快捷键</h3><ul><li>ctrl + c: 终止当前命令</li><li>ctrl + z: 挂起当前命令，后续可以 bg/fg 重新支持此命令，或 kill 掉</li><li>ctrl + a: 回到行首</li><li>ctrl + e: 回到行尾</li></ul><h3 id="小结-6" tabindex="-1"><a class="header-anchor" href="#小结-6" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>session</td><td>显示当前会话的信息：进程的ID，会话ID</td></tr><tr><td>reset</td><td>重置类的增强，服务器关闭的时候会自动重置所有的类</td></tr><tr><td>version</td><td>显示arthas版本号</td></tr><tr><td>quit</td><td>退出当前会话，不会影响其它的会话</td></tr><tr><td>stop</td><td>退出arthas服务器，所有的会话都停止</td></tr><tr><td>keymap</td><td>获取快捷键</td></tr></tbody></table><h2 id="jvm相关命令之一" tabindex="-1"><a class="header-anchor" href="#jvm相关命令之一" aria-hidden="true">#</a> jvm相关命令之一</h2><h3 id="目标-3" tabindex="-1"><a class="header-anchor" href="#目标-3" aria-hidden="true">#</a> 目标</h3><ol><li>dashboard 仪表板</li><li>thread 线程相关</li><li>jvm 虚拟机相关</li><li>sysprop 系统属性相关</li></ol><h3 id="dashboard" tabindex="-1"><a class="header-anchor" href="#dashboard" aria-hidden="true">#</a> dashboard</h3><h4 id="作用-12" tabindex="-1"><a class="header-anchor" href="#作用-12" aria-hidden="true">#</a> 作用</h4><p>显示当前系统的实时数据面板，按q或ctrl+c退出</p><h4 id="效果-10" tabindex="-1"><a class="header-anchor" href="#效果-10" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310154559668.png" alt="image-20200310154559668" tabindex="0" loading="lazy"><figcaption>image-20200310154559668</figcaption></figure><h4 id="数据说明" tabindex="-1"><a class="header-anchor" href="#数据说明" aria-hidden="true">#</a> 数据说明</h4><ul><li>ID: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应</li><li>NAME: 线程名</li><li>GROUP: 线程组名</li><li>PRIORITY: 线程优先级, 1~10之间的数字，越大表示优先级越高</li><li>STATE: 线程的状态</li><li>CPU%: 线程消耗的cpu占比，采样100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。</li><li>TIME: 线程运行总时间，数据格式为<code>分：秒</code></li><li>INTERRUPTED: 线程当前的中断位状态</li><li>DAEMON: 是否是daemon线程</li></ul><h3 id="thread线程相关" tabindex="-1"><a class="header-anchor" href="#thread线程相关" aria-hidden="true">#</a> thread线程相关</h3><h4 id="作用-13" tabindex="-1"><a class="header-anchor" href="#作用-13" aria-hidden="true">#</a> 作用</h4><p>查看当前 JVM 的线程堆栈信息</p><h4 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h4><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>数字</td><td>线程id</td></tr><tr><td>[n:]</td><td>指定最忙的前N个线程并打印堆栈</td></tr><tr><td>[b]</td><td>找出当前阻塞其他线程的线程</td></tr><tr><td>[i &lt;value&gt;]</td><td>指定cpu占比统计的采样间隔，单位为毫秒</td></tr></tbody></table><h4 id="举例-1" tabindex="-1"><a class="header-anchor" href="#举例-1" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>展示当前最忙的前3个线程并打印堆栈
thread -n 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310155221455.png" alt="image-20200310155221455" tabindex="0" loading="lazy"><figcaption>image-20200310155221455</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>当没有参数时，显示所有线程的信息
thread
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>显示1号线程的运行堆栈
thread 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310155351705.png" alt="image-20200310155351705" tabindex="0" loading="lazy"><figcaption>image-20200310155351705</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>找出当前阻塞其他线程的线程，有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas提供了thread -b， 一键找出那个罪魁祸首。
thread -b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310155534864.png" alt="image-20200310155534864" tabindex="0" loading="lazy"><figcaption>image-20200310155534864</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>指定采样时间间隔，每过1000毫秒采样，显示最占时间的3个线程
thread -i 1000 -n 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310155902397.png" alt="image-20200310155902397" tabindex="0" loading="lazy"><figcaption>image-20200310155902397</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查看处于等待状态的线程
thread --state WAITING
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310160036202.png" alt="image-20200310160036202" tabindex="0" loading="lazy"><figcaption>image-20200310160036202</figcaption></figure><h3 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> jvm</h3><h4 id="作用-14" tabindex="-1"><a class="header-anchor" href="#作用-14" aria-hidden="true">#</a> 作用</h4><p>查看当前 JVM 的信息</p><h4 id="效果-11" tabindex="-1"><a class="header-anchor" href="#效果-11" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310160418837.png" alt="image-20200310160418837" tabindex="0" loading="lazy"><figcaption>image-20200310160418837</figcaption></figure><h4 id="thread相关" tabindex="-1"><a class="header-anchor" href="#thread相关" aria-hidden="true">#</a> THREAD相关</h4><ul><li>COUNT: JVM当前活跃的线程数</li><li>DAEMON-COUNT: JVM当前活跃的守护线程数</li><li>PEAK-COUNT: 从JVM启动开始曾经活着的最大线程数</li><li>STARTED-COUNT: 从JVM启动开始总共启动过的线程次数</li><li>DEADLOCK-COUNT: JVM当前死锁的线程数</li></ul><h4 id="文件描述符相关" tabindex="-1"><a class="header-anchor" href="#文件描述符相关" aria-hidden="true">#</a> 文件描述符相关</h4><ul><li>MAX-FILE-DESCRIPTOR-COUNT：JVM进程最大可以打开的文件描述符数</li><li>OPEN-FILE-DESCRIPTOR-COUNT：JVM当前打开的文件描述符数</li></ul><h3 id="sysprop" tabindex="-1"><a class="header-anchor" href="#sysprop" aria-hidden="true">#</a> sysprop</h3><h4 id="作用-15" tabindex="-1"><a class="header-anchor" href="#作用-15" aria-hidden="true">#</a> 作用</h4><p>查看和修改JVM的系统属性</p><h4 id="举例-2" tabindex="-1"><a class="header-anchor" href="#举例-2" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查看所有属性
sysprop

查看单个属性，支持通过tab补全
sysprop java.version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310161328775.png" alt="image-20200310161328775" tabindex="0" loading="lazy"><figcaption>image-20200310161328775</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>修改单个属性
sysprop user.country
user.country=US

sysprop user.country CN
Successfully changed the system property.
user.country=CN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310161425897.png" alt="image-20200310161425897" tabindex="0" loading="lazy"><figcaption>image-20200310161425897</figcaption></figure><h3 id="小结-7" tabindex="-1"><a class="header-anchor" href="#小结-7" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th>jvm相关命令</th><th>说明</th></tr></thead><tbody><tr><td>dashboard</td><td>显示线程，内存，GC，系统环境等信息</td></tr><tr><td>thread</td><td>显示线程信息</td></tr><tr><td>jvm</td><td>与JVM相关的信息</td></tr><tr><td>sysprop</td><td>显示系统属性信息，也可以修改某个属性</td></tr></tbody></table><h2 id="jvm相关命令之二" tabindex="-1"><a class="header-anchor" href="#jvm相关命令之二" aria-hidden="true">#</a> jvm相关命令之二</h2><h3 id="目标-4" tabindex="-1"><a class="header-anchor" href="#目标-4" aria-hidden="true">#</a> 目标</h3><ol><li>sysenv</li><li>vmoption</li><li>getstatic</li><li>ognl</li></ol><h3 id="sysenv" tabindex="-1"><a class="header-anchor" href="#sysenv" aria-hidden="true">#</a> sysenv</h3><h4 id="作用-16" tabindex="-1"><a class="header-anchor" href="#作用-16" aria-hidden="true">#</a> 作用</h4><p>查看当前JVM的环境属性(<code>System Environment Variables</code>)</p><h4 id="举例-3" tabindex="-1"><a class="header-anchor" href="#举例-3" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查看所有环境变量
sysenv

查看单个环境变量
sysenv USER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="效果-12" tabindex="-1"><a class="header-anchor" href="#效果-12" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310161659199.png" alt="image-20200310161659199" tabindex="0" loading="lazy"><figcaption>image-20200310161659199</figcaption></figure><h3 id="vmoption" tabindex="-1"><a class="header-anchor" href="#vmoption" aria-hidden="true">#</a> vmoption</h3><h4 id="作用-17" tabindex="-1"><a class="header-anchor" href="#作用-17" aria-hidden="true">#</a> 作用</h4><p>查看，更新VM诊断相关的参数</p><h4 id="举例-4" tabindex="-1"><a class="header-anchor" href="#举例-4" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查看所有的选项
vmoption

查看指定的选项
vmoption PrintGCDetails
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310162027027.png" alt="image-20200310162027027" tabindex="0" loading="lazy"><figcaption>image-20200310162027027</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>更新指定的选项
vmoption PrintGCDetails true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310162052792.png" alt="image-20200310162052792" style="zoom:80%;"><h3 id="getstatic" tabindex="-1"><a class="header-anchor" href="#getstatic" aria-hidden="true">#</a> getstatic</h3><h4 id="作用-18" tabindex="-1"><a class="header-anchor" href="#作用-18" aria-hidden="true">#</a> 作用</h4><p>通过getstatic命令可以方便的查看类的静态属性</p><h4 id="语法-2" tabindex="-1"><a class="header-anchor" href="#语法-2" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>getstatic 类名 属性名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="举例-5" tabindex="-1"><a class="header-anchor" href="#举例-5" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>显示demo.MathGame类中静态属性random
getstatic demo.MathGame random
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310163124333.png" alt="image-20200310163124333" style="zoom:80%;"><h3 id="ognl" tabindex="-1"><a class="header-anchor" href="#ognl" aria-hidden="true">#</a> ognl</h3><h4 id="作用-19" tabindex="-1"><a class="header-anchor" href="#作用-19" aria-hidden="true">#</a> 作用</h4><p>执行ognl表达式，这是从3.0.5版本新增的功能</p><h4 id="ognl语法" tabindex="-1"><a class="header-anchor" href="#ognl语法" aria-hidden="true">#</a> OGNL语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://commons.apache.org/proper/commons-ognl/language-guide.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200319143015562.png" alt="image-20200319143015562" tabindex="0" loading="lazy"><figcaption>image-20200319143015562</figcaption></figure><h4 id="参数说明-1" tabindex="-1"><a class="header-anchor" href="#参数说明-1" aria-hidden="true">#</a> 参数说明</h4><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>express</em></td><td>执行的表达式</td></tr><tr><td><code>[c:]</code></td><td>执行表达式的 ClassLoader 的 hashcode，默认值是SystemClassLoader</td></tr><tr><td>[x]</td><td>结果对象的展开层次，默认值1</td></tr></tbody></table><h4 id="举例-6" tabindex="-1"><a class="header-anchor" href="#举例-6" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>调用静态函数
ognl &#39;@java.lang.System@out.println(&quot;hello&quot;)&#39;

获取静态类的静态字段
ognl &#39;@demo.MathGame@random&#39;

执行多行表达式，赋值给临时变量，返回一个List
ognl &#39;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), {#value1, #value2}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="效果-13" tabindex="-1"><a class="header-anchor" href="#效果-13" aria-hidden="true">#</a> 效果</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310165348164.png" alt="image-20200310165348164" tabindex="0" loading="lazy"><figcaption>image-20200310165348164</figcaption></figure><h3 id="小结-8" tabindex="-1"><a class="header-anchor" href="#小结-8" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th>jvm相关命令</th><th>说明</th></tr></thead><tbody><tr><td>sysenv</td><td>查看JVM环境变量的值</td></tr><tr><td>vmoption</td><td>查看JVM中选项，可以修改</td></tr><tr><td>getstatic</td><td>获取静态成员变量</td></tr><tr><td>ognl</td><td>执行一个ognl表达式</td></tr></tbody></table><h2 id="class-classloader相关命令之一" tabindex="-1"><a class="header-anchor" href="#class-classloader相关命令之一" aria-hidden="true">#</a> class/classloader相关命令之一</h2><h3 id="目标-5" tabindex="-1"><a class="header-anchor" href="#目标-5" aria-hidden="true">#</a> 目标</h3><ol><li>sc: Search Class</li><li>sm: Search Method</li></ol><h3 id="sc" tabindex="-1"><a class="header-anchor" href="#sc" aria-hidden="true">#</a> sc</h3><h4 id="作用-20" tabindex="-1"><a class="header-anchor" href="#作用-20" aria-hidden="true">#</a> 作用</h4><p>查看JVM已加载的类信息，“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息</p><p>sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开<code>options disable-sub-class true</code>开关</p><h4 id="参数说明-2" tabindex="-1"><a class="header-anchor" href="#参数说明-2" aria-hidden="true">#</a> 参数说明</h4><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配，支持全限定名，如com.taobao.test.AAA，也支持com/taobao/test/AAA这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把<code>/</code>替换为<code>.</code>啦。</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td>[d]</td><td>输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的ClassLoader等详细信息。 如果一个类被多个ClassLoader所加载，则会出现多次</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td>[f]</td><td>输出当前类的成员变量信息（需要配合参数-d一起使用）</td></tr></tbody></table><h4 id="举例-7" tabindex="-1"><a class="header-anchor" href="#举例-7" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>模糊搜索，demo包下所有的类
sc demo.*

打印类的详细信息
sc -d demo.MathGame
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310183345427.png" alt="image-20200310183345427" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>打印出类的Field信息
sc -df demo.MathGame
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310183455546.png" alt="image-20200310183455546" style="zoom:67%;"><h3 id="sm" tabindex="-1"><a class="header-anchor" href="#sm" aria-hidden="true">#</a> sm</h3><h4 id="作用-21" tabindex="-1"><a class="header-anchor" href="#作用-21" aria-hidden="true">#</a> 作用</h4><p>查看已加载类的方法信息</p><p>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。</p><p><code>sm</code> 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。</p><h4 id="参数说明-3" tabindex="-1"><a class="header-anchor" href="#参数说明-3" aria-hidden="true">#</a> 参数说明</h4><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td>[d]</td><td>展示每个方法的详细信息</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr></tbody></table><h4 id="举例-8" tabindex="-1"><a class="header-anchor" href="#举例-8" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>显示String类加载的方法
sm java.lang.String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310195834379.png" alt="image-20200310195834379" style="zoom:80%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>显示String中的toString方法详细信息
sm -d java.lang.String toString
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310195915544.png" alt="image-20200310195915544" style="zoom:80%;"><h3 id="小结-9" tabindex="-1"><a class="header-anchor" href="#小结-9" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th>与类相关的命令</th><th>说明</th></tr></thead><tbody><tr><td>sc</td><td>Search Class 显示类相关的信息</td></tr><tr><td>sm</td><td>Search Method 显示方法相关的信息</td></tr></tbody></table><h2 id="class-classloader相关命令之二" tabindex="-1"><a class="header-anchor" href="#class-classloader相关命令之二" aria-hidden="true">#</a> class/classloader相关命令之二</h2><h3 id="目标-6" tabindex="-1"><a class="header-anchor" href="#目标-6" aria-hidden="true">#</a> 目标</h3><ol><li>jad 把字节码文件反编译成源代码</li><li>mc 在内存中把源代码编译成字节码文件</li><li>redefine 把新生成的字节码文件在内存中执行</li></ol><h3 id="jad" tabindex="-1"><a class="header-anchor" href="#jad" aria-hidden="true">#</a> jad</h3><h4 id="作用-22" tabindex="-1"><a class="header-anchor" href="#作用-22" aria-hidden="true">#</a> 作用</h4><p>反编译指定已加载类源码</p><blockquote><p><code>jad</code> 命令将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；</p><p>在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便</p><p>当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解</p></blockquote><h4 id="参数说明-4" tabindex="-1"><a class="header-anchor" href="#参数说明-4" aria-hidden="true">#</a> 参数说明</h4><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr></tbody></table><h4 id="举例-9" tabindex="-1"><a class="header-anchor" href="#举例-9" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>编译java.lang.String
jad java.lang.String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>反编绎时只显示源代码，默认情况下，反编译结果里会带有ClassLoader信息，通过--source-only选项，可以只打印源代码。方便和mc/redefine命令结合使用。
jad --source-only demo.MathGame
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,283),h=n(`<img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310214123430.png" alt="image-20200310214123430" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>反编译指定的函数
jad demo.MathGame main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310214327498.png" alt="image-20200310214327498" style="zoom:67%;"><h3 id="mc" tabindex="-1"><a class="header-anchor" href="#mc" aria-hidden="true">#</a> mc</h3><h4 id="作用-23" tabindex="-1"><a class="header-anchor" href="#作用-23" aria-hidden="true">#</a> 作用</h4><p>Memory Compiler/内存编译器，编译<code>.java</code>文件生成<code>.class</code></p><h4 id="举例-10" tabindex="-1"><a class="header-anchor" href="#举例-10" aria-hidden="true">#</a> 举例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在内存中编译Hello.java为Hello.class
mc /root/Hello.java

可以通过-d命令指定输出目录
mc -d /root/bbb /root/Hello.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="效果-14" tabindex="-1"><a class="header-anchor" href="#效果-14" aria-hidden="true">#</a> 效果</h4><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310215259222.png" alt="image-20200310215259222" style="zoom:80%;"><h3 id="redefine" tabindex="-1"><a class="header-anchor" href="#redefine" aria-hidden="true">#</a> redefine</h3><h4 id="作用-24" tabindex="-1"><a class="header-anchor" href="#作用-24" aria-hidden="true">#</a> 作用</h4><p>加载外部的<code>.class</code>文件，redefine到JVM里</p><blockquote><p>注意， redefine后的原来的类不能恢复，redefine有可能失败（比如增加了新的field）。</p></blockquote><blockquote><p><code>reset</code>命令对<code>redefine</code>的类无效。如果想重置，需要<code>redefine</code>原始的字节码。</p></blockquote><blockquote><p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。</p></blockquote><h4 id="redefine的限制" tabindex="-1"><a class="header-anchor" href="#redefine的限制" aria-hidden="true">#</a> redefine的限制</h4><ul><li>不允许新增加field/method</li><li>正在跑的函数，没有退出不能生效，比如下面新增加的<code>System.out.println</code>，只有<code>run()</code>函数里的会生效</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathGame</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MathGame</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MathGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            game<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这个不生效，因为代码一直跑在 while里</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;in loop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个生效，因为run()函数每次都可以完整结束</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;call run()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primeFactors <span class="token operator">=</span> <span class="token function">primeFactors</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> primeFactors<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;illegalArgumentCount:%3d, &quot;</span><span class="token punctuation">,</span> illegalArgumentCount<span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例-结合-jad-mc-命令使用" tabindex="-1"><a class="header-anchor" href="#案例-结合-jad-mc-命令使用" aria-hidden="true">#</a> 案例：结合 jad/mc 命令使用</h4><h5 id="步骤-2" tabindex="-1"><a class="header-anchor" href="#步骤-2" aria-hidden="true">#</a> 步骤</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. 使用jad反编译demo.MathGame输出到/root/MathGame.java
jad --source-only demo.MathGame &gt; /root/MathGame.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2.按上面的代码编辑完毕以后，使用mc内存中对新的代码编译
mc /root/MathGame.java -d /root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>3.使用redefine命令加载新的字节码
redefine /root/demo/MathGame.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="结果" tabindex="-1"><a class="header-anchor" href="#结果" aria-hidden="true">#</a> 结果</h5><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310222846411.png" alt="image-20200310222846411" style="zoom:67%;"><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310222756483.png" alt="image-20200310222756483" style="zoom:67%;"><h3 id="小结-10" tabindex="-1"><a class="header-anchor" href="#小结-10" aria-hidden="true">#</a> 小结</h3><table><thead><tr><th>类相关的命令</th><th>说明</th></tr></thead><tbody><tr><td>jad</td><td>反编译字节码文件得到java的源代码</td></tr><tr><td>mc</td><td>在内存中将源代码编译成字节码</td></tr><tr><td>redefine</td><td>将字节码文件重新加载到内存中执行</td></tr></tbody></table><h2 id="学习总结" tabindex="-1"><a class="header-anchor" href="#学习总结" aria-hidden="true">#</a> 学习总结</h2><ol><li><p>安装arthas的方法</p><p>既可以安装在windows下也可以安装在Linux</p><ol><li>在线安装</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -O https://alibaba.github.io/arthas/arthas-boot.jar
java -jar arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>离线安装</p><p>将从maven仓库中下载的zip包直接解压就可以使用</p></li><li><p>卸载方式</p><p>直接删除2个文件夹：.arthas和logs</p></li></ol></li><li><p>基础命令</p><table><thead><tr><th>基础命令</th><th>功能</th></tr></thead><tbody><tr><td>help</td><td>显示所有arthas命令，每个命令都可以使用-h的参数，显示它的参数信息</td></tr><tr><td>cat</td><td>显示文本文件内容</td></tr><tr><td>grep</td><td>对内容进行过滤，只显示关心的行</td></tr><tr><td>pwd</td><td>显示当前的工作路径</td></tr><tr><td>cls</td><td>清除屏幕</td></tr><tr><td>session</td><td>显示当前连接的会话ID</td></tr><tr><td>reset</td><td>重置arthas增强的类</td></tr><tr><td>version</td><td>显示当前arthas的版本号</td></tr><tr><td>quit</td><td>退出当前的会话</td></tr><tr><td>stop</td><td>结束arthas服务器，退出所有的会话</td></tr><tr><td>keymap</td><td>显示所有的快捷键</td></tr></tbody></table></li><li><p>jvm相关命令</p><table><thead><tr><th>jvm相关命令</th><th>说明</th></tr></thead><tbody><tr><td>dashboard</td><td>仪表板，可以显示：线程，内存，堆栈，GC，Runtime等信息</td></tr><tr><td>thread</td><td>显示线程的堆栈</td></tr><tr><td>jvm</td><td>显示java虚拟机信息</td></tr><tr><td>sysprop</td><td>显示jvm中系统属性，也可以修改某个属性</td></tr><tr><td>sysenv</td><td>显示jvm中系统环境变量配置信息</td></tr><tr><td>vmoption</td><td>显示jvm中选项信息</td></tr><tr><td>getstatic</td><td>获取类中静态成员变量</td></tr><tr><td>ognl</td><td>执行一条ognl表达式，对象图导航语言</td></tr></tbody></table></li><li><p>class和classloader相关命令</p><table><thead><tr><th>类，类加载相关的命令</th><th>说明</th></tr></thead><tbody><tr><td>sc</td><td>Search Class 查看运行中的类信息</td></tr><tr><td>sm</td><td>Search Method 查看类中方法的信息</td></tr><tr><td>jad</td><td>反编译字节码为源代码</td></tr><tr><td>mc</td><td>Memory Compile 将源代码编译成字节码</td></tr><tr><td>redefine</td><td>将编译好的字节码文件加载到jvm中运行</td></tr></tbody></table></li></ol>`,31);function m(g,v){const s=i("ExternalLinkIcon");return d(),r("div",null,[o,e("p",null,[a("如果下载速度比较慢，可以尝试用"),e("a",p,[a("阿里云的镜像仓库"),l(s)])]),u,a(),h])}const x=t(c,[["render",m],["__file","Arthas基础-笔记.html.vue"]]);export{x as default};
