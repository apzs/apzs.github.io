const e=JSON.parse('{"key":"v-50772087","path":"/front-advance/react/06%20%E3%80%90hooks%E3%80%91.html","title":"八、react-Hook （上）","lang":"zh-CN","frontmatter":{"description":"八、react-Hook （上） Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 1.准备 1.1 什么是 Hook Hooks 译为钩子，Hooks 就是在函数组件内，负责钩进外部功能的函数。 React 提供了一些常用钩子，React 也支持自定义钩子，这些钩子都是用于为函数引入外部功能。 当我们在组件中，需要引入外部功能时，就可以使用 React 提供的钩子，或者自定义钩子。","head":[["meta",{"property":"og:url","content":"https://apzs.github.io/front-advance/react/06%20%E3%80%90hooks%E3%80%91.html"}],["meta",{"property":"og:site_name","content":"apzs"}],["meta",{"property":"og:title","content":"八、react-Hook （上）"}],["meta",{"property":"og:description","content":"八、react-Hook （上） Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 1.准备 1.1 什么是 Hook Hooks 译为钩子，Hooks 就是在函数组件内，负责钩进外部功能的函数。 React 提供了一些常用钩子，React 也支持自定义钩子，这些钩子都是用于为函数引入外部功能。 当我们在组件中，需要引入外部功能时，就可以使用 React 提供的钩子，或者自定义钩子。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-05T06:05:15.000Z"}],["meta",{"property":"article:author","content":"apzs"}],["meta",{"property":"article:modified_time","content":"2024-03-05T06:05:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"八、react-Hook （上）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-05T06:05:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"apzs\\",\\"url\\":\\"https://apzs.eu.org\\"}]}"]]},"headers":[{"level":2,"title":"1.准备","slug":"_1-准备","link":"#_1-准备","children":[{"level":3,"title":"1.1  什么是 Hook","slug":"_1-1-什么是-hook","link":"#_1-1-什么是-hook","children":[]},{"level":3,"title":"1.2 动机","slug":"_1-2-动机","link":"#_1-2-动机","children":[]},{"level":3,"title":"1.3 Hook API","slug":"_1-3-hook-api","link":"#_1-3-hook-api","children":[]},{"level":3,"title":"1.4 什么时候会用 Hook","slug":"_1-4-什么时候会用-hook","link":"#_1-4-什么时候会用-hook","children":[]}]},{"level":2,"title":"2.使用 State Hook","slug":"_2-使用-state-hook","link":"#_2-使用-state-hook","children":[{"level":3,"title":"2.1 声明 State 变量","slug":"_2-1-声明-state-变量","link":"#_2-1-声明-state-变量","children":[]},{"level":3,"title":"2.2 读取 State","slug":"_2-2-读取-state","link":"#_2-2-读取-state","children":[]},{"level":3,"title":"2.3 更新 State","slug":"_2-3-更新-state","link":"#_2-3-更新-state","children":[]},{"level":3,"title":"2.4 使用多个 state 变量","slug":"_2-4-使用多个-state-变量","link":"#_2-4-使用多个-state-变量","children":[]},{"level":3,"title":"2.5 总结","slug":"_2-5-总结","link":"#_2-5-总结","children":[]}]},{"level":2,"title":"3.使用 Effect Hook","slug":"_3-使用-effect-hook","link":"#_3-使用-effect-hook","children":[{"level":3,"title":"3.1 副作用","slug":"_3-1-副作用","link":"#_3-1-副作用","children":[]},{"level":3,"title":"3.3 Effect 基本使用","slug":"_3-3-effect-基本使用","link":"#_3-3-effect-基本使用","children":[]},{"level":3,"title":"3.4 关注指定的状态","slug":"_3-4-关注指定的状态","link":"#_3-4-关注指定的状态","children":[]},{"level":3,"title":"3.5 组件销毁时执行","slug":"_3-5-组件销毁时执行","link":"#_3-5-组件销毁时执行","children":[]}]},{"level":2,"title":"4.useRef","slug":"_4-useref","link":"#_4-useref","children":[]},{"level":2,"title":"完整代码","slug":"完整代码","link":"#完整代码","children":[]},{"level":2,"title":"5 React.StrictMode 严格模式","slug":"_5-react-strictmode-严格模式","link":"#_5-react-strictmode-严格模式","children":[]},{"level":2,"title":"5.useReducer","slug":"_5-usereducer","link":"#_5-usereducer","children":[{"level":3,"title":"5.1 基本使用","slug":"_5-1-基本使用","link":"#_5-1-基本使用","children":[]},{"level":3,"title":"5.2 state初始化的两种方式","slug":"_5-2-state初始化的两种方式","link":"#_5-2-state初始化的两种方式","children":[]},{"level":3,"title":"5.3 跳过 dispatch","slug":"_5-3-跳过-dispatch","link":"#_5-3-跳过-dispatch","children":[]}]},{"level":2,"title":"1.React.memo","slug":"_1-react-memo","link":"#_1-react-memo","children":[{"level":3,"title":"1.1 基本介绍","slug":"_1-1-基本介绍","link":"#_1-1-基本介绍","children":[]},{"level":3,"title":"1.2 问题的引出","slug":"_1-2-问题的引出","link":"#_1-2-问题的引出","children":[]},{"level":3,"title":"1.3 使用React.memo","slug":"_1-3-使用react-memo","link":"#_1-3-使用react-memo","children":[]},{"level":3,"title":"1.4 使用注意","slug":"_1-4-使用注意","link":"#_1-4-使用注意","children":[]},{"level":3,"title":"1.5 容易出错的情况","slug":"_1-5-容易出错的情况","link":"#_1-5-容易出错的情况","children":[]}]},{"level":2,"title":"2.useCallback","slug":"_2-usecallback","link":"#_2-usecallback","children":[{"level":3,"title":"2.1 基本介绍","slug":"_2-1-基本介绍","link":"#_2-1-基本介绍","children":[]},{"level":3,"title":"2.2 解决1.5遗留的问题","slug":"_2-2-解决1-5遗留的问题","link":"#_2-2-解决1-5遗留的问题","children":[]},{"level":3,"title":"2.3 第二个参数的使用","slug":"_2-3-第二个参数的使用","link":"#_2-3-第二个参数的使用","children":[]}]},{"level":2,"title":"3.useMemo","slug":"_3-usememo","link":"#_3-usememo","children":[{"level":3,"title":"3.1 问题的引出","slug":"_3-1-问题的引出","link":"#_3-1-问题的引出","children":[]},{"level":3,"title":"3.2 使用 useMemo 解决上面的问题","slug":"_3-2-使用-usememo-解决上面的问题","link":"#_3-2-使用-usememo-解决上面的问题","children":[]},{"level":3,"title":"3.3 第二个参数的使用","slug":"_3-3-第二个参数的使用","link":"#_3-3-第二个参数的使用","children":[]}]},{"level":2,"title":"4.React.forwardRef","slug":"_4-react-forwardref","link":"#_4-react-forwardref","children":[]},{"level":2,"title":"5.useImperativeHandle","slug":"_5-useimperativehandle","link":"#_5-useimperativehandle","children":[]}],"git":{"createdTime":1708674856000,"updatedTime":1709618715000,"contributors":[{"name":"zhaoshuo","email":"apzs@foxmaill.com","commits":2}]},"readingTime":{"minutes":32.44,"words":9731},"filePathRelative":"front-advance/react/06 【hooks】.md","localizedDate":"2024年2月23日","excerpt":"<h1> 八、react-Hook （上）</h1>\\n<p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\\n<h2> 1.准备</h2>\\n<h3> 1.1  什么是 Hook</h3>\\n<p>Hooks 译为钩子，Hooks 就是在函数组件内，负责钩进外部功能的函数。</p>\\n<p>React 提供了一些常用钩子，React 也支持自定义钩子，这些钩子都是用于为函数引入外部功能。</p>\\n<p>当我们在组件中，需要引入外部功能时，就可以使用 React 提供的钩子，或者自定义钩子。</p>","autoDesc":true}');export{e as data};
