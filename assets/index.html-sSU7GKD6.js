import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-ldxHvpH7.js";const l={},r=n("h1",{id:"尚品汇项目学习笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#尚品汇项目学习笔记","aria-hidden":"true"},"#"),s(" 尚品汇项目学习笔记")],-1),u={href:"https://www.bilibili.com/video/BV1Vf4y1T7bw",title:"尚硅谷VUE项目实战，前端项目-尚品汇(大型\\重磅)_哔哩哔哩_bilibili",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"参考笔记：",-1),k=n("p",null,"https://gitee.com/mfx_mmc/shangPinHuiAPP",-1),m=n("p",null,"https://blog.csdn.net/qq_45847016/category_11682565.html",-1),v=n("p",null,"https://blog.csdn.net/qq_49575831/article/details/127482266",-1),g=n("p",null,"https://blog.csdn.net/yuran1/article/details/126712531",-1),b=n("p",null,"https://blog.csdn.net/weixin_43424325/article/details/121684101",-1),h=n("h2",{id:"一、创建vue-cli项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、创建vue-cli项目","aria-hidden":"true"},"#"),s(" 一、创建vue-cli项目")],-1),y={href:"https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},f={href:"https://nodejs.org/zh-cn/",title:"Node.js",target:"_blank",rel:"noopener noreferrer"},w={href:"https://so.csdn.net/so/search?q=webpack&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},x={href:"https://webpack.docschina.org/",title:"webpack",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>上面的初始环境配置好了后，全局安装vue-cli脚手架：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>num install <span class="token operator">-</span>g @vue<span class="token operator">/</span>cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在电脑中创建目录<code>project-SHP</code></p><p>在对应目录下创建项目——创建项目命令：(选<code>vue2</code>)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vue create app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221203114244547.png" alt="image-20221203114244547" tabindex="0" loading="lazy"><figcaption>image-20221203114244547</figcaption></figure><p>创建好项目后，先了解对应的目录结构</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>node_modules</td><td>项目依赖文件夹</td></tr><tr><td>public</td><td>静态资源目录，单页面应用SPA就是基于此文件夹中的index.html创建的。一般放置一些静态资源（图片等），需要注意，放在public文件夹中的静态资源，webpack进行打包的时候，会原封不动打包到dist文件夹中</td></tr><tr><td>src</td><td>程序员源代码文件夹，你所写的代码都在这里assets放置静态资源（一般放置多个组件共用的静态资源），在webpack打包时，会把此文件夹中的静态资源当做一个模块打包到js文件中components放置非路由组件（全局组件）App.vue项目的唯一根组件，vue当中的组件都是.vuemain.js程序入口文件，也是整个程序当中最先执行的文件</td></tr><tr><td>.gitgnore</td><td>git忽略文件，一般不碰它</td></tr><tr><td>babel.config.js</td><td>配置文件，与babel相关，功能很多，比如可以把ES6自动翻译为ES5</td></tr><tr><td>package.json</td><td>项目信息，类似人的身份证，记录了项目叫什么、有哪些依赖、项目怎么运行等</td></tr><tr><td>package-lock.json</td><td>缓存性文件，记录了项目中的依赖包是哪里来的，方便后续的扩展和变更</td></tr><tr><td>README.md</td><td>说明性文件，对于项目创建、运行、安装依赖等，都有基础的语法命令说明</td></tr></tbody></table><p>如果出现了如下的错误，可以使用管理员方式运行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> Error: command failed: npm install --loglevel error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221203114434728.png" alt="image-20221203114434728" tabindex="0" loading="lazy"><figcaption>image-20221203114434728</figcaption></figure><p>或将<code>C:\\Users\\[用户名]\\.vuerc</code>文件的<code>useTaobaoRegistry</code>修改为<code>ture</code>（亲测不生效，还是使用管理员吧）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221203114630243.png" alt="image-20221203114630243" tabindex="0" loading="lazy"><figcaption>image-20221203114630243</figcaption></figure><h2 id="二、项目的其他配置" tabindex="-1"><a class="header-anchor" href="#二、项目的其他配置" aria-hidden="true">#</a> 二、项目的其他配置</h2><h3 id="_1、项目运行时-浏览器自启动" tabindex="-1"><a class="header-anchor" href="#_1、项目运行时-浏览器自启动" aria-hidden="true">#</a> 1、项目运行时，浏览器自启动</h3><p>可以使用下面的命令运行项目：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm run serve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>项目运行后，浏览器不会自动打开，需要手动配置：</p><p>package.json文件里面是一个对象，只需要在<code>package.json</code>文件中的<code>script</code>属性里，对应的serve属性值后面加上open即可：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve --open&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221203115639598.png" alt="image-20221203115639598" tabindex="0" loading="lazy"><figcaption>image-20221203115639598</figcaption></figure><h3 id="_2、eslint校验功能关闭" tabindex="-1"><a class="header-anchor" href="#_2、eslint校验功能关闭" aria-hidden="true">#</a> 2、eslint校验功能关闭</h3><p>eslint校验很严格，比如声明了的变量，如果没有使用的话，eslint校验工具就会进行报错，对于日常开发来说不太友好，需要进行配置：</p><p>在根目录下创建<code>vue.config.js</code>文件，并在其中添加以下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token comment">// 关闭eslint</span>
    <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span><span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221203120331502.png" alt="image-20221203120331502" tabindex="0" loading="lazy"><figcaption>image-20221203120331502</figcaption></figure><h3 id="_3、src文件夹别名" tabindex="-1"><a class="header-anchor" href="#_3、src文件夹别名" aria-hidden="true">#</a> 3、src文件夹别名</h3><p>src目录中的文件很多，对于需要import的目录，可能需要写很多的路径，可以将src目录配置为@ (现在已经默认有了，不需要配置)</p><p>在根目录下创建<code>jsconfig.json</code>文件并添加如下代码：（这个文件是告诉vscode用的，表示说@代表你配置的这个src目录，你之后引入的所有文件，凡是带了@的，都会到对应的src目录中找，而使用exclude将node_modules和dist排除后，vscode就不会在这两个目录里面查找文件了，提高效率）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;src/*&quot;</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;dist&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@代表src文件夹，如果将来文件过多，找的时候会很方便</p><p><strong>注意：@符简写不应该在node_modules 和dist目录中使用！效率会变低，上面有说明！</strong></p><h2 id="三、项目路由分析" tabindex="-1"><a class="header-anchor" href="#三、项目路由分析" aria-hidden="true">#</a> 三、项目路由分析</h2><p>线上项目链接：[gulishop](http://82.156.11.187/ title=)</p><p>根据页面，可以将项目分为 上-中-下 结构：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YuH5b6A55u05YmNXg==,size_19,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YuH5b6A55u05YmNXg==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YuH5b6A55u05YmNXg==,size_20,color_FFFFFF,t_70,g_se,x_16-1670038081163102.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过点击各个按钮，可以基本分析出以下结构——</p><p>路由组件：Home首页路由组件、Search路由组件、login登录路由、register注册路由</p><p>非路由组件：Header（所有页面都有）、Footer(首页、搜索页)</p><h2 id="四、使用less" tabindex="-1"><a class="header-anchor" href="#四、使用less" aria-hidden="true">#</a> 四、使用<code>less</code></h2><p>创建Header和Footer非路由组件</p><p>(1) 在开发项目的时候：</p><ol><li><p>书写静态页面（HTML+CSS）</p></li><li><p>拆分组件</p></li><li><p>获取服务器的数据动态展示</p></li><li><p>完成相应的动态业务逻辑</p></li></ol><p>(2} 那么非路由组件创建在哪里？</p><p>​ 在src文件夹下创建components文件夹，在该文件夹中分别创建Header和Footer文件夹，用于实现非路由组件。</p><p>（在创建组件时，需要注意三要素：组件结构+组件的样式+图片资源）</p><p>(3) 在非路由组件文件夹中，创建vue类型的文件：index.vue</p><p>对于样式，如果采用的是less样式，浏览器不能识别less样式，需要通过less、less-loader进行处理，把less样式变为css样式，这样浏览器才能识别。</p><h3 id="_1、安装less和less-loader依赖" tabindex="-1"><a class="header-anchor" href="#_1、安装less和less-loader依赖" aria-hidden="true">#</a> 1、安装<code>less</code>和<code>less-loader</code>依赖</h3><p>先安装less-loader依赖（这里需要注意，版本不能过高，否则不能使用，这里选择5版本，如果不说明默认是最高版本）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> <span class="token function">less</span> less-loader@5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/cb521805586341619badd9e3119ed774-1670057691195157.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、style标签添加lang-lees属性" tabindex="-1"><a class="header-anchor" href="#_2、style标签添加lang-lees属性" aria-hidden="true">#</a> 2、style标签添加<code>lang=lees</code>属性</h3><p>还需要在<code>src\\components\\Header\\index.vue</code>文件的style标签的身上加上<code>lang=lees</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/ef6a0db16c604a9aa4141f07ec95b32b-1670057691195159.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于图片资源，在非路由组件文件中创建一个images文件夹，用于存放数据</p><p>（4）当组件创建好之后，就要使用该组件了，步骤为：引入----注册----使用</p><p><code>src\\App.vue</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/9bfc38aee8604969a549a2f5fb8f4170-1670057691195161.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="五、完成路由组件的搭建" tabindex="-1"><a class="header-anchor" href="#五、完成路由组件的搭建" aria-hidden="true">#</a> 五、完成路由组件的搭建</h2><h3 id="_1、安装vue-router插件" tabindex="-1"><a class="header-anchor" href="#_1、安装vue-router插件" aria-hidden="true">#</a> 1、安装vue-router插件</h3><p>(使用vue2需要指定版本)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install vue-router@3.5.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/eee83c2d7b5a4a7983af5e1c8f9b9391-1670057691195163.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、创建路由组件" tabindex="-1"><a class="header-anchor" href="#_2、创建路由组件" aria-hidden="true">#</a> 2、创建路由组件</h3><p>通过上面分析，路由组件应该有四个：Home、Search、Login、Register，</p><p>那么路由组件通常创建在哪里呢？在src文件夹下创建pages文件夹，在该文件夹中分别创建Home、Search、Login、Register文件夹，用于实现路由组件。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221203170314544.png" alt="image-20221203170314544" tabindex="0" loading="lazy"><figcaption>image-20221203170314544</figcaption></figure><h3 id="_3、配置路由" tabindex="-1"><a class="header-anchor" href="#_3、配置路由" aria-hidden="true">#</a> 3、配置路由</h3><p>在src文件夹下创建router文件夹，在该文件夹中创建一个index.js文件，用来配置路由信息(<code>src\\router\\index.js</code>)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/d101c2de555d481e8ea97a41dd64fc5d-1670057691195165.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置路由的时候，还要实现【重定向】，即在项目跑起来的时候，当访问 / 时，会立马定位到首页</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4b066b4e004345f1a497265841e1222c-1670057691195167.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 配置使用路由插件</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 引入路由组件</span>
<span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">&#39;@/pages/Home&#39;</span>
<span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">&#39;@/pages/Login&#39;</span>
<span class="token keyword">import</span> Register <span class="token keyword">from</span> <span class="token string">&#39;@/pages/Register&#39;</span>
<span class="token keyword">import</span> Search <span class="token keyword">from</span> <span class="token string">&#39;@/pages/Search&#39;</span>

<span class="token comment">// 配置路由</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">component</span><span class="token operator">:</span> Home
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">component</span><span class="token operator">:</span> Login
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/register&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">component</span><span class="token operator">:</span> Register
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/search/:keyword&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">component</span><span class="token operator">:</span> Search

        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 重定向</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">&quot;/home&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、注册路由" tabindex="-1"><a class="header-anchor" href="#_4、注册路由" aria-hidden="true">#</a> 4、注册路由</h3><p>接着，在<code>src\\main.js</code>文件中【引入路由】和【注册路由】</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/98ace467420442a1bbbb49e22bdf6117-1670057691196169.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>PS:当这里书写router的时候，不管是路由组件还是非路由组件，身上都拥有$route、$router属性</p><ul><li><p><code>$route</code>：一般获取路由信息【路径、query、params】</p></li><li><p><code>$router</code>：一般进行编程式路由导航进行路由跳转【push | replace】</p></li></ul><h3 id="_5、展示路由" tabindex="-1"><a class="header-anchor" href="#_5、展示路由" aria-hidden="true">#</a> 5、展示路由</h3><p>最后还要展示路由，即在<code>src\\App.vue</code>文件中设置【路由组件出口的地方】</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/18ea9e61e2b8427db1a9218a5f1a9876-1670057691196171.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6、路由组件和非路由组件的区别" tabindex="-1"><a class="header-anchor" href="#_6、路由组件和非路由组件的区别" aria-hidden="true">#</a> 6、路由组件和非路由组件的区别？</h3><ol><li><p>路由组件一般放在views和pages文件夹；非路由组件放在components文件夹中</p></li><li><p>路由组件一般需要在router文件夹中进行注册，使用的即为组件的名字；非路由组件在使用的时候一般都是以标签的形式使用。</p></li><li><p>注册完路由，不管是路由组件还是非路由组件，身上都有$route和$router属性</p></li></ol><h3 id="_7、路由跳转" tabindex="-1"><a class="header-anchor" href="#_7、路由跳转" aria-hidden="true">#</a> 7、路由跳转</h3><p>有两种形式：</p><ol><li><p>声明式导航router-link，可以进行路由的跳转 <code> &lt;router-link *to*=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</code></p></li><li><p>编程式导航push|replace，可以进行路由跳转 <code>this.$router.push(&quot;/search&quot;)</code></p></li></ol><p>声明式导航能做的，编程式导航都能做，但是编程式导航除了可以进行路由跳转，还可以做一些其他的业务逻辑。</p><h4 id="声明式导航" tabindex="-1"><a class="header-anchor" href="#声明式导航" aria-hidden="true">#</a> 声明式导航</h4><p>在<code>src\\components\\Header\\index.vue</code>中设置路由跳转</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/45f36668526f4260b73f002c24a31a84-1670057691196173.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="编程式导航" tabindex="-1"><a class="header-anchor" href="#编程式导航" aria-hidden="true">#</a> 编程式导航</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/e6dcabb76d294290bebfa078e08f41b1-1670057691196175.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="六、利用【路由元信息】实现显示或隐藏组件" tabindex="-1"><a class="header-anchor" href="#六、利用【路由元信息】实现显示或隐藏组件" aria-hidden="true">#</a> 六、利用【路由元信息】实现显示或隐藏组件</h2><p>分析Footer组件：实现它在Home、Search中显示，在Register、Login中隐藏</p><p>（1）方法一（不推荐）：在上节中，我们知道这时组件已经具备$route属性，可以获取路由路径</p><p>在<code>src\\App.vue</code>文件中修改<code>Footer</code>组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 显示或者隐藏组件：v-if、v-show（这里采用v-show，性能更好，不频繁操作DOM）--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$route.path==&#39;/home&#39; || $route.path==&#39;/search&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Footer</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/5ea8ad4d17f147fa84b68e18e4f29280-1670057691196177.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（2）方法二（推荐）：即利用【路由元信息】</p>`,102),q={href:"https://router.vuejs.org/zh/guide/advanced/meta.html",title:"路由元信息 | Vue Router",target:"_blank",rel:"noopener noreferrer"},F=e(`<p>找到<code>src\\router\\index.js</code>文件，将【谁可以具有Footer组件的信息】通过接收属性对象的meta属性来实现，并且它可以在路由地址和导航守卫上都被访问到。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/a72a4c0fda5745b6bdcdefd8a90e85af-1670057691196179.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后在<code>src\\App.vue</code>文件中，进行<code>$route.meta.show</code>判断，如果为真则显示，如果为假则隐藏</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/90684a7488a4450ab50b3d7e016d786e-1670057691196181.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="七、路由传递参数方式" tabindex="-1"><a class="header-anchor" href="#七、路由传递参数方式" aria-hidden="true">#</a> 七、路由传递参数方式</h2><p>我们已经了解到路由跳转有两种方式：声明式导航、编程式导航</p><p>路由进行传参时，参数一般有种写法：</p><ul><li><p>params参数: 属于路径当中的一部分，在配置路由的时候需要【占位】</p></li><li><p>query参数: 不属于路径当中的一部分，类似于ajax中的queryString，不需要占位</p></li></ul><h3 id="_1、字符串形式" tabindex="-1"><a class="header-anchor" href="#_1、字符串形式" aria-hidden="true">#</a> 1、字符串形式</h3><h4 id="_1-先在路由配置信息中进行占位" tabindex="-1"><a class="header-anchor" href="#_1-先在路由配置信息中进行占位" aria-hidden="true">#</a> 1.先在路由配置信息中进行占位</h4><p><code>src\\router\\index.js</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/e09e2e7ffa6846128c0c566f1d65bbb6-1670057691196183.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-进行路由push跳转" tabindex="-1"><a class="header-anchor" href="#_2-进行路由push跳转" aria-hidden="true">#</a> 2.进行路由push跳转</h4><p>跳转到search页面时传递相应的【路由参数】</p><p><code>src\\components\\Header\\index.vue</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/11b8f41f783b4cf0b6a716d353594334-1670057691196185.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-获取params参数" tabindex="-1"><a class="header-anchor" href="#_3-获取params参数" aria-hidden="true">#</a> 3.获取params参数</h4><p>这时在Search页面中，通过【路由信息】就可以获取到params参数</p><p><code>src\\pages\\Search\\index.vue</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>params参数：{{$route.params.keyword}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>query参数：{{$route.query.k}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/643a93cf14ed4f53b9f482dfd07125c7-1670057691196187.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、模板字符串" tabindex="-1"><a class="header-anchor" href="#_2、模板字符串" aria-hidden="true">#</a> 2、模板字符串</h3><ol><li><p>第一步和上个方法相同</p></li><li><p>和上个方法的第二部有些区别，采用模板字符串的方式</p></li><li><p>接收参数和上个方法相同</p></li></ol><p><code>src\\components\\Header\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/search/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?k=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/315babccb21b457c89f8b49c44a667ca-1670057691196189.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3、对象" tabindex="-1"><a class="header-anchor" href="#_3、对象" aria-hidden="true">#</a> 3、对象</h3><h4 id="_1、设置路由名" tabindex="-1"><a class="header-anchor" href="#_1、设置路由名" aria-hidden="true">#</a> 1、设置路由名</h4><p>当使用【对象】的方式进行传参，传入的参数又是params参数时，需要在路由配置信息<code>src\\router\\index.js</code>中为路由设置【名字】，name: &quot;XXX&quot;</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/7691f92107fb4d18a0285851d797a84d-1670057691196191.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2、传递参数" tabindex="-1"><a class="header-anchor" href="#_2、传递参数" aria-hidden="true">#</a> 2、传递参数</h4><p><code>src\\components\\Header\\index.vue</code>形式如下图所示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">keyword</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">k</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221203175550090.png" alt="image-20221203175550090" tabindex="0" loading="lazy"><figcaption>image-20221203175550090</figcaption></figure><h4 id="_3-接收参数和上个方法相同" tabindex="-1"><a class="header-anchor" href="#_3-接收参数和上个方法相同" aria-hidden="true">#</a> 3.接收参数和上个方法相同</h4><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2><h3 id="_1、路由传递参数-对象写法-path是否可以结合params参数一起使用" tabindex="-1"><a class="header-anchor" href="#_1、路由传递参数-对象写法-path是否可以结合params参数一起使用" aria-hidden="true">#</a> 1、路由传递参数（对象写法）path是否可以结合params参数一起使用?</h3><p>不可以：不能这样书写，程序会崩掉</p><p>不可以用path和params配置的组合, 只能用name和params配置的组合</p><p>query配置可以与path或name进行组合使用</p><h3 id="如何指定params参数可传可不传" tabindex="-1"><a class="header-anchor" href="#如何指定params参数可传可不传" aria-hidden="true">#</a> 如何指定params参数可传可不传</h3><p><code>src\\router\\index.js</code>文件，params参数占位了，但是不传递params参数会怎么样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/search/:keyword&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> SearchIndex<span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">show</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;search&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src\\components\\Header\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;search&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">k</span><span class="token operator">:</span>keyword<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里我配置路由时，params参数占位了，但是我实际传递时，并没有params参数，只有query参数。</p></blockquote><blockquote><p>这时候它的<strong>路径就会有问题</strong>。 比如，此时我是在localhost/home 。 按理说点一下搜索按钮，至少路径应该是localhost/search 吧。如果传参了，后面应该会跟参数。</p><p>比如 params参数为abc，query参数为ABC 。 跳转的路径应该是localhost/search/abc?k=ABC</p><p>但如果占位而不传递params的话，它的路径是 localhost/?k=ABC （它<strong>连/search都没了！！！</strong>）</p></blockquote><p>所以如何去指定params可传可不传呢？在<code>src\\router\\index.js</code>文件 配置路由后，占位的后面加上一个问号？ （就表示params可传递或不传递）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/search/:keyword?&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> SearchIndex<span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">show</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;search&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="params参数可传可不传-但如果传递是空串-如何解决" tabindex="-1"><a class="header-anchor" href="#params参数可传可不传-但如果传递是空串-如何解决" aria-hidden="true">#</a> params参数可传可不传，但如果传递是空串，如何解决</h3><p>按照上面的步骤，指定了params可传可不传，但是我实际传递时，传了params参数只不过是个空串，会怎样？</p><p><code>src\\router\\index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/search/:keyword?&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> SearchIndex<span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">show</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;search&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，它的路径也会出问题，也是会少了<code>/search</code></p><p>解决： 使用undefined解决params参数可以传递、不传递（空的字符串）</p><p><code>src\\components\\Header\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;search&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">keyword</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">k</span><span class="token operator">:</span>keyword<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由组件能不能传递props数据" tabindex="-1"><a class="header-anchor" href="#路由组件能不能传递props数据" aria-hidden="true">#</a> 路由组件能不能传递props数据</h3><p>可以。 有三种写法</p><p><code>src\\components\\Header\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">keyword</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">k</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src\\router\\index.js</code>中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/search/:keyword&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">component</span><span class="token operator">:</span> SearchIndex<span class="token punctuation">,</span>
        <span class="token literal-property property">meta</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">show</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;search&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// 路由组件能不能传递props数据？   可以！</span>
        <span class="token comment">// 第一种：布尔值写法 - 只能传params参数,不能传query参数</span>
        <span class="token comment">// props:true</span>
 
        <span class="token comment">// 第二种：对象写法,额外给路由组件传递一些props</span>
        <span class="token comment">// props:{a:1,b:2}</span>
 
        <span class="token comment">// 第三种：函数写法 （最常见） params参数、query参数，通过props传递给路由组件</span>
        <span class="token function-variable function">props</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">$route</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">keyword</span><span class="token operator">:</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>keyword<span class="token punctuation">,</span><span class="token literal-property property">k</span><span class="token operator">:</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>k<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 简写形式(需要把返回的对象用括号包起来)</span>
        <span class="token comment">// props:($route)=&gt;({keyword:$route.params.keyword,k:$route.query.k})</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src\\pages\\Search\\index.vue</code>中</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    我是搜索
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>params参数---{{$route.params.keyword}}---{{keyword}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>query参数---{{$route.query.k}}---{{k}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;keyword&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;k&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/b236709476bd4e06b3f3d58c3bcbdb28.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/c91700d5ef6f43dc9b062abcd1519bfa.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>不过好像实际中也很少用到props数据，（但似乎一定程度上可以解耦吧）</p></blockquote><h2 id="八、重写push和replace方法" tabindex="-1"><a class="header-anchor" href="#八、重写push和replace方法" aria-hidden="true">#</a> 八、重写push和replace方法</h2><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5YuH5b6A55u05YmNXg==,size_13,color_FFFFFF,t_70,g_se,x_16.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>路由跳转分为声明式导航和编程式导航，声明式导航没有此类问题，因为vue-router底层已经处理好了。</p><p>编程式导航出现警告错误是因为当使用this.$router.push()方法时，其返回的是一个Promise参数，可以通过给push方法传递相应的成功、或失败的回调函数，来捕获当前错误进行解决（治标不治本），相当于每个push都要加两个回调函数：</p><p>【问题】：编程式路由导航跳转到当前路由（参数不变），多次执行会抛出NavigationDuplicated的警告错误？（但不影响最终的结果） 而声明式导航是没有这类问题的，因为vue-router底层就已经处理好了。</p><p>【原因】：最新的vue-router引入了promise，即调用push方法会返回promise对象，但没有向其中传入成功的回调和失败的回调。</p><p>【解决方法1】：在调用push方法时，就传入成功和失败的回调。（可以捕获出error看看错误类型）但是这种方法治标不治本。将来在别的组件中，不管是push还是replace，编程式导航还是有类似的错误。这样一次次解决下去太麻烦了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">goSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// this.$router.push(\`/search/\${this.keyword}?k=\${this.keyword.toUpperCase()}\`)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;search&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">keyword</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 解决传递的参数为空串导致 /search 丢失的问题</span>
        <span class="token comment">// params: &#39;&#39; || undefined,</span>
        <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">k</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/8bee86122dfe4987a0d4e209856f1f35-1670057691196195.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【解决方法2】：首先搞清楚上段代码中的this是什么、<code>this.$router</code>是什么、push是什么</p><p>this：当前组件实例</p><p>this.$router属性：这个属性的属性值是VueRouter类的一个实例，即当在入口文件注册路由的时候，给组件实例添加的$router和$route属性</p><p>push：VueRouter类原型上的方法</p><p>为了更好的理解<code>this.$router.push()</code>方法，我们根据这三个的特性实现简单的伪代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//构造函数VueRouter</span>
<span class="token keyword">function</span> <span class="token function">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 
<span class="token punctuation">}</span>
<span class="token comment">//原型对象上的方法</span>
<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//函数的上下位为VueRouter类的一个实例</span>
<span class="token punctuation">}</span>
<span class="token comment">//实例化一个VueRouter对象</span>
<span class="token keyword">let</span> $router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此想要治本，必须重写VueRouter原型上的push方法。在有【路由配置信息】的文件(<code>src\\router\\index.js</code>)中进行重写，因为在这个文件中，我们是可以获取到VueRouter类的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 先把VueRouter原型对象的push保存一份</span>
<span class="token keyword">let</span> originPush <span class="token operator">=</span> <span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">;</span>
<span class="token keyword">let</span> originReplace <span class="token operator">=</span> <span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>replace<span class="token punctuation">;</span>
 
<span class="token comment">// 重写push|replace</span>
<span class="token comment">// 第一个参数：告诉原来push方法，你往哪里跳转（传递哪些参数）</span>
<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>resolve <span class="token operator">&amp;&amp;</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 不能直接使用originPush()，如果直接使用originPush()，会导致上下文变为window</span>
        <span class="token comment">// call与apply区别：相同点：都可以调用函数一次，都可以篡改函数的上下文一次</span>
        <span class="token comment">// 不同点：call与apply传递参数：call传递参数用逗号隔开，apply方法执行，需要传递数组</span>
        <span class="token function">originPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>location<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">originPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>location<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">replace</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>resolve <span class="token operator">&amp;&amp;</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// call与apply区别：相同点：都可以调用函数一次，都可以篡改函数的上下文一次</span>
        <span class="token comment">// 不同点：call与apply传递参数：call传递参数用逗号隔开，apply方法执行，需要传递数组</span>
        <span class="token function">originReplace</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>location<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">originReplace</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>location<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/8ed380bc1c5e47bcb6238b64d512bf60-1670057691196197.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（replace方法重写和上述类似）</p><h2 id="九、home首页组件拆分业务分析" tabindex="-1"><a class="header-anchor" href="#九、home首页组件拆分业务分析" aria-hidden="true">#</a> 九、Home首页组件拆分业务分析</h2><p>【第一个组件】：因为【三级联动组件】在很多页面中都使用了，因此将其拆分成一个全局组件，哪里想用就用哪里（红色框出来的就是三级联动的展示）。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/7b1548b55dd14e75836937a946a2353e-1670057691196199.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【第二个组件】：轮播图+尚品汇快报</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/581bd97a23174c6ea6a5e2a27023e056-1670057691196201.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【第三个组件】：今日推荐</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/7cf4a6c5e87d4978a64f30ba4cb4ec65-1670057691196203.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【第四个组件】：排行榜</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/de69d450e9264d729f4015860c7849f3-1670057691196207.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【第五个组件】：猜你喜欢</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/6c8b7c2cfb3f4f5ead355541385915c6-1670057691196205.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【第六个组件】：家用电器|手机通讯等，组件可被复用</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/55031be6cf5f483287ce47535ad62a3b-1670057691196209.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【第七个组件】：商品<code>logo</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/d35e64885c974a0d90ef3391ce5a985d-1670057691196211.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="十、完成三级联动全局组件" tabindex="-1"><a class="header-anchor" href="#十、完成三级联动全局组件" aria-hidden="true">#</a> 十、完成三级联动全局组件</h2><p>（1）在<code>page</code>文件夹中的<code>Home</code>文件夹下，新建一个文件夹<code>TypeNav</code>，在该文件夹中创建<code>index.vue</code>文件，用来配置【三级联动组件】的内容</p><p>（2）在<code>HTML</code>静态资源中找到有关【三级联动】的结构代码，把代码内容放入到<code>index.vue</code>文件的<code>template</code>标签中。</p><p>（3）在css|less静态资源中找到有关【三级联动】的代码，将代码内容放入到index.vue文件的style标签中，并设置lang属性，以便能够正常处理less</p><p><code>src\\pages\\Home\\TypeNav\\index.vue</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221203214644029.png" alt="image-20221203214644029" tabindex="0" loading="lazy"><figcaption>image-20221203214644029</figcaption></figure><p>（4）将该组件注册为全局组件：找到入口文件main.js，在该文件中将【三级联动组件】注册为全局组件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//将三级联动组件注册为全局组件</span>
<span class="token keyword">import</span> TypeNav <span class="token keyword">from</span> <span class="token string">&#39;@/pages/Home/TypeNav&#39;</span><span class="token punctuation">;</span>
<span class="token comment">//注册全局组件</span>
<span class="token comment">//第一个参数：全局组件名字，第二个参数：全局组件</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>TypeNav<span class="token punctuation">.</span>name<span class="token punctuation">,</span>TypeNav<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0a00a22f2bdc4a6aaa72cb6a1719a06c-1670057691196217.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（5）此时【三级联动组件】已经注册为全局组件，在其他地方使用它时，不需要进行引入和注册，直接使用即可。</p><p><code>src\\pages\\Home\\index.vue</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/cd3005d10f134d928c22624e93cf5db9-1670057691197219.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="十一、home首页拆分静态组件" tabindex="-1"><a class="header-anchor" href="#十一、home首页拆分静态组件" aria-hidden="true">#</a> 十一、Home首页拆分静态组件</h2><p>拆分时要注意三部分：HTML、CSS、图片资源</p><p>（1）创建一个名为ListContainer的组件(<code>src\\pages\\Home\\ListContainer\\index.vue</code>)，按上小节的步骤对HTML和CSS进行拆分，这里需要注意的是：HTML中图片资源的路径可能已经发生了变化，需要根据目前的路径进行修改。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221204102139278.png" alt="image-20221204102139278" tabindex="0" loading="lazy"><figcaption>image-20221204102139278</figcaption></figure><p>（2）该组件创建好之后，在Home组件中进行【引入】、【注册】和【使用】</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/ecb8a3faebcc48948769bd5a31a0d4f3-1670057691197221.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（Recommend组件、Rank组件、TypeNav组件、Like组件的【创建、引入、注册和使用方式】和上述相同，这里不再赘述）</p><h2 id="十二、使用【postman工具】测试接口" tabindex="-1"><a class="header-anchor" href="#十二、使用【postman工具】测试接口" aria-hidden="true">#</a> 十二、使用【POSTMAN工具】测试接口</h2><p>测试后端给的接口是不是可用，后端通常会给出服务器地址、请求地址、请求方式等等信息。根据这些信息，在POSTMAN工具中配置好这些信息。（现在已更新为 http://gmall-h5-api.atguigu.cn/api/product/getBaseCategoryList ）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/43bcbb253e6b4de7be8427825a10c6fa-1670057691197225.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="十三、对axios进行二次封装" tabindex="-1"><a class="header-anchor" href="#十三、对axios进行二次封装" aria-hidden="true">#</a> 十三、对axios进行二次封装</h2><p>首先，搞清楚为什么要进行二次封装？因为我们想使用请求拦截器和响应拦截器</p><p>【请求拦截器】：在发请求之前可以处理一些业务</p><p>【响应拦截器】：当服务器返回数据之后，可以处理一些业务</p><hr><p>使用前先进行安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以在package.json中查看是否已经安装成功，如下</p><hr><p>在项目中通常使用API文件夹放置【axios】相关内容，因此在src文件夹中创建一个api文件夹</p><p>在api文件夹中创建一个request.js的文件，在其中实现axios的二次封装，代码如下</p><p><code>src\\api\\request.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对于axios进行二次封装</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
 
<span class="token comment">// 1、利用axios对象的方法create,去创建一个axios实例</span>
<span class="token comment">// 2、requests就是axios，只不过稍微配置一下</span>
<span class="token keyword">const</span> requests <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置对象</span>
    <span class="token comment">// 基础路径，发请求的时候，路径当中会出现api</span>
    <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 代表请求超时的时间为5s</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 请求拦截器：在发请求之前，请求拦截器可以监测到，可以在请求发出去之前做一些事情</span>
requests<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// config:配置对象，对象里面有一个属性很重要——header 请求头</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 响应拦截器:</span>
requests<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 成功的回调函数：服务器相应数据回来以后，响应拦截器可以监测到，可以做一些事情</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 响应失败的回调函数</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;faile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
 
 
<span class="token comment">// 对外暴露axios</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> requests<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十四、接口统一管理" tabindex="-1"><a class="header-anchor" href="#十四、接口统一管理" aria-hidden="true">#</a> 十四、接口统一管理</h2><p>如果项目规模很小，完全可以在组件的生命周期函数中发请求</p><p>如果项目规模比较大，会存在这样一种情况：有几十个组件使用了这个接口，后期接口变动了，就得一个个去修改组件当中接口的内容，很不方便。因此采用【接口统一管理】</p><hr><p>在api文件夹中新创建一个js文件，名为index，在其中进行接口的统一管理</p><p><code>src\\api\\index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//当前这个模块：API进行统一管理</span>
<span class="token keyword">import</span> requests <span class="token keyword">from</span> <span class="token string">&#39;./request&#39;</span><span class="token punctuation">;</span>
 
<span class="token comment">//三级联动接口  </span>
<span class="token comment">//暴露这个函数，外面拿到这个函数，直接调用，就能发送请求获取数据了</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reqCategoryList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//返回的结果是promise对象 当前函数执行需要把服务器返回结果进行返回</span>
    <span class="token keyword">return</span> <span class="token function">requests</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;/product/getBaseCategoryList&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;get&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>测试之后，发现请求发生404错误，这是因为【跨域问题】（其实是没指定后台的url，访问的是<code>http://localhost:8080</code>）</p><p>解决跨域问题的方法有很多，这里采用【代理服务器】去解决，在根目录下的<code>vue.config.js</code>文件中进行配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//打包时不要有map文件</span>
  <span class="token literal-property property">productionSourceMap</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">//关闭校验工具</span>
  <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">//代理跨域</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">//遇到带有api的请求，代理服务器才会将其转发</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span><span class="token string">&#39;http://gmall-h5-api.atguigu.cn&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// pathRewrite:{&#39;^/api&#39;:&#39;&#39;},</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：这是一个配置文件，写好之后需要重新运行一下才可以~</p><h2 id="十五、nprogress进度条的使用" tabindex="-1"><a class="header-anchor" href="#十五、nprogress进度条的使用" aria-hidden="true">#</a> 十五、nprogress进度条的使用</h2><p>先下载nprogress进度条：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> nprogress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载完成之后在package.json中查看是否安装成功。</p><hr><p>nprogress进度条需要在请求拦截器和响应拦截器中去使用</p><p>先引入进度条：import nprogress from &#39;nprogress&#39;</p><p>还要引入进度条样式：import &quot;nprogress/nprogress.css&quot;</p><p>【请求拦截器】：启动进度条 nprogress.start( )</p><p>【响应拦截器】：结束进度条nprogress.done( )</p><p><code>src\\api\\request.js</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221204105911852.png" alt="image-20221204105911852" tabindex="0" loading="lazy"><figcaption>image-20221204105911852</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对于axios进行二次封装</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> nprogress <span class="token keyword">from</span> <span class="token string">&quot;nprogress&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;nprogress/nprogress.css&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 1、利用axios对象的方法create,去创建一个axios实例</span>
<span class="token comment">// 2、requests就是axios，只不过稍微配置一下</span>
<span class="token keyword">const</span> requests <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置对象</span>
    <span class="token comment">// 基础路径，发请求的时候，路径当中会出现api</span>
    <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 代表请求超时的时间为5s</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 请求拦截器：在发请求之前，请求拦截器可以监测到，可以在请求发出去之前做一些事情</span>
requests<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// config:配置对象，对象里面有一个属性很重要——header 请求头</span>
    nprogress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 响应拦截器:</span>
requests<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 成功的回调函数：服务器相应数据回来以后，响应拦截器可以监测到，可以做一些事情</span>
    nprogress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 响应失败的回调函数</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;faile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
 
 
<span class="token comment">// 对外暴露axios</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> requests<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十六、vuex模块式开发" tabindex="-1"><a class="header-anchor" href="#十六、vuex模块式开发" aria-hidden="true">#</a> 十六、VUEX模块式开发</h2><p>vuex是官方提供的一个插件，是一个状态管理库，集中式管理项目中组件共用的数据。</p><p>vuex主要是用于 项目大、组件多的情况下，各个组件之间的关系比较复杂，数据的传递就显得繁杂，很难管理，vuex可以集中式管理这些数据。</p><p>vuex：并不是所有的项目都需要vuex，如果项目很小，则不需要；如果项目比较大，则需要使用vuex进行数据的统一管理</p><p>先安装vuex：npm install --save vuex，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> vuex@3.6.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载完成之后在package.json中查看是否安装成功</p><p>在src中新建一个文件夹store，用来实现vuex，创建index.js文件进行配置</p><p><code>src\\store\\index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token comment">//需要使用插件一次</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>
<span class="token comment">//state:仓库存储数据的地方</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//mutation:修改state的唯一手段</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//actions:可以书写自己的业务逻辑，也可以处理异步</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//getters:可以理解为计算属性，用于简化仓库数据，让组件获取仓库的数据更加方便</span>
<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 

<span class="token comment">//对外暴露Store类的一个实例</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        state<span class="token punctuation">,</span>
        mutations<span class="token punctuation">,</span>
        actions<span class="token punctuation">,</span>
        getters
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还要在入口文件main.js中引入这个仓库：import store from &#39;@/store&#39; 并进行注册</p><p><code>src\\main.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token comment">// 引入路由</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;@/router&#39;</span>
<span class="token comment">//三级联动组件+全局组件</span>
<span class="token keyword">import</span> TypeNav <span class="token keyword">from</span> <span class="token string">&#39;@/pages/Home/TypeNav&#39;</span>
<span class="token comment">// 引入仓库</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;@/store&quot;</span>

<span class="token comment">// 注册全局组件</span>
<span class="token comment">//第一个参数：全局组件名字，第二个参数：全局组件</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>TypeNav<span class="token punctuation">.</span>name<span class="token punctuation">,</span>TypeNav<span class="token punctuation">)</span>

Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>



<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 注册路由信息，注册后不管是路由组件还是非路由组件，身上都有$route和$router属性</span>
  <span class="token comment">// $route一般用于获取路径、params query参数；</span>
  <span class="token comment">// $router一般用于跳转路径，push replace等</span>
  router<span class="token punctuation">,</span>
  <span class="token comment">//注册仓库：组件实例的身上会多一个$store属性</span>
  store
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单使用</p><p><code>src\\store\\index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token comment">//需要使用插件一次</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>

<span class="token comment">//actions:可以书写自己的业务逻辑，也可以处理异步</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> commit <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;ADD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//mutation:修改state的唯一手段</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token constant">ADD</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//state:仓库存储数据的地方</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token comment">//getters:可以理解为计算属性，用于简化仓库数据，让组件获取仓库的数据更加方便</span>
<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">//对外暴露Store类的一个实例</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        actions<span class="token punctuation">,</span>
        mutations<span class="token punctuation">,</span>
        state<span class="token punctuation">,</span>
        getters
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src\\pages\\Home\\index.vue</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击我加上1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>仓库的数量{{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>点击我减去1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Home&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//this.$store.dispatch(&quot;add&quot;); // 调用action里的add()</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;ADD&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 调用mutations里的 ADD(state, count)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>接下来就要进行vuex的模块化开发了</p><p>为什么需要模块化开发？如果项目过大，组件过多，接口也很多，数据也很多，store对象会变得相当臃肿，因此可以让vuex实现模块化开发，即把一个大仓库拆分成一个个的小仓库。</p><p>可以给home、search等这样的模块单独设置一个store小模块，然后再把小模块混入到大模块中</p><p><code>src\\store\\home\\index.js</code>小仓库：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//home模块的小仓库</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">,</span>
    mutations<span class="token punctuation">,</span>
    actions<span class="token punctuation">,</span>
    getters
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src\\store\\index.js</code>大仓库：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//大仓库</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span>
<span class="token comment">//需要使用插件一次</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>
<span class="token comment">//引入小仓库</span>
<span class="token keyword">import</span> home <span class="token keyword">from</span> <span class="token string">&#39;./home&#39;</span>
<span class="token keyword">import</span> search <span class="token keyword">from</span> <span class="token string">&#39;./search&#39;</span>
 
<span class="token comment">//对外暴露Store类的一个实例</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token comment">//实现Vuex仓库模块式开发存储数据</span>
   <span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{</span>
       home<span class="token punctuation">,</span>
       search
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十七、动态展示三级联动" tabindex="-1"><a class="header-anchor" href="#十七、动态展示三级联动" aria-hidden="true">#</a> 十七、动态展示三级联动</h2><p>【三级联动】组件是一个全局组件，放在components文件夹中。</p><p>下面这个图就很好地展现出组件是如何获取数据的、仓库是如何去请求数据的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0421b1aad124473fad8d8e35fe0fbf9a-1670057691197223.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对三级联动组件TypeNav进行配置，将<code>TypeNav</code>组件移动到<code>components</code>文件夹中</p><p><code>src\\components\\TypeNav\\index.vue</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;TypeNav&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">//组建挂载完毕：可以向服务器发请求</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//通知vuex发请求，获取数据，存储于仓库中</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;categoryList&#39;</span><span class="token punctuation">)</span> <span class="token comment">//考虑到性能将其挪到了【App.vue】</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">//右侧需要的是一个函数，当使用这个计算属性的时候，右侧函数会立即执行一次</span>
            <span class="token comment">//注入一个参数state，这指的是大仓库中的数据</span>
            <span class="token function-variable function">categoryList</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> state<span class="token punctuation">.</span>home<span class="token punctuation">.</span>categoryList<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到home模块的小仓库，进行配置</p><p><code>src\\store\\home\\index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>reqCategoryList<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api&#39;</span><span class="token punctuation">;</span> 
<span class="token comment">//home模块的小仓库</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//state中数据默认初始值别瞎写 【根据接口的返回值去初始化】</span>
    <span class="token literal-property property">categoryList</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">CATEGORYLIST</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>categoryList</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>categoryList <span class="token operator">=</span> categoryList
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//通过API里面的接口函数调用，向服务器发送请求，获取服务器的数据</span>
    <span class="token keyword">async</span> <span class="token function">categoryList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//对commit进行解构赋值</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">reqCategoryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;CATEGORYLIST&quot;</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">,</span>
    mutations<span class="token punctuation">,</span>
    actions<span class="token punctuation">,</span>
    getters
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><p>这段代码（<code>async</code>和<code>await</code>均为<code>es6</code>语法）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">categoryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">reqCategoryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与下面的代码输出的结果一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">categoryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">reqCategoryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>通过以上步骤，三级联动组件TypeNav就已经获取到数据啦！接下来就要把数据展示到页面上了。</p><p>对代码进行分析，发现一级目录很多，如下图这样：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/cbd119a31af640b7805b3cf353251a8d-1670057691197227.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>src\\components\\TypeNav\\index.vue</code></p><p>因此可以只留一个，并通过v-for进行优化</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(c1,index) in categoryList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c1.categoryId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则一级目录的a标签名称也要改</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span> <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{c1.categoryName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>二级分类也很多，同样采用v-for进行优化</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subitem<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(c2,index) in c1.categoryChild<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c2.categoryId<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则二级目录的a标签名称也要改变</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span>{{c2.categoryName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>三级分类也很多，同样采用v-for进行优化</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(c3,index) in c2.categoryChild<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c3.categoryId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则三级目录的a标签名称也要改变</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span>{{c3.categoryName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="十八、三级联动动态背景颜色" tabindex="-1"><a class="header-anchor" href="#十八、三级联动动态背景颜色" aria-hidden="true">#</a> 十八、三级联动动态背景颜色</h2><p>第一种解决方案：直接添加CSS样式（这里不用，因为很简单，来些具有挑战性的，哈哈哈）</p><p>第二种解决方案：动态添加类名</p><p>先来理一下思路：</p><p><code>src\\components\\TypeNav\\index.vue</code></p><p>1. 在data中定义一个变量，名为currentIndex，初始值设置为-1（不能设置为0-15之间的数，总共有16个标题）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		<span class="token comment">//存储用户鼠标移上哪一个一级分类</span>
		<span class="token literal-property property">currentIndex</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2. 为标题绑定一个原生JS事件mouseenter，并传入index，事件的回调函数定义在methods中，在回调函数中，将传入的值赋给currentIndex，这样就能拿到鼠标移动到的当前标题的index了</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">@mouseenter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>changeIndex(index)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">changeIndex</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3. 在一级标题的循环中，判断currentIndex==index是否成立，成立的话就添加一个类，这个类就实现了添加背景色的效果。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(c1,index) in categoryList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c1.categoryId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{cur:currentIndex == index}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加样式</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.cur</span> <span class="token punctuation">{</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现完成之后，发现存在一个问题，鼠标移除之后还有背景颜色，这是不合理的，应该背景颜色去掉才可以。出现问题不用慌，解决就是了，再给标题添加一个鼠标移除事件喽，</p><p>![GIF 2022-12-4 15-26-38](https://gitlab.com/apzs/image/-/raw/master/image/GIF 2022-12-4 15-26-38.gif)</p><p>为标题绑定一个原生JS事件mouseleave，并传入index，事件的回调函数定义在methods中。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">@mouseenter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>changeIndex(index)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@mouseleave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leaveIndex<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在回调函数中，将传入的值赋给currentIndex，这样就能拿到鼠标移动到的当前标题的index了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">changeIndex</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">leaveIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221204153827122.png" alt="image-20221204153827122" tabindex="0" loading="lazy"><figcaption>image-20221204153827122</figcaption></figure><p>但是又出现了一个问题，鼠标移到“全部商品分类”上，背景颜色应该还是存在的。（个人觉得这个实现完全没必要，看起来更像是个BUG，为了练手，还是实现一下吧）</p><p>![GIF 2022-12-4 15-41-27](https://gitlab.com/apzs/image/-/raw/master/image/GIF 2022-12-4 15-41-27.gif)</p><p>其实就用到了事件委派，就把<code>全部商品分类</code>和<code>三级联动</code>放在同一个div中，且二者是兄弟关系，然后给他们的父亲加上<code> @mouseleave=&quot;leaveShow&quot;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 事件的委派 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@mouseleave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leaveShow<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>all<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>全部商品分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
     <span class="token comment">&lt;!-- 三级联动 --&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sort<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221204154422320.png" alt="image-20221204154422320" tabindex="0" loading="lazy"><figcaption>image-20221204154422320</figcaption></figure><p>这样，最总效果就达成了</p><p>![GIF 2022-12-4 15-46-29](https://gitlab.com/apzs/image/-/raw/master/image/GIF 2022-12-4 15-46-29.gif)</p><h2 id="十九、通过js控制二三级分类的显示与隐藏" tabindex="-1"><a class="header-anchor" href="#十九、通过js控制二三级分类的显示与隐藏" aria-hidden="true">#</a> 十九、通过JS控制二三级分类的显示与隐藏</h2><p>鼠标移动到哪个标题，就展示哪个标题下的二三级分类列表</p><p>第一种解决方案：直接改变CSS样式</p><p>第二种解决方案：通过JS实现</p><p>先注释掉css样式</p><div class="language-less line-numbers-mode" data-ext="less"><pre class="language-less"><code><span class="token selector">&amp;:hover</span> <span class="token punctuation">{</span>
    <span class="token selector">.item-list</span> <span class="token punctuation">{</span>
        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路：在上一节中，我们已经通过事件监听将一级标题的index传递给了data中的currentIndex变量，如果index==currentIndex，则将二三级分类的样式设置为display:&#39;block&#39;，否则设置为“none”</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item-list clearfix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{display:(currentIndex == index ? &#39;block&#39;:&#39;none&#39;)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二十、引入防抖与节流" tabindex="-1"><a class="header-anchor" href="#二十、引入防抖与节流" aria-hidden="true">#</a> 二十、引入防抖与节流</h2><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/84e995f03bff48ff8d559c27161a4ac4-1670057691197231.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>防抖：前面的所有的触发都被取消，最后一次执行在规定时间之后才会触发，也就是说如果连续快速地触发，只会执行一次。</p><p>节流：在规定的间隔时间范围内不会重复触发回调，只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发。</p><hr><p>实现的时候利用一个插件，叫做lodash，里面封装了防抖与节流的业务【闭包+延时器】</p><p>这里举一个<strong>防抖的小栗子</strong>：输入框输入数据时，进行Ajax请求</p><p>如果不采用防抖的话，每输入一个字就要发一次请求，假如我们输入“梅西世界杯”，会发送五次请求。这并不满足我们的实际需求，我们想要输入完这五个字，才会发送请求，因此采用防抖技术进行解决。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;imput&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//不加防抖</span>
input<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//这里放ajax发请求的代码</span>
<span class="token punctuation">}</span>
<span class="token comment">//加了防抖</span>
input<span class="token punctuation">.</span>oninput <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//这里放ajax发请求的代码</span>
<span class="token punctuation">}</span>，<span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里举一个<strong>节流的小栗子</strong>：实现一个简单的计时器，即点击按钮，实现数字元素的增加</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我是计时器<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>点击我加上<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">...</span><span class="token punctuation">.</span>
 
<span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//未加节流</span>
button<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//加了节流</span>
button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>在项目中实现节流：三级联动这里用户的交互操作可能会过快，导致浏览器反应不过来，如果当前回调函数中有一些大量业务，有可能出现卡顿现象。</p><p>vue脚手架中已经下载好了lodash，可直接全部引入lodash内容：<code>import _ from &#39;lodash&#39;</code></p><p>如果没有，也可以使用如下命令下载<code>lodash</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">--save</span> lodash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里我们可以按需引入，只引入节流：<code>import throttle from &#39;lodash/throttle&#39;;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//未加节流的代码</span>
<span class="token function">changeIndex</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//加了节流的代码</span>
<span class="token comment">//throttle回调函数别用箭头函数，可能会出现上下文this</span>
<span class="token literal-property property">changeIndex</span><span class="token operator">:</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//index：鼠标移上某一个一级分类的元素的索引值</span>
	<span class="token comment">//正常情况（用户慢慢地操作）：鼠标进入，每一个一级分类h3，都会触发鼠标进入事件</span>
	<span class="token comment">//非正常情况（用户操作很快）：本身全部的一级分类都应该触发鼠标进入事件，但是经过测试，只有部分h3触发了</span>
	<span class="token comment">//就是由于用户的行为过快，导致浏览器反应不过来，如果当前回调函数中有一些大量业务，有可能出现卡顿现象。        </span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>src\\components\\TypeNav\\index.vue</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221204181653681.png" alt="image-20221204181653681" tabindex="0" loading="lazy"><figcaption>image-20221204181653681</figcaption></figure><h2 id="二十一、三级联动路由跳转分析" tabindex="-1"><a class="header-anchor" href="#二十一、三级联动路由跳转分析" aria-hidden="true">#</a> 二十一、三级联动路由跳转分析</h2><p>关于路由，我发了一篇vue-router思维导图的文章，可以帮助大家回忆起相关内容</p>`,279),j={href:"https://blog.csdn.net/yuran1/article/details/128139355?spm=1001.2014.3001.5501",title:"vue路由知识点概括--思维导图_yuran1的博客-CSDN博客",target:"_blank",rel:"noopener noreferrer"},z=e(`<hr><p>对于三级联动，用户可以点击的：一级分类、二级分类、三级分类，当我们从Home模块跳转到Search模块时，一级会把用户选中的产品（比如产品的名字、产品的ID）在路由跳转的时候进行相应的传递。</p><p>注意：这里如果使用的是声明式路由导航，可以实现路由的跳转与传递参数，但需要注意，会出现卡顿的现象，这是为什么呢？</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/search<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{c1.categoryName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221204180758905.png" alt="image-20221204180758905" tabindex="0" loading="lazy"><figcaption>image-20221204180758905</figcaption></figure><p>原因：router-link可以看作是组件，当服务器的数据返回之后，由于v-for的设置，会循环出很多的router-link组件，这种方法很消耗内存，所以会出现卡顿的现象。因此这里采用<strong>编程式路由导航</strong>。</p><p>![GIF 2022-12-4 18-08-58](https://gitlab.com/apzs/image/-/raw/master/image/GIF 2022-12-4 18-08-58.gif)</p><hr><p>但是那么多a标签，都给它们绑定click事件的回调函数的话，肯定太繁琐、太消耗内存了。</p><p>事件委派又派上用场了，我们把click事件的回调函数放在父元素身上，不用再一一绑定了。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>all-sort-list2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>goSearch<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二十二、实现三级联动的路由跳转与传递参数" tabindex="-1"><a class="header-anchor" href="#二十二、实现三级联动的路由跳转与传递参数" aria-hidden="true">#</a> 二十二、实现三级联动的路由跳转与传递参数</h2><p><strong>利用事件委派之后，还存在一些问题：</strong></p><p>1. 你怎么知道点击的一定是a标签的？也有可能是div、h3等标签</p><p>2. 如何获取参数呢？【1、2、3级分类的产品的名字、id】，如何区分1、2、3级分类的标签？</p><p>为了解决上述问题，这里利用【自定义属性】来解决</p><p>为解决第一个问题：为a标签加上自定义属性data-categoryName，其余的子节点是没有的。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>//一级分类
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:data-categoryName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c1.categoryName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ c1.categoryName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
//二级分类
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:data-categoryName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c2.categoryName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ c2.categoryName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
//三级分类
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:data-categoryName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c3.categoryName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ c3.categoryName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的章节中，我们可以知道goSearch( )函数中放置的是进行路由跳转的方法</p><p>我们点击子节点就可以触发goSearch( )这个回调函数，在函数中通过event.target拿到被点击的节点元素element，节点身上有一个属性dataset属性，可以获取节点的自定义属性与属性值，可以通过解构赋值取出来，如果有categoryname属性，那么被点击的就是a标签了</p><hr><p>为解决第二个问题：分别为1、2、3级的a标签加上自定义属性data-category1Id、data-category2Id、data-category3Id，其余的子节点是没有的。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:data-categoryName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c1.categoryName<span class="token punctuation">&quot;</span></span> 
   <span class="token attr-name">:data-category1Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c1.categoryId<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>{{ c1.categoryName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:data-categoryName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c2.categoryName<span class="token punctuation">&quot;</span></span> 
   <span class="token attr-name">:data-category1Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c2.categoryId<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>{{ c2.categoryName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:data-categoryName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c3.categoryName<span class="token punctuation">&quot;</span></span> 
   <span class="token attr-name">:data-category1Id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>c3.categoryId<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>{{ c3.categoryName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采取和判断a节点一样的方法，判断点击的节点是1级、2级还是3级，这里不再赘述了。</p><p>自定义属性设置完成后，开始属性goSearch方法，为了利用自定义属性，因此需要为goSearch方法传递参数event。具体代码如下所示。（需要注意，在自定义属性中我们用的驼峰命名法，但是在goSearch方法中，全部变成了小写，这是因为自定义属性在渲染后自动变成了小写）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">goSearch</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//获取到当前触发这个事件的节点，从中筛选出带有data-categoryname这样的节点</span>
    <span class="token comment">//节点有一个属性dataset属性，可以获取节点的自定义属性和属性值</span>
    <span class="token keyword">let</span> element <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
    <span class="token comment">//获取到的变量已经不是驼峰形式了，自动改变的</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> categoryname<span class="token punctuation">,</span> category1id<span class="token punctuation">,</span> category2id<span class="token punctuation">,</span> category3id <span class="token punctuation">}</span> <span class="token operator">=</span>
      element<span class="token punctuation">.</span>dataset<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>categoryname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//整理路由跳转的参数</span>
      <span class="token keyword">let</span> location <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;search&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">categoryName</span><span class="token operator">:</span> categoryname <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment">//一级分类、二级分类、三级分类的a标签</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>category1id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        query<span class="token punctuation">.</span>category1Id <span class="token operator">=</span> category1id<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span>    <span class="token punctuation">(</span>category2id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        query<span class="token punctuation">.</span>category2Id <span class="token operator">=</span> category2id<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        query<span class="token punctuation">.</span>category3Id <span class="token operator">=</span> category3id<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      location<span class="token punctuation">.</span>query <span class="token operator">=</span> query<span class="token punctuation">;</span>
      <span class="token comment">//路由跳转</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：有些同学有疑惑了，自定义属性为data-categoryName，那么判断条件应该这样写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">-</span>categoryName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而实际上是这样写的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>categoryname<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>原因是：需要在定义属性的时候在前面加上data-才能被dataset函数获取，因此data-只是一个前缀，其次浏览器会自动将属性名转化为小写。</p><h2 id="二十三、search组件中的商品分类与过渡动画" tabindex="-1"><a class="header-anchor" href="#二十三、search组件中的商品分类与过渡动画" aria-hidden="true">#</a> 二十三、Search组件中的商品分类与过渡动画</h2><h4 id="选择性展示" tabindex="-1"><a class="header-anchor" href="#选择性展示" aria-hidden="true">#</a> 选择性展示</h4><p>当页面是首页时，三级联动组件一直展示，当页面为非首页时（以search页面为例）三级联动组件只有鼠标放上去才展示，鼠标离开就消失。具体效果图如下所示。</p><p>首先分析，根据页面的不同三级联动组件的展示也不同，因此可以通过v-show来进行页面展示效果的控制。首先定义一个控制页面的数据show先默认它为true。如下所示</p><p><code>src\\components\\TypeNav\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">currentIndex</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/51830e076500433b94ee5f4021f8fb7d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当三级联动组件挂载完成是，查询一下当前所在页面，如果所在页面为/home则展示页面，否则不展示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通知Vuex发请求，获取数据，存储与仓库当中。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;categoryList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果不是home组件，对typenav进行隐藏</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token operator">!=</span><span class="token string">&quot;/home&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/837c553bc51045a1af909b3b4880168d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时完成了当页面为home时，三级联动组件展示，当页面为search时，三级联动组件隐藏的功能。 接下来完成鼠标控制search页面中的三级联动组件展示效果的功能。</p><p>首先给三级联动所在的标签绑定事件（鼠标进入事件与鼠标离开事件）如下所示</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_18,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>绑定完成后，书写绑定方法，具体代码如下所示。此时该效果完成。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">leaveIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>currentIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//当不是home页面的时候，如果鼠标离开就隐藏</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token operator">!=</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">//鼠标进入进行展示</span>
<span class="token function">enterShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token operator">!=</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_17,color_FFFFFF,t_70,g_se,x_16-16701603553692.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="过渡动画效果" tabindex="-1"><a class="header-anchor" href="#过渡动画效果" aria-hidden="true">#</a> 过渡动画效果</h4><p>首先过渡动画的前提条件是（组件或者元素务必有v-if或者v-show指令)。只有满足该条件才可以设置过渡动画</p><p>首先将实现过渡效果的地方包裹在transition标签内，如果transition没有设置name，就可以通过v-enter等设置动画效果，如果transition设置了name（假如设置name=‘sort’）那么就通过 sort-enter等设置动画效果</p><p>不用name的写法如下所示</p><p><code>src\\components\\TypeNav\\index.vue</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/5680f4d875d4464fa893b4107f070ed9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_12,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用name的写法</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>//过渡动画
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sort<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	//三级联动
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sort<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		...
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_19,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//过渡动画开始进入</span>
<span class="token punctuation">.</span>sort<span class="token operator">-</span>enter<span class="token punctuation">{</span>
	<span class="token literal-property property">height</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>
	<span class="token comment">//transform: rotate(0deg);</span>
<span class="token punctuation">}</span>
<span class="token comment">//过渡动画进入结束</span>
<span class="token punctuation">.</span>sort<span class="token operator">-</span>enter<span class="token operator">-</span>to<span class="token punctuation">{</span>
	<span class="token literal-property property">height</span><span class="token operator">:</span> 461px<span class="token punctuation">;</span>
	<span class="token comment">//transform: rotate(360deg);</span>
<span class="token punctuation">}</span>
<span class="token comment">//动画时间与速率</span>
<span class="token punctuation">.</span>sort<span class="token operator">-</span>enter<span class="token operator">-</span>active<span class="token punctuation">{</span>
	<span class="token literal-property property">transition</span><span class="token operator">:</span> all <span class="token punctuation">.</span>5s linear<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_14,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二十四、typenav商品分类列表的优化" tabindex="-1"><a class="header-anchor" href="#二十四、typenav商品分类列表的优化" aria-hidden="true">#</a> 二十四、TypeNav商品分类列表的优化</h2><p>当前项目存在着如下问题：当 typeNav组件调用的时候，页面就会发送一个请求，如果反复切换home和search页，就会反复发请求，影响性能。如图所示</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/149830511f984ac9b704c336b8a33f77.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>原因：从Home模块跳转到Search模块：首先TypeNav在Home模块中挂载时，会向后台请求数据，当跳转到Search模块时，Home组件销毁，当中的TypeNav也销毁，Search组件挂载，当中的TypeNav也挂载，挂载时又要发一次请求。</p><p>首先执行入口文件main.js，其中有App路由组件，她是唯一一个根组件，因此不管如何，她都只会挂载一次。那我们把TypeNav中派发action的操作（用于请求数据）放在App.vue中，就能实现仅请求一次的效果了。</p><p>如果放在main.js中可行吗？不行，因为main.js不是一个组件，而是一个js文件，派发action时，this为undefined</p><p><code>src\\components\\TypeNav\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;categoryList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_15,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>src\\App.vue</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_13,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_12,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二十五、合并params和query参数" tabindex="-1"><a class="header-anchor" href="#二十五、合并params和query参数" aria-hidden="true">#</a> 二十五、合并params和query参数</h2><p>目前项目存在一个问题就是，当通过三级联动进入search后在从搜索框输入数据会导致传输的数据丢失。同理当从搜索框输入数据后再点击三级联动也会产生数据丢失。具体问题如下所示</p><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="" loading="lazy"><br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-16703310701481.png" alt="" loading="lazy"> 针对这种情况就需要合并参数。具体步骤如下，首先找到三级联动组件，找到路由跳转。在跳转前先进行一个判断，如果在跳转前发现有params数据，就保留下来。同理在首页的路由跳转也进行一个判断，如果在跳转前发现有query数据，同样保留下来。具体代码如下所示。</p><p><code>src\\components\\TypeNav\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">goSearch</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">.</span>
	<span class="token punctuation">.</span>
	<span class="token punctuation">.</span>
	<span class="token comment">//判断：如果路由跳转的时候，带有params参数，携带参数传递过去</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		location<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">;</span>
		<span class="token comment">//整理完参数</span>
		location<span class="token punctuation">.</span>query <span class="token operator">=</span> query<span class="token punctuation">;</span>
		<span class="token comment">//路由跳转</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-16703310701492.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后，在head组件中，点击搜索时进行路由跳转，如果有query参数，要和params一起捎带过去</p><p><code>src\\components\\Header\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">goSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token punctuation">.</span>
	<span class="token punctuation">.</span>
	<span class="token punctuation">.</span>
	<span class="token comment">//如果有query也携带过去</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">let</span> location <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">keyword</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
		location<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-16703310701493.png" alt="" loading="lazy"><br> 修改完成后，同样按照上述步骤先点击三级联动组件的电子书，再点击搜索新书，现在的结果如下。同理先点击新书再点击三级联动组件的电子书也是同样的结果。 <img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-16703310701494.png" alt="" loading="lazy"></p><h2 id="二十六、mockjs模拟数据" tabindex="-1"><a class="header-anchor" href="#二十六、mockjs模拟数据" aria-hidden="true">#</a> 二十六、mockjs模拟数据</h2><p>由于服务器没有提供首页中的ListContainer组件与Floor组件的数据，因此为了展示，采用mock数据。mock数据不会和服务器进行任何通信。</p><p>首先安装mockjs插件。然后在src文件夹下创建mock文件夹，用来提供假数据。接下来准备json数据。将准备好的banner.json与floor.json填入mock文件夹如下图所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> mockjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>src\\mock\\floor.json</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198852923.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来把mock数据需要的图片放置到public文件夹中（public文件夹在打包的时候会原封不动打包到dist文件夹中)然后开始利用mockjs来虚拟数据。</p><p><code>public\\images</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/823866d4c79f46bcafb790a7a8f58756.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虚拟数据步骤，首先在src文件夹下的mock文件夹建立mockServer.js文件。随后在该文件中同通过import引入mockjs模块与准备好的json数据通过调用mockjs的mock方法模拟数据。接下来在入口文件引入mockServer文件（不引入前面就相当于白写。）</p><p><code>src\\mock\\mockServer.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 利用mockjs提供mock接口</span>
<span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">&#39;mockjs&#39;</span>
<span class="token comment">// JSON数据格式根本没有对外暴露，但是可以引入</span>
<span class="token comment">// webpack默认对外暴露的：图片、JSON数据格式</span>
<span class="token keyword">import</span> floors <span class="token keyword">from</span> <span class="token string">&#39;./floors.json&#39;</span>
<span class="token keyword">import</span> banners <span class="token keyword">from</span> <span class="token string">&#39;./banners.json&#39;</span>
 
<span class="token comment">// 提供广告轮播接口  第一个参数是请求地址，第二个参数是请求数据</span>
Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;/mock/banners&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> banners<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//模拟首页大的轮播图的数据</span>
<span class="token comment">// 提供floor接口</span>
Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">&#39;/mock/floors&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> floors<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198852924.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>src\\main.js</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198852925.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二十七、获取banner轮播图数据" tabindex="-1"><a class="header-anchor" href="#二十七、获取banner轮播图数据" aria-hidden="true">#</a> 二十七、获取Banner轮播图数据</h2><p>接下来通过axios发送数据请求，由于之前封装过一次axios，当时的基础路径设置为/api。而现在这个mock数据的基础路径是/mock因此可以复制之前封装的axios并命名为<code>mockAjax.js</code>,然后把<code>mockAjax.js</code>里基础路径改为/mock</p><p><code>src\\api\\mockAjax.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//对axios进行二次封装，</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>
<span class="token comment">//引入进度条</span>
<span class="token keyword">import</span> nprogress <span class="token keyword">from</span> <span class="token string">&#39;nprogress&#39;</span>
<span class="token comment">//在当前模块中引入store</span>
<span class="token comment">//引入进度条的样式</span>
<span class="token keyword">import</span> <span class="token string">&quot;nprogress/nprogress.css&quot;</span>
 
<span class="token comment">// 利用axios对象得方法create，去创建一个axios实例</span>
<span class="token comment">// request就是axios，只不过稍微配置一下</span>
<span class="token keyword">const</span> requests <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//配置对象</span>
    <span class="token comment">//基础路径，发送请求的时候，路径当中会出现api</span>
    <span class="token literal-property property">baseURL</span><span class="token operator">:</span><span class="token string">&#39;/mock&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">//代表请求超时的时间5S</span>
    <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">5000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//请求拦截器：在发请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情</span>
requests<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//config：配置对象，对象里面有一个属性很重要，header请求头</span>
    <span class="token comment">//进度条开始动</span>
    nprogress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//响应拦截器</span>
requests<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//成功的回调函数：服务器相应数据回来以后，响应拦截器可以检测到，可以做一些事情</span>
    nprogress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token comment">//响应失败的回调函数</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;faile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
 
<span class="token comment">//对外暴露</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> requests<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198852926.png" alt="" loading="lazy"><br> 设置完成后，随后使用api中的index.js文件发送请求（以获取banner为例)。首先由于再次封装axios，所以需要在index.js文件中通过import引入。随后暴露函数。如下图所示。</p><p><code>src\\api\\index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//当前这个模块：API进行统一管理</span>
<span class="token keyword">import</span> requests <span class="token keyword">from</span> <span class="token string">&#39;./ajax&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> mockRequests <span class="token keyword">from</span> <span class="token string">&#39;./mockAjax&#39;</span>
 
<span class="token comment">//三级联动接口  </span>
<span class="token comment">//暴露这个函数，外面拿到这个函数，直接调用，就能发送请求获取数据了</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reqCategoryList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//返回的结果是promise对象 当前函数执行需要把服务器返回结果进行返回</span>
    <span class="token keyword">return</span> <span class="token function">requests</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;/product/getBaseCategoryList&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;get&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reqGetBannerList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//返回的结果是promise对象 当前函数执行需要把服务器返回结果进行返回</span>
    <span class="token keyword">return</span> <span class="token function">mockRequests</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;/banner&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;get&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853027.png" alt="" loading="lazy"> 接下来将请求的数据存储到仓库中。由于轮播图在ListContainer组件中，因此先找到ListContainer文件夹下的index.vue组件。在其挂载完成生命周期钩子中派发action，由于ListContainer组件也在home主页中，因此去home仓库在存储。具体代码如下所示。</p><p><code>src\\pages\\Home\\ListContainer\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;getBannerList&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_17,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>src\\store\\home\\index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment">//轮播图的数据</span>
    <span class="token literal-property property">bannerList</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>
    <span class="token punctuation">.</span>
    <span class="token punctuation">.</span>
    <span class="token comment">//获取首页轮播图的数据</span>
    <span class="token keyword">async</span> <span class="token function">getBannerList</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">reqGetBannerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;GETBANNERLIST&#39;</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token constant">GETBANNERLIST</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>bannerList</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>bannerList <span class="token operator">=</span> bannerList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_16,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>数据存储到仓库完成之后，组件上还是没有数据，数据需要去仓库中获取。此时再回到ListContainer文件夹下的index.vue文件，去获取仓库数据。获取步骤，首先通过import引入mapState，然后利用计算属性进行操作，具体代码如下所示。此时ListContainer组件拿到了数据。</p><p><code>src\\pages\\Home\\ListContainer\\index.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;ListContainer&#39;</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;getBannerList&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token function-variable function">bannerList</span><span class="token operator">:</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>home<span class="token punctuation">.</span>bannerList
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853028.png" alt="" loading="lazy"><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_16,color_FFFFFF,t_70,g_se,x_16-167033198853029.png" alt="" loading="lazy"></p><h2 id="二十八、banner实现轮播图" tabindex="-1"><a class="header-anchor" href="#二十八、banner实现轮播图" aria-hidden="true">#</a> 二十八、Banner实现轮播图</h2><h2 id="安装swiper" tabindex="-1"><a class="header-anchor" href="#安装swiper" aria-hidden="true">#</a> 安装swiper</h2><p>安装代码如下所示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> swiper@5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="轮播图的实现" tabindex="-1"><a class="header-anchor" href="#轮播图的实现" aria-hidden="true">#</a> 轮播图的实现</h2><p>轮播图实现的步骤分为三步，首先引入包与样式，然后设置页面结构，最后通过new Swiper实例添加动态效果（注意new Swiper的时候一定要保证页面结构完整）。<br> 因此结合实现步骤，第一步首先找到ListContainer文件夹下的index.vue文件，在里面通过import引入swiper包。由于ListContainer与Floor组件中的轮播图样式一样，因此可以在入口文件main.js中引入样式，这样这俩组件就可以直接使用，无需在自身重复引入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Swiper <span class="token keyword">from</span> <span class="token string">&#39;swiper&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_15,color_FFFFFF,t_70,g_se,x_16-167033198853130.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;swiper/css/swiper.css&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_15,color_FFFFFF,t_70,g_se,x_16-167033198853131.png" alt="" loading="lazy"><br> 第二步设置页面结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;list-container&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;sortList clearfix&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;center&quot;</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>banner轮播<span class="token operator">--</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;swiper-container&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;mySwiper&quot;</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;swiper-wrapper&quot;</span><span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;swiper-slide&quot;</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(carousel,index) in bannerList&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;carousel.id&quot;</span><span class="token operator">&gt;</span>
                            <span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">&quot;carousel.imgUrl&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
	<span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853132.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第三步new Swiper实例</p><p>因为new Swiper的时候一定要保证页面结构完整，所以注意不能放置在mounted中。原因如下：通常来说mounted表示挂载完成，页面结构完整，但是在这里，因为涉及到异步语句，所以此时如果放在mounted中，页面结构并不完整，因此放在mounted中不合适，放进去也不会生成动态效果。</p><p>为了解决这个问题，有两种解决方案。</p><p>第一种：针对存在异步语句的问题可以利用setTimeout等待异步语句执行完成后再new Swiper实例，具体如下所示。这种方法存在缺陷，即不会立刻就可以使用，需要等待计时器时间到了才可使用轮播图。<br> 第二种：通过watch监听bannerList的变化。原因：bannerList数据会变化，最开始是空数组，后来变成四个元素。但是注意不可以直接再watch中的handler中直接new Swiper实例，如果直接new Swiper实例还是不能添加动态效果，需要再handler中利用nextTick。</p><p><strong>nextTick的效果是在下次DOM更新，循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，获取更新后的DOM。具体代码如下所示。</strong></p><p>缺点：无法确定用户请求到底需要多长时间，因此没办法确定延迟器时间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> mySwiper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853133.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>this. $nextTick</code>：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
   <span class="token comment">&lt;!--banner轮播--&gt;</span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mySwiper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-slide<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(carouse,index) in bannerList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>carouse.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>carouse.imgUrl<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!-- 如果需要分页器 --&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-pagination<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!-- 如果需要导航按钮 --&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-button-prev<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-button-next<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 引入Swiper</span>
<span class="token keyword">import</span> Swiper <span class="token keyword">from</span> <span class="token string">&#39;swiper&#39;</span>
<span class="token comment">// 引入Swiper样式</span>
<span class="token keyword">import</span> <span class="token string">&#39;swiper/css/swiper.css&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuex&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ajax请求轮播图图片</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&quot;getBannerList&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 从仓库中获取轮播图数据</span>
      <span class="token function-variable function">bannerList</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> state<span class="token punctuation">.</span>home<span class="token punctuation">.</span>bannerList<span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">bannerList</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// this.$nextTick()使用</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
          <span class="token keyword">let</span> mySwiper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mySwiper<span class="token punctuation">,</span><span class="token punctuation">{</span>
            <span class="token literal-property property">pagination</span><span class="token operator">:</span><span class="token punctuation">{</span>
              <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;.swiper-pagination&#39;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">clickable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token comment">// 如果需要前进后退按钮</span>
            <span class="token literal-property property">navigation</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">nextEl</span><span class="token operator">:</span> <span class="token string">&#39;.swiper-button-next&#39;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">prevEl</span><span class="token operator">:</span> <span class="token string">&#39;.swiper-button-prev&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853134.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="floor组件修改" tabindex="-1"><a class="header-anchor" href="#floor组件修改" aria-hidden="true">#</a> floor组件修改</h1><p>整体流程和ListContainer类似，因此截取关键图片说明。</p><h2 id="获取floor数据" tabindex="-1"><a class="header-anchor" href="#获取floor数据" aria-hidden="true">#</a> 获取floor数据</h2><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853135.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853136.png" alt="" loading="lazy"><br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853237.png" alt="" loading="lazy"><br> 此时数据都在home组件上，而不是直接在floor组件上，如果floor组件想用数据，那么还涉及到组件通信（home-&gt;floor父传子 可用props）。<br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853238.png" alt="" loading="lazy"></p><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_15,color_FFFFFF,t_70,g_se,x_16-167033198853239.png" alt="" loading="lazy"><br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_15,color_FFFFFF,t_70,g_se,x_16-167033198853240.png" alt="" loading="lazy"></p><h2 id="动态展示floor组件" tabindex="-1"><a class="header-anchor" href="#动态展示floor组件" aria-hidden="true">#</a> 动态展示floor组件</h2><p>将上一步请求到的数据替换原来floor组件中写死的数据。<br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853241.png" alt="" loading="lazy"><br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_17,color_FFFFFF,t_70,g_se,x_16-167033198853242.png" alt="" loading="lazy"><br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853243.png" alt="" loading="lazy"><br> 调整floor组件中的轮播图。注意此处可以在mounted中修改，原因是这个组件没有发送请求，而是直接获取的数据，因此不存在异步操作等问题，因此可以直接如下图一样new Swiper实例。<br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853244.png" alt="" loading="lazy"></p><h2 id="floor组件最终效果" tabindex="-1"><a class="header-anchor" href="#floor组件最终效果" aria-hidden="true">#</a> floor组件最终效果</h2><p>数据替换完成后，floor组件的效果如下。<br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853245.png" alt="" loading="lazy"></p><h1 id="全局组件carousel" tabindex="-1"><a class="header-anchor" href="#全局组件carousel" aria-hidden="true">#</a> 全局组件Carousel</h1><h2 id="全局组件注册" tabindex="-1"><a class="header-anchor" href="#全局组件注册" aria-hidden="true">#</a> 全局组件注册</h2><p>经过上述的步骤，我们发现，ListContainer组件与Floor组件都存在着轮播图，并且功能基本一致，因此为了优化代码，本次定义一个全局轮播图组件Carousel，方便轮播图的使用。具体步骤如下。为了封装成全局组件，需要Floor组件与ListContainer组件中关于轮播图的js代码基本一致。为了达到一致的效果，使Floor组件中关于轮播图的代码改写成ListContainer组件中关于轮播图的代码。此时ListContainer改写后的轮播图动态实例与Floor改写后的轮播图动态实例如下图所示。<br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853346.png" alt="" loading="lazy"></p><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_20,color_FFFFFF,t_70,g_se,x_16-167033198853347.png" alt="" loading="lazy"><br> 接下来封装全局组件。首先在components文件夹下创建Carousel文件夹并在此文件夹创建Index.vue.在该文件书写的内容如下所示。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>floor1Swiper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-slide<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(carousel, index) in list<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
        
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 如果需要分页器 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-pagination<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 如果需要导航按钮 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-button-prev<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>swiper-button-next<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Swiper <span class="token keyword">from</span> <span class="token string">&quot;swiper&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Carousel&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;list&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//立即监听的原因：因为list是传输过来的数据，因此在这监听不到list数据的变化，只能通过立即监听才能执行下面的handler</span>
      <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//只能监听到数据已经有了，但是v-for动态渲染结构还是没办法确定，因此还是需要nextTick</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">var</span> mySwiper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swiper</span><span class="token punctuation">(</span><span class="token string">&quot;.swiper-container&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">loop</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 循环模式选项</span>

            <span class="token comment">// 如果需要分页器</span>
            <span class="token literal-property property">pagination</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;.swiper-pagination&quot;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">clickable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>

            <span class="token comment">// 如果需要前进后退按钮</span>
            <span class="token literal-property property">navigation</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">nextEl</span><span class="token operator">:</span> <span class="token string">&quot;.swiper-button-next&quot;</span><span class="token punctuation">,</span>
              <span class="token literal-property property">prevEl</span><span class="token operator">:</span> <span class="token string">&quot;.swiper-button-prev&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>书写完成之后回到入口文件，注册全局组件。<br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_18,color_FFFFFF,t_70,g_se,x_16.png" alt="" loading="lazy"></p><h2 id="全局组件使用" tabindex="-1"><a class="header-anchor" href="#全局组件使用" aria-hidden="true">#</a> 全局组件使用</h2><p>注册完成之后，改写之前的ListContainer组件与Floor组件。 <img src="https://gitlab.com/apzs/image/-/raw/master/image/5db9ba47ebd746e3914987edbcef53ff.png" alt="" loading="lazy"> <img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmV2aW4wNTA=,size_17,color_FFFFFF,t_70,g_se,x_16-167033198853348.png" alt="" loading="lazy"></p>`,155);function N(T,L){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[s("课程链接："),n("a",u,[s("尚硅谷VUE项目实战，前端项目-尚品汇(大型\\重磅)_哔哩哔哩_bilibili"),t(a)])]),d,k,m,v,g,b,h,n("p",null,[s("本项目使用vue-cli搭建，需要准备的初始环境有:"),n("a",y,[s("node"),t(a)]),s(".js webpack")]),n("p",null,[s("安装nodejs对应链接 "),n("a",f,[s("Node.js"),t(a)])]),n("p",null,[s("安装"),n("a",w,[s("webpack"),t(a)]),s("对应链接 "),n("a",x,[s("webpack"),t(a)])]),_,n("p",null,[s("这里放上有关路由元信息的官方文档内容："),n("a",q,[s("路由元信息 | Vue Router"),t(a)])]),F,n("p",null,[s("链接在此："),n("a",j,[s("vue路由知识点概括--思维导图_yuran1的博客-CSDN博客"),t(a)])]),z])}const V=p(l,[["render",N],["__file","index.html.vue"]]);export{V as default};
