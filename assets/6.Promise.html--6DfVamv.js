const e=JSON.parse('{"key":"v-5b9d3e4a","path":"/front-base/js/6.Promise.html","title":"Promise","lang":"zh-CN","frontmatter":{"title":"Promise","icon":"gears","order":6,"category":["前端"],"tag":["js","前端"],"description":"Promise &amp; async/await 一、Promise 的理解和使用 1. Promise 的理解 1.1 定义 MDN 上的定义：一个 Promise 对象代表一个在这个 Promise 被创建出来时不一定已知的值。它让您能够 把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。 这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 promise，以便在未来某个时候把值交给使用者。","head":[["meta",{"property":"og:url","content":"https://apzs.github.io/front-base/js/6.Promise.html"}],["meta",{"property":"og:site_name","content":"apzs"}],["meta",{"property":"og:title","content":"Promise"}],["meta",{"property":"og:description","content":"Promise &amp; async/await 一、Promise 的理解和使用 1. Promise 的理解 1.1 定义 MDN 上的定义：一个 Promise 对象代表一个在这个 Promise 被创建出来时不一定已知的值。它让您能够 把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。 这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 promise，以便在未来某个时候把值交给使用者。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-05T06:05:15.000Z"}],["meta",{"property":"article:author","content":"apzs"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:modified_time","content":"2024-03-05T06:05:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-05T06:05:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"apzs\\",\\"url\\":\\"https://apzs.eu.org\\"}]}"]]},"headers":[{"level":2,"title":"一、Promise 的理解和使用","slug":"一、promise-的理解和使用","link":"#一、promise-的理解和使用","children":[{"level":3,"title":"1. Promise 的理解","slug":"_1-promise-的理解","link":"#_1-promise-的理解","children":[]},{"level":3,"title":"2. 为什么要使用 Promise","slug":"_2-为什么要使用-promise","link":"#_2-为什么要使用-promise","children":[]},{"level":3,"title":"3. 如何使用 Promise","slug":"_3-如何使用-promise","link":"#_3-如何使用-promise","children":[]}]},{"level":2,"title":"二、手写 Promise","slug":"二、手写-promise","link":"#二、手写-promise","children":[{"level":3,"title":"1. 构造函数实现","slug":"_1-构造函数实现","link":"#_1-构造函数实现","children":[]},{"level":3,"title":"2. ES6 class 类实现","slug":"_2-es6-class-类实现","link":"#_2-es6-class-类实现","children":[]}]},{"level":2,"title":"三、JS 异步之宏队列与微队列","slug":"三、js-异步之宏队列与微队列","link":"#三、js-异步之宏队列与微队列","children":[]},{"level":2,"title":"四、Promise 相关面试题","slug":"四、promise-相关面试题","link":"#四、promise-相关面试题","children":[]},{"level":2,"title":"五、async 与 await","slug":"五、async-与-await","link":"#五、async-与-await","children":[{"level":3,"title":"1. MDN 文档","slug":"_1-mdn-文档","link":"#_1-mdn-文档","children":[]},{"level":3,"title":"2. async 函数","slug":"_2-async-函数","link":"#_2-async-函数","children":[]},{"level":3,"title":"3. await 表达式","slug":"_3-await-表达式","link":"#_3-await-表达式","children":[]},{"level":3,"title":"4.注意","slug":"_4-注意","link":"#_4-注意","children":[]}]},{"level":2,"title":"六、异步综合面试题","slug":"六、异步综合面试题","link":"#六、异步综合面试题","children":[]}],"git":{"createdTime":1708674856000,"updatedTime":1709618715000,"contributors":[{"name":"zhaoshuo","email":"apzs@foxmaill.com","commits":2}]},"readingTime":{"minutes":30.07,"words":9020},"filePathRelative":"front-base/js/6.Promise.md","localizedDate":"2024年2月23日","excerpt":"<h1> Promise &amp; async/await</h1>\\n<h2> 一、Promise 的理解和使用</h2>\\n<h3> 1. Promise 的理解</h3>\\n<h4> 1.1 定义</h4>\\n<p>MDN 上的定义：一个 <code>Promise</code> 对象代表一个在这个 <code>Promise</code> 被创建出来时不一定已知的值。它让您能够 <strong>把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来</strong>。 这样使得异步方法可以像同步方法那样返回值：<strong>异步方法并不会立即返回最终的值，而是会返回一个 promise，以便在未来某个时候把值交给使用者</strong>。</p>","autoDesc":true}');export{e as data};
