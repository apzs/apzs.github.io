import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as c,c as d,a,b as s,d as e,e as i}from"./app-ldxHvpH7.js";const t={},o=a("h1",{id:"三、docker相关",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#三、docker相关","aria-hidden":"true"},"#"),s(" 三、docker相关")],-1),p={id:"_3-1、docker-安装",tabindex:"-1"},u=a("a",{class:"header-anchor",href:"#_3-1、docker-安装","aria-hidden":"true"},"#",-1),m={href:"https://www.runoob.com/docker/centos-docker-install.html",target:"_blank",rel:"noopener noreferrer"},v=i(`<hr><p><strong>使用官方安装脚本自动安装</strong></p><p>安装命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token function">docker</span> <span class="token parameter variable">--mirror</span> Aliyun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用yum安装docker（推荐）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p><strong>手动安装</strong></p><ul><li>卸载旧版本</li></ul><p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装工具包</li></ul><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\\</span>
  device-mapper-persistent-data <span class="token punctuation">\\</span>
  lvm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置仓库</li></ul><p>使用官方源地址（比较慢，不推荐）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阿里云（推荐）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>清华大学源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装 Docker Engine-Community</li></ul><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果提示您接受 GPG 密钥，请选是。</p><blockquote><p><strong>有多个 Docker 仓库吗？</strong></p><p>如果启用了多个 Docker 仓库，则在未在 yum install 或 yum update 命令中指定版本的情况下，进行的安装或更新将始终安装最高版本，这可能不适合您的稳定性需求。</p></blockquote><p>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。</p><p><strong>要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：</strong></p><p>1、列出并排序您存储库中可用的版本。此示例按版本号（从高到低）对结果进行排序。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum list docker-ce <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span>

docker-ce.x86_64  <span class="token number">3</span>:18.09.1-3.el7                     docker-ce-stable
docker-ce.x86_64  <span class="token number">3</span>:18.09.0-3.el7                     docker-ce-stable
docker-ce.x86_64  <span class="token number">18.06</span>.1.ce-3.el7                    docker-ce-stable
docker-ce.x86_64  <span class="token number">18.06</span>.0.ce-3.el7                    docker-ce-stable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：<code>docker-ce-18.09.1</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>sudo yum install docker<span class="token operator">-</span>ce<span class="token operator">-</span><span class="token generics"><span class="token punctuation">&lt;</span>VERSION_STRING<span class="token punctuation">&gt;</span></span> docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli<span class="token operator">-</span><span class="token generics"><span class="token punctuation">&lt;</span>VERSION_STRING<span class="token punctuation">&gt;</span></span> containerd<span class="token punctuation">.</span>io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动 Docker。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo systemctl start docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过运行 hello-world 镜像来验证是否正确安装了 Docker Engine-Community 。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo docker run hello-world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>卸载 docker</strong></p><p>删除安装包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum remove docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除镜像、容器、配置文件等内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,42),b={id:"_3-2、常用命令",tabindex:"-1"},k=a("a",{class:"header-anchor",href:"#_3-2、常用命令","aria-hidden":"true"},"#",-1),g={href:"https://blog.csdn.net/leilei1366615/article/details/106267225",target:"_blank",rel:"noopener noreferrer"},h=i(`<h3 id="_1-docker-基础命令" tabindex="-1"><a class="header-anchor" href="#_1-docker-基础命令" aria-hidden="true">#</a> 1. docker 基础命令</h3><p><strong>启动docker</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>关闭docker</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重启docker</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>docker自启动</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看docker 运行状态</strong></p><p>------如果是在运行中 输入命令后 会看到绿色的active</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看docker 版本号信息</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>docker 帮助命令</strong></p><p>忘记了某些命令便可使用此进行查看与回顾</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如 咱忘记了 拉取命令 不知道可以带哪些参数 咱可以这样使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-docker-镜像命令" tabindex="-1"><a class="header-anchor" href="#_2-docker-镜像命令" aria-hidden="true">#</a> 2. docker 镜像命令</h3><p><strong>查看自己服务器中docker 镜像列表</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>搜索镜像</strong></p>`,24),f={href:"https://hub.docker.com/search?type=image",target:"_blank",rel:"noopener noreferrer"},x=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> search 镜像名
<span class="token comment"># 搜索 STARS &gt;9000的 mysql 镜像</span>
<span class="token function">docker</span> search <span class="token parameter variable">--filter</span><span class="token operator">=</span>STARS<span class="token operator">=</span><span class="token number">9000</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>拉取镜像</strong> 不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull 镜像名
<span class="token comment"># 指定版本</span>
<span class="token function">docker</span> pull 镜像名:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拉取最新版 mysql</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>运行镜像</strong></p><p><strong>删除镜像</strong></p><blockquote><p>当前镜像没有被任何容器使用才可以删除</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#删除一个</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像名/镜像ID

<span class="token comment">#删除多个 其镜像ID或镜像用用空格隔开即可 </span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像名/镜像ID 镜像名/镜像ID 镜像名/镜像ID

<span class="token comment">#删除全部镜像  -a 意思为显示全部, -q 意思为只显示ID</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>强制删除镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">rm</span> 镜像名称/镜像ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>镜像的基础命令就到这里 下方会使用更复杂的 docker run 命令 来根据镜像启动容器</p><p><strong>保存镜像</strong></p><p>将我们的镜像 保存为tar 压缩文件 这样方便镜像转移和保存 ,然后 可以在任何一台安装了docker的服务器上 加载这个镜像</p><p>命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save 镜像名/镜像ID <span class="token parameter variable">-o</span> 镜像保存在哪个位置与名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>exmaple:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save tomcat <span class="token parameter variable">-o</span> /myimg.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>加载镜像</strong></p><p>任何装 docker 的地方加载镜像保存文件,使其恢复为一个镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> 镜像保存文件位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>镜像标签</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag SOURCE_IMAGE<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span> TARGET_IMAGE<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>

<span class="token function">docker</span> tag 源镜像名:TAG 想要生成新的镜像名:新的TAG

<span class="token comment"># 如果省略TAG 则会为镜像默认打上latest TAG</span>
<span class="token function">docker</span> tag aaa bbb
<span class="token comment"># 上方操作等于 docker tag aaa:latest bbb:test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ex：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 我们根据镜像 quay.io/minio/minio 添加一个新的镜像 名为 aaa 标签Tag设置为1.2.3</span>
<span class="token function">docker</span> tag quay.io/minio/minio:1.2.3 aaa:1.2.3

<span class="token comment"># 我们根据镜像 app-user:1.0.0 添加一个新的镜像 名为 app-user 标签Tag设置为alpha-1.0.0</span>
<span class="token function">docker</span> tag app-user:1.0.0 app-user:alpha-1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-docker-容器命令" tabindex="-1"><a class="header-anchor" href="#_3-docker-容器命令" aria-hidden="true">#</a> 3. docker 容器命令</h3><p><strong>查看正在运行容器列表</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看所有容器</strong></p><p>包含正在运行 和已停止的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>启动容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>停止容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重启容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>修改容器为自启动</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span>  update <span class="token parameter variable">--restart</span><span class="token operator">=</span>always 容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>kill 容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">kill</span> 容器ID/容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>运行一个容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -it 表示 与容器进行交互式启动 -d 表示可后台运行容器 （守护式运行）  --name 给要运行的容器 起的名字  /bin/bash  交互路径</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> 要取的别名 镜像名:Tag /bin/bash 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如我们要启动一个redis 把它的别名取为redis001 并交互式运行 需要的命令 —我这里指定版本号为5.0.5</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#1. 拉取redis 镜像</span>
<span class="token function">docker</span> pull redis:5.0.5
<span class="token comment">#2.命令启动</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis001 redis:5.0.5 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看端口使用情况</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息</span>
<span class="token function">netstat</span> <span class="token parameter variable">-untlp</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#删除一个容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> 容器名/容器ID
<span class="token comment">#删除多个容器 空格隔开要删除的容器名或容器ID</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> 容器名/容器ID 容器名/容器ID 容器名/容器ID
<span class="token comment">#删除全部容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>容器端口与服务器端口映射</strong></p><p>命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-p</span> 宿主机端口:容器端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-p 8888:6379 解析 将容器内部的 6379端口与docker 宿主机（docker装在哪台服务器 哪台服务器就是宿主机）8888 端口进行映射 那通过外部访问宿主机8888端口 即可访问到 docker 容器 6379 端口了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> redis002 <span class="token parameter variable">-p</span> <span class="token number">8888</span>:6379 redis:5.0.5 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>进入容器方式</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器名/容器ID /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入 前面的 redis001容器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker exec -it redis001 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>容器文件拷贝</strong> —无论容器是否开启 都可以进行拷贝</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#docker cp 源文件路径 目标文件路径</span>
<span class="token comment">#从容器内 拷出</span>
<span class="token function">docker</span> <span class="token function">cp</span> 容器ID/名称:容器内路径  容器外路径
<span class="token comment">#从外部 拷贝文件到容器内</span>
<span class="token function">docker</span>  <span class="token function">cp</span> 容器外路径 容器ID/名称:容器内路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>查看容器日志</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span>要查看末尾多少行<span class="token punctuation">(</span>默认all<span class="token punctuation">)</span> 容器ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看redis日志的最后10行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker logs -f --tail=10 redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>挂载到主机</strong></p><p>命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> 宿主机文件存储位置:容器内文件位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如此操作，就将 容器内指定文件挂载到了宿主机对应位置，-v命令可以多次使用，即一个容器可以同时挂载多个文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> 宿主机文件存储位置:容器内文件位置 <span class="token parameter variable">-v</span> 宿主机文件存储位置:容器内文件位置 <span class="token parameter variable">-v</span> 宿主机文件存储位置:容器内文件位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 运行一个docker redis 容器 进行 端口映射 两个数据卷挂载 设置开机自启动</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis505 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always  <span class="token parameter variable">-v</span> /var/lib/redis/data/:/data <span class="token parameter variable">-v</span> /var/lib/redis/conf/:/usr/local/etc/redis/redis.conf  redis:5.0.5 <span class="token parameter variable">--requirepass</span> <span class="token string">&quot;password&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>更换容器名</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rename</span> 容器ID/容器名 新容器名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-自己提交一个镜像" tabindex="-1"><a class="header-anchor" href="#_4-自己提交一个镜像" aria-hidden="true">#</a> 4. 自己提交一个镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;提交信息&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;作者信息&quot;</span> 容器名/容器ID 提交后的镜像名:Tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们拉取一个tomcat镜像 并持久化运行 且设置与宿主机进行端口映射</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull tomcat

<span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">-p8080:8080</span> <span class="token parameter variable">--name</span> tom tomcat /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 提交命令 将在运行的tomcat 容器 打包为一个全新的镜像 名字为tom Tag为1.0</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;leilei&quot;</span> <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;第一次打包镜像&quot;</span> 231f2eae6896 tom:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置容器名字为lei 映射端口为6500:8080</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span>  <span class="token parameter variable">-p6500:8080</span> <span class="token parameter variable">--name</span> lei tom:1.0 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/format,png-167098653496825.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>访问6500 端口进入到了 tomcat 首页 说明 咱commit 镜像成功了</p><h3 id="_5-docker-运维命令" tabindex="-1"><a class="header-anchor" href="#_5-docker-运维命令" aria-hidden="true">#</a> 5. docker 运维命令</h3><p>可能有时候发布会遇到如下错误:</p><p><code>docker: write /var/lib/docker/tmp/GetImageBlob325372670: no space left on device</code></p><p>这个错误是docker在写入的时候报错无机器无空间</p><p><strong>查看docker工作目录</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> info <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;Docker Root Dir&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看docker磁盘占用总体情况</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">du</span> <span class="token parameter variable">-hs</span> /var/lib/docker/ 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查看Docker的磁盘使用具体情况</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> system <span class="token function">df</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除 无用的容器和 镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#  删除异常停止的容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> Exited <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">\`</span></span> 
 
<span class="token comment">#  删除名称或标签为none的镜像</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span>  <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;&lt;none&gt;&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $3}&#39;</span><span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>清除所有无容器使用的镜像</strong></p><p>注意，此命令只要是镜像无容器使用（容器正常运行）都会被删除，包括容器临时停止</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> system prune <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查找大文件</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +100M <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">du</span> <span class="token parameter variable">-h</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>查找指定docker使用目录下大于指定大小文件</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>find / -type f -size +100M -print0 | xargs -0 du -h | sort -nr |grep &#39;/var/lib/docker/overlay2/*&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ex：我这里是查找 /var/lib/docker/overlay2/* 开头的且大于100m的文件</p><h3 id="_6-手动部署jar文件" tabindex="-1"><a class="header-anchor" href="#_6-手动部署jar文件" aria-hidden="true">#</a> 6. 手动部署jar文件</h3><p>目录结构：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221215161858131.png" alt="image-20221215161858131" tabindex="0" loading="lazy"><figcaption>image-20221215161858131</figcaption></figure><p><code>Dockerfile</code>文件</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 基础镜像为centos</span>
<span class="token instruction"><span class="token keyword">FROM</span> centos:centos7</span>

<span class="token comment"># 作者</span>
<span class="token instruction"><span class="token keyword">MAINTAINER</span> apzs</span>

<span class="token comment"># 为Dockerfile中所有RUN、CMD、ENTRYPOINT、COPY和ADD指令设定工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/local/mydata</span>

<span class="token comment"># 添加jdk压缩包至 /usr/local 目录，压缩包会自动解压，解压后目录名称为jdk1.8.0_101 (如果不知道名字，可以在自己电脑上先把tar.gz这个文件解压，即可看到命名为 jdk1.8.0_101 )</span>
<span class="token instruction"><span class="token keyword">ADD</span> jdk-8u101-linux-x64.tar.gz /usr/local/env/jdk/</span>

<span class="token comment"># 配置JAVA_HOME环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME /usr/local/env/jdk/jdk1.8.0_101/</span>
 
<span class="token comment"># 将JAVA_HOME/bin 添加至PATH环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH <span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$PATH</span></span>

<span class="token comment"># 将这两个文件移动到指定目录</span>
<span class="token instruction"><span class="token keyword">ADD</span> librxtxSerial.so <span class="token variable">$JAVA_HOME</span>/jre/lib/amd64</span>
<span class="token instruction"><span class="token keyword">ADD</span> RXTXcomm.jar <span class="token variable">$JAVA_HOME</span>/jre/lib/ext</span>

<span class="token comment"># 开放的端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token comment"># VOLUME 指定了临时文件目录为/env/jdk/tmp</span>
<span class="token comment"># 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/env/jdk/tmp</span>
<span class="token instruction"><span class="token keyword">VOLUME</span> /env/jdk/tmp</span>

<span class="token comment"># 把本路径的sensor.jar复制到相对于相对于WORKDIR的位置(即/usr/local/mydata/sensor.jar)</span>
<span class="token instruction"><span class="token keyword">COPY</span> sensor.jar sensor.jar</span>

<span class="token comment"># 容器启动时执行的命令(sensor.jar相对于WORKDIR,即/usr/local/mydata/sensor.jar)</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;sensor.jar&quot;</span>]</span>

<span class="token comment"># 安装vim</span>
<span class="token comment"># RUN yum -y install vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建镜像命令(<code>.</code>表示寻找当前目录的Dockerfile文件)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> ./Dockerfile <span class="token parameter variable">-t</span> sensorImage <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建容器</p><p>如果docker部署<code>spring boot</code>应用需要连接<code>mysql</code>不能使用<code>127.0.0.1</code>连接，这是因为docker部署的<code>spring boot</code>应用也是一个小型的<code>linux</code>虚拟机，因此不能访问外面的宿主机（即安装<code>docker</code>应用的主机）因此可以在<code>spring.datasource.url</code>里配置域名访问，然后创建容器时指定在<code>Hosts</code>文件添加域名映射 (相当于让yml里指定的<code>jdbc:mysql://www.sensor.com:3306/tonrain</code>找到真正的ip)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> sensor --add-host www.sensor.com:192.168.56.10 <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-d</span> sensorImage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者通过设置<code>Environment</code>添加启动参数（启动参数配置比yml里的配置优先级高）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> sensor <span class="token parameter variable">-e</span> <span class="token assign-left variable">spring.datasource.url</span><span class="token operator">=</span><span class="token string">&#39;jdbc:mysql://192.168.56.10:3306/tonrain?useSSL=false&#39;</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-d</span> sensorImage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>导出镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save 镜像名/镜像ID <span class="token parameter variable">-o</span> 镜像保存在哪个位置与名字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>exmaple:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save tomcat <span class="token parameter variable">-o</span> /myimg.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>导入镜像</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> 镜像保存文件位置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,121),_={id:"_3-3、docker生成springboot镜像",tabindex:"-1"},y=a("a",{class:"header-anchor",href:"#_3-3、docker生成springboot镜像","aria-hidden":"true"},"#",-1),q={href:"https://blog.csdn.net/A434534658/article/details/122354597",target:"_blank",rel:"noopener noreferrer"},D=i(`<h3 id="_1-环境信息" tabindex="-1"><a class="header-anchor" href="#_1-环境信息" aria-hidden="true">#</a> 1. 环境信息</h3><p>java 1.8</p><h3 id="_2-准备程序文件" tabindex="-1"><a class="header-anchor" href="#_2-准备程序文件" aria-hidden="true">#</a> 2. 准备程序文件</h3><ul><li>文件准备</li></ul><ol><li>创建一个空文件夹docker-test</li><li>将springboot项目打包成可执行jar，放到文件夹；</li><li>将application.properties复制出来，保存成config.properties；</li><li>新建一个文本名为Dockerfile，去掉扩展名；</li></ol><p>如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-test
├── Dockerfile
├── config.properties
└── demo.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为demo要连接mysql容器中的MySQL数据库，因此要先查看mysql容器的ip地址：</p><ul><li><p>配置mysql容器的IP</p><h1 id="查看mysql内部ip" tabindex="-1"><a class="header-anchor" href="#查看mysql内部ip" aria-hidden="true">#</a> 查看mysql内部IP</h1><p>docker inspect mysql</p></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_5ouJ55qE5qKm5oOz,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>把172.17.0.2配置到config.properties中</p><h3 id="_3-写dockerfile" tabindex="-1"><a class="header-anchor" href="#_3-写dockerfile" aria-hidden="true">#</a> 3. 写Dockerfile</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Docker image for springboot file run</span>
<span class="token comment"># VERSION 0.0.1</span>
<span class="token comment"># Author: eangulee</span>
<span class="token comment"># 基础镜像使用java</span>
FROM openjdk:oraclelinux8
<span class="token comment"># 作者</span>
MAINTAINER ccl <span class="token operator">&lt;</span>ccl@qq.com<span class="token operator">&gt;</span>
<span class="token comment"># 声明要使用的端口</span>
EXPOSE <span class="token number">8080</span>
<span class="token comment"># VOLUME 指定了临时文件目录为/tmp。</span>
<span class="token comment"># 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp</span>
VOLUME /tmp
<span class="token comment"># 将jar包添加到容器中并更名为app.jar</span>
ADD demo.jar /app/app.jar 
ADD config.properties /app/config.properties
<span class="token comment"># 运行jar包</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;sh&quot;</span>,<span class="token string">&quot;-c&quot;</span>,<span class="token string">&quot;java -Dspring.config.location=/app/config.properties -Djava.security.egd=file:/dev/./urandom -jar /app/app.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-生成镜像" tabindex="-1"><a class="header-anchor" href="#_4-生成镜像" aria-hidden="true">#</a> 4. 生成镜像</h3><p>使用命令</p><blockquote><p>docker build -t demo .</p></blockquote><p>查看生成的镜像：</p><p>demo就是</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> images
REPOSITORY               TAG       IMAGE ID       CREATED          SIZE
demo                     latest    38e095527f1e   <span class="token number">18</span> minutes ago   544MB
redis                    latest    93f2223d3607   <span class="token number">4</span> weeks ago      107MB
docker/getting-started   latest    720f449e5af2   <span class="token number">4</span> weeks ago      <span class="token number">27</span>.2MB
mysql/mysql-server       latest    087c6f86492c   <span class="token number">7</span> weeks ago      509MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在客户端程序看：<br><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_5ouJ55qE5qKm5oOz,size_20,color_FFFFFF,t_70,g_se,x_16-167091826665756.png" alt="" loading="lazy"></p><p>这样就说明已经打包成镜像了。</p><h3 id="_5-启动容器" tabindex="-1"><a class="header-anchor" href="#_5-启动容器" aria-hidden="true">#</a> 5. 启动容器</h3><ul><li>启动</li></ul><p>使用命令：</p><pre><code>docker run -d -p 8081:8080 --link mysql --name demo demo
</code></pre><p>参数说明： run：启动</p><p>-d ：后台启动</p><p>-p ：端口映射，后面跟主机端口和容器端口</p><p>–link：连接另一个容器，后面跟容器的名字，比如demo要使用mysql容器中的MySQL数据库，这样配置后demo容器就可以访问mysql容器了，不然网络不通；</p><p>–name ：生成的容器的名字，不指定的话会随机命名，不易区分。 最后的demo是镜像的名字。</p><ul><li>查看容器</li></ul><p>使用命令：docker ps</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> <span class="token function">ps</span>              
CONTAINER ID   IMAGE                       COMMAND                  CREATED          STATUS                  PORTS                                     NAMES
4cd443339ff2   demo                        <span class="token string">&quot;sh -c &#39;java -Dsprin…&quot;</span>   <span class="token number">30</span> minutes ago   Up <span class="token number">30</span> minutes           <span class="token number">0.0</span>.0.0:8081-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp                    demo
7aa165fe0620   mysql/mysql-server:latest   <span class="token string">&quot;/entrypoint.sh mysq…&quot;</span>   <span class="token number">3</span> days ago       Up <span class="token number">14</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>   <span class="token number">0.0</span>.0.0:3306-<span class="token operator">&gt;</span><span class="token number">3306</span>/tcp, <span class="token number">33060</span>-33061/tcp   mysql
0ae371dde311   redis                       <span class="token string">&quot;docker-entrypoint.s…&quot;</span>   <span class="token number">4</span> weeks ago      Up <span class="token number">14</span> hours             <span class="token number">0.0</span>.0.0:6379-<span class="token operator">&gt;</span><span class="token number">6379</span>/tcp                    redis-test
d2dfb0d259b0   docker/getting-started      <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   <span class="token number">4</span> weeks ago      Up <span class="token number">13</span> hours             <span class="token number">0.0</span>.0.0:80-<span class="token operator">&gt;</span><span class="token number">80</span>/tcp                        gifted_robinson
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者docker desktop:</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_5ouJ55qE5qKm5oOz,size_20,color_FFFFFF,t_70,g_se,x_16-167091826665757.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>进入容器</li></ul><p>可以查看容器内部文件 使用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> demo /bin/sh
sh-4.4<span class="token comment"># ls</span>
app	 bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
app.jar  boot  etc  lib   media  opt  root  sbin  sys  usr
sh-4.4<span class="token comment"># cd app</span>
sh-4.4<span class="token comment"># ls app</span>
ls: cannot access <span class="token string">&#39;app&#39;</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory
sh-4.4<span class="token comment"># ls</span>
app.jar  config.properties
sh-4.4<span class="token comment"># cd ..</span>
sh-4.4<span class="token comment"># ls tmp/</span>
hsperfdata_root  tomcat-docbase.8080.4168017359765144938  tomcat.8080.11638847895460439748
sh-4.4<span class="token comment"># </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在docker desktop进入：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_5ouJ55qE5qKm5oOz,size_20,color_FFFFFF,t_70,g_se,x_16-167091826665758.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-验证容器内程序是否可用" tabindex="-1"><a class="header-anchor" href="#_6-验证容器内程序是否可用" aria-hidden="true">#</a> 6. 验证容器内程序是否可用</h3><p>可以访问成功，并从mysql容器中获取到数据了，完美。乱码是小事。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Zi_5ouJ55qE5qKm5oOz,size_20,color_FFFFFF,t_70,g_se,x_16-167091826665859.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_7-复制文件到容器" tabindex="-1"><a class="header-anchor" href="#_7-复制文件到容器" aria-hidden="true">#</a> 7. 复制文件到容器</h3><p>我想要改容器中config.properties文件中的内容，但是，我打包的镜像中没有vi vim yum apt-get 等各种基本工具，也不知道怎么安装，有知道的大佬请留言，感谢！</p><p>所以，为了不重新构建镜像，我找到了另外一个方法，就是直接将主机的文件复制到容器中:</p><pre><code>docker cp config.properties demo:/app/
</code></pre><p>命令解释</p><p>cp copy的缩写</p><p>config.properties为主机当前目录下的源文件</p><p>demo是容器的名字，也可以用容器的ID</p><p>冒号后面是要复制到的路径，路径后也可带文件名，复制过去就叫指定的名字了。</p><p>文件若已存在，会直接覆盖，不会提示。</p><p>也可以从容器中将文件复制出来：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将demo容器中/app/config.properties文件复制到当前目录</span>
<span class="token function">docker</span> <span class="token function">cp</span> demo:/app/config.properties  <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>既然文件能直接复制到容器中，那么jar也可以啊，那改了代码完全没必要重新构建镜像了啊。。。</p><h2 id="_3-4、docker修改参数" tabindex="-1"><a class="header-anchor" href="#_3-4、docker修改参数" aria-hidden="true">#</a> 3.4、docker修改参数</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> ./Dockerfile <span class="token parameter variable">-t</span> sensor <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> product --add-host www.sensor.com:192.168.56.10 <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-d</span> level-scanner-product
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> sensor <span class="token parameter variable">-e</span> <span class="token assign-left variable">spring.datasource.url</span><span class="token operator">=</span><span class="token string">&#39;jdbc:mysql://192.168.56.10:3306/tonrain?useSSL=false&amp;serverTimezone=UTC&amp;useEncoding=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true&#39;</span> <span class="token parameter variable">-p</span> <span class="token number">8089</span>:8089 <span class="token parameter variable">-d</span> sensor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,60);function E(I,w){const n=l("ExternalLinkIcon");return c(),d("div",null,[o,a("h2",p,[u,s(" 3.1、"),a("a",m,[s("Docker 安装"),e(n)])]),v,a("h2",b,[k,s(" 3.2、"),a("a",g,[s("常用命令"),e(n)])]),h,a("p",null,[a("a",f,[s("docker官方镜像搜索"),e(n)])]),x,a("h2",_,[y,s(" 3.3、"),a("a",q,[s("docker生成springboot镜像"),e(n)])]),D])}const T=r(t,[["render",E],["__file","3.docker.html.vue"]]);export{T as default};
