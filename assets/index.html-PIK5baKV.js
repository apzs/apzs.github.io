const l=JSON.parse('{"key":"v-484df59c","path":"/back-base/1.Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","title":"","lang":"zh-CN","frontmatter":{"description":"初始java Java : 一个帝国的诞生 1、C语言帝国的统治 现在是公元1995年， C语言帝国已经统治了我们20多年， 实在是太久了。 1972年， 随着C语言的诞生和Unix的问世， 帝国迅速建立统治， 从北美到欧洲， 从欧洲到亚洲， 无数程序员臣服在他的脚下。 帝国给我们提供了极好的福利：贴近硬件， 运行极快， 效率极高。 使用这些福利， 程序员们用C 开发了很多系统级软件，操作系统， 编译器， 数据库，网络系统..... 但是帝国也给我们安上了两个沉重的枷锁： 指针和内存管理","head":[["meta",{"property":"og:url","content":"https://apzs.github.io/back-base/1.Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"}],["meta",{"property":"og:site_name","content":"apzs"}],["meta",{"property":"og:description","content":"初始java Java : 一个帝国的诞生 1、C语言帝国的统治 现在是公元1995年， C语言帝国已经统治了我们20多年， 实在是太久了。 1972年， 随着C语言的诞生和Unix的问世， 帝国迅速建立统治， 从北美到欧洲， 从欧洲到亚洲， 无数程序员臣服在他的脚下。 帝国给我们提供了极好的福利：贴近硬件， 运行极快， 效率极高。 使用这些福利， 程序员们用C 开发了很多系统级软件，操作系统， 编译器， 数据库，网络系统..... 但是帝国也给我们安上了两个沉重的枷锁： 指针和内存管理"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-10T13:06:08.000Z"}],["meta",{"property":"article:author","content":"apzs"}],["meta",{"property":"article:modified_time","content":"2024-03-10T13:06:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-10T13:06:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"apzs\\",\\"url\\":\\"https://apzs.eu.org\\"}]}"]]},"headers":[{"level":2,"title":"初始java","slug":"初始java","link":"#初始java","children":[{"level":3,"title":"Java : 一个帝国的诞生","slug":"java-一个帝国的诞生","link":"#java-一个帝国的诞生","children":[]},{"level":3,"title":"Java的特性和优势","slug":"java的特性和优势","link":"#java的特性和优势","children":[]},{"level":3,"title":"Java三大版本","slug":"java三大版本","link":"#java三大版本","children":[]},{"level":3,"title":"JDK 和 JRE","slug":"jdk-和-jre","link":"#jdk-和-jre","children":[]},{"level":3,"title":"初识JVM","slug":"初识jvm","link":"#初识jvm","children":[]},{"level":3,"title":"JAVA程序运行机制","slug":"java程序运行机制","link":"#java程序运行机制","children":[]},{"level":3,"title":"Hello World","slug":"hello-world","link":"#hello-world","children":[]}]},{"level":2,"title":"JavaSE-基础语法","slug":"javase-基础语法","link":"#javase-基础语法","children":[{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":3,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":3,"title":"变量，常量","slug":"变量-常量","link":"#变量-常量","children":[]},{"level":3,"title":"运算符","slug":"运算符","link":"#运算符","children":[]}]},{"level":2,"title":"包机制","slug":"包机制","link":"#包机制","children":[{"level":3,"title":"1、问题发现","slug":"_1、问题发现","link":"#_1、问题发现","children":[]},{"level":3,"title":"2、包的作用","slug":"_2、包的作用","link":"#_2、包的作用","children":[]},{"level":3,"title":"3、创建包","slug":"_3、创建包","link":"#_3、创建包","children":[]},{"level":3,"title":"4、import 关键字","slug":"_4、import-关键字","link":"#_4、import-关键字","children":[]},{"level":3,"title":"JavaDoc","slug":"javadoc","link":"#javadoc","children":[]}]},{"level":2,"title":"JavaSE-流程控制","slug":"javase-流程控制","link":"#javase-流程控制","children":[{"level":3,"title":"用户交互Scanner","slug":"用户交互scanner","link":"#用户交互scanner","children":[]},{"level":3,"title":"顺序结构","slug":"顺序结构","link":"#顺序结构","children":[]},{"level":3,"title":"选择结构","slug":"选择结构","link":"#选择结构","children":[]},{"level":3,"title":"循环结构","slug":"循环结构","link":"#循环结构","children":[]},{"level":3,"title":"break & continue","slug":"break-continue","link":"#break-continue","children":[]}]},{"level":2,"title":"JavaSE-方法","slug":"javase-方法","link":"#javase-方法","children":[{"level":3,"title":"1、何谓方法？","slug":"_1、何谓方法","link":"#_1、何谓方法","children":[]},{"level":3,"title":"2、方法的定义","slug":"_2、方法的定义","link":"#_2、方法的定义","children":[]},{"level":3,"title":"3、方法调用","slug":"_3、方法调用","link":"#_3、方法调用","children":[]},{"level":3,"title":"4、方法的重载","slug":"_4、方法的重载","link":"#_4、方法的重载","children":[]},{"level":3,"title":"5、拓展命令行传参","slug":"_5、拓展命令行传参","link":"#_5、拓展命令行传参","children":[]},{"level":3,"title":"6、可变参数","slug":"_6、可变参数","link":"#_6、可变参数","children":[]},{"level":3,"title":"7、递归","slug":"_7、递归","link":"#_7、递归","children":[]}]},{"level":2,"title":"JavaSE-数组","slug":"javase-数组","link":"#javase-数组","children":[{"level":3,"title":"数组概述","slug":"数组概述","link":"#数组概述","children":[]},{"level":3,"title":"数组声明创建","slug":"数组声明创建","link":"#数组声明创建","children":[]},{"level":3,"title":"数组使用","slug":"数组使用","link":"#数组使用","children":[]},{"level":3,"title":"多维数组","slug":"多维数组","link":"#多维数组","children":[]},{"level":3,"title":"Arrays 类","slug":"arrays-类","link":"#arrays-类","children":[]},{"level":3,"title":"常见排序算法","slug":"常见排序算法","link":"#常见排序算法","children":[]},{"level":3,"title":"稀疏数组","slug":"稀疏数组","link":"#稀疏数组","children":[]}]},{"level":2,"title":"JavaSE-异常机制","slug":"javase-异常机制","link":"#javase-异常机制","children":[{"level":3,"title":"异常概念","slug":"异常概念","link":"#异常概念","children":[]},{"level":3,"title":"异常体系结构","slug":"异常体系结构","link":"#异常体系结构","children":[]},{"level":3,"title":"异常之间的区别与联系","slug":"异常之间的区别与联系","link":"#异常之间的区别与联系","children":[]},{"level":3,"title":"Java异常处理机制","slug":"java异常处理机制","link":"#java异常处理机制","children":[]},{"level":3,"title":"处理异常","slug":"处理异常","link":"#处理异常","children":[]},{"level":3,"title":"自定义异常","slug":"自定义异常","link":"#自定义异常","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"JavaSE-面向对象","slug":"javase-面向对象","link":"#javase-面向对象","children":[{"level":3,"title":"面向过程&面向对象","slug":"面向过程-面向对象","link":"#面向过程-面向对象","children":[]},{"level":3,"title":"OOP详解","slug":"oop详解","link":"#oop详解","children":[]},{"level":3,"title":"方法回顾及加深","slug":"方法回顾及加深","link":"#方法回顾及加深","children":[]},{"level":3,"title":"创建与初始化对象","slug":"创建与初始化对象","link":"#创建与初始化对象","children":[]},{"level":3,"title":"构造器","slug":"构造器","link":"#构造器","children":[]},{"level":3,"title":"内存分析","slug":"内存分析","link":"#内存分析","children":[]},{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":3,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[]},{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"内部类","slug":"内部类","link":"#内部类","children":[]}]}],"git":{"createdTime":1709618715000,"updatedTime":1710075968000,"contributors":[{"name":"zhaoshuo","email":"apzs@foxmaill.com","commits":3}]},"readingTime":{"minutes":182.35,"words":54705},"filePathRelative":"back-base/1.Java基础语法/README.md","localizedDate":"2024年3月5日","excerpt":"<h2> 初始java</h2>\\n<h3> Java : 一个帝国的诞生</h3>\\n<h4> 1、C语言帝国的统治</h4>\\n<p>现在是公元1995年， C语言帝国已经统治了我们20多年， 实在是太久了。</p>\\n<p>1972年， 随着C语言的诞生和Unix的问世， 帝国迅速建立统治， 从北美到欧洲， 从欧洲到亚洲，  无数程序员臣服在他的脚下。</p>\\n<p>帝国给我们提供了极好的福利：贴近硬件，  运行极快， 效率极高。</p>\\n<p>使用这些福利， 程序员们用C 开发了很多系统级软件，操作系统， 编译器， 数据库，网络系统.....</p>\\n<p>但是帝国也给我们安上了两个沉重的枷锁： 指针和内存管理</p>","autoDesc":true}');export{l as data};
