import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,a,b as n,d as t,t as u,e}from"./app-YilgCgZO.js";const r={},d=e(`<h1 id="零、项目简介" tabindex="-1"><a class="header-anchor" href="#零、项目简介" aria-hidden="true">#</a> 零、项目简介</h1><h2 id="_1、项目背景" tabindex="-1"><a class="header-anchor" href="#_1、项目背景" aria-hidden="true">#</a> 1、项目背景</h2><h3 id="_1、电商模式" tabindex="-1"><a class="header-anchor" href="#_1、电商模式" aria-hidden="true">#</a> 1、电商模式</h3><p>市面上有 5 种常见的电商模式 B2B、B2C、C2B、C2C、O2O；</p><h6 id="_1、b2b-模式" tabindex="-1"><a class="header-anchor" href="#_1、b2b-模式" aria-hidden="true">#</a> 1、B2B 模式</h6><p>B2B (Business to Business)， 是指商家与商家建立的商业关系。 如：阿里巴巴</p><h6 id="_2、b2c-模式" tabindex="-1"><a class="header-anchor" href="#_2、b2c-模式" aria-hidden="true">#</a> 2、B2C 模式</h6><p>B2C (Business to Consumer)， 就是我们经常看到的供应商直接把商品卖给用户，即“商对客” 模式，也就是通常说的商业零售，直接面向消费者销售产品和服务。如：苏宁易购、京东、 天猫、小米商城</p><h6 id="_3、c2b-模式" tabindex="-1"><a class="header-anchor" href="#_3、c2b-模式" aria-hidden="true">#</a> 3、C2B 模式</h6><p>C2B (Customer to Business)，即消费者对企业。先有消费者需求产生而后有企业生产，即先有消费者提出需求，后有生产企业按需求组织生产</p><h6 id="_4、c2c-模式" tabindex="-1"><a class="header-anchor" href="#_4、c2c-模式" aria-hidden="true">#</a> 4、C2C 模式</h6><p>C2C (Customer to Consumer) ，客户之间自己把东西放上网去卖，如：淘宝，闲鱼</p><h6 id="_5、o2o-模式" tabindex="-1"><a class="header-anchor" href="#_5、o2o-模式" aria-hidden="true">#</a> 5、O2O 模式</h6><p>O2O 即 Online To Offline，也即将线下商务的机会与互联网结合在了一起，让互联网成为线下交易的前台。线上快速支付，线下优质服务。如：饿了么，美团，淘票票，京东到家</p><h3 id="_2、谷粒商城" tabindex="-1"><a class="header-anchor" href="#_2、谷粒商城" aria-hidden="true">#</a> 2、谷粒商城</h3><p>谷粒商城是一个 B2C 模式的电商平台，销售自营商品给客户。</p><h2 id="_2、项目架构图" tabindex="-1"><a class="header-anchor" href="#_2、项目架构图" aria-hidden="true">#</a> 2、项目架构图</h2><h4 id="_1、项目微服务架构图" tabindex="-1"><a class="header-anchor" href="#_1、项目微服务架构图" aria-hidden="true">#</a> 1、项目微服务架构图</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0.2.1.jpg" alt="项目微服务架构图" tabindex="0" loading="lazy"><figcaption>项目微服务架构图</figcaption></figure><h4 id="_2、微服务划分图" tabindex="-1"><a class="header-anchor" href="#_2、微服务划分图" aria-hidden="true">#</a> 2、微服务划分图</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0.2.2.png" alt="微服务划分图" tabindex="0" loading="lazy"><figcaption>微服务划分图</figcaption></figure><h4 id="_3、项目技术-特色" tabindex="-1"><a class="header-anchor" href="#_3、项目技术-特色" aria-hidden="true">#</a> 3、项目技术&amp;特色</h4><ul><li>前后分离开发，并开发基于 vue 的后台管理系统</li><li>SpringCloud 全新的解决方案</li><li>应用监控、限流、网关、熔断降级等分布式方案 全方位涉及</li><li>透彻讲解分布式事务、分布式锁等分布式系统的难点</li><li>分析高并发场景的编码方式，线程池，异步编排等使用</li><li>压力测试与性能优化</li><li>各种集群技术的区别以及使用</li><li>CI/CD 使用</li><li>...</li></ul><h4 id="_4、项目前置要求" tabindex="-1"><a class="header-anchor" href="#_4、项目前置要求" aria-hidden="true">#</a> 4、项目前置要求</h4><p>学习项目的前置知识</p><ul><li>熟悉 SpringBoot 以及常见整合方案</li><li>了解 SpringCloud</li><li>熟悉 git，maven</li><li>熟悉 linux，redis，docker 基本操作</li><li>了解 html，css，js，vue</li><li>熟练使用 idea 开发项目</li></ul><h2 id="_3、分布式基础概念" tabindex="-1"><a class="header-anchor" href="#_3、分布式基础概念" aria-hidden="true">#</a> 3、分布式基础概念</h2><h3 id="_1、微服务" tabindex="-1"><a class="header-anchor" href="#_1、微服务" aria-hidden="true">#</a> 1、微服务</h3><p>微服务架构风格，就像是把一个<strong>单独的应用程序</strong>开发为一套<strong>小服务</strong>，每个<strong>小服务</strong>运行在<strong>自己</strong>的<strong>进程</strong>中，并使用轻量级机制通信，通常是 HTTP API。这些服务围绕业务能力来构建， 并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。 简而言之：拒绝大型单体应用，基于业务边界进行服务微化拆分，各个服务独立部署运行。</p><h3 id="_2、集群-分布式-节点" tabindex="-1"><a class="header-anchor" href="#_2、集群-分布式-节点" aria-hidden="true">#</a> 2、集群&amp;分布式&amp;节点</h3><p>集群是个物理形态，分布式是个工作方式。 只要是一堆机器，就可以叫集群，他们是不是一起协作着干活，这个谁也不知道；</p><p>《分布式系统原理与范型》定义： “分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统” 分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>分布式是指将不同的业务分布在不同的地方。</p><p>集群指的是将几台服务器集中在一起，实现同一业务。</p><p>例如：<strong>京东是一个分布式系统，众多业务运行在不同的机器</strong>，所有业务构成一个大型的<strong>业务集群</strong>。每一个小的业务，比如用户系统，访问压力大的时候一台服务器是不够的。我们就 应该将用户系统部署到多个服务器，也就是<strong>每一个业务系统也可以做集群化</strong>；</p><p>分布式中的每一个节点，都可以做集群。而集群并不一定就是分布式的。</p><p><strong>节点：集群中的一个服务器</strong></p><h3 id="_3、远程调用" tabindex="-1"><a class="header-anchor" href="#_3、远程调用" aria-hidden="true">#</a> 3、远程调用</h3><p>在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用，我 们称为远程调用。 SpringCloud 中使用 HTTP+JSON 的方式完成远程调用</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0.3.3.png" alt="image-20220504222238745" tabindex="0" loading="lazy"><figcaption>image-20220504222238745</figcaption></figure><h3 id="_4、负载均衡" tabindex="-1"><a class="header-anchor" href="#_4、负载均衡" aria-hidden="true">#</a> 4、负载均衡</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0.3.4.png" alt="image-20220504222308871" tabindex="0" loading="lazy"><figcaption>image-20220504222308871</figcaption></figure><p>分布式系统中，A 服务需要调用 B 服务，B 服务在多台机器中都存在，A 调用任意一个服务器均可完成功能。 为了使每一个服务器都不要太忙或者太闲，我们可以负载均衡的调用每一个服务器，提 升网站的健壮性。 常见的负载均衡算法：</p><ul><li>轮询：为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直 到最后一个，然后循环。</li><li>最小连接：优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下 可以考虑采取这种方式。</li><li>散列：根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到和之前相同的服务器，可以考虑采取这种方式。</li></ul><h3 id="_5、服务注册-发现-注册中心" tabindex="-1"><a class="header-anchor" href="#_5、服务注册-发现-注册中心" aria-hidden="true">#</a> 5、服务注册/发现&amp;注册中心</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0.3.5.png" alt="image-20220504221059549" tabindex="0" loading="lazy"><figcaption>image-20220504221059549</figcaption></figure><p>A 服务调用 B 服务，A 服务并不知道 B 服务当前在哪几台服务器有，哪些正常的，哪些服务已经下线。解决这个问题可以引入注册中心；</p><p>如果某些服务下线，我们其他人可以实时的感知到其他服务的状态，从而避免调用不可用的服务</p><h3 id="_6、配置中心" tabindex="-1"><a class="header-anchor" href="#_6、配置中心" aria-hidden="true">#</a> 6、配置中心</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0.3.6.png" alt="image-20220504222150042" tabindex="0" loading="lazy"><figcaption>image-20220504222150042</figcaption></figure><p>每一个服务最终都有大量的配置，并且每个服务都可能部署在多台机器上。我们经常需要变 更配置，我们可以让每个服务在配置中心获取自己的配置。</p><p><strong>配置中心用来集中管理微服务的配置信息。</strong></p><h3 id="_7、服务熔断-服务降级" tabindex="-1"><a class="header-anchor" href="#_7、服务熔断-服务降级" aria-hidden="true">#</a> 7、服务熔断&amp;服务降级</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0.3.7.png" alt="image-20220504222346644" tabindex="0" loading="lazy"><figcaption>image-20220504222346644</figcaption></figure><p>在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时，有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。</p><h5 id="_1、服务熔断" tabindex="-1"><a class="header-anchor" href="#_1、服务熔断" aria-hidden="true">#</a> 1、服务熔断</h5><p>a.设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据</p><h5 id="_2、服务降级" tabindex="-1"><a class="header-anchor" href="#_2、服务降级" aria-hidden="true">#</a> 2、服务降级</h5><p>a.在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者简单处理【抛异常、返回 NULL、调用 Mock 数据、调用 Fallback 处理逻辑】。</p><h3 id="_8、api-网关" tabindex="-1"><a class="header-anchor" href="#_8、api-网关" aria-hidden="true">#</a> 8、API 网关</h3><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/0.3.8.png" alt="image-20220504222406801" tabindex="0" loading="lazy"><figcaption>image-20220504222406801</figcaption></figure><p>在微服务架构中，API Gateway 作为整体架构的重要组件，它抽象了<strong>微服务中都需要的公共功能</strong>，同时提供了客户端<strong>负载均衡</strong>，<strong>服务自动熔断</strong>，<strong>灰度发布</strong>，<strong>统一认证</strong>，<strong>限流流控</strong>，<strong>日志统计</strong>等丰富的功能，帮助我们解决很多 API 管理难题。</p><h1 id="一、环境准备" tabindex="-1"><a class="header-anchor" href="#一、环境准备" aria-hidden="true">#</a> 一、环境准备</h1><h2 id="_1-1、安装软件虚拟机软件" tabindex="-1"><a class="header-anchor" href="#_1-1、安装软件虚拟机软件" aria-hidden="true">#</a> 1.1、安装软件虚拟机软件</h2><h3 id="_1-1-1、安装-virtualbox-6-0-10-132072-win" tabindex="-1"><a class="header-anchor" href="#_1-1-1、安装-virtualbox-6-0-10-132072-win" aria-hidden="true">#</a> 1.1.1、安装 VirtualBox-6.0.10-132072-Win</h3><p>只需修改安装路径即可</p><h3 id="_1-1-2、安装-vagrant-2-2-5-x86-64" tabindex="-1"><a class="header-anchor" href="#_1-1-2、安装-vagrant-2-2-5-x86-64" aria-hidden="true">#</a> 1.1.2、安装 vagrant_2.2.5_x86_64</h3><p>只需修改安装路径即可，安装成功提示重启电脑，点击Yes重启电脑</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.2.png" alt="重启电脑" tabindex="0" loading="lazy"><figcaption>重启电脑</figcaption></figure><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>vagrant box add</td><td>添加box的操作</td></tr><tr><td>vagrant init</td><td>初始化box的操作，会生成vagrant的配置文件Vagrantfile</td></tr><tr><td>vagrant up</td><td>启动本地环境</td></tr><tr><td>vagrant ssh</td><td>通过ssh登录本地环境所在虚拟机</td></tr><tr><td>vagrant halt</td><td>关闭本地环境</td></tr><tr><td>vagrant suspend</td><td>暂停本地环境</td></tr><tr><td>vagrant resume</td><td>恢复本地环境</td></tr><tr><td>vagrant reload</td><td>修改了Vagrantfile后，使之生效（相当于先 halt，再 up）</td></tr><tr><td>vagrant destroy</td><td>彻底移除本地环境</td></tr><tr><td>vagrant box list</td><td>显示当前已经添加的box列表</td></tr><tr><td>vagrant box remove</td><td>删除相应的box</td></tr><tr><td>vagrant package</td><td>打包命令，可以把当前的运行的虚拟机环境进行打包</td></tr><tr><td>vagrant plugin</td><td>用于安装卸载插件</td></tr><tr><td>vagrant status</td><td>获取当前虚拟机的状态</td></tr><tr><td>vagrant global-status</td><td>显示当前用户Vagrant的所有环境状态</td></tr></tbody></table><h3 id="_1-1-3、修改vagrant-virtualbox数据目录" tabindex="-1"><a class="header-anchor" href="#_1-1-3、修改vagrant-virtualbox数据目录" aria-hidden="true">#</a> 1.1.3、修改vagrant，virtualbox数据目录</h3><h4 id="_1-修改vagrant路径" tabindex="-1"><a class="header-anchor" href="#_1-修改vagrant路径" aria-hidden="true">#</a> (1)修改vagrant路径</h4><h5 id="_1、移动-vagrant-d文件" tabindex="-1"><a class="header-anchor" href="#_1、移动-vagrant-d文件" aria-hidden="true">#</a> 1、移动.vagrant.d文件</h5><p>例如将 <code>C:\\Users\\[YOUR_NAME]\\.vagrant.d</code> 移动到 <code>D:\\vagrant\\.vagrant.d</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.1.png" alt="移动.vagrant.d文件" tabindex="0" loading="lazy"><figcaption>移动.vagrant.d文件</figcaption></figure><h5 id="_2、设置环境变量" tabindex="-1"><a class="header-anchor" href="#_2、设置环境变量" aria-hidden="true">#</a> 2、设置环境变量</h5><h6 id="_1、此电脑右键-点击属性" tabindex="-1"><a class="header-anchor" href="#_1、此电脑右键-点击属性" aria-hidden="true">#</a> 1、此电脑右键--&gt;点击属性</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.2.1.png" alt="属性" tabindex="0" loading="lazy"><figcaption>属性</figcaption></figure><h6 id="_2、点击高级系统设置" tabindex="-1"><a class="header-anchor" href="#_2、点击高级系统设置" aria-hidden="true">#</a> 2、点击高级系统设置</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.2.2.png" alt="高级系统设置" tabindex="0" loading="lazy"><figcaption>高级系统设置</figcaption></figure><h6 id="_3、点击环境变量" tabindex="-1"><a class="header-anchor" href="#_3、点击环境变量" aria-hidden="true">#</a> 3、点击环境变量</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.2.3.png" alt="环境变量" tabindex="0" loading="lazy"><figcaption>环境变量</figcaption></figure><h6 id="_4、新建系统变量" tabindex="-1"><a class="header-anchor" href="#_4、新建系统变量" aria-hidden="true">#</a> 4、新建系统变量</h6><p>点击系统变量下的新建，输入变量名输入VAGRANT_HOME，变量值为.vagrant.d路径，点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.2.4.png" alt="新建系统变量" tabindex="0" loading="lazy"><figcaption>新建系统变量</figcaption></figure><h4 id="_2-修改virtualbox" tabindex="-1"><a class="header-anchor" href="#_2-修改virtualbox" aria-hidden="true">#</a> (2)修改virtualbox</h4><h5 id="_3、修改全局配置" tabindex="-1"><a class="header-anchor" href="#_3、修改全局配置" aria-hidden="true">#</a> 3、修改全局配置</h5><p><strong>点击管理--&gt;全局配置--&gt;常规，修改默认虚拟电脑位置即可</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.3.1.png" alt="修改默认虚拟电脑位置" tabindex="0" loading="lazy"><figcaption>修改默认虚拟电脑位置</figcaption></figure><h5 id="_4、拷贝以前虚拟机文件夹" tabindex="-1"><a class="header-anchor" href="#_4、拷贝以前虚拟机文件夹" aria-hidden="true">#</a> 4、拷贝以前虚拟机文件夹</h5><p>若之前已使用过虚拟机(没有使用过，以下步骤可忽略)，可以拷贝以前虚拟机文件夹(<em><strong>这一步一定要先进行，否则后面删除虚拟机后，虚拟机对应的文件就都消失了，无法重建虚拟机</strong></em>)</p><p>例如:C:\\Users[用户名]\\VirtualBox VMs -&gt; D:\\virtualbox\\VirtualBox VMs</p><h5 id="_5、删除旧的虚拟机" tabindex="-1"><a class="header-anchor" href="#_5、删除旧的虚拟机" aria-hidden="true">#</a> 5、删除旧的虚拟机</h5><p>点击管理--&gt;全局配置--&gt;常规，修改默认虚拟电脑位置即可</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.5.1.png" alt="删除旧的虚拟机" tabindex="0" loading="lazy"><figcaption>删除旧的虚拟机</figcaption></figure><h5 id="_6、重新添加虚拟机" tabindex="-1"><a class="header-anchor" href="#_6、重新添加虚拟机" aria-hidden="true">#</a> 6、重新添加虚拟机</h5><p>点击D:\\virtualbox\\VirtualBox VMs\\centos8-pg12</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.6.1.png" alt="虚拟机位置" tabindex="0" loading="lazy"><figcaption>虚拟机位置</figcaption></figure><p>虚拟机会被重新添加到virtualbox中，右键-&gt;设置-&gt;存储，查看虚拟机的存储disk文件，已经对应的是新的目录下的文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.1.3.6.2.png" alt="重新添加虚拟机" tabindex="0" loading="lazy"><figcaption>重新添加虚拟机</figcaption></figure><h5 id="_7、最后可以整体删除c盘下目录virtualbox-vms" tabindex="-1"><a class="header-anchor" href="#_7、最后可以整体删除c盘下目录virtualbox-vms" aria-hidden="true">#</a> 7、最后可以整体删除C盘下目录VirtualBox VMs</h5><p>[^参考链接;https://www.csdn.net/tags/NtzaQg5sOTUwODItYmxvZwO0O0OO0O0O.html]:</p><p>例如C:\\Users[用户名]\\VirtualBox VMs</p><h2 id="_1-2、使用vagrant-init-centos7命令安装centos7" tabindex="-1"><a class="header-anchor" href="#_1-2、使用vagrant-init-centos7命令安装centos7" aria-hidden="true">#</a> 1.2、使用vagrant init centos7命令安装centos7</h2><p>cmd切换到VirtualBox VMs目录，执行<code>vagrant init centos7</code>,生成Vagrantfile文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.2.png" alt="生成Vagrantfile文件" tabindex="0" loading="lazy"><figcaption>生成Vagrantfile文件</figcaption></figure><h2 id="_1-3、使用vagrant-up命令开启虚拟机" tabindex="-1"><a class="header-anchor" href="#_1-3、使用vagrant-up命令开启虚拟机" aria-hidden="true">#</a> 1.3、使用<code>vagrant up</code>命令开启虚拟机</h2><p>cmd切换到VirtualBox VMs目录，执行<code>vagrant up</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.3.png" alt="开启虚拟机" tabindex="0" loading="lazy"><figcaption>开启虚拟机</figcaption></figure><p>如果下载速度很慢，可以删除Vagrantfile文件使用中科大镜像重新生成Vagrantfile文件</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>vagrant init centos7 https:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>ustc<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn/centos-cloud/centos/7/vagrant/x86_64/images/CentOS-7<span class="token punctuation">.</span>box
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者将执行<code>vagrant init centos7</code>命令显示的网址复制下来，在迅雷上下载，然后使用<code>vagrant box add centos7 ./CentOS-7.box</code>命令添加本地镜像（默认放到了<code>/Users/jackyue/data/vagrant/.vagrant/machines/</code>文件里），然后再执行<code>vagrant init centos7</code>命令</p><h2 id="_1-4、使用vagrant-ssh命令连接虚拟机" tabindex="-1"><a class="header-anchor" href="#_1-4、使用vagrant-ssh命令连接虚拟机" aria-hidden="true">#</a> 1.4、使用<code>vagrant ssh</code>命令连接虚拟机</h2><p>cmd切换到VirtualBox VMs目录，执行<code>vagrant ssh</code>命令</p><p><strong>可以使用exit可以退出vagrant ssh连接</strong></p><h4 id="_1-4-1、vagrant报错" tabindex="-1"><a class="header-anchor" href="#_1-4-1、vagrant报错" aria-hidden="true">#</a> 1.4.1、vagrant报错😡</h4><p>ssh-key的私钥的拥有者的权限，不是当前的用户。</p><p>vagrant@127.0.0.1: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.0.1.png" alt="vagrant报错" tabindex="0" loading="lazy"><figcaption>vagrant报错</figcaption></figure><p>解决方法</p><h5 id="_1、点击windows图标-鼠标悬浮在头像上-可以显示用户名-或者cmd使用whoami命令也可以查看用户名" tabindex="-1"><a class="header-anchor" href="#_1、点击windows图标-鼠标悬浮在头像上-可以显示用户名-或者cmd使用whoami命令也可以查看用户名" aria-hidden="true">#</a> 1、点击windows图标，鼠标悬浮在头像上，可以显示用户名(或者cmd使用whoami命令也可以查看用户名)</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.1.1.png" alt="查看用户名" tabindex="0" loading="lazy"><figcaption>查看用户名</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.1.2.png" alt="查看用户名2" tabindex="0" loading="lazy"><figcaption>查看用户名2</figcaption></figure><h5 id="_2、找到virtualbox-vms-vagrant-machines-default-virtualbox下的private-key" tabindex="-1"><a class="header-anchor" href="#_2、找到virtualbox-vms-vagrant-machines-default-virtualbox下的private-key" aria-hidden="true">#</a> 2、找到VirtualBox VMs.vagrant\\machines\\default\\virtualbox下的private_key</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.2.png" alt="private_key" tabindex="0" loading="lazy"><figcaption>private_key</figcaption></figure><h5 id="_3、右键该文件依次点击-属性–-安全-编辑-添加-输入你的用户名-点击检查名称后-点击确定" tabindex="-1"><a class="header-anchor" href="#_3、右键该文件依次点击-属性–-安全-编辑-添加-输入你的用户名-点击检查名称后-点击确定" aria-hidden="true">#</a> 3、右键该文件依次点击 属性–&gt; 安全-&gt;编辑 添加，输入你的用户名,点击检查名称后，点击确定</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.3.png" alt="选择用户或组" tabindex="0" loading="lazy"><figcaption>选择用户或组</figcaption></figure><h5 id="_4、点击刚刚添加的用户-权限设为完全控制-点击确定-删除其他没有用的用户" tabindex="-1"><a class="header-anchor" href="#_4、点击刚刚添加的用户-权限设为完全控制-点击确定-删除其他没有用的用户" aria-hidden="true">#</a> 4、点击刚刚添加的用户，权限设为完全控制，点击确定,删除其他没有用的用户</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.4.png" alt="删除其他没有用的用户" tabindex="0" loading="lazy"><figcaption>删除其他没有用的用户</figcaption></figure><h5 id="_5、返回上一级目录-点击virtualbox-右键-属性" tabindex="-1"><a class="header-anchor" href="#_5、返回上一级目录-点击virtualbox-右键-属性" aria-hidden="true">#</a> 5、返回上一级目录,点击virtualbox，右键--&gt;属性</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.5.png" alt="返回上一级目录" tabindex="0" loading="lazy"><figcaption>返回上一级目录</figcaption></figure><h5 id="_6、删除其他没用的权限-只保留用户名对应的权限" tabindex="-1"><a class="header-anchor" href="#_6、删除其他没用的权限-只保留用户名对应的权限" aria-hidden="true">#</a> 6、删除其他没用的权限，只保留用户名对应的权限</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.6.png" alt="删除其他没用的权限" tabindex="0" loading="lazy"><figcaption>删除其他没用的权限</figcaption></figure><h5 id="_7、修改成这个样子-点击确定" tabindex="-1"><a class="header-anchor" href="#_7、修改成这个样子-点击确定" aria-hidden="true">#</a> 7、修改成这个样子，点击确定</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.7.png" alt="修改成这个样子" tabindex="0" loading="lazy"><figcaption>修改成这个样子</figcaption></figure><h5 id="_8、重新输入vagrant-ssh即可" tabindex="-1"><a class="header-anchor" href="#_8、重新输入vagrant-ssh即可" aria-hidden="true">#</a> 8、重新输入<code>vagrant ssh</code>即可**😄**</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.4.8.png" alt="重新输入vagrant ssh" tabindex="0" loading="lazy"><figcaption>重新输入vagrant ssh</figcaption></figure><h2 id="_1-5、修改网络连接方式" tabindex="-1"><a class="header-anchor" href="#_1-5、修改网络连接方式" aria-hidden="true">#</a> 1.5、修改网络连接方式</h2><p>如果是默认使用<code>网络地址转换-端口转发</code>的方式，每安装一个软件就需要在<code>VirtualBox</code>里配置端口转发。由于我们使用<code>vagrant</code>创建，因此可以修改<code>Vagrantfile</code>文件，指定我们的私有网络(也可以进虚拟机修改网卡配置)。这样我们就能在物理机上使用指定的<code>ip</code>和相同的端口访问<code>VirtualBox</code>的对应端口</p><p>附<code>网络地址转换-端口转发</code>方式修改端口转发规则</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.5.0.gif" alt="GIF 2022-7-21 19-53-43" tabindex="0" loading="lazy"><figcaption>GIF 2022-7-21 19-53-43</figcaption></figure><h4 id="_1-5-1、查看-virtualbox的ip地址" tabindex="-1"><a class="header-anchor" href="#_1-5-1、查看-virtualbox的ip地址" aria-hidden="true">#</a> 1.5.1、查看 VirtualBox的ip地址</h4><p>cmd执行<code>ipconfig</code>命令,查看以太网适配器 VirtualBox Host-Only Network的IPv4地址(192.168.56.1)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.5.1.png" alt="查看 VirtualBox的ip地址" tabindex="0" loading="lazy"><figcaption>查看 VirtualBox的ip地址</figcaption></figure><h4 id="_1-5-2、找到virtualbox-vms下vagrantfile文件" tabindex="-1"><a class="header-anchor" href="#_1-5-2、找到virtualbox-vms下vagrantfile文件" aria-hidden="true">#</a> 1.5.2、找到VirtualBox VMs下Vagrantfile文件</h4><h4 id="_1-5-3、修改ip地址" tabindex="-1"><a class="header-anchor" href="#_1-5-3、修改ip地址" aria-hidden="true">#</a> 1.5.3、修改ip地址</h4><p>打开<code>config.vm.network</code>选项,修改ip，使与<code>VirtualBox Host-Only Network</code>的<code>IPv4</code>地址处于同一网段,如<code>192.168.56.10</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.5.3.png" alt="修改ip地址" tabindex="0" loading="lazy"><figcaption>修改ip地址</figcaption></figure><h4 id="_1-5-4、使用vagrant-reload命令重启虚拟机" tabindex="-1"><a class="header-anchor" href="#_1-5-4、使用vagrant-reload命令重启虚拟机" aria-hidden="true">#</a> 1.5.4、使用<code>vagrant reload</code>命令重启虚拟机</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.5.4.png" alt="重启虚拟机" tabindex="0" loading="lazy"><figcaption>重启虚拟机</figcaption></figure><h4 id="_1-5-5、使用vagrant-ssh命令重新连接" tabindex="-1"><a class="header-anchor" href="#_1-5-5、使用vagrant-ssh命令重新连接" aria-hidden="true">#</a> 1.5.5、使用<code>vagrant ssh</code>命令重新连接</h4><h4 id="_1-5-6、使用ip-addr命令查看网卡地址" tabindex="-1"><a class="header-anchor" href="#_1-5-6、使用ip-addr命令查看网卡地址" aria-hidden="true">#</a> 1.5.6、使用<code>ip addr</code>命令查看网卡地址</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.5.6.png" alt="查看网卡地址" tabindex="0" loading="lazy"><figcaption>查看网卡地址</figcaption></figure><h4 id="_1-5-7、在真实主机上测试连通性" tabindex="-1"><a class="header-anchor" href="#_1-5-7、在真实主机上测试连通性" aria-hidden="true">#</a> 1.5.7、在真实主机上测试连通性</h4><p>在真实主机上使用<code>ping 192.168.56.10</code>测试真实主机与虚拟机的连通性</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.5.7.png" alt="测试连通性" tabindex="0" loading="lazy"><figcaption>测试连通性</figcaption></figure><h2 id="_1-6、使用docker" tabindex="-1"><a class="header-anchor" href="#_1-6、使用docker" aria-hidden="true">#</a> 1.6、使用docker</h2><p>Docker ：虚拟化容器技术。Docker基于镜像，可以秒级启动各种容器。每一种容器都是一个完整的运行 环境，容器之间互相隔离。</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.0.png" alt="image-20220721195836232" style="zoom:50%;">`,159),g={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>docker容器文件挂载与端口映射</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.8.3.1.png" alt="image-20220721200210158" style="zoom:50%;"><h4 id="_1-6-1、卸载系统之前的-docker" tabindex="-1"><a class="header-anchor" href="#_1-6-1、卸载系统之前的-docker" aria-hidden="true">#</a> 1.6.1、卸载系统之前的 docker</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-6-2、安装必须的依赖" tabindex="-1"><a class="header-anchor" href="#_1-6-2、安装必须的依赖" aria-hidden="true">#</a> 1.6.2、安装必须的依赖</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\\</span>
                device-mapper-persistent-data <span class="token punctuation">\\</span>
                lvm2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-6-3、设置yum源为阿里云的镜像" tabindex="-1"><a class="header-anchor" href="#_1-6-3、设置yum源为阿里云的镜像" aria-hidden="true">#</a> 1.6.3、设置yum源为阿里云的镜像</h4><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>sudo yum-config-manager \\
    --add-repo \\
    https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),m={href:"https://so.csdn.net/so/search?q=yum&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"/etc/yum.repos.d/",-1),h=a("code",null,"yum install -y yum-utils",-1),b=e(`<p>yum 主要功能是更方便的添加/删除/更新RPM 包，自动解决包的倚赖性问题，便于管理大量系统的更新问题。</p><p>yum 可以同时配置多个资源库(Repository)，简洁的配置文件（/etc/yum.conf），自动解决增加或删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum repolist all <span class="token comment"># 显示所有资源库</span>
yum repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysql
yum repolist enabled <span class="token comment"># 显示所有已启动的资源库</span>
yum repolist disabled <span class="token comment"># 显示所有被禁用的资源库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加repository (添加yum仓库)</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum-config-manager --add-repo repository_url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>切换库中资源—禁用+启用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum-config-manager <span class="token parameter variable">--disable</span> itemName
yum-config-manager <span class="token parameter variable">--enable</span> itemName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>或者直接编辑<code>/etc/yum.repos.d/</code>下的对应资源库文件</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>enabled=0 #禁用
enabled=1 #禁用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除仓库</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在/etc/yum.repos.d/下手动删除对应repo文件即可，但请注意，这会使得该库中所有信息被删除
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-6-4、安装-docker-以及-docker-cli" tabindex="-1"><a class="header-anchor" href="#_1-6-4、安装-docker-以及-docker-cli" aria-hidden="true">#</a> 1.6.4、安装 docker，以及 docker-cli</h4><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>sudo yum install docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-6-5、启动docker" tabindex="-1"><a class="header-anchor" href="#_1-6-5、启动docker" aria-hidden="true">#</a> 1.6.5、启动docker</h4><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>sudo systemctl start docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-6-6、查看docker版本" tabindex="-1"><a class="header-anchor" href="#_1-6-6、查看docker版本" aria-hidden="true">#</a> 1.6.6、查看docker版本</h4><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-6-7、查看docker镜像" tabindex="-1"><a class="header-anchor" href="#_1-6-7、查看docker镜像" aria-hidden="true">#</a> 1.6.7、查看docker镜像</h4><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>sudo docker images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-6-8、设置docker开机自启" tabindex="-1"><a class="header-anchor" href="#_1-6-8、设置docker开机自启" aria-hidden="true">#</a> 1.6.8、设置docker开机自启</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>  <span class="token comment">#开启docker开机自启</span>
<span class="token function">sudo</span> systemctl disable <span class="token function">docker</span> <span class="token comment">#关闭docker开机自启</span>
<span class="token function">sudo</span> systemctl disable docker.service 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-6-9、配置docker镜像加速" tabindex="-1"><a class="header-anchor" href="#_1-6-9、配置docker镜像加速" aria-hidden="true">#</a> 1.6.9、配置docker镜像加速</h4><h5 id="_1、登录阿里云后-点击控制台" tabindex="-1"><a class="header-anchor" href="#_1、登录阿里云后-点击控制台" aria-hidden="true">#</a> 1、登录阿里云后，点击控制台</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.9.1.png" alt="点击控制台" tabindex="0" loading="lazy"><figcaption>点击控制台</figcaption></figure><h5 id="_2、点击三个横杠" tabindex="-1"><a class="header-anchor" href="#_2、点击三个横杠" aria-hidden="true">#</a> 2、点击三个横杠</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.9.2.png" alt="点击三个横杠" tabindex="0" loading="lazy"><figcaption>点击三个横杠</figcaption></figure><h5 id="_3、找到容器镜像服务" tabindex="-1"><a class="header-anchor" href="#_3、找到容器镜像服务" aria-hidden="true">#</a> 3、找到容器镜像服务</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.9.3.png" alt="容器镜像服务" tabindex="0" loading="lazy"><figcaption>容器镜像服务</figcaption></figure><h5 id="_4、点击镜像工具-在镜像加速器里点击centos-可以看到命令提示" tabindex="-1"><a class="header-anchor" href="#_4、点击镜像工具-在镜像加速器里点击centos-可以看到命令提示" aria-hidden="true">#</a> 4、点击镜像工具,在镜像加速器里点击CentOS,可以看到命令提示</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.9.4.png" alt="点击镜像工具" tabindex="0" loading="lazy"><figcaption>点击镜像工具</figcaption></figure><h5 id="_5、创建-etc-docker目录" tabindex="-1"><a class="header-anchor" href="#_5、创建-etc-docker目录" aria-hidden="true">#</a> 5、创建/etc/docker目录</h5><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>sudo mkdir -p /etc/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6、修改配置文件" tabindex="-1"><a class="header-anchor" href="#_6、修改配置文件" aria-hidden="true">#</a> 6、修改配置文件</h5><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;
<span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://82m9ar63.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
EOF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7、重新加载配置文件" tabindex="-1"><a class="header-anchor" href="#_7、重新加载配置文件" aria-hidden="true">#</a> 7、重新加载配置文件</h5><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>sudo systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_8、重启docker服务" tabindex="-1"><a class="header-anchor" href="#_8、重启docker服务" aria-hidden="true">#</a> 8、重启docker服务</h5><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>sudo systemctl restart docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_9、使用sudo-docker-info命令查看是否生效" tabindex="-1"><a class="header-anchor" href="#_9、使用sudo-docker-info命令查看是否生效" aria-hidden="true">#</a> 9、使用sudo docker info命令查看是否生效</h5><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>sudo docker info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.9.9.png" alt="命令查看是否生效" tabindex="0" loading="lazy"><figcaption>命令查看是否生效</figcaption></figure><h4 id="_1-6-10、使用mysql" tabindex="-1"><a class="header-anchor" href="#_1-6-10、使用mysql" aria-hidden="true">#</a> 1.6.10、使用mysql</h4><h5 id="_1、进入docker官网-点击projects中的docker-hub" tabindex="-1"><a class="header-anchor" href="#_1、进入docker官网-点击projects中的docker-hub" aria-hidden="true">#</a> 1、进入docker官网,点击Projects中的Docker Hub</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.1.png" alt="Docker Hub" tabindex="0" loading="lazy"><figcaption>Docker Hub</figcaption></figure><h5 id="_2、点击go-to-docker-hub" tabindex="-1"><a class="header-anchor" href="#_2、点击go-to-docker-hub" aria-hidden="true">#</a> 2、点击Go to Docker Hub</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.2.png" alt="Go to Docker Hub" tabindex="0" loading="lazy"><figcaption>Go to Docker Hub</figcaption></figure><h5 id="_3、在搜索框中输入mysql-official-image为官方镜像" tabindex="-1"><a class="header-anchor" href="#_3、在搜索框中输入mysql-official-image为官方镜像" aria-hidden="true">#</a> 3、在搜索框中输入mysql(Official Image为官方镜像)</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.3.png" alt="mysql镜像" tabindex="0" loading="lazy"><figcaption>mysql镜像</figcaption></figure><h5 id="_4、点击mysql-official-image" tabindex="-1"><a class="header-anchor" href="#_4、点击mysql-official-image" aria-hidden="true">#</a> 4、点击mysql(Official Image)</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.4.png" alt="1.6.10.4" tabindex="0" loading="lazy"><figcaption>1.6.10.4</figcaption></figure><h5 id="_5、点击tags可以查看历史版本" tabindex="-1"><a class="header-anchor" href="#_5、点击tags可以查看历史版本" aria-hidden="true">#</a> 5、点击Tags可以查看历史版本</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.5.png" alt="查看历史版本" tabindex="0" loading="lazy"><figcaption>查看历史版本</figcaption></figure><h5 id="_6、下载mysql-5-7" tabindex="-1"><a class="header-anchor" href="#_6、下载mysql-5-7" aria-hidden="true">#</a> 6、下载mysql 5.7</h5><p>可以看到下载mysql 5.7的命令为</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker pull mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.6.png" alt="下载mysql 5.7" tabindex="0" loading="lazy"><figcaption>下载mysql 5.7</figcaption></figure><p>若不是管理员用户登录可以提升权限,执行<code>sudo docker pull mysql:5.7</code>命令</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>sudo docker pull mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.6.2.png" alt="下载mysql 5.7" tabindex="0" loading="lazy"><figcaption>下载mysql 5.7</figcaption></figure><h5 id="_7、检查是否安装成功" tabindex="-1"><a class="header-anchor" href="#_7、检查是否安装成功" aria-hidden="true">#</a> 7、检查是否安装成功</h5><p>使用sudo docker images命令检查已安装的镜像</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>sudo docker images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到mysql 5.7已安装完成</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.7.png" alt="检查是否安装成功" tabindex="0" loading="lazy"><figcaption>检查是否安装成功</figcaption></figure><h5 id="_8、创建实例并启动" tabindex="-1"><a class="header-anchor" href="#_8、创建实例并启动" aria-hidden="true">#</a> 8、创建实例并启动</h5><h6 id="_1、提升权限" tabindex="-1"><a class="header-anchor" href="#_1、提升权限" aria-hidden="true">#</a> 1、提升权限</h6><p>该命令也需要加权限,可以切换到root用户,密码默认为vagrant</p><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>su root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.8.1.png" alt="提升权限" tabindex="0" loading="lazy"><figcaption>提升权限</figcaption></figure><h6 id="_2、查看当前用户" tabindex="-1"><a class="header-anchor" href="#_2、查看当前用户" aria-hidden="true">#</a> 2、查看当前用户</h6><p>使用<code>whami</code>命令查看当前用户</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.8.2.png" alt="查看当前用户" tabindex="0" loading="lazy"><figcaption>查看当前用户</figcaption></figure><h6 id="_3、启动mysql" tabindex="-1"><a class="header-anchor" href="#_3、启动mysql" aria-hidden="true">#</a> 3、启动mysql</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-p 3306:3306：将mysql容器的3306端口映射到linux主机的3306端口
--name mysql：给该容器起个名字
-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂载到主机(将mysql容器的/etc/mysql目录映射到linux的/mydata/mysql/conf目录)
-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机
-v /mydata/mysql/data:/var/lib/mysql/：将数据文件夹挂载到主机
-e MYSQL_ROOT_PASSWORD=root：初始化 root用户的密码
-d mysql:5.7 :以后台方式运行mysql:5.7镜像
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.8.3.2.png" alt="启动mysql" tabindex="0" loading="lazy"><figcaption>启动mysql</figcaption></figure><p>docker容器文件挂载与端口映射</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.8.3.1.png" alt="image-20220721200210158" style="zoom:50%;"><h5 id="_9、使用docker-ps命令查看正在运行的容器" tabindex="-1"><a class="header-anchor" href="#_9、使用docker-ps命令查看正在运行的容器" aria-hidden="true">#</a> 9、使用<code>docker ps</code>命令查看正在运行的容器</h5><div class="language-dpcker line-numbers-mode" data-ext="dpcker"><pre class="language-dpcker"><code>docker ps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到mysql:5.7已经启动了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.9.png" alt="查看mysql:5.7是否启动" tabindex="0" loading="lazy"><figcaption>查看mysql:5.7是否启动</figcaption></figure><p>使用docker ps -a可以查看所有容器(包括未运行的容器)</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker ps -a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用使用<code>docker images</code>查看所有镜像</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后面再次创建该容器时发现目录已经变了，所以有可能会出现如下错误</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># docker logs mysql</span>
<span class="token number">2022</span>-12-14 01:21:29+00:00 <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> <span class="token punctuation">[</span>Entrypoint<span class="token punctuation">]</span>: Entrypoint script <span class="token keyword">for</span> MySQL Server <span class="token number">5.7</span>.40-1.el7 started.
<span class="token number">2022</span>-12-14 01:21:29+00:00 <span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token punctuation">[</span>Entrypoint<span class="token punctuation">]</span>: mysqld failed <span class="token keyword">while</span> attempting to check config
        <span class="token builtin class-name">command</span> was: mysqld <span class="token parameter variable">--verbose</span> <span class="token parameter variable">--help</span> --log-bin-index<span class="token operator">=</span>/tmp/tmp.YcRdLQ4Z9u
        mysqld: Can<span class="token string">&#39;t read dir of &#39;</span>/etc/mysql/conf.d/&#39; <span class="token punctuation">(</span>Errcode: <span class="token number">2</span> - No such <span class="token function">file</span> or directory<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221214095755009.png" alt="image-20221214095755009" tabindex="0" loading="lazy"><figcaption>image-20221214095755009</figcaption></figure><p>解决方法1(比较麻烦)：https://blog.csdn.net/qq_45564783/article/details/126440171</p><p>解决方法2(非常简单，最推荐的做法)：</p><p>即<code>mysql</code>把配置文件从<code>/etc/mysql</code>移到<code>/etc/mysql/conf.d</code>了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法3：</p><p>在虚拟机的<code>/mydata/mysql/conf/</code>目录里添加<code>conf.d</code>和<code>mysql.conf.d</code>目录</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221214095911038.png" alt="image-20221214095911038" tabindex="0" loading="lazy"><figcaption>image-20221214095911038</figcaption></figure><p>在<code>/mydata/mysql/conf/mysql.conf.d/</code>里添加<code>my.cnf</code>配置文件，<a href="code%5Cmy.cnf">点击查看文件内容</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20221214100016478.png" alt="image-20221214100016478" tabindex="0" loading="lazy"><figcaption>image-20221214100016478</figcaption></figure><p>然后再次执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/log:/var/log/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql/conf:/etc/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ps:docker常见错误</strong></p><p>权限不足,在前面加sudo 或使用管理员账户登录</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.9.2.png" alt="权限不足" tabindex="0" loading="lazy"><figcaption>权限不足</figcaption></figure><h5 id="_10、连接mysql" tabindex="-1"><a class="header-anchor" href="#_10、连接mysql" aria-hidden="true">#</a> 10、连接mysql</h5><p>使用navicate连接工具测试是否连接成功</p><p>mysql容器的3306端口映射到linux的3306端口，主机需要输入linux的ip地址,密码为root</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.10.png" alt="连接mysql" style="zoom:50%;"><h5 id="_11、进入mysql内部" tabindex="-1"><a class="header-anchor" href="#_11、进入mysql内部" aria-hidden="true">#</a> 11、进入mysql内部</h5><p>以交互模式进入mysql的linux bash控制台</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker exec -it mysql /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_12、可以看到已经进入mysql容器内部" tabindex="-1"><a class="header-anchor" href="#_12、可以看到已经进入mysql容器内部" aria-hidden="true">#</a> 12、可以看到已经进入mysql容器内部</h5><p>mysql容器包含mysql的完整运行环境</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.12.png" alt="进入mysql容器内部" tabindex="0" loading="lazy"><figcaption>进入mysql容器内部</figcaption></figure><h5 id="_13、使用ls-命令" tabindex="-1"><a class="header-anchor" href="#_13、使用ls-命令" aria-hidden="true">#</a> 13、使用ls /命令</h5><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>ls /
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到mysql容器的目录结构</p><p>mysql容器包含mysql的完整运行环境,其实就是linux的目录结构</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.13.png" alt="mysql容器的目录结构" tabindex="0" loading="lazy"><figcaption>mysql容器的目录结构</figcaption></figure><h5 id="_14、查看mysql安装位置" tabindex="-1"><a class="header-anchor" href="#_14、查看mysql安装位置" aria-hidden="true">#</a> 14、查看mysql安装位置</h5><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>whereis mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>whereis mysql</code>命令可以看到mysql安装在mysql容器里的位置</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.14.png" alt="mysql安装在mysql容器里的位置" tabindex="0" loading="lazy"><figcaption>mysql安装在mysql容器里的位置</figcaption></figure><h5 id="_15、退出mysql容器" tabindex="-1"><a class="header-anchor" href="#_15、退出mysql容器" aria-hidden="true">#</a> 15、退出mysql容器</h5><p>使用<code>exit</code>命令</p><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>exit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.15.png" alt="退出mysql容器" tabindex="0" loading="lazy"><figcaption>退出mysql容器</figcaption></figure><h5 id="_16、进入mysql容器外部挂载的linux目录的对应位置" tabindex="-1"><a class="header-anchor" href="#_16、进入mysql容器外部挂载的linux目录的对应位置" aria-hidden="true">#</a> 16、进入mysql容器外部挂载的linux目录的对应位置</h5><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>cd /mydata/mysql/conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.16.png" alt="进入mysql容器外部挂载的linux目录的对应位置" tabindex="0" loading="lazy"><figcaption>进入mysql容器外部挂载的linux目录的对应位置</figcaption></figure><h5 id="_17、打开my-cnf配置文件" tabindex="-1"><a class="header-anchor" href="#_17、打开my-cnf配置文件" aria-hidden="true">#</a> 17、打开my.cnf配置文件</h5><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>vi /mydata/mysql/conf/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_18、修改字符编码" tabindex="-1"><a class="header-anchor" href="#_18、修改字符编码" aria-hidden="true">#</a> 18、修改字符编码</h5><p><code>skip-name-resolve</code>：跳过域名解析，解决 MySQL 连接慢的问题</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>[client]
<span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>

[mysql]
<span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>

[mysqld]
<span class="token key attr-name">init_connect</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;SET collation_connection = utf8_unicode_ci&#39;</span>
<span class="token key attr-name">init_connect</span><span class="token punctuation">=</span><span class="token value attr-value">&#39;SET NAMES utf8&#39; </span>
<span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>
<span class="token key attr-name">collation-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8_unicode_ci</span>
skip-character-set-client-handshake
skip-name-resolve
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_19、重启mysql" tabindex="-1"><a class="header-anchor" href="#_19、重启mysql" aria-hidden="true">#</a> 19、重启mysql</h5><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker restart mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.19.png" alt="重启mysql" tabindex="0" loading="lazy"><figcaption>重启mysql</figcaption></figure><h5 id="_20、进入mysql容器内部-查看映射是否成功" tabindex="-1"><a class="header-anchor" href="#_20、进入mysql容器内部-查看映射是否成功" aria-hidden="true">#</a> 20、进入mysql容器内部,查看映射是否成功</h5><p>以交互模式进入mysql的linux bash控制台</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker exec -it mysql /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_1、docker报错-容器没有运行" tabindex="-1"><a class="header-anchor" href="#_1、docker报错-容器没有运行" aria-hidden="true">#</a> 1、docker报错,容器没有运行😡</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.1.png" alt="docker报错,容器没有运行" tabindex="0" loading="lazy"><figcaption>docker报错,容器没有运行</figcaption></figure><p>可以看到NAMES为mysql的STATUS为Exited说明mysql容器的状态为已退出</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.2.png" alt="查看mysql容器状态" tabindex="0" loading="lazy"><figcaption>查看mysql容器状态</figcaption></figure><p>ps: 多了一个名为funy_cohen的容器</p><h6 id="_2、删除容器对象" tabindex="-1"><a class="header-anchor" href="#_2、删除容器对象" aria-hidden="true">#</a> 2、删除容器对象</h6><p>使用 <code>docker rm 镜像实例ID</code> 命令，删除对应容器对象</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker rm 镜像实例ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>即为:(可以写id的部分，只要可以区分就可以)</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker rm fc2e8ffe4f62
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_3、启动mysql容器" tabindex="-1"><a class="header-anchor" href="#_3、启动mysql容器" aria-hidden="true">#</a> 3、启动mysql容器</h6><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker start 2cd283e6ca6b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>ps: 关闭mysql容器</strong></p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker stop 2cd283e6ca6b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_4、启动没报错-但status还是为exited" tabindex="-1"><a class="header-anchor" href="#_4、启动没报错-但status还是为exited" aria-hidden="true">#</a> 4、启动没报错，但STATUS还是为Exited😠</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.4.png" alt="启动没报错，但STATUS还是为Exited" tabindex="0" loading="lazy"><figcaption>启动没报错，但STATUS还是为Exited</figcaption></figure><h6 id="_5、查看该容器日志" tabindex="-1"><a class="header-anchor" href="#_5、查看该容器日志" aria-hidden="true">#</a> 5、查看该容器日志</h6><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker logs 2cd283e6ca6b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_6、查看报错信息" tabindex="-1"><a class="header-anchor" href="#_6、查看报错信息" aria-hidden="true">#</a> 6、查看报错信息</h6><p>Found option without preceding group in config file /etc/mysql/my.cnf at line 1!</p><p>在配置文件/etc/mysql/my.cnf第一行中找到了没有前面组的选项</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.6.png" alt="启动没报错，但STATUS还是为Exited" tabindex="0" loading="lazy"><figcaption>启动没报错，但STATUS还是为Exited</figcaption></figure><h6 id="_7、打开-etc-mysql-my-cnf文件" tabindex="-1"><a class="header-anchor" href="#_7、打开-etc-mysql-my-cnf文件" aria-hidden="true">#</a> 7、打开/etc/mysql/my.cnf文件</h6><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>vi /etc/mysql/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_8、发现第一行少了一个-client" tabindex="-1"><a class="header-anchor" href="#_8、发现第一行少了一个-client" aria-hidden="true">#</a> 8、发现第一行少了一个[client]</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.8.png" alt="发现第一行少了一个[client]" tabindex="0" loading="lazy"><figcaption>发现第一行少了一个[client]</figcaption></figure><h6 id="_9、添加-client-即可" tabindex="-1"><a class="header-anchor" href="#_9、添加-client-即可" aria-hidden="true">#</a> 9、添加[client]即可**😄**</h6><p>ps:输入&quot; [ &quot;的时候[client]又跳出来了，也不知道是怎么回事</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.9.png" alt="添加[client]" tabindex="0" loading="lazy"><figcaption>添加[client]</figcaption></figure><h6 id="_10、启动后-可以看到status变为up" tabindex="-1"><a class="header-anchor" href="#_10、启动后-可以看到status变为up" aria-hidden="true">#</a> 10、启动后，可以看到STATUS变为Up</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.10.png" alt="启动后，可以看到STATUS变为Up" tabindex="0" loading="lazy"><figcaption>启动后，可以看到STATUS变为Up</figcaption></figure><p>ps.再次打开可以看到[client]有时候有，有时候又没有了，就很奇怪</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.12.png" alt="再次打开可以看到[client]有时候有，有时候又没有了，就很奇怪" tabindex="0" loading="lazy"><figcaption>再次打开可以看到[client]有时候有，有时候又没有了，就很奇怪</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.20.11.png" alt="再次打开可以看到[client]有时候有，有时候又没有了，就很奇怪" tabindex="0" loading="lazy"><figcaption>再次打开可以看到[client]有时候有，有时候又没有了，就很奇怪</figcaption></figure><h6 id="_11-查看mysql容器内部是否有该配置文件" tabindex="-1"><a class="header-anchor" href="#_11-查看mysql容器内部是否有该配置文件" aria-hidden="true">#</a> 11 查看mysql容器内部是否有该配置文件</h6><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker exec -it mysql /bin/bash  #以交互模式进入mysql的linux bash控制台
 cd /etc/mysql/
 ls
 cat my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.10.21.png" alt="查看mysql容器内部是否有该配置文件" tabindex="0" loading="lazy"><figcaption>查看mysql容器内部是否有该配置文件</figcaption></figure><p>其他常用命令</p><p>删除命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#删除容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> mysql
<span class="token comment">#删除镜像</span>
<span class="token function">docker</span> rmi mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置镜像自启动</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker update --restart=always 容器ID(或者容器名)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明</p><table><thead><tr><th>Flag</th><th>Description</th></tr></thead><tbody><tr><td>no</td><td>不自动重启容器. (默认value)</td></tr><tr><td>on-failure</td><td>容器发生error而退出(容器退出状态不为0)重启容器</td></tr><tr><td>unless-stopped</td><td>在容器已经stop掉或Docker stoped/restarted的时候才重启容器</td></tr><tr><td>always</td><td>在容器已经stop掉或Docker stoped/restarted的时候才重启容器</td></tr></tbody></table><h4 id="_1-6-11、使用redis" tabindex="-1"><a class="header-anchor" href="#_1-6-11、使用redis" aria-hidden="true">#</a> 1.6.11、使用redis</h4><h5 id="_1、下载最新redis镜像文件" tabindex="-1"><a class="header-anchor" href="#_1、下载最新redis镜像文件" aria-hidden="true">#</a> 1、下载最新redis镜像文件</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、在linux中创建redis配置目录" tabindex="-1"><a class="header-anchor" href="#_2、在linux中创建redis配置目录" aria-hidden="true">#</a> 2、在linux中创建redis配置目录</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mydata/redis/conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、在linux中创建redis配置文件" tabindex="-1"><a class="header-anchor" href="#_3、在linux中创建redis配置文件" aria-hidden="true">#</a> 3、在linux中创建redis配置文件</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> /mydata/redis/conf/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ps：必须先创建文件，然后再启动redis,否则会把redis.conf当成一个目录</p><h5 id="_3、启动redis" tabindex="-1"><a class="header-anchor" href="#_3、启动redis" aria-hidden="true">#</a> 3、启动redis</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/redis/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/redis/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-p 6379:6379：将redis容器的6379端口映射到linux主机的6379端口
--name redis：给该容器起个名字
-v /mydata/redis/data:/data \\：将数据文件夹挂载到主机
-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\：将配置文件夹挂载到主机(将redis容器的/etc/redis/redis.conf文件映射到linux的/mydata/redis/conf/redis.conf文件)
-d redis:以后台方式运行redis镜像
redis-server /etc/redis/redis.conf 以配置文件启动redis，加载容器内的conf文件，最终找到的是挂载的目录/usr/local/docker/redis.conf
--appendonly yes 开启redis持久化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.11.3.png" alt="使用redis" tabindex="0" loading="lazy"><figcaption>使用redis</figcaption></figure><p>1.6.11.4、使用 redis 镜像执行 redis-cli 命令连</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis redis-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.6.11.5、测试是否可用</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>set a b
get a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.11.5.png" alt="启动redis" tabindex="0" loading="lazy"><figcaption>启动redis</figcaption></figure><p>1.6.11.6、使用exit退出</p><div class="language-redis line-numbers-mode" data-ext="redis"><pre class="language-redis"><code>exit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.6.11.7、启用redis持久化</p><p>进入redis.conf配置文件</p><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>vi /mydata/redis/conf/redis.confr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开启redis持久化</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>appendonly yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启redis</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>docker restart redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到redis已持久化</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.6.11.7.2.png" alt="redis持久化" tabindex="0" loading="lazy"><figcaption>redis持久化</figcaption></figure><h2 id="_1-7开发工具-环境配置" tabindex="-1"><a class="header-anchor" href="#_1-7开发工具-环境配置" aria-hidden="true">#</a> 1.7开发工具&amp;环境配置</h2><h4 id="_1-7-1、下载maven3-6-1" tabindex="-1"><a class="header-anchor" href="#_1-7-1、下载maven3-6-1" aria-hidden="true">#</a> 1.7.1、下载maven3.6.1</h4><p>解压后，配置环境变量</p><p>再cmd中查看mvn版本 ，若显示版本则证明配置正确</p><div class="language-maven line-numbers-mode" data-ext="maven"><pre class="language-maven"><code>mvn -version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-7-2、配置阿里云镜像" tabindex="-1"><a class="header-anchor" href="#_1-7-2、配置阿里云镜像" aria-hidden="true">#</a> 1.7.2、配置阿里云镜像</h4><p>在maven的conf文件夹下的settings.xml文件内配置阿里云镜像</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.2.png" alt="配置阿里云镜像" tabindex="0" loading="lazy"><figcaption>配置阿里云镜像</figcaption></figure><h4 id="_1-7-3-配置-jdk1-8-编译项目" tabindex="-1"><a class="header-anchor" href="#_1-7-3-配置-jdk1-8-编译项目" aria-hidden="true">#</a> 1.7.3 配置 jdk1.8 编译项目</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.3.png" alt=" 配置 jdk1.8 编译项目" tabindex="0" loading="lazy"><figcaption> 配置 jdk1.8 编译项目</figcaption></figure><h4 id="_1-7-4-配置本地仓库位置" tabindex="-1"><a class="header-anchor" href="#_1-7-4-配置本地仓库位置" aria-hidden="true">#</a> 1.7.4 配置本地仓库位置</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>A:\\maven\\apache-maven-3.8.2\\mvn_respository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.4.png" alt="配置本地仓库位置" tabindex="0" loading="lazy"><figcaption>配置本地仓库位置</figcaption></figure><h4 id="_17-5-将maven加载到intellij-idea中" tabindex="-1"><a class="header-anchor" href="#_17-5-将maven加载到intellij-idea中" aria-hidden="true">#</a> 17.5 将maven加载到Intellij IDEA中</h4><h5 id="_1、点击configure" tabindex="-1"><a class="header-anchor" href="#_1、点击configure" aria-hidden="true">#</a> 1、点击configure</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.5.1.png" alt="点击configure" tabindex="0" loading="lazy"><figcaption>点击configure</figcaption></figure><h5 id="_2、点击settings" tabindex="-1"><a class="header-anchor" href="#_2、点击settings" aria-hidden="true">#</a> 2、点击Settings</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.5.2.png" alt="点击Settings" tabindex="0" loading="lazy"><figcaption>点击Settings</figcaption></figure><h5 id="_3、依次点击build、execution-deployment-build-tools-maven" tabindex="-1"><a class="header-anchor" href="#_3、依次点击build、execution-deployment-build-tools-maven" aria-hidden="true">#</a> 3、依次点击Build、Execution，Deployment ---&gt; Build Tools ---&gt; Maven</h5><p>修改为自己的maven路径</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.5.3.png" alt="修改maven路径" tabindex="0" loading="lazy"><figcaption>修改maven路径</figcaption></figure><h4 id="_1-7-6、安装idea插件" tabindex="-1"><a class="header-anchor" href="#_1-7-6、安装idea插件" aria-hidden="true">#</a> 1.7.6、安装IDEA插件</h4><p>点击configure下的Plugins</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.6.1.png" alt="安装IDEA插件" tabindex="0" loading="lazy"><figcaption>安装IDEA插件</figcaption></figure><p>安装Lombox插件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.6.2.png" alt="安装Lombox插件" tabindex="0" loading="lazy"><figcaption>安装Lombox插件</figcaption></figure><p>安装MyBaitsX插件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.6.3.png" alt="安装MyBaitsX插件" tabindex="0" loading="lazy"><figcaption>安装MyBaitsX插件</figcaption></figure><h4 id="_1-7-7、安装visual-studio-code插件" tabindex="-1"><a class="header-anchor" href="#_1-7-7、安装visual-studio-code插件" aria-hidden="true">#</a> 1.7.7、安装Visual Studio Code插件</h4><p>修改插件安装位置</p><p>可以单击右键VS Code快捷方式 ---&gt; 属性 ---&gt; 快捷方式 ---&gt; 目标 那里添加 --extensions-dir &quot;插件安装位置&quot;</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;软件启动程序&quot; --extensions-dir &quot;插件安装位置&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;A:\\VS Code\\Microsoft VS Code\\Code.exe&quot; --extensions-dir &quot;A:\\VS Code\\extensions&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>插件说明</p><ul><li><p><code>Vetur</code> ：语法高亮、智能感知、Emmet 等</p><p>包含格式化功能， Alt+Shift+F （格式化全文），Ctrl+K Ctrl+F（格式化选中代码，两个 Ctrl需要同时按着）</p></li><li><p><s><code>EsLint</code> ：语法纠错</s>（强烈建议不要安装，明明没错它报错，插件不及时更新，新语法不支持）</p></li><li><p><code>Auto Close Tag</code> ：自动闭合 HTML/XML 标签</p></li><li><p><code>Auto Rename Tag</code> ：自动完成另一侧标签的同步修改</p></li><li><p><code>JavaScript(ES6) code snippets</code> ：ES6 语法智能提示以及快速输入， 除 js 外还支持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含 js 代码文件的时间</p></li><li><p><code>HTML CSS Support</code> ： 让 html 标签上写 class 智能提示当前项目所支持的样式</p></li><li><p><code>HTML Snippets</code> ： html 快速自动补全</p></li><li><p><code>Open in browser</code> ：浏览器快速打开</p></li><li><p><code>Live Server</code>：以内嵌服务器方式打开</p></li><li><p><code>Chinese (Simplified) Language Pack for Visual Studio Code</code> ：中文语言包</p></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.7.png" alt="Visual Studio Code插件" tabindex="0" loading="lazy"><figcaption>Visual Studio Code插件</figcaption></figure><h4 id="_1-7-8、配置git" tabindex="-1"><a class="header-anchor" href="#_1-7-8、配置git" aria-hidden="true">#</a> 1.7.8、配置git</h4><p>进入git bash</p><h5 id="_1、配置用户名" tabindex="-1"><a class="header-anchor" href="#_1、配置用户名" aria-hidden="true">#</a> 1、配置用户名</h5><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>git config --global user.name <span class="token string">&quot;username&quot;</span>    //（名字） 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、配置邮箱" tabindex="-1"><a class="header-anchor" href="#_2、配置邮箱" aria-hidden="true">#</a> 2、配置邮箱</h5><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>git config --global user.email <span class="token string">&quot;username@email.com&quot;</span>      //(注册账号时用的邮箱)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、生成密钥" tabindex="-1"><a class="header-anchor" href="#_3、生成密钥" aria-hidden="true">#</a> 3、生成密钥</h5><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>ssh-keygen -t rsa -C <span class="token string">&quot;username@email.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或使用</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>ssh-keygen -t rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>连续三次回车。一般用户目录下会有一下两个文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.8.1.png" alt="image-20220415191826787" tabindex="0" loading="lazy"><figcaption>image-20220415191826787</figcaption></figure><h5 id="_4、使用一下命令查看公钥" tabindex="-1"><a class="header-anchor" href="#_4、使用一下命令查看公钥" aria-hidden="true">#</a> 4、使用一下命令查看公钥</h5><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">cat</span> ~<span class="token operator">/</span><span class="token punctuation">.</span>ssh/id_rsa<span class="token punctuation">.</span>pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用以下命令可以粘贴到剪贴板</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>clip &lt; ~<span class="token operator">/</span><span class="token punctuation">.</span>ssh/id_rsa<span class="token punctuation">.</span>pub    <span class="token comment">#windows系统</span>
pbcopy &lt; ~<span class="token operator">/</span><span class="token punctuation">.</span>ssh/id_rsa<span class="token punctuation">.</span>pub  <span class="token comment">#mac os系统</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.8.4.png" alt="git" tabindex="0" loading="lazy"><figcaption>git</figcaption></figure><h5 id="_5、向gitee添加公钥" tabindex="-1"><a class="header-anchor" href="#_5、向gitee添加公钥" aria-hidden="true">#</a> 5、向gitee添加公钥</h5><p>登录进入 gitee，在设置里面找到 SSH KEY 将.pub 文件的内容粘贴进去</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.8.5.png" alt="向gitee添加公钥" tabindex="0" loading="lazy"><figcaption>向gitee添加公钥</figcaption></figure><h5 id="_6、测试添加是否成功" tabindex="-1"><a class="header-anchor" href="#_6、测试添加是否成功" aria-hidden="true">#</a> 6、测试添加是否成功</h5><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>ssh -T git@gitee.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一次绑定会有警告信息，输入yes即可</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.8.6.png" alt="测试添加是否成功" tabindex="0" loading="lazy"><figcaption>测试添加是否成功</figcaption></figure><h5 id="_7、向github添加公钥" tabindex="-1"><a class="header-anchor" href="#_7、向github添加公钥" aria-hidden="true">#</a> 7、向github添加公钥</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.8.7.png" alt="向github添加公钥" tabindex="0" loading="lazy"><figcaption>向github添加公钥</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.8.7.2.png" alt="向github添加公钥" tabindex="0" loading="lazy"><figcaption>向github添加公钥</figcaption></figure><h5 id="_8、测试添加是否成功" tabindex="-1"><a class="header-anchor" href="#_8、测试添加是否成功" aria-hidden="true">#</a> 8、测试添加是否成功</h5><p>第一次绑定会有警告信息，输入yes即可</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.8.8.png" alt="测试添加是否成功" tabindex="0" loading="lazy"><figcaption>测试添加是否成功</figcaption></figure><h4 id="_1-7-9、新建仓库" tabindex="-1"><a class="header-anchor" href="#_1-7-9、新建仓库" aria-hidden="true">#</a> 1.7.9、新建仓库</h4><h5 id="_1、使用gitee新建仓库" tabindex="-1"><a class="header-anchor" href="#_1、使用gitee新建仓库" aria-hidden="true">#</a> 1、使用gitee新建仓库</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.9.1.1.png" alt="使用gitee新建仓库" tabindex="0" loading="lazy"><figcaption>使用gitee新建仓库</figcaption></figure><p>点击刚创建的项目 ---&gt; 点击管理 ---&gt;点击开源 ---&gt; 勾选须知 ---&gt; 点击保存</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.9.1.2.png" alt="使用gitee新建仓库" tabindex="0" loading="lazy"><figcaption>使用gitee新建仓库</figcaption></figure><h5 id="_2、使用github新建仓库" tabindex="-1"><a class="header-anchor" href="#_2、使用github新建仓库" aria-hidden="true">#</a> 2、使用github新建仓库</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.9.2.png" alt="使用github新建仓库" tabindex="0" loading="lazy"><figcaption>使用github新建仓库</figcaption></figure><h4 id="_1-7-10、新建项目" tabindex="-1"><a class="header-anchor" href="#_1-7-10、新建项目" aria-hidden="true">#</a> 1.7.10、新建项目</h4><h5 id="_1、点击get-from-version-control" tabindex="-1"><a class="header-anchor" href="#_1、点击get-from-version-control" aria-hidden="true">#</a> 1、点击Get from Version Control</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.1.png" alt="新建项目" tabindex="0" loading="lazy"><figcaption>新建项目</figcaption></figure><h5 id="_2、查看仓库ssh" tabindex="-1"><a class="header-anchor" href="#_2、查看仓库ssh" aria-hidden="true">#</a> 2、查看仓库ssh</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.2.png" alt="查看仓库ssh" tabindex="0" loading="lazy"><figcaption>查看仓库ssh</figcaption></figure><h5 id="_3、在url里输入刚才复制的ssh-点击关闭" tabindex="-1"><a class="header-anchor" href="#_3、在url里输入刚才复制的ssh-点击关闭" aria-hidden="true">#</a> 3、在URL里输入刚才复制的ssh,点击关闭</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.3.png" alt="在URL里输入刚才复制的ssh" tabindex="0" loading="lazy"><figcaption>在URL里输入刚才复制的ssh</figcaption></figure><p>ps：点击<code>clone</code>后发现在下载java 11，删除该项目，修改版本在重新新建项目，可以发现没有下载java 11</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.3.2.png" alt="修改版本在重新新建项目" tabindex="0" loading="lazy"><figcaption>修改版本在重新新建项目</figcaption></figure><h5 id="_4、添加github仓库" tabindex="-1"><a class="header-anchor" href="#_4、添加github仓库" aria-hidden="true">#</a> 4、添加github仓库</h5><h6 id="_1、点击code-复制ssh" tabindex="-1"><a class="header-anchor" href="#_1、点击code-复制ssh" aria-hidden="true">#</a> 1、点击code ---&gt; 复制ssh</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.4.1.png" alt="添加github仓库" tabindex="0" loading="lazy"><figcaption>添加github仓库</figcaption></figure><h6 id="_2、选择vcs-git-remotes" tabindex="-1"><a class="header-anchor" href="#_2、选择vcs-git-remotes" aria-hidden="true">#</a> 2、选择VCS ---&gt; Git ---&gt; Remotes</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.4.2.png" alt="Remotes" tabindex="0" loading="lazy"><figcaption>Remotes</figcaption></figure><h6 id="_3、点击-号-name输入一个名字-url输入刚才复制的ssh" tabindex="-1"><a class="header-anchor" href="#_3、点击-号-name输入一个名字-url输入刚才复制的ssh" aria-hidden="true">#</a> 3、点击+号，Name输入一个名字,URL输入刚才复制的ssh</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.4.3.png" alt="Name输入一个名字,URL输入刚才复制的ssh" tabindex="0" loading="lazy"><figcaption>Name输入一个名字,URL输入刚才复制的ssh</figcaption></figure><h5 id="_4、修改项目的java版本" tabindex="-1"><a class="header-anchor" href="#_4、修改项目的java版本" aria-hidden="true">#</a> 4、修改项目的java版本</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.4.4.1.png" alt="修改项目的java版本" tabindex="0" loading="lazy"><figcaption>修改项目的java版本</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.4.4.2.png" alt="修改项目的java版本" tabindex="0" loading="lazy"><figcaption>修改项目的java版本</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.7.10.4.4.3.png" alt="修改项目的java版本" tabindex="0" loading="lazy"><figcaption>修改项目的java版本</figcaption></figure><h2 id="_1-8、新建各个模块" tabindex="-1"><a class="header-anchor" href="#_1-8、新建各个模块" aria-hidden="true">#</a> 1.8、新建各个模块</h2><h4 id="_1-8-1、新建商品模块" tabindex="-1"><a class="header-anchor" href="#_1-8-1、新建商品模块" aria-hidden="true">#</a> 1.8.1、新建商品模块</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.1.png" alt="新建商品模块" tabindex="0" loading="lazy"><figcaption>新建商品模块</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.atguigu.gulimall
gulimall-product
谷粒商城商品服务
com.atguigu.gulimall.product
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.1.1.png" alt="新建商品模块" tabindex="0" loading="lazy"><figcaption>新建商品模块</figcaption></figure><p>选择 Web --&gt; Spring Web; Spring Cloud Routing --&gt; OpenFeign (其他模块也一样)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.1.2.png" alt="Spring Web, OpenFeign" tabindex="0" loading="lazy"><figcaption>Spring Web, OpenFeign</figcaption></figure><p>直接点确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.1.3.png" alt=" 新建商品模块" tabindex="0" loading="lazy"><figcaption> 新建商品模块</figcaption></figure><p>1.8.2、新建仓储模块</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.atguigu.gulimall
gulimall-ware
谷粒商城-仓储服务
com.atguigu.gulimall.ware
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.2.png" alt="新建仓储模块" tabindex="0" loading="lazy"><figcaption>新建仓储模块</figcaption></figure><h4 id="_1-8-3、新建订单模块" tabindex="-1"><a class="header-anchor" href="#_1-8-3、新建订单模块" aria-hidden="true">#</a> 1.8.3、新建订单模块</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.atguigu.gulimall
gulimall-order
谷粒商城-订单服务
com.atguigu.gulimall.order
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.3.png" alt="新建订单模块" tabindex="0" loading="lazy"><figcaption>新建订单模块</figcaption></figure><h4 id="_1-8-4、新建会员模块" tabindex="-1"><a class="header-anchor" href="#_1-8-4、新建会员模块" aria-hidden="true">#</a> 1.8.4、新建会员模块</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.atguigu.gulimall
gulimall-member
谷粒商城-会员服务
com.atguigu.gulimall.member
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.4.png" alt="新建会员模块" tabindex="0" loading="lazy"><figcaption>新建会员模块</figcaption></figure><h4 id="_1-8-5、新建优惠劵模块" tabindex="-1"><a class="header-anchor" href="#_1-8-5、新建优惠劵模块" aria-hidden="true">#</a> 1.8.5、新建优惠劵模块</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.atguigu.gulimall
gulimall-coupon
谷粒商城-优惠劵服务
com.atguigu.gulimall.coupon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.5.png" alt="新建优惠劵模块" tabindex="0" loading="lazy"><figcaption>新建优惠劵模块</figcaption></figure><h4 id="_1-8-6、遇到报错" tabindex="-1"><a class="header-anchor" href="#_1-8-6、遇到报错" aria-hidden="true">#</a> 1.8.6、遇到报错</h4><h5 id="_1、pom文件颜色变成赤红色-内容报红" tabindex="-1"><a class="header-anchor" href="#_1、pom文件颜色变成赤红色-内容报红" aria-hidden="true">#</a> 1、pom文件颜色变成赤红色，内容报红😠</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.6.1.png" alt="pom文件颜色变成赤红色，内容报红" tabindex="0" loading="lazy"><figcaption>pom文件颜色变成赤红色，内容报红</figcaption></figure><h5 id="_2、单击右键pom文件-选择add-as-maven-project" tabindex="-1"><a class="header-anchor" href="#_2、单击右键pom文件-选择add-as-maven-project" aria-hidden="true">#</a> 2、单击右键pom文件,选择Add as Maven Project**😄**</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.6.2.png" alt="Add as Maven Project" tabindex="0" loading="lazy"><figcaption>Add as Maven Project</figcaption></figure><h5 id="_3、可看到已经不报红了" tabindex="-1"><a class="header-anchor" href="#_3、可看到已经不报红了" aria-hidden="true">#</a> 3、可看到已经不报红了</h5><p>ps:我把pom文件内容替换成资料提供的pom文件(这样可以少很多错误)，删除那些还没创建的模块的依赖等</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.6.3.png" alt="把pom文件内容替换成资料提供的pom文件" tabindex="0" loading="lazy"><figcaption>把pom文件内容替换成资料提供的pom文件</figcaption></figure><p><strong>ps:这里如果点了test测试类，会发现测试类报错</strong></p><p>可以参看1.10.9.8</p><h5 id="其他问题" tabindex="-1"><a class="header-anchor" href="#其他问题" aria-hidden="true">#</a> 其他问题</h5><p>打开项目，以前不报错的地方现在报错(或出现了其他问题)</p><p>可以点击File--&gt;Invalidate Caches / Restar 删除原来的缓存和索引，等待Idea重新构建缓存和索引</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.6.3.2.png" alt=" 删除原来的缓存和索引" tabindex="0" loading="lazy"><figcaption> 删除原来的缓存和索引</figcaption></figure><h4 id="_1-8-7、项目添加pom文件-作为父项目" tabindex="-1"><a class="header-anchor" href="#_1-8-7、项目添加pom文件-作为父项目" aria-hidden="true">#</a> 1.8.7、项目添加pom文件,作为父项目</h4><p>父项目需要答pom包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>modules为其子模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.7.png" alt="modules为其子模块" tabindex="0" loading="lazy"><figcaption>modules为其子模块</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
		 <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>聚合服务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-coupon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-member<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-order<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-product<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>gulimall-ware<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-8-8-添加-gitignore内容" tabindex="-1"><a class="header-anchor" href="#_1-8-8-添加-gitignore内容" aria-hidden="true">#</a> 1.8.8 添加.gitignore内容</h4><h5 id="_1找到git-local-changes-unversioned-files-可以查看未被管理的文件" tabindex="-1"><a class="header-anchor" href="#_1找到git-local-changes-unversioned-files-可以查看未被管理的文件" aria-hidden="true">#</a> 1找到git --&gt; Local Changes --&gt; Unversioned Files 可以查看未被管理的文件</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.8.1.png" alt="Unversioned Files 可以查看未被管理的文件" tabindex="0" loading="lazy"><figcaption>Unversioned Files 可以查看未被管理的文件</figcaption></figure><p>有些版本的不一样，可以点这里</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.8.1.2.png" alt="Unversioned Files 可以查看未被管理的文件" tabindex="0" loading="lazy"><figcaption>Unversioned Files 可以查看未被管理的文件</figcaption></figure><h5 id="_2、如果没有找到" tabindex="-1"><a class="header-anchor" href="#_2、如果没有找到" aria-hidden="true">#</a> 2、如果没有找到</h5><p>可以按 alt + 9</p><p>或者设置里取消勾选这个</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.8.2.png" alt="Unversioned Files 可以查看未被管理的文件" tabindex="0" loading="lazy"><figcaption>Unversioned Files 可以查看未被管理的文件</figcaption></figure><h5 id="_3、添加不加入版本控制的文件和文件夹" tabindex="-1"><a class="header-anchor" href="#_3、添加不加入版本控制的文件和文件夹" aria-hidden="true">#</a> 3、添加不加入版本控制的文件和文件夹</h5><p>在父项目的.gitignore文件中添加不加入版本控制的文件和文件夹</p><div class="language-.gitignore line-numbers-mode" data-ext=".gitignore"><pre class="language-.gitignore"><code>**/mvnw			
**/mvnw.cmd

**/.mvn
**/target/

.idea

**/.gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.8.3.png" alt="添加不加入版本控制的文件和文件夹" tabindex="0" loading="lazy"><figcaption>添加不加入版本控制的文件和文件夹</figcaption></figure><h5 id="_4、将剩下的文件纳入到版本控制" tabindex="-1"><a class="header-anchor" href="#_4、将剩下的文件纳入到版本控制" aria-hidden="true">#</a> 4、将剩下的文件纳入到版本控制</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.8.4.png" alt="将剩下的文件纳入到版本控制" tabindex="0" loading="lazy"><figcaption>将剩下的文件纳入到版本控制</figcaption></figure><h4 id="_1-8-9、提交项目初始结构代码" tabindex="-1"><a class="header-anchor" href="#_1-8-9、提交项目初始结构代码" aria-hidden="true">#</a> 1.8.9、提交项目初始结构代码</h4><h5 id="_1、提交代码" tabindex="-1"><a class="header-anchor" href="#_1、提交代码" aria-hidden="true">#</a> 1、提交代码</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.1.png" alt="提交代码" tabindex="0" loading="lazy"><figcaption>提交代码</figcaption></figure><h5 id="_2、push到gitee" tabindex="-1"><a class="header-anchor" href="#_2、push到gitee" aria-hidden="true">#</a> 2、push到gitee</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.2.1.png" alt="push到gitee" tabindex="0" loading="lazy"><figcaption>push到gitee</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.2.2.png" alt="push到gitee" tabindex="0" loading="lazy"><figcaption>push到gitee</figcaption></figure><p><strong>ps:可以看到origin为gitee的远程仓库</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.2.3.png" alt="origin为gitee的远程仓库" tabindex="0" loading="lazy"><figcaption>origin为gitee的远程仓库</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.2.4.png" alt="origin为gitee的远程仓库" tabindex="0" loading="lazy"><figcaption>origin为gitee的远程仓库</figcaption></figure><h5 id="_3、推送到github" tabindex="-1"><a class="header-anchor" href="#_3、推送到github" aria-hidden="true">#</a> 3、推送到github</h5><h6 id="_1、push到github" tabindex="-1"><a class="header-anchor" href="#_1、push到github" aria-hidden="true">#</a> 1、push到github</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.3.1.png" alt="push到github" tabindex="0" loading="lazy"><figcaption>push到github</figcaption></figure><h6 id="_2、点击push" tabindex="-1"><a class="header-anchor" href="#_2、点击push" aria-hidden="true">#</a> 2、点击Push</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.3.2.png" alt="点击Push" tabindex="0" loading="lazy"><figcaption>点击Push</figcaption></figure><h6 id="_3、貌似没有提交上去" tabindex="-1"><a class="header-anchor" href="#_3、貌似没有提交上去" aria-hidden="true">#</a> 3、貌似没有提交上去😱</h6><p>可以看到貌似没有提交上去，但是多了一个提示，说master分支9分钟前提交了推送</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.3.3.png" alt="貌似没有提交上去" tabindex="0" loading="lazy"><figcaption>貌似没有提交上去</figcaption></figure><h6 id="_4、切换到master分支即可看到推送" tabindex="-1"><a class="header-anchor" href="#_4、切换到master分支即可看到推送" aria-hidden="true">#</a> 4、切换到master分支即可看到推送</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.3.4.png" alt="切换到master分支即可看到推送" tabindex="0" loading="lazy"><figcaption>切换到master分支即可看到推送</figcaption></figure><h6 id="_5、修改默认分支" tabindex="-1"><a class="header-anchor" href="#_5、修改默认分支" aria-hidden="true">#</a> 5、修改默认分支</h6><p>点击项目的Settings --&gt; Branches --&gt; 交换按钮</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.3.5.1.png" alt="修改默认分支" tabindex="0" loading="lazy"><figcaption>修改默认分支</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.3.5.2.png" alt="修改默认分支" tabindex="0" loading="lazy"><figcaption>修改默认分支</figcaption></figure><p>可以看到已经修改了默认分支</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.3.5.3.png" alt="可以看到已经修改了默认分支" tabindex="0" loading="lazy"><figcaption>可以看到已经修改了默认分支</figcaption></figure><h6 id="_6、全局修改默认分支" tabindex="-1"><a class="header-anchor" href="#_6、全局修改默认分支" aria-hidden="true">#</a> 6、全局修改默认分支</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.9.3.6.png" alt="全局修改默认分支" tabindex="0" loading="lazy"><figcaption>全局修改默认分支</figcaption></figure><h4 id="_1-8-10、初始数据库" tabindex="-1"><a class="header-anchor" href="#_1-8-10、初始数据库" aria-hidden="true">#</a> 1.8.10、初始数据库</h4><h5 id="_1-发现连接linux的mysql报错了" tabindex="-1"><a class="header-anchor" href="#_1-发现连接linux的mysql报错了" aria-hidden="true">#</a> 1 发现连接linux的mysql报错了</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.10.1.png" alt="发现连接linux的mysql报错了" tabindex="0" loading="lazy"><figcaption>发现连接linux的mysql报错了</figcaption></figure><h5 id="_2-可以看到mysql并没有启动" tabindex="-1"><a class="header-anchor" href="#_2-可以看到mysql并没有启动" aria-hidden="true">#</a> 2 可以看到mysql并没有启动</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.10.2.png" alt="mysql并没有启动" tabindex="0" loading="lazy"><figcaption>mysql并没有启动</figcaption></figure><h5 id="_3、设置mysql开机自启动" tabindex="-1"><a class="header-anchor" href="#_3、设置mysql开机自启动" aria-hidden="true">#</a> 3、设置mysql开机自启动</h5><p>设置mysql开机自启动</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>sudo docker update  mysql  --restart=always
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.10.3.png" alt="设置mysql开机自启动" tabindex="0" loading="lazy"><figcaption>设置mysql开机自启动</figcaption></figure><p>启动mysql容器</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>sudo docker start mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同理,设置redis开机自启动</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>sudo docker update  redis  --restart=always
sudo docker start redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、新建数据库" tabindex="-1"><a class="header-anchor" href="#_4、新建数据库" aria-hidden="true">#</a> 4、新建数据库</h5><p>新建<code>gulimall_pms</code>数据库(<strong>是gulimall_pms，不是gulimall-pms</strong>)</p><p>数据库名填 <code>gulimall_pms</code></p><p>字符集选 <code>utf8mb4</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.10.4.png" alt="新建数据库" tabindex="0" loading="lazy"><figcaption>新建数据库</figcaption></figure><p>同理，新建其他数据库</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gulimall_pms	//商品管理系统
gulimall_oms 	//订单管理系统
gulimall_sms	//营销管理系统
gulimall_ums	//用户管理系统
gulimall_wms	//库存管理系统
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、执行sql语句" tabindex="-1"><a class="header-anchor" href="#_5、执行sql语句" aria-hidden="true">#</a> 5、执行sql语句</h5><h6 id="_1、选中gulimall-pms-点击工具-命令行界面" tabindex="-1"><a class="header-anchor" href="#_1、选中gulimall-pms-点击工具-命令行界面" aria-hidden="true">#</a> 1、选中gulimall_pms,点击工具 --&gt; 命令行界面</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.10.5.1.png" alt="执行sql语句" tabindex="0" loading="lazy"><figcaption>执行sql语句</figcaption></figure><h6 id="_2、复制sql语句到命令行界面-然后回车执行sql语句" tabindex="-1"><a class="header-anchor" href="#_2、复制sql语句到命令行界面-然后回车执行sql语句" aria-hidden="true">#</a> 2、复制sql语句到命令行界面，然后回车执行sql语句</h6><p>然后点击gulimall_pms下的表。右键 --&gt; 刷新，即可看到sql语句执行后新建的表</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.10.5.2.png" alt="执行sql语句" tabindex="0" loading="lazy"><figcaption>执行sql语句</figcaption></figure><p>1.8.10.5.3、点击表下面的随便一张表，右键 --&gt; 设计 查看注释是不是乱码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.10.5.3.png" alt="查看注释是不是乱码" tabindex="0" loading="lazy"><figcaption>查看注释是不是乱码</figcaption></figure><p><strong>ps:不要运行sql文件，一定要在命令行执行sql语句，否则中文会乱码</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.10.5.png" alt="不要运行sql文件" tabindex="0" loading="lazy"><figcaption>不要运行sql文件</figcaption></figure><p>同理，执行其他sql语句</p><h4 id="_1-8-11、使用人人开源" tabindex="-1"><a class="header-anchor" href="#_1-8-11、使用人人开源" aria-hidden="true">#</a> 1.8.11、使用人人开源</h4><h5 id="_1、使用人人开源的以下两个项目" tabindex="-1"><a class="header-anchor" href="#_1、使用人人开源的以下两个项目" aria-hidden="true">#</a> 1、使用人人开源的以下两个项目</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.1.png" alt="使用人人开源的以下两个项目" tabindex="0" loading="lazy"><figcaption>使用人人开源的以下两个项目</figcaption></figure><h5 id="_2、新建renren-fast项目" tabindex="-1"><a class="header-anchor" href="#_2、新建renren-fast项目" aria-hidden="true">#</a> 2、新建renren-fast项目</h5><p><strong><s>可以在资料里复制该项目到自己的项目里面</s></strong></p><p>不要使用资料提供的renren-fast项目，不然前期会有错误，我就是使用的资料里的项目，后来出现了很多错误</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.2.png" alt="、可以在资料里复制该项目到自己的项目里面" tabindex="0" loading="lazy"><figcaption>、可以在资料里复制该项目到自己的项目里面</figcaption></figure><h5 id="_3、新建gulimall-admin数据库-字符集选择utf8mb4" tabindex="-1"><a class="header-anchor" href="#_3、新建gulimall-admin数据库-字符集选择utf8mb4" aria-hidden="true">#</a> 3、新建gulimall_admin数据库,字符集选择utf8mb4</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.3.png" alt="新建gulimall_admin数据库,字符集选择utf8mb4" tabindex="0" loading="lazy"><figcaption>新建gulimall_admin数据库,字符集选择utf8mb4</figcaption></figure><h5 id="_4、在gulimall-admin数据库中执行mysql-sql的sql语句" tabindex="-1"><a class="header-anchor" href="#_4、在gulimall-admin数据库中执行mysql-sql的sql语句" aria-hidden="true">#</a> 4、在gulimall_admin数据库中执行mysql.sql的sql语句</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.4.png" alt="在gulimall_admin数据库中执行mysql.sql的sql语句" tabindex="0" loading="lazy"><figcaption>在gulimall_admin数据库中执行mysql.sql的sql语句</figcaption></figure><h5 id="_5、删除哪些还没有创建的依赖" tabindex="-1"><a class="header-anchor" href="#_5、删除哪些还没有创建的依赖" aria-hidden="true">#</a> 5、删除哪些还没有创建的依赖</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.5.png" alt="删除哪些还没有创建的依赖" tabindex="0" loading="lazy"><figcaption>删除哪些还没有创建的依赖</figcaption></figure><h5 id="_6、wagon-maven-plugin报红" tabindex="-1"><a class="header-anchor" href="#_6、wagon-maven-plugin报红" aria-hidden="true">#</a> 6、wagon-maven-plugin报红</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.6.png" alt="wagon-maven-plugin报红" tabindex="0" loading="lazy"><figcaption>wagon-maven-plugin报红</figcaption></figure><h5 id="_7、上面的代码不删-在dependencies里面添加这个依赖-刷新一下就行了" tabindex="-1"><a class="header-anchor" href="#_7、上面的代码不删-在dependencies里面添加这个依赖-刷新一下就行了" aria-hidden="true">#</a> 7、上面的代码不删,在dependencies里面添加这个依赖，刷新一下就行了</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>wagon-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.7.png" alt="在dependencies里面添加maven-plugin依赖" tabindex="0" loading="lazy"><figcaption>在dependencies里面添加maven-plugin依赖</figcaption></figure><h5 id="_8、-enablediscoveryclient报红" tabindex="-1"><a class="header-anchor" href="#_8、-enablediscoveryclient报红" aria-hidden="true">#</a> 8、@EnableDiscoveryClient报红</h5><p>这是以后向注册中心发现服务用的，现在用不上删除即可</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.8.png" alt="@EnableDiscoveryClient报红" tabindex="0" loading="lazy"><figcaption>@EnableDiscoveryClient报红</figcaption></figure><h5 id="_9、运行这个项目" tabindex="-1"><a class="header-anchor" href="#_9、运行这个项目" aria-hidden="true">#</a> 9、运行这个项目</h5><h5 id="_10、又报错了" tabindex="-1"><a class="header-anchor" href="#_10、又报错了" aria-hidden="true">#</a> 10、又报错了</h5><h6 id="_1、可以看到是数据库的问题-communications-link-failure-通信链路失败" tabindex="-1"><a class="header-anchor" href="#_1、可以看到是数据库的问题-communications-link-failure-通信链路失败" aria-hidden="true">#</a> 1、可以看到是数据库的问题(Communications link failure：通信链路失败)</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.10.1.png" alt="通信链路失败" tabindex="0" loading="lazy"><figcaption>通信链路失败</figcaption></figure><h6 id="_2、网站也访问不到" tabindex="-1"><a class="header-anchor" href="#_2、网站也访问不到" aria-hidden="true">#</a> 2、网站也访问不到</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.10.2.png" alt="网站也访问不到" tabindex="0" loading="lazy"><figcaption>网站也访问不到</figcaption></figure><p>后来发现数据库名字是gulimall-admin,配置的是gulimall_admin</p><p>将数据库删除重新新建gulimall_admin数据库即可(字符集选 utf8mb4)</p><p>同理修改其他的数据库</p><h6 id="_3、修改后发现还是报错" tabindex="-1"><a class="header-anchor" href="#_3、修改后发现还是报错" aria-hidden="true">#</a> 3、修改后发现还是报错</h6><p>使用本地mysql连接，发现可以连上</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.10.3.png" alt="使用本地mysql连接，发现可以连上" tabindex="0" loading="lazy"><figcaption>使用本地mysql连接，发现可以连上</figcaption></figure><h6 id="_4、在本地创建了同样的数据库-发现没有报错" tabindex="-1"><a class="header-anchor" href="#_4、在本地创建了同样的数据库-发现没有报错" aria-hidden="true">#</a> 4、在本地创建了同样的数据库，发现没有报错</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.10.4.png" alt="在本地创建了同样的数据库，发现没有报错" tabindex="0" loading="lazy"><figcaption>在本地创建了同样的数据库，发现没有报错</figcaption></figure><h6 id="_5、发现ssl报错" tabindex="-1"><a class="header-anchor" href="#_5、发现ssl报错" aria-hidden="true">#</a> 5、发现ssl报错😡</h6><p>No appropriate protocol (protocol is disabled or cipher suites are inappropriate)</p><p>没有合适的协议（协议被禁用或密码套件不合适）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.10.5.png" alt="发现ssl报错" tabindex="0" loading="lazy"><figcaption>发现ssl报错</figcaption></figure><h6 id="_6、不使用ssl" tabindex="-1"><a class="header-anchor" href="#_6、不使用ssl" aria-hidden="true">#</a> 6、不使用ssl</h6><p>在url后面添加&amp;useSSL=false，不使用ssl，可以发现已经没有错误了</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">url</span><span class="token punctuation">:</span> <span class="token value attr-value">jdbc:mysql://192.168.56.10:3306/gulimall_admin?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.10.6.png" alt="不使用ssl" tabindex="0" loading="lazy"><figcaption>不使用ssl</figcaption></figure><h6 id="_7、浏览器可以访问了" tabindex="-1"><a class="header-anchor" href="#_7、浏览器可以访问了" aria-hidden="true">#</a> 7、浏览器可以访问了</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.8.11.10.7.png" alt="浏览器可以访问了" tabindex="0" loading="lazy"><figcaption>浏览器可以访问了</figcaption></figure><h2 id="_1-9、前端初始化" tabindex="-1"><a class="header-anchor" href="#_1-9、前端初始化" aria-hidden="true">#</a> 1.9、前端初始化</h2><h4 id="_1-9-1、打开前端项目" tabindex="-1"><a class="header-anchor" href="#_1-9-1、打开前端项目" aria-hidden="true">#</a> 1.9.1、打开前端项目</h4><p><s>将gulimall-admin-vue-app拖入到VS Code快捷方式（后来我又使用renren-fast-vue了）</s></p><p>下载renren-fast-vue，使用VS Code打开该项目</p><h4 id="_1-9-2、配置node-js" tabindex="-1"><a class="header-anchor" href="#_1-9-2、配置node-js" aria-hidden="true">#</a> 1.9.2、配置node.js</h4><h5 id="_1、安装node-10-16-3" tabindex="-1"><a class="header-anchor" href="#_1、安装node-10-16-3" aria-hidden="true">#</a> 1、安装node 10.16.3</h5><p>修改一下安装位置，其他默认即可</p><p>（一定要是这个版本，不然后面会有很多错误）</p><h5 id="_2、cmd输入node-v可以查看版本" tabindex="-1"><a class="header-anchor" href="#_2、cmd输入node-v可以查看版本" aria-hidden="true">#</a> 2、cmd输入node -v可以查看版本</h5><div class="language-node line-numbers-mode" data-ext="node"><pre class="language-node"><code>node -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、cmd输入以下命令-修改为淘宝镜像" tabindex="-1"><a class="header-anchor" href="#_3、cmd输入以下命令-修改为淘宝镜像" aria-hidden="true">#</a> 3、cmd输入以下命令，修改为淘宝镜像</h5><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm config set registry http://registry.npm.taobao.org/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看是否修改成功</p><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm config ls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.2.3.png" alt="配置node.js" tabindex="0" loading="lazy"><figcaption>配置node.js</figcaption></figure><p>1.9.2.4、修改node.js全局包安装位置</p><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm config set prefix &quot;A:/nodejs/npm_global&quot;
npm config set cache &quot;A:/nodejs/npm_cache&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>出错了，在那个位置创建npm_global文件夹和npm_cache文件夹即可</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.2.4.1.png" alt="创建npm_global文件夹和npm_cache文件夹" tabindex="0" loading="lazy"><figcaption>创建npm_global文件夹和npm_cache文件夹</figcaption></figure><p>查看是否修改成功</p><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm config ls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.2.4.2.png" alt="查看是否修改成功" tabindex="0" loading="lazy"><figcaption>查看是否修改成功</figcaption></figure><h4 id="_1-9-3、下载依赖" tabindex="-1"><a class="header-anchor" href="#_1-9-3、下载依赖" aria-hidden="true">#</a> 1.9.3、下载依赖</h4><h5 id="_1、在vs-code控制台输入npm-install命令" tabindex="-1"><a class="header-anchor" href="#_1、在vs-code控制台输入npm-install命令" aria-hidden="true">#</a> 1、在VS Code控制台输入npm install命令</h5><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>npm包管理工具会根据package.json配置文件下载对应的包，放在node_moudules目录下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.3.1.png" alt="npm包管理工具会根据package.json配置文件下载对应的包，放在node_moudules目录下" tabindex="0" loading="lazy"><figcaption>npm包管理工具会根据package.json配置文件下载对应的包，放在node_moudules目录下</figcaption></figure><h5 id="_2、python报错" tabindex="-1"><a class="header-anchor" href="#_2、python报错" aria-hidden="true">#</a> 2、python报错😡</h5><p>可以看到python报错，很明显我python版本太高了</p><p><strong>ps:如果没有python，安装python2.7就行了</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.3.2.png" alt="如果没有python，安装python2.7就行了" tabindex="0" loading="lazy"><figcaption>如果没有python，安装python2.7就行了</figcaption></figure><h5 id="_3、安装windows-build-tools" tabindex="-1"><a class="header-anchor" href="#_3、安装windows-build-tools" aria-hidden="true">#</a> 3、安装windows-build-tools</h5><p>以管理员身份运行VS Code，输入以下命令</p><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm install --global --production windows-build-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到该命令会安装python2.7</p><p>如果没有以管理员身份运行会提示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Please restart thie script from a administrative PowerShell!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.3.3.png" alt="安装windows-build-tools" tabindex="0" loading="lazy"><figcaption>安装windows-build-tools</figcaption></figure><h5 id="_4、安装no5de-gyp" tabindex="-1"><a class="header-anchor" href="#_4、安装no5de-gyp" aria-hidden="true">#</a> 4、安装no5de-gyp</h5><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm install --global node-gyp 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.3.4.png" alt="安装no5de-gyp" tabindex="0" loading="lazy"><figcaption>安装no5de-gyp</figcaption></figure><h5 id="_5、卸载安装失败的包" tabindex="-1"><a class="header-anchor" href="#_5、卸载安装失败的包" aria-hidden="true">#</a> 5、卸载安装失败的包</h5><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm uninstall node-sass
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6、然后重新安装" tabindex="-1"><a class="header-anchor" href="#_6、然后重新安装" aria-hidden="true">#</a> 6、然后重新安装</h5><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm install sass -i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_7、chromedriver错误" tabindex="-1"><a class="header-anchor" href="#_7、chromedriver错误" aria-hidden="true">#</a> 7、chromedriver错误😠</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.3.7.1.png" alt="又报了一个新的错误" tabindex="0" loading="lazy"><figcaption>又报了一个新的错误</figcaption></figure><p><code>npm install</code> 安装依赖出现 chromedriver 之类的问题，先在项目运行以下命令</p><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.3.7.2.png" alt="image-20220416175907204" tabindex="0" loading="lazy"><figcaption>image-20220416175907204</figcaption></figure><p>再运行以下命令,指定python版本</p><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm install --python=python2.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者直接修改npm的python版本设置</p><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm config set python python2.7
npm install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到已经不报错了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.3.7.3.png" alt="可以看到已经不报错了" tabindex="0" loading="lazy"><figcaption>可以看到已经不报错了</figcaption></figure><h4 id="_1-9-4、运行前端项目" tabindex="-1"><a class="header-anchor" href="#_1-9-4、运行前端项目" aria-hidden="true">#</a> 1.9.4、运行前端项目</h4><p>先运行后端项目，再运行前端项目</p><h5 id="_1、执行以下命令运行前端项目" tabindex="-1"><a class="header-anchor" href="#_1、执行以下命令运行前端项目" aria-hidden="true">#</a> 1、执行以下命令运行前端项目</h5><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、有6处编译错误" tabindex="-1"><a class="header-anchor" href="#_2、有6处编译错误" aria-hidden="true">#</a> 2、有6处编译错误😡</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.4.2.png" alt="又报错了" tabindex="0" loading="lazy"><figcaption>又报错了</figcaption></figure><h6 id="_1、执行以下命令即可" tabindex="-1"><a class="header-anchor" href="#_1、执行以下命令即可" aria-hidden="true">#</a> 1、执行以下命令即可</h6><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm uninstall --save node-sass
npm install --save node-sass
npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、vs版本问题" tabindex="-1"><a class="header-anchor" href="#_2、vs版本问题" aria-hidden="true">#</a> 2、VS版本问题😡</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>could not use PowerShell to find Visual Studio 2017 or newer, try re-running with &#39;--loglevel silly&#39; for more details
无法使用Power Shell查找Visual Studio 2017或更新，请尝试使用“ -loglevel Silly”重新运行，以获取更多详细信息
You need to install the latest version of Visual Studio        
find VS including the &quot;Desktop development with C++&quot; workload.
您需要安装最新版本的Visual Studio查找VS，包括“带有C ++的桌面开发”工作负载。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.4.2.2.png" alt="之后又报了这个错" tabindex="0" loading="lazy"><figcaption>之后又报了这个错</figcaption></figure><h5 id="_3、设置msvs-version版本" tabindex="-1"><a class="header-anchor" href="#_3、设置msvs-version版本" aria-hidden="true">#</a> 3、设置msvs_version版本</h5><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm config set msvs_version 2019
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4、发现又回到1-9-4-2这个错了" tabindex="-1"><a class="header-anchor" href="#_4、发现又回到1-9-4-2这个错了" aria-hidden="true">#</a> 4、发现又回到1.9.4.2这个错了</h5><h5 id="_5、再执行1-9-4-2-1的命令-就好了" tabindex="-1"><a class="header-anchor" href="#_5、再执行1-9-4-2-1的命令-就好了" aria-hidden="true">#</a> 5、再执行1.9.4.2.1的命令，就好了</h5><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code>npm uninstall --save node-sass
npm install --save node-sass
npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-9-5、没有验证码" tabindex="-1"><a class="header-anchor" href="#_1-9-5、没有验证码" aria-hidden="true">#</a> 1.9.5、没有验证码😡</h4><h5 id="_1、没有验证码" tabindex="-1"><a class="header-anchor" href="#_1、没有验证码" aria-hidden="true">#</a> 1、没有验证码</h5><p>没有验证码是因为我使用的是资料提供的代码，而不是renren-fast-vue</p><p>renren-fast-vue没有这个问题，而资料提供的是请求给了网关(88端口)</p><p>所有没有看到验证码（一定要使用renren-fast-vue，不要使用资料提供的，除非不想学前端）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.5.1.png" alt="没有验证码" tabindex="0" loading="lazy"><figcaption>没有验证码</figcaption></figure><h5 id="_2、查看请求" tabindex="-1"><a class="header-anchor" href="#_2、查看请求" aria-hidden="true">#</a> 2、查看请求</h5><p>查看请求可以看到，请求的路径localhost:88/api</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.5.2.png" alt="请求的路径localhost:88/api" tabindex="0" loading="lazy"><figcaption>请求的路径localhost:88/api</figcaption></figure><h5 id="_3、-查看后台" tabindex="-1"><a class="header-anchor" href="#_3、-查看后台" aria-hidden="true">#</a> 3、 查看后台</h5><p>而后台的路径为localhost:8080/renren-fast</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.5.3.png" alt="后台的路径为localhost:8080/renren-fast" tabindex="0" loading="lazy"><figcaption>后台的路径为localhost:8080/renren-fast</figcaption></figure><h5 id="_4、修改前台请求路径" tabindex="-1"><a class="header-anchor" href="#_4、修改前台请求路径" aria-hidden="true">#</a> 4、修改前台请求路径</h5><p>将前端请求路径改为</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//localhost:8080/renren-fast</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.5.4.png" alt="修改前端请求路径" tabindex="0" loading="lazy"><figcaption>修改前端请求路径</figcaption></figure><h5 id="_5、查看结果" tabindex="-1"><a class="header-anchor" href="#_5、查看结果" aria-hidden="true">#</a> 5、查看结果</h5><p>可以看到有验证码了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.9.5.5.png" alt="可以看到有验证码了" tabindex="0" loading="lazy"><figcaption>可以看到有验证码了</figcaption></figure><p>用户名和密码都为admin</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ps:如果不是这个问题，先启动后端，再启动前端，另外再看看数据库是不是连不上</p><h2 id="_1-10、生成后端代码" tabindex="-1"><a class="header-anchor" href="#_1-10、生成后端代码" aria-hidden="true">#</a> 1.10、生成后端代码</h2>`,564),f={id:"_1-10-1、下载人人开源的renren-generator",tabindex:"-1"},y=a("a",{class:"header-anchor",href:"#_1-10-1、下载人人开源的renren-generator","aria-hidden":"true"},"#",-1),x={href:"https://gitee.com/renrenio/renren-generator",target:"_blank",rel:"noopener noreferrer"},_=e(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.1.png" alt="下载人人开源的renren-generator" tabindex="0" loading="lazy"><figcaption>下载人人开源的renren-generator</figcaption></figure><h4 id="_1-10-2、解压后复制到项目的根目录" tabindex="-1"><a class="header-anchor" href="#_1-10-2、解压后复制到项目的根目录" aria-hidden="true">#</a> 1.10.2、解压后复制到项目的根目录</h4><p>📌根目录单击右键，选择Show in Explorer可以查看根目录</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.2.png" alt="选择Show in Explorer可以查看根目录" style="zoom:40%;"><p>如果renren-generator的pom文件为赤红色，单击右键pom文件,选择Add as Maven Project</p><p>如过pom文件<code>&lt;project&gt;</code>标签报错</p><p>,在<code>&lt;parent&gt;</code>标签内添加<code>&lt;relativePath/&gt;</code>即可</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.2.2.png" alt="在标签内添加" tabindex="0" loading="lazy"><figcaption>在<code>&lt;parent&gt;</code>标签内添加<code>&lt;relativePath/&gt;</code></figcaption></figure><h4 id="_1-10-3、修改mysql" tabindex="-1"><a class="header-anchor" href="#_1-10-3、修改mysql" aria-hidden="true">#</a> 1.10.3、修改mysql</h4><p>修改renren-generator模块下的application.yml文件内的mysql的url,username,password</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.3.png" alt="修改mysql" tabindex="0" loading="lazy"><figcaption>修改mysql</figcaption></figure><h4 id="_1-10-4、修改代码生成器配置" tabindex="-1"><a class="header-anchor" href="#_1-10-4、修改代码生成器配置" aria-hidden="true">#</a> 1.10.4、修改代码生成器配置</h4><p>修改renren-generator模块下的generator.properties文件内的配置</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.4.1.png" alt="修改代码生成器配置" tabindex="0" loading="lazy"><figcaption>修改代码生成器配置</figcaption></figure><p>发现注释出现了#\\u5503这种的，编码为GBK，且不可修改</p><p>在Files--&gt;Settings里找到File Encodings,修改Properties Files默认字符编码</p><p>并勾选Transparent native-to-ascii conversion，将原来的gbk编码的文件转为utf-8编码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.4.2.png" alt="将原来的gbk编码的文件转为utf-8编码" tabindex="0" loading="lazy"><figcaption>将原来的gbk编码的文件转为utf-8编码</figcaption></figure><p>发现空文件夹默认在同一行，在项目设置里取消勾选Compact Middle Packages</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.4.3.png" alt="取消勾选Compact Middle Packages" tabindex="0" loading="lazy"><figcaption>取消勾选Compact Middle Packages</figcaption></figure><p>可以发现gulimall_pms都是以pms_开头的</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.4.4.png" alt="gulimall_pms都是以pms_开头的" style="zoom:50%;"><p>因此修改成这样</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">mainPath</span><span class="token punctuation">=</span><span class="token value attr-value">com.atguigu</span>
<span class="token key attr-name">package</span><span class="token punctuation">=</span><span class="token value attr-value">com.atguigu.gulimall</span>
<span class="token key attr-name">moduleName</span><span class="token punctuation">=</span><span class="token value attr-value">product</span>
<span class="token key attr-name">author</span><span class="token punctuation">=</span><span class="token value attr-value">作者</span>
<span class="token key attr-name">email</span><span class="token punctuation">=</span><span class="token value attr-value">你的邮箱</span>
<span class="token key attr-name">tablePrefix</span><span class="token punctuation">=</span><span class="token value attr-value">pms_</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.4.5.png" alt="修改成这样" tabindex="0" loading="lazy"><figcaption>修改成这样</figcaption></figure><h4 id="_1-10-5、修改模板" tabindex="-1"><a class="header-anchor" href="#_1-10-5、修改模板" aria-hidden="true">#</a> 1.10.5、修改模板</h4><p>在resources/template的 Controller.java.vm文件内去掉使用shrio框架的部分(6处)，后续会使用Spring Security</p><p>可以使用<code>ctrl+F</code>搜索RequiresPermissions查找</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.5.png" alt="修改模板" tabindex="0" loading="lazy"><figcaption>修改模板</figcaption></figure><h4 id="_1-10-6、运行项目" tabindex="-1"><a class="header-anchor" href="#_1-10-6、运行项目" aria-hidden="true">#</a> 1.10.6、运行项目</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.6.png" alt="运行项目" tabindex="0" loading="lazy"><figcaption>运行项目</figcaption></figure><h4 id="_1-10-7、生成代码" tabindex="-1"><a class="header-anchor" href="#_1-10-7、生成代码" aria-hidden="true">#</a> 1.10.7、生成代码</h4><p>浏览器输入localhost:80</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.7.png" alt="生成代码" tabindex="0" loading="lazy"><figcaption>生成代码</figcaption></figure><h4 id="_1-10-8、复制文件" tabindex="-1"><a class="header-anchor" href="#_1-10-8、复制文件" aria-hidden="true">#</a> 1.10.8、复制文件</h4><p>将生成的main复制到gulimall_product的src目录下</p><p><strong>生成的文件最好都保存，其他文件后面也会用到的</strong></p><p>点击模块，单击右键--&gt; Show in Explorer可以打开该模块所在位置</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.8.0.png" alt=" Show in Explorer可以打开该模块所在位置" style="zoom:50%;"><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.8.1.png" alt="将生成的main复制到gulimall_product的src目录下" tabindex="0" loading="lazy"><figcaption>将生成的main复制到gulimall_product的src目录下</figcaption></figure><p>resources下的src生成的是vue文件，用不到，删除resources下的src即可</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.8.2.png" alt="除resources下的src" style="zoom:50%;"><p>没有static和templates也不要紧，里面也没有文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.8.3.png" alt="没有static和templates也不要紧" tabindex="0" loading="lazy"><figcaption>没有static和templates也不要紧</figcaption></figure><h4 id="_1-10-9、可以看到报了很多错误" tabindex="-1"><a class="header-anchor" href="#_1-10-9、可以看到报了很多错误" aria-hidden="true">#</a> 1.10.9、可以看到报了很多错误😡</h4><h5 id="_1、controller、dao、entity、service报错" tabindex="-1"><a class="header-anchor" href="#_1、controller、dao、entity、service报错" aria-hidden="true">#</a> 1、controller、dao、entity、service报错</h5><p>ps:这个注释乱码了是因为执行的运行sql文件，导致表里面中文乱码，生成的代码注释也乱码了，后来我又重新执行的sql语句</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.1.png" alt="controller、dao、entity、service报错" tabindex="0" loading="lazy"><figcaption>controller、dao、entity、service报错</figcaption></figure><h5 id="_2、新建com-atguigu-common模块" tabindex="-1"><a class="header-anchor" href="#_2、新建com-atguigu-common模块" aria-hidden="true">#</a> 2、新建com.atguigu.common模块</h5><p>父项目gulimall单击右键 --&gt;New --&gt; Moudle --&gt; maven --&gt; next --&gt; com.atguigu.common --&gt; Finish</p><p>让gulimall-product模块依赖common模块,刷新一下</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.0.png" alt="让gulimall-product模块依赖common模块" tabindex="0" loading="lazy"><figcaption>让gulimall-product模块依赖common模块</figcaption></figure><h5 id="_3、解决entity报错" tabindex="-1"><a class="header-anchor" href="#_3、解决entity报错" aria-hidden="true">#</a> 3、解决entity报错</h5><h6 id="_1、可以看到有lombox和mybatis-plus注解" tabindex="-1"><a class="header-anchor" href="#_1、可以看到有lombox和mybatis-plus注解" aria-hidden="true">#</a> 1、可以看到有lombox和mybatis plus注解</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.3.1.png" alt="可以看到有lombox和mybatis plus注解" tabindex="0" loading="lazy"><figcaption>可以看到有lombox和mybatis plus注解</figcaption></figure><h6 id="_2、添加lombox和mybatis-plus依赖" tabindex="-1"><a class="header-anchor" href="#_2、添加lombox和mybatis-plus依赖" aria-hidden="true">#</a> 2、添加lombox和mybatis plus依赖</h6><p><strong>需要下载lombox插件才能生成get，set，toString等方法</strong></p><p>可以看到添加依赖后，gulimall-product模块下的entity不报错了</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.3.2.png" alt="添加lombox和mybatis plus依赖" tabindex="0" loading="lazy"><figcaption>添加lombox和mybatis plus依赖</figcaption></figure><h5 id="_4、解决dao报错" tabindex="-1"><a class="header-anchor" href="#_4、解决dao报错" aria-hidden="true">#</a> 4、解决dao报错</h5><p>dao层只用到的@Mapper注解，在解决entity层报错时，已经添加了mybatis plus</p><h5 id="_5、解决service报错" tabindex="-1"><a class="header-anchor" href="#_5、解决service报错" aria-hidden="true">#</a> 5、解决service报错</h5><h6 id="_1、service少了公共模块中的pageutils类" tabindex="-1"><a class="header-anchor" href="#_1、service少了公共模块中的pageutils类" aria-hidden="true">#</a> 1、service少了公共模块中的PageUtils类</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.1.png" alt="service少了公共模块中的PageUtils类" tabindex="0" loading="lazy"><figcaption>service少了公共模块中的PageUtils类</figcaption></figure><h6 id="_2、复制pageutils类" tabindex="-1"><a class="header-anchor" href="#_2、复制pageutils类" aria-hidden="true">#</a> 2、复制PageUtils类</h6><p>将reren-fast模块里common/utils下的PageUtils类复制到gulimall-common里面</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.2.png" alt="复制PageUtils类" style="zoom:50%;"><h6 id="_3、service少了公共模块中的query类" tabindex="-1"><a class="header-anchor" href="#_3、service少了公共模块中的query类" aria-hidden="true">#</a> 3、service少了公共模块中的Query类</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.3.png" alt="service少了公共模块中的Query类" tabindex="0" loading="lazy"><figcaption>service少了公共模块中的Query类</figcaption></figure><h6 id="_4、复制query类" tabindex="-1"><a class="header-anchor" href="#_4、复制query类" aria-hidden="true">#</a> 4、复制Query类</h6><p>将reren-fast模块里common/utils下的Query类复制到gulimall-common里面</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.4.png" alt="复制Query类" style="zoom:50%;"><h6 id="_5、缺少sqlfiler和stringutils" tabindex="-1"><a class="header-anchor" href="#_5、缺少sqlfiler和stringutils" aria-hidden="true">#</a> 5、缺少SQLFiler和StringUtils</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.5.png" alt="缺少SQLFiler和StringUtils" tabindex="0" loading="lazy"><figcaption>缺少SQLFiler和StringUtils</figcaption></figure><h6 id="_6、复制sqlfilter类" tabindex="-1"><a class="header-anchor" href="#_6、复制sqlfilter类" aria-hidden="true">#</a> 6、复制SQLFilter类</h6><p>将reren-fast模块里common/xss下的SQLFilter类复制到gulimall-common里面</p><p><strong>ps:这里的SQLFilter复制错位置了,其实问题也不大，后面移动一下位置就行了</strong></p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.6.png" alt="复制SQLFilter类" style="zoom:50%;"><h6 id="_7、去掉import-io-renren-common-xss-sqlfilter" tabindex="-1"><a class="header-anchor" href="#_7、去掉import-io-renren-common-xss-sqlfilter" aria-hidden="true">#</a> 7、去掉<code>import io.renren.common.xss.SQLFilter;</code></h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.7.png" alt="去掉import io.renren.common.xss.SQLFilter" tabindex="0" loading="lazy"><figcaption>去掉import io.renren.common.xss.SQLFilter</figcaption></figure><h6 id="_8、添加common-lang依赖" tabindex="-1"><a class="header-anchor" href="#_8、添加common-lang依赖" aria-hidden="true">#</a> 8、添加common-lang依赖</h6><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.8.png" alt="添加common-lang依赖" tabindex="0" loading="lazy"><figcaption>添加common-lang依赖</figcaption></figure><h6 id="_9、缺少constant" tabindex="-1"><a class="header-anchor" href="#_9、缺少constant" aria-hidden="true">#</a> 9、缺少Constant</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.9.png" alt="缺少Constant" tabindex="0" loading="lazy"><figcaption>缺少Constant</figcaption></figure><h6 id="_10、复制constant类" tabindex="-1"><a class="header-anchor" href="#_10、复制constant类" aria-hidden="true">#</a> 10、复制Constant类</h6><p>将reren-fast模块里common/utils下的Constant类复制到gulimall-common里面</p><p>可以看到Querey不报错了</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.10.png" alt="复制Constant类" style="zoom:50%;"><h6 id="_11、缺少rrexception" tabindex="-1"><a class="header-anchor" href="#_11、缺少rrexception" aria-hidden="true">#</a> 11、缺少RRException😠</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.11.png" alt="缺少RRException" tabindex="0" loading="lazy"><figcaption>缺少RRException</figcaption></figure><h6 id="_12、复制rrexception类" tabindex="-1"><a class="header-anchor" href="#_12、复制rrexception类" aria-hidden="true">#</a> 12、复制RRException类</h6><p>将reren-fast模块里common/exception下的RRException类复制到gulimall-common里面</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.12.png" alt="复制RRException类" style="zoom:50%;"><h6 id="_13、替换导入的类" tabindex="-1"><a class="header-anchor" href="#_13、替换导入的类" aria-hidden="true">#</a> 13、替换导入的类</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>renren<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">RRException</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>替换为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">RRException</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.13.png" alt="替换导入的类" tabindex="0" loading="lazy"><figcaption>替换导入的类</figcaption></figure><h6 id="_14、可以看到service层已经不报错了" tabindex="-1"><a class="header-anchor" href="#_14、可以看到service层已经不报错了" aria-hidden="true">#</a> 14、可以看到service层已经不报错了</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.5.14.png" alt="可以看到service层已经不报错了" tabindex="0" loading="lazy"><figcaption>可以看到service层已经不报错了</figcaption></figure><h5 id="_6、解决controller报错" tabindex="-1"><a class="header-anchor" href="#_6、解决controller报错" aria-hidden="true">#</a> 6、解决controller报错</h5><h6 id="_1、缺少r类" tabindex="-1"><a class="header-anchor" href="#_1、缺少r类" aria-hidden="true">#</a> 1、缺少R类</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.6.1.png" alt="缺少R类" tabindex="0" loading="lazy"><figcaption>缺少R类</figcaption></figure><h6 id="_2、导入r类" tabindex="-1"><a class="header-anchor" href="#_2、导入r类" aria-hidden="true">#</a> 2、导入R类</h6><p>把renren-fast模块的common/utils的R复制到com.atguigu.common模块</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.6.2.png" alt="导入R类" style="zoom:50%;"><h6 id="_3、r报错-没有httpstatus" tabindex="-1"><a class="header-anchor" href="#_3、r报错-没有httpstatus" aria-hidden="true">#</a> 3、R报错,没有HttpStatus😠</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.6.3.png" alt="R报错,没有HttpStatus" tabindex="0" loading="lazy"><figcaption>R报错,没有HttpStatus</figcaption></figure><h6 id="_4、添加httpcore" tabindex="-1"><a class="header-anchor" href="#_4、添加httpcore" aria-hidden="true">#</a> 4、添加httpcore</h6><p>HttpStatus为httpcore依赖下的</p><p>pom中添加依赖，刷新以下，可以发现R不报错了</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>httpcore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.6.5.png" alt="添加httpcore" tabindex="0" loading="lazy"><figcaption>添加httpcore</figcaption></figure><h5 id="_7、可以发现都不报错了" tabindex="-1"><a class="header-anchor" href="#_7、可以发现都不报错了" aria-hidden="true">#</a> 7、可以发现都不报错了**😄**</h5><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.7.png" alt="可以发现都不报错了" style="zoom:50%;"><h5 id="_8、点开测试类-发现报错" tabindex="-1"><a class="header-anchor" href="#_8、点开测试类-发现报错" aria-hidden="true">#</a> 8、点开测试类，发现报错</h5><p>这个错误的主要原因是</p><p>在Spring Boot 2.2.X以后使用Junit5导的包为<code>import org.junit.jupiter.api.Test</code></p><p>在Spring Boot 2.2.x之前使用Junit4导的包为<code>import org.junit.Test</code></p><p>新建模块使用的是Spring Initializr,默认的版本为2.6.6，我后来又手动修改为的2.1.8.RELEASE</p><p>这个junit5版本的，测试类不是public类型的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.8.1.png" alt="点开测试类，发现报错" tabindex="0" loading="lazy"><figcaption>点开测试类，发现报错</figcaption></figure><p>可以复制提供的源代码，变为2.1.8.RELEASE版本的测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallProductApplicationTests</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.8.2.png" alt="可以复制提供的源代码，变为2.1.8.RELEASE版本的测试类" tabindex="0" loading="lazy"><figcaption>可以复制提供的源代码，变为2.1.8.RELEASE版本的测试类</figcaption></figure><p>或者引入一下依赖</p><p><strong>version设成5.4.0设置数据源后启动的时候会报错</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.8.3.png" alt="或者引入一下依赖" tabindex="0" loading="lazy"><figcaption>或者引入一下依赖</figcaption></figure><h5 id="_9、运行后-发现没有配datasource" tabindex="-1"><a class="header-anchor" href="#_9、运行后-发现没有配datasource" aria-hidden="true">#</a> 9、运行后，发现没有配DataSource</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.9.0.png" alt="运行后，发现没有配DataSource" tabindex="0" loading="lazy"><figcaption>运行后，发现没有配DataSource</figcaption></figure><p>这里不用管这个错误，后期配置文件还会配其它的，到时候一起配置，也可以先配置</p><h6 id="_1、在gulimall-common模块添加依赖" tabindex="-1"><a class="header-anchor" href="#_1、在gulimall-common模块添加依赖" aria-hidden="true">#</a> 1、在gulimall-common模块添加依赖</h6><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.9.1.png" alt="在gulimall-common模块添加依赖" tabindex="0" loading="lazy"><figcaption>在gulimall-common模块添加依赖</figcaption></figure><h6 id="_2、在启动类添加组件扫描注解" tabindex="-1"><a class="header-anchor" href="#_2、在启动类添加组件扫描注解" aria-hidden="true">#</a> 2、在启动类添加组件扫描注解</h6><p>在gulimall-product模块启动类添加组件扫描注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.gulimall.product.dao&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.9.2.1.png" alt="在gulimall-product模块启动类添加组件扫描注解" tabindex="0" loading="lazy"><figcaption>在gulimall-product模块启动类添加组件扫描注解</figcaption></figure><p>ps:可以点击com/atguigu/gulimall/product下的dao包--&gt;单击右键 -- &gt; Copy Reference 或者使用Ctrl + Alt + Shift + C 拷贝全包名</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.9.2.2.png" alt="拷贝全包名" tabindex="0" loading="lazy"><figcaption>拷贝全包名</figcaption></figure><h6 id="_3、配置数据源和端口" tabindex="-1"><a class="header-anchor" href="#_3、配置数据源和端口" aria-hidden="true">#</a> 3、配置数据源和端口</h6><p>在gulimall-product模块的application.yml中配置数据源和端口</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall_pms<span class="token punctuation">?</span>useSSL=false
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token important">*:/mapper/**/*.xml</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.9.3.png" alt="配置数据源和端口" tabindex="0" loading="lazy"><figcaption>配置数据源和端口</figcaption></figure><h6 id="_4、运行项目" tabindex="-1"><a class="header-anchor" href="#_4、运行项目" aria-hidden="true">#</a> 4、运行项目</h6><p>运行后发现不报错了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.9.4.png" alt="运行项目" tabindex="0" loading="lazy"><figcaption>运行项目</figcaption></figure><p><strong>ps:后面发现SQLFilter复制错位置了，移动一下就好了</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.9.5.png" alt="SQLFilter复制错位置了" tabindex="0" loading="lazy"><figcaption>SQLFilter复制错位置了</figcaption></figure><p>我第二次生成代码(表的注释乱码了，又重新执行的sql语句，重新生成代码)</p><p>的时候没有gulimall-product的启动类<code>GulimallProductApplication</code>(第一次生成的有)</p><p>后面新建了一个<code>GulimallProductApplication</code>启动类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.9.9.6.png" alt="后面新建了一个GulimallProductApplication启动类" tabindex="0" loading="lazy"><figcaption>后面新建了一个GulimallProductApplication启动类</figcaption></figure><h4 id="_1-10-10、生成其他模块代码" tabindex="-1"><a class="header-anchor" href="#_1-10-10、生成其他模块代码" aria-hidden="true">#</a> 1.10.10、生成其他模块代码</h4><table><thead><tr><th>项目名</th><th>模块名</th><th>数据库名</th><th>表前缀</th></tr></thead><tbody><tr><td>gulimall-coupon</td><td>coupon</td><td>gulimall_sms</td><td>sms_</td></tr><tr><td>gulimall-member</td><td>member</td><td>gulimall_ums</td><td>ums_</td></tr><tr><td>gulimall-order</td><td>order</td><td>gulimall_oms</td><td>oms_</td></tr><tr><td>gulimall-product(刚刚已经生成了，不用再次生成)</td><td>product</td><td>gulimall_pms</td><td>pms_</td></tr><tr><td>gulimall-ware</td><td>ware</td><td>gulimall_wms</td><td>wms_</td></tr></tbody></table><h5 id="_1、修改数据库" tabindex="-1"><a class="header-anchor" href="#_1、修改数据库" aria-hidden="true">#</a> 1、修改数据库</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.10.1.png" alt="修改数据库" tabindex="0" loading="lazy"><figcaption>修改数据库</figcaption></figure><h5 id="_2、修改模块名、表前缀" tabindex="-1"><a class="header-anchor" href="#_2、修改模块名、表前缀" aria-hidden="true">#</a> 2、修改模块名、表前缀</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.10.2.png" alt="修改模块名、表前缀" tabindex="0" loading="lazy"><figcaption>修改模块名、表前缀</figcaption></figure><h5 id="_3、修改test测试类" tabindex="-1"><a class="header-anchor" href="#_3、修改test测试类" aria-hidden="true">#</a> 3、修改test测试类</h5><p>将生成的文件复制到对应模块后，可以修改test测试类</p><p>修改为junit4</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product</span><span class="token punctuation">;</span>			<span class="token comment">//改动这里的product</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallProductApplicationTests</span> <span class="token punctuation">{</span>	<span class="token comment">//改动这个类名里的Product</span>

	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.10.3.1.png" alt="修改test测试类" tabindex="0" loading="lazy"><figcaption>修改test测试类</figcaption></figure><p>ps:这个测试类导的包和一些其他的模块不一样，我也不知道为什么</p><p>这个类导的包是</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>testng<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其他模块是上面这个，或者是</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.10.3.2.png" alt="这个测试类导的包和一些其他的模块不一样" tabindex="0" loading="lazy"><figcaption>这个测试类导的包和一些其他的模块不一样</figcaption></figure><h5 id="_4、删除resources下的src文件夹" tabindex="-1"><a class="header-anchor" href="#_4、删除resources下的src文件夹" aria-hidden="true">#</a> 4、<s>删除resources下的src文件夹</s></h5><p><strong><s>resources下的src文件夹为vue文件，后续用不到，删除即可</s></strong></p><p><strong>一定不要删，可以复制到其他地方，再把这个项目里面的删掉</strong></p><p><strong>一定不要删，可以复制到其他地方，再把这个项目里面的删掉</strong></p><p><strong>一定不要删，可以复制到其他地方，再把这个项目里面的删掉</strong></p><p>这些文件后面会用到的，最好都不要删，先保存好</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.10.4.png" alt="删除resources下的src文件夹" tabindex="0" loading="lazy"><figcaption>删除resources下的src文件夹</figcaption></figure><h5 id="_5、修改数据库名和端口" tabindex="-1"><a class="header-anchor" href="#_5、修改数据库名和端口" aria-hidden="true">#</a> 5、修改数据库名和端口</h5><p>修改对应模块的dao层的全包名</p><p>ps:可以点击对应模块下的dao包--&gt;单击右键 -- &gt; Copy Reference 或者使用Ctrl + Alt + Shift + C 拷贝全包名</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.10.5.png" alt="修改数据库名和端口" tabindex="0" loading="lazy"><figcaption>修改数据库名和端口</figcaption></figure><h5 id="_6、修改配置文件-1" tabindex="-1"><a class="header-anchor" href="#_6、修改配置文件-1" aria-hidden="true">#</a> 6、修改配置文件</h5><p>修改数据库名和端口</p><table><thead><tr><th>项目名</th><th>数据库名</th><th>端口</th></tr></thead><tbody><tr><td>gulimall-coupon</td><td>gulimall_sms</td><td>7000</td></tr><tr><td>gulimall-member</td><td>gulimall_ums</td><td>8000</td></tr><tr><td>gulimall-order</td><td>gulimall_oms</td><td>9000</td></tr><tr><td>gulimall-ware</td><td>gulimall_wms</td><td>11000</td></tr></tbody></table><p>ps:模块端口从上到下，依次加1000(gulimall-product已经配过端口，为10000)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.10.6.1.png" alt="模块端口从上到下，依次加1000" tabindex="0" loading="lazy"><figcaption>模块端口从上到下，依次加1000</figcaption></figure><h5 id="_7、测试各模块" tabindex="-1"><a class="header-anchor" href="#_7、测试各模块" aria-hidden="true">#</a> 7、测试各模块</h5><p>浏览器运行各自的url，测试是否配置正确</p><table><thead><tr><th>模块名</th><th>测试url</th></tr></thead><tbody><tr><td>gulimall-coupon</td><td>http://localhost:7000/coupon/coupon/list</td></tr><tr><td>gulimall-member</td><td>http://localhost:8000/member/growthchangehistory/list</td></tr><tr><td>gulimall-order</td><td>http://localhost:9000/order/order/list</td></tr><tr><td>gulimall-product</td><td>http://localhost:10000/product/attrattrgrouprelation/list</td></tr><tr><td>gulimall-ware</td><td>http://localhost:11000/ware/purchase/list</td></tr></tbody></table><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.10.7.png" alt="测试各模块" tabindex="0" loading="lazy"><figcaption>测试各模块</figcaption></figure><h4 id="_1-10-11、gulimall-ware模块报错" tabindex="-1"><a class="header-anchor" href="#_1-10-11、gulimall-ware模块报错" aria-hidden="true">#</a> 1.10.11、gulimall-ware模块报错</h4><p>gulimall-ware模块下的<code>com.atguigu.gulimall.ware.entity.UndoLogEntity</code>类中的<code>rollbackInfo</code>返回类型报错</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.11.1.png" alt="gulimall-ware模块报错" tabindex="0" loading="lazy"><figcaption>gulimall-ware模块报错</figcaption></figure><p>查看数据库发现rollbackInfo类型为<code>longblob</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.11.2.png" alt="查看数据库发现rollbackInfo类型为longblob" tabindex="0" loading="lazy"><figcaption>查看数据库发现rollbackInfo类型为longblob</figcaption></figure><p>经查，数据库中longblob类型对应java的byte[]类型</p><p>ps:头一次听说这个类型</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1.10.11.3.png" alt="数据库中longblob类型对应java的byte[]类型" tabindex="0" loading="lazy"><figcaption>数据库中longblob类型对应java的byte[]类型</figcaption></figure><p>或者可以把gulimall_wms的undo_log表删掉，重新生成一下就行了(提供的源代码没有这个类)</p><h1 id="二、后端分布式学习" tabindex="-1"><a class="header-anchor" href="#二、后端分布式学习" aria-hidden="true">#</a> 二、后端分布式学习</h1><h2 id="_2-1、整合myabatis-plus" tabindex="-1"><a class="header-anchor" href="#_2-1、整合myabatis-plus" aria-hidden="true">#</a> 2.1、整合Myabatis-plus</h2>`,205),q={href:"https://baomidou.com/pages/24112f/",target:"_blank",rel:"noopener noreferrer"},w=a("h4",{id:"_2-1-1、导入依赖",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_2-1-1、导入依赖","aria-hidden":"true"},"#"),n(" 2.1.1、导入依赖")],-1),z=a("p",null,"可以在common模块里面导入这两个依赖",-1),j=a("h5",{id:"_1、导入mysql依赖",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1、导入mysql依赖","aria-hidden":"true"},"#"),n(" 1、导入mysql依赖")],-1),S={href:"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html",target:"_blank",rel:"noopener noreferrer"},E=e(`<p>可以发现8.0版本依赖全适配</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.1.1.1.png" alt="各依赖支持情况" tabindex="0" loading="lazy"><figcaption>各依赖支持情况</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、导入mybatis-plus依赖" tabindex="-1"><a class="header-anchor" href="#_2、导入mybatis-plus依赖" aria-hidden="true">#</a> 2、导入mybatis-plus依赖</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新一下就好了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.1.1.2.png" alt="导入mybatis-plus依赖" tabindex="0" loading="lazy"><figcaption>导入mybatis-plus依赖</figcaption></figure><h4 id="_2-1-2、配置" tabindex="-1"><a class="header-anchor" href="#_2-1-2、配置" aria-hidden="true">#</a> 2.1.2、配置</h4><h5 id="_1、配置数据源" tabindex="-1"><a class="header-anchor" href="#_1、配置数据源" aria-hidden="true">#</a> 1、配置数据源</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.56.10<span class="token punctuation">:</span>3306/gulimall_pms
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、启动类添加mapperscan注解" tabindex="-1"><a class="header-anchor" href="#_2、启动类添加mapperscan注解" aria-hidden="true">#</a> 2、启动类添加MapperScan注解</h5><p>其实不配置也可以</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.gulimall.product.dao&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、配置mapper-xml扫描路径" tabindex="-1"><a class="header-anchor" href="#_3、配置mapper-xml扫描路径" aria-hidden="true">#</a> 3、配置mapper.xml扫描路径</h5><p>默认就是这个</p><p><code>classpath</code> 表示只扫描自己的路径</p><p><code>classpath*</code> 表示不仅扫描自己的路径，还扫描依赖的jar包的路径</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token important">*:/mapper/**/*.xml</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、配置id自增" tabindex="-1"><a class="header-anchor" href="#_4、配置id自增" aria-hidden="true">#</a> 4、配置id自增</h5><p>先配置id自增，后来分库分表的时候再做其他的主键生成策略</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token important">*:/mapper/**/*.xml</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-3、测试一下" tabindex="-1"><a class="header-anchor" href="#_2-1-3、测试一下" aria-hidden="true">#</a> 2.1.3、测试一下</h4><p>这里我使用的是junit5，后来我又改为junit4了(源代码提供的测试类)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.1.3.0.png" alt="测试一下" tabindex="0" loading="lazy"><figcaption>测试一下</figcaption></figure><p>这是改后的测试类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.1.3.0.0.png" alt="改后的测试类" tabindex="0" loading="lazy"><figcaption>改后的测试类</figcaption></figure><h5 id="_1、mysql报错" tabindex="-1"><a class="header-anchor" href="#_1、mysql报错" aria-hidden="true">#</a> 1、mysql报错😠</h5><p>又是SSL的问题</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.1.3.1.png" alt="mysql报错" tabindex="0" loading="lazy"><figcaption>mysql报错</figcaption></figure><h5 id="_2、url添加参数" tabindex="-1"><a class="header-anchor" href="#_2、url添加参数" aria-hidden="true">#</a> 2、url添加参数</h5><p>url后面添加 ?useSSL=false 就行了</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">url</span><span class="token punctuation">:</span> <span class="token value attr-value">jdbc:mysql://192.168.56.10:3306/gulimall_pms?useSSL=false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.1.3.2.png" alt="url添加参数" tabindex="0" loading="lazy"><figcaption>url添加参数</figcaption></figure><h5 id="_3、增改查都测试通过" tabindex="-1"><a class="header-anchor" href="#_3、增改查都测试通过" aria-hidden="true">#</a> 3、增改查都测试通过</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">BrandEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">BrandService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span></span><span class="token class-name">AbstractWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">GulimallProductApplicationTests</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Autowired</span>
	<span class="token class-name">BrandService</span> brandService<span class="token punctuation">;</span>
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">BrandEntity</span> brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		brand<span class="token punctuation">.</span><span class="token function">setDescript</span><span class="token punctuation">(</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		brandService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;保存成功...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">BrandEntity</span> brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		brand<span class="token punctuation">.</span><span class="token function">setBrandId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		brand<span class="token punctuation">.</span><span class="token function">setDescript</span><span class="token punctuation">(</span><span class="token string">&quot;222&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		brandService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;修改成功...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">BrandEntity</span><span class="token operator">::</span><span class="token function">getBrandId</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> brandService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
		list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.1.3.3.png" alt="增改查都测试通过" tabindex="0" loading="lazy"><figcaption>增改查都测试通过</figcaption></figure><h2 id="_2-2、分布式组件" tabindex="-1"><a class="header-anchor" href="#_2-2、分布式组件" aria-hidden="true">#</a> 2.2、分布式组件</h2><p>Spring Clould 官方文档: https://spring.io/projects/spring-cloud</p>`,38),I={href:"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/README-zh.md",target:"_blank",rel:"noopener noreferrer"},V=e('<h4 id="_2-2-1、分布式组件选择" tabindex="-1"><a class="header-anchor" href="#_2-2-1、分布式组件选择" aria-hidden="true">#</a> 2.2.1、分布式组件选择</h4><table><thead><tr><th>功能</th><th>官方组件</th><th>使用组件</th></tr></thead><tbody><tr><td>注册中心 Service Discovery</td><td>Eureka</td><td>Nacos</td></tr><tr><td>配置中心</td><td>Eureka</td><td>Nacos</td></tr><tr><td>网关 Intelligent Routing</td><td>Zuul</td><td></td></tr><tr><td>断路保护 Circuit Breaker</td><td>Hystrix</td><td></td></tr><tr><td>负载均衡</td><td>Ribbon</td><td>Ribbon</td></tr><tr><td>声明式HTTP客户端(远程调用服务)</td><td>OpenFeign</td><td></td></tr><tr><td>限流、熔断、降级</td><td>Hystrix</td><td>Sentinel</td></tr><tr><td>API网关</td><td>Gateway</td><td></td></tr><tr><td>调用链监控</td><td>Sleuth</td><td></td></tr><tr><td>分布式事务</td><td></td><td>Seata</td></tr></tbody></table><h4 id="_2-2-2、版本选择" tabindex="-1"><a class="header-anchor" href="#_2-2-2、版本选择" aria-hidden="true">#</a> 2.2.2、版本选择</h4><p>官方给出的版本选择方案</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.2.1.png" alt="版本选择" tabindex="0" loading="lazy"><figcaption>版本选择</figcaption></figure><p>本项目的Spring Boot版本为2.1.8.RELEASE,因此选择的版本为Spring Clould Alibaba版本为2.1.0.RELEASE</p><h4 id="_2-2-3、使用nacos做注册中心" tabindex="-1"><a class="header-anchor" href="#_2-2-3、使用nacos做注册中心" aria-hidden="true">#</a> 2.2.3、使用nacos做注册中心</h4><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.0.png" alt="image-20220721200423433" style="zoom:50%;">',8),C={href:"https://nacos.io/zh-cn/docs/what-is-nacos.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/readme-zh.md",target:"_blank",rel:"noopener noreferrer"},M=e(`<h5 id="_1、版本管理" tabindex="-1"><a class="header-anchor" href="#_1、版本管理" aria-hidden="true">#</a> 1、版本管理</h5><p>在gulimall-common模块使用<code>dependencyManagement</code>导入<code>spring-cloud-alibaba</code></p><p><code>dependencyManagement</code>中定义的只是依赖的声明，并不实现引入，因此子项目需要显式的声明需要用的依赖。</p><p>在<code>dependencyManagement</code>元素中声明所依赖的jar包的版本号等信息，</p><p>那么所有子项目再次引入此依赖jar包时则无需显式的列出版本号。</p><p>Maven会沿着父子层级向上寻找拥有<code>dependencyManagement</code> 元素的项目，然后使用它指定的版本号。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.1.png" alt="版本管理" tabindex="0" loading="lazy"><figcaption>版本管理</figcaption></figure><h5 id="_2、导入nacos依赖" tabindex="-1"><a class="header-anchor" href="#_2、导入nacos依赖" aria-hidden="true">#</a> 2、导入nacos依赖</h5><p>在gulimall-common模块添加nacos依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.2.png" alt="导入nacos依赖" tabindex="0" loading="lazy"><figcaption>导入nacos依赖</figcaption></figure><h5 id="_3、下载nacos" tabindex="-1"><a class="header-anchor" href="#_3、下载nacos" aria-hidden="true">#</a> 3、下载nacos</h5><p>下载网址: https://github.com/alibaba/nacos/releases?page=3</p><p>压缩包下载地址： https://github.com/alibaba/nacos/releases/download/1.1.3/nacos-server-1.1.3.zip</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.3.png" alt="下载nacos" tabindex="0" loading="lazy"><figcaption>下载nacos</figcaption></figure><h5 id="_4、启动nacos" tabindex="-1"><a class="header-anchor" href="#_4、启动nacos" aria-hidden="true">#</a> 4、启动nacos</h5><p>Windows电脑双击这个</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.4.png" alt="启动nacos" tabindex="0" loading="lazy"><figcaption>启动nacos</figcaption></figure><h5 id="_5、配置server-addr" tabindex="-1"><a class="header-anchor" href="#_5、配置server-addr" aria-hidden="true">#</a> 5、配置server-addr</h5><p>向gulimall-coupon模块的配置文件配置server-addr</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.5.png" alt="配置server-addr" tabindex="0" loading="lazy"><figcaption>配置server-addr</figcaption></figure><h5 id="_6、启动类添加服务发现注解" tabindex="-1"><a class="header-anchor" href="#_6、启动类添加服务发现注解" aria-hidden="true">#</a> 6、启动类添加服务发现注解</h5><p>向gulimall-coupon模块启动类添加服务发现注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableDiscoveryClient</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.6.png" alt="启动类添加服务发现注解" tabindex="0" loading="lazy"><figcaption>启动类添加服务发现注解</figcaption></figure><h5 id="_7、运行模块" tabindex="-1"><a class="header-anchor" href="#_7、运行模块" aria-hidden="true">#</a> 7、运行模块</h5><p>运行模块之前,nacos必须先启动</p><h5 id="_8、查看服务列表" tabindex="-1"><a class="header-anchor" href="#_8、查看服务列表" aria-hidden="true">#</a> 8、查看服务列表</h5><p>浏览器输入网址: http://127.0.0.1:8848/nacos</p><p>用户名和密码都为 nacos</p><p>发现没有服务</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.8.1.png" alt="查看服务列表" tabindex="0" loading="lazy"><figcaption>查看服务列表</figcaption></figure><h5 id="_9、向模块起个应用名" tabindex="-1"><a class="header-anchor" href="#_9、向模块起个应用名" aria-hidden="true">#</a> 9、向模块起个应用名</h5><p>向gulimall-coupon模块的配置文件添加application.name</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">application</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>coupon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.9.png" alt="向模块起个应用名" tabindex="0" loading="lazy"><figcaption>向模块起个应用名</figcaption></figure><h5 id="_10、重新运行模块" tabindex="-1"><a class="header-anchor" href="#_10、重新运行模块" aria-hidden="true">#</a> 10、重新运行模块</h5><p>可以发现已经注册到注册中心了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.3.10.png" alt="重新运行模块" tabindex="0" loading="lazy"><figcaption>重新运行模块</figcaption></figure><p>同理，配置其他模块</p><h4 id="_2-2-4、使用openfeign" tabindex="-1"><a class="header-anchor" href="#_2-2-4、使用openfeign" aria-hidden="true">#</a> 2.2.4、使用OpenFeign</h4><h5 id="_1、服务提供方" tabindex="-1"><a class="header-anchor" href="#_1、服务提供方" aria-hidden="true">#</a> 1、服务提供方</h5><h6 id="_1、导入openfeign依赖" tabindex="-1"><a class="header-anchor" href="#_1、导入openfeign依赖" aria-hidden="true">#</a> 1、导入OpenFeign依赖</h6><p>在gulimall-coupon模块导入OpenFeign依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.1.1.png" alt="使用OpenFeign" tabindex="0" loading="lazy"><figcaption>使用OpenFeign</figcaption></figure><h6 id="_2、编写服务提供者方法" tabindex="-1"><a class="header-anchor" href="#_2、编写服务提供者方法" aria-hidden="true">#</a> 2、编写服务提供者方法</h6><p>在gulimall-coupon模块<code>com.atguigu.gulimall.coupon.controller.CouponController</code>类写测试方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/member/list&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">CouponEntity</span> couponEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CouponEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    couponEntity<span class="token punctuation">.</span><span class="token function">setCouponName</span><span class="token punctuation">(</span><span class="token string">&quot;满100减10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;coupons&quot;</span><span class="token punctuation">,</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>couponEntity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.1.2.png" alt="编写服务提供者方法" tabindex="0" loading="lazy"><figcaption>编写服务提供者方法</figcaption></figure><h5 id="_2、服务消费方" tabindex="-1"><a class="header-anchor" href="#_2、服务消费方" aria-hidden="true">#</a> 2、服务消费方</h5><h6 id="_1、导入openfeign依赖-1" tabindex="-1"><a class="header-anchor" href="#_1、导入openfeign依赖-1" aria-hidden="true">#</a> 1、导入OpenFeign依赖</h6><p>在gulimall-member模块导入OpenFeign依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.1.png" alt="导入OpenFeign依赖" tabindex="0" loading="lazy"><figcaption>导入OpenFeign依赖</figcaption></figure><h6 id="_2、编写一个接口" tabindex="-1"><a class="header-anchor" href="#_2、编写一个接口" aria-hidden="true">#</a> 2、编写一个接口</h6><p>编写一个接口，告诉Spring Clould这个接口需要调用远程服务</p><p>这个接口写调用哪个服务的哪些请求</p><p>在gulimall-member模块下新建一个CouponFeignService接口</p><p>里面指明服务名，服务的请求路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;gulimall-coupon&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CouponFeignService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/coupon/coupon/member/list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.2.png" alt="编写一个接口" tabindex="0" loading="lazy"><figcaption>编写一个接口</figcaption></figure><h6 id="_3、开启远程调用功能" tabindex="-1"><a class="header-anchor" href="#_3、开启远程调用功能" aria-hidden="true">#</a> 3、开启远程调用功能</h6><p>在该接口上加入@EnableFeignClients注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.atguigu.gulimall.member.feign&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.3.png" alt="开启远程调用功能" tabindex="0" loading="lazy"><figcaption>开启远程调用功能</figcaption></figure><h6 id="_4、编写测试方法" tabindex="-1"><a class="header-anchor" href="#_4、编写测试方法" aria-hidden="true">#</a> 4、编写测试方法</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">CouponFeignService</span> couponFeignService<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Openfeign消费方测试
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/coupons&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">MemberEntity</span> memberEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    memberEntity<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">R</span> memberCoupons <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">memberCoupons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> coupons <span class="token operator">=</span> memberCoupons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;coupons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;member&quot;</span><span class="token punctuation">,</span>memberEntity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;coupons&quot;</span><span class="token punctuation">,</span>coupons<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.4.png" alt="编写测试方法" tabindex="0" loading="lazy"><figcaption>编写测试方法</figcaption></figure><h6 id="_5、idea检测到不能自动注入" tabindex="-1"><a class="header-anchor" href="#_5、idea检测到不能自动注入" aria-hidden="true">#</a> 5、IDEA检测到不能自动注入</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Could</span> not <span class="token class-name"><span class="token namespace">autowire<span class="token punctuation">.</span></span> No</span> beans of &#39;<span class="token class-name">CouponFeignService</span>&#39; type found<span class="token punctuation">.</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>无法自动注入。 找不到“CouponFeignService”类型的 bean。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.5.1.png" alt="IDEA检测到不能自动注入" tabindex="0" loading="lazy"><figcaption>IDEA检测到不能自动注入</figcaption></figure><p>其实可以注入成功，接口没有实现类，接口是没有办法创建实例的，因此也就无法注入到ioc容器</p><p>只是IDEA检测到该接口没有注入到ioc容器，其实使用<code>@EnableFeignClients</code>注解后在运行时会注入到容器中的</p><p>如果不想看到红色的报错，可以在该接口添加<code>@Component</code>显式的注入到ioc容器</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.5.2.png" alt="可以在该接口添加@Component显示的注入到Spring容器" tabindex="0" loading="lazy"><figcaption>可以在该接口添加@Component显示的注入到Spring容器</figcaption></figure><h6 id="_6、出现报错" tabindex="-1"><a class="header-anchor" href="#_6、出现报错" aria-hidden="true">#</a> 6、出现报错😠</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Field couponFeignService in com.atguigu.gulimall.member.controller.MemberController 
required a bean of type &#39;com.atguigu.gulimall.member.feign.CouponFeignService&#39; that could not be found.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.atguigu.gulimall.member.controller.MemberController 中的字段 couponFeignService
需要一个找不到的“com.atguigu.gulimall.member.feign.CouponFeignService”类型的 bean。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.6.1.png" alt="出现报错" tabindex="0" loading="lazy"><figcaption>出现报错</figcaption></figure><p>发现我nacos、应用名和<code>@EnableDiscoveryClient</code>没配😨</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.6.2.png" alt="我nacos、应用名和没配:fearful:" tabindex="0" loading="lazy"><figcaption>我nacos、应用名和<code>@EnableDiscoveryClient</code>没配😨</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.6.3.png" alt="我nacos、应用名和没配:fearful:" tabindex="0" loading="lazy"><figcaption>我nacos、应用名和<code>@EnableDiscoveryClient</code>没配😨</figcaption></figure><h6 id="_7、配置后还是这个错误" tabindex="-1"><a class="header-anchor" href="#_7、配置后还是这个错误" aria-hidden="true">#</a> 7、配置后还是这个错误</h6><p>我根据我以前学的Spring Coluld,将<code>@EnableFeignClients</code>注解移动到启动类后，不报错了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.7.1.png" alt="配置后还是这个错误" tabindex="0" loading="lazy"><figcaption>配置后还是这个错误</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.7.2.png" alt="配置后还是这个错误" tabindex="0" loading="lazy"><figcaption>配置后还是这个错误</figcaption></figure><h6 id="_8、运行结果" tabindex="-1"><a class="header-anchor" href="#_8、运行结果" aria-hidden="true">#</a> 8、运行结果</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.8.1.png" alt="运行结果" tabindex="0" loading="lazy"><figcaption>运行结果</figcaption></figure><p>可以看到远程调用已经成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.8.2.png" alt="远程调用已经成功了" tabindex="0" loading="lazy"><figcaption>远程调用已经成功了</figcaption></figure><p>ps:可以使用JSON-Handle或JSONViewer等类似插件，优雅地显示json数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.4.2.8.3.png" alt="优雅地显示json数据" tabindex="0" loading="lazy"><figcaption>优雅地显示json数据</figcaption></figure><h4 id="_2-2-5、使用nacos做配置中心" tabindex="-1"><a class="header-anchor" href="#_2-2-5、使用nacos做配置中心" aria-hidden="true">#</a> 2.2.5、使用nacos做配置中心</h4><p>nacos中文文档: https://github.com/alibaba/spring-cloud-alibaba/blob/2021.x/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md</p><h5 id="_1、添加依赖" tabindex="-1"><a class="header-anchor" href="#_1、添加依赖" aria-hidden="true">#</a> 1、添加依赖</h5><p>首先，修改 pom.xml 文件，引入 Nacos Config Starter。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在gulimall-common模块的pom文件中添加依赖</p><h5 id="_2、配置元数据" tabindex="-1"><a class="header-anchor" href="#_2、配置元数据" aria-hidden="true">#</a> 2、配置元数据</h5><p>在应用的 /src/main/resources/bootstrap.properties 配置文件中配置 Nacos Config 元数据</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name"> spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">nacos-config-example</span>
<span class="token key attr-name"> spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在gulimall-coupon模块resources新建bootstrap.properties配置文件</p><p>在SpringBoot中默认是不支持bootstrap.properties属性文件的。我们需要映入SpringCloud的依赖才可以。</p><p>bootstrap.properties中定义的文件信息会先与application.properties中的信息加载</p><p>bootstrap.properties配置文件添加应用名和nacos的服务地址</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">gulimall-coupon</span>

<span class="token key attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.2.png" alt="使用nacos做配置中心" tabindex="0" loading="lazy"><figcaption>使用nacos做配置中心</figcaption></figure><h5 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试" aria-hidden="true">#</a> 3、测试</h5><h5 id="传统配置文件方式" tabindex="-1"><a class="header-anchor" href="#传统配置文件方式" aria-hidden="true">#</a> <strong>传统配置文件方式</strong></h5><h6 id="_1、配置名字和年龄" tabindex="-1"><a class="header-anchor" href="#_1、配置名字和年龄" aria-hidden="true">#</a> 1、配置名字和年龄</h6><p>在gulimall-coupon模块的resources文件夹下的application.properites文件中配置名字和年龄</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">user.name</span><span class="token punctuation">=</span><span class="token value attr-value">zhangsan</span>
<span class="token key attr-name">user.age</span><span class="token punctuation">=</span><span class="token value attr-value">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.1.1.png" alt="配置名字和年龄" tabindex="0" loading="lazy"><figcaption>配置名字和年龄</figcaption></figure><h6 id="_2、注入" tabindex="-1"><a class="header-anchor" href="#_2、注入" aria-hidden="true">#</a> 2、注入</h6><p>在gulimall-coupon模块下的com.atguigu.gulimall.coupon.controller的CouponController类注入name和age</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${user.name}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${user.age}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、编写测试方法" tabindex="-1"><a class="header-anchor" href="#_3、编写测试方法" aria-hidden="true">#</a> 3、编写测试方法</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.1.3.png" alt="编写测试方法" tabindex="0" loading="lazy"><figcaption>编写测试方法</figcaption></figure><h6 id="_4、测试" tabindex="-1"><a class="header-anchor" href="#_4、测试" aria-hidden="true">#</a> 4、测试</h6><p>浏览器输入url: http://127.0.1.1:7000/coupon/coupon/test</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.1.4.png" alt="测试" tabindex="0" loading="lazy"><figcaption>测试</figcaption></figure><p>发现name不对，这是因为读取到了操作系统当前的用户名</p><h6 id="_5、添加前缀" tabindex="-1"><a class="header-anchor" href="#_5、添加前缀" aria-hidden="true">#</a> 5、添加前缀</h6><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">coupon.user.name</span><span class="token punctuation">=</span><span class="token value attr-value">zhangsan</span>
<span class="token key attr-name">coupon.user.age</span><span class="token punctuation">=</span><span class="token value attr-value">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${coupon.user.name}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${coupon.user.age}&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、重新测试</p><p>重新运行模块，在浏览器中输入url: http://127.0.1.1:7000/coupon/coupon/test</p><p>传统方式的缺点是修改配置后需要重新运行模块，且多台机器运行该项目需要全部手动修改并重启</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.1.6.png" alt="重新测试" tabindex="0" loading="lazy"><figcaption>重新测试</figcaption></figure><h5 id="配置中心方式" tabindex="-1"><a class="header-anchor" href="#配置中心方式" aria-hidden="true">#</a> 配置中心方式</h5><p>应用会从 Nacos Config 中获取相应的配置，并添加在 Spring Environment 的 PropertySources 中。</p><p>这里我们使用 <code>@Value</code> 注解来将对应的配置注入到 CouponController 的 <code>name</code> 和 <code>age</code> 字段，并添加 <code>@RefreshScope</code> 打开动态刷新功能</p><h6 id="_1、先运行项目-查看name" tabindex="-1"><a class="header-anchor" href="#_1、先运行项目-查看name" aria-hidden="true">#</a> 1、先运行项目，查看name</h6><p>可以看到 propertySources=[NacosPropertySource {name=&#39;gulimall-coupon.properties&#39;}]}</p><p>中的name为gulimall-coupon.properties</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.2.1.png" alt="先运行项目，查看name" tabindex="0" loading="lazy"><figcaption>先运行项目，查看name</figcaption></figure><h6 id="_2、添加配置" tabindex="-1"><a class="header-anchor" href="#_2、添加配置" aria-hidden="true">#</a> 2、添加配置</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.2.2.1.png" alt="添加配置" tabindex="0" loading="lazy"><figcaption>添加配置</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.2.2.2.png" alt="添加配置" tabindex="0" loading="lazy"><figcaption>添加配置</figcaption></figure><h6 id="_3、添加-refreshscope注解" tabindex="-1"><a class="header-anchor" href="#_3、添加-refreshscope注解" aria-hidden="true">#</a> 3、添加@RefreshScope注解</h6><p>在<code>com.atguigu.gulimall.coupon.controller.CouponController</code>类上添加<code>@RefreshScope</code>注解(别加错位置)，重启模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.2.3.png" alt="添加@RefreshScope注解" tabindex="0" loading="lazy"><figcaption>添加@RefreshScope注解</figcaption></figure><h6 id="_4、查看配置是否生效" tabindex="-1"><a class="header-anchor" href="#_4、查看配置是否生效" aria-hidden="true">#</a> 4、查看配置是否生效</h6><p>先优先使用配置中心有的配置</p><p>url: http://127.0.1.1:7000/coupon/coupon/test</p><p>重启模块后，刷新页面，发现配置已生效</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.2.4.png" alt="查看配置是否生效" tabindex="0" loading="lazy"><figcaption>查看配置是否生效</figcaption></figure><h6 id="_5、修改配置" tabindex="-1"><a class="header-anchor" href="#_5、修改配置" aria-hidden="true">#</a> 5、修改配置</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.2.5.1.png" alt="修改配置" tabindex="0" loading="lazy"><figcaption>修改配置</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.2.5.2.png" alt="修改配置" tabindex="0" loading="lazy"><figcaption>修改配置</figcaption></figure><h6 id="_6、查看配置是否更新" tabindex="-1"><a class="header-anchor" href="#_6、查看配置是否更新" aria-hidden="true">#</a> 6、查看配置是否更新</h6><p>url: http://127.0.1.1:7000/coupon/coupon/test</p><p><strong>不重启项目</strong>，刷新页面，查看配置是否更新</p><p>可以发现，配置已更新</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.3.2.6.png" alt="查看配置是否更新" tabindex="0" loading="lazy"><figcaption>查看配置是否更新</figcaption></figure><h5 id="_4、总结" tabindex="-1"><a class="header-anchor" href="#_4、总结" aria-hidden="true">#</a> 4、总结</h5><p>如何使用Nacos作为配置中心统一管理配置</p><h6 id="_1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖" aria-hidden="true">#</a> 1、引入依赖</h6><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、创建一个bootstrap-properties" tabindex="-1"><a class="header-anchor" href="#_2、创建一个bootstrap-properties" aria-hidden="true">#</a> 2、创建一个bootstrap.properties</h6><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name"> spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">nacos-config-example</span>
<span class="token key attr-name"> spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、添加默认规则" tabindex="-1"><a class="header-anchor" href="#_3、添加默认规则" aria-hidden="true">#</a> 3、添加默认规则</h6><p>需要给配置中心默认添加一个叫数据集(Data Id) gulimall-coupon.properties。默认规则，应用名. propert</p><h6 id="_4、给应用名-properties添加任何配置" tabindex="-1"><a class="header-anchor" href="#_4、给应用名-properties添加任何配置" aria-hidden="true">#</a> 4、给应用名.properties添加任何配置</h6><h6 id="_5、动态获取配置" tabindex="-1"><a class="header-anchor" href="#_5、动态获取配置" aria-hidden="true">#</a> 5、动态获取配置</h6><p><code>@RefreshScope</code>:动态获取并刷新配置 <code>@Value( &quot;\${配置项的名}&quot;)</code>:获取到配置。 如果配置中心和当前应用的配置文件中都配置了相同的项，优先使用配置中心的配置。</p><h5 id="_5、命名空间-配置隔离" tabindex="-1"><a class="header-anchor" href="#_5、命名空间-配置隔离" aria-hidden="true">#</a> 5、命名空间:配置隔离</h5><p>默认: public(保留空间); 默认新增的所有配置都在public空间。</p><h5 id="开发-测试-生产-环境隔离" tabindex="-1"><a class="header-anchor" href="#开发-测试-生产-环境隔离" aria-hidden="true">#</a> 开发，测试，生产 环境隔离</h5><p>开发，测试，生产 利用命名空间来做环境隔离。</p><p>注意:在bootstrap. properties;配置上，需要使用哪个命名空间下的配置</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">9de62e44-cd2a-4a82-bf5c-95878bd5e871</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>步骤：</p><h6 id="_1、新建命名空间" tabindex="-1"><a class="header-anchor" href="#_1、新建命名空间" aria-hidden="true">#</a> 1、新建命名空间</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.1.png" alt="新建命名空间" tabindex="0" loading="lazy"><figcaption>新建命名空间</figcaption></figure><h6 id="_2、配置命名空间" tabindex="-1"><a class="header-anchor" href="#_2、配置命名空间" aria-hidden="true">#</a> 2、配置命名空间</h6><p>可以先克隆配置</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.2.1.png" alt="配置命名空间" tabindex="0" loading="lazy"><figcaption>配置命名空间</figcaption></figure><p>修改test命名空间配置</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.2.2.png" alt="修改test命名空间配置" tabindex="0" loading="lazy"><figcaption>修改test命名空间配置</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.2.3.png" alt="修改test命名空间配置" tabindex="0" loading="lazy"><figcaption>修改test命名空间配置</figcaption></figure><h6 id="_3、使用test命名空间" tabindex="-1"><a class="header-anchor" href="#_3、使用test命名空间" aria-hidden="true">#</a> 3、使用test命名空间</h6><p>复制命名空间的唯一标识</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.3.1.png" alt="使用test命名空间" tabindex="0" loading="lazy"><figcaption>使用test命名空间</figcaption></figure><p>在bootstrap.properties中配置使用哪个命名空间</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">6a781746-404e-4318-af52-abba2f20a03f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.3.2.png" alt="在bootstrap.properties中配置使用哪个命名空间" tabindex="0" loading="lazy"><figcaption>在bootstrap.properties中配置使用哪个命名空间</figcaption></figure><h6 id="_4、查看结果" tabindex="-1"><a class="header-anchor" href="#_4、查看结果" aria-hidden="true">#</a> 4、查看结果</h6><p>可以发现配置已生效**😄**</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.4.png" alt="查看结果" tabindex="0" loading="lazy"><figcaption>查看结果</figcaption></figure><h5 id="微服务之间互相隔离配置" tabindex="-1"><a class="header-anchor" href="#微服务之间互相隔离配置" aria-hidden="true">#</a> 微服务之间互相隔离配置</h5><p>每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</p><h6 id="_1、新建coupon命名空间" tabindex="-1"><a class="header-anchor" href="#_1、新建coupon命名空间" aria-hidden="true">#</a> 1、新建coupon命名空间</h6><h6 id="_2、配置命名空间-1" tabindex="-1"><a class="header-anchor" href="#_2、配置命名空间-1" aria-hidden="true">#</a> 2、配置命名空间</h6><h6 id="_3、使用coupon命名空间" tabindex="-1"><a class="header-anchor" href="#_3、使用coupon命名空间" aria-hidden="true">#</a> 3、使用coupon命名空间</h6><p>复制coupon命名空间唯一标识</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.5.png" alt="使用coupon命名空间" tabindex="0" loading="lazy"><figcaption>使用coupon命名空间</figcaption></figure><p>使用coupon命名空间</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.6.png" alt="使用coupon命名空间" tabindex="0" loading="lazy"><figcaption>使用coupon命名空间</figcaption></figure><h6 id="_4、查看结果-1" tabindex="-1"><a class="header-anchor" href="#_4、查看结果-1" aria-hidden="true">#</a> 4、查看结果</h6><p>重启模块，刷新页面，可以发现配置已生效**😄**</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.5.7.png" alt="查看结果" tabindex="0" loading="lazy"><figcaption>查看结果</figcaption></figure><h5 id="_6、配置集" tabindex="-1"><a class="header-anchor" href="#_6、配置集" aria-hidden="true">#</a> 6、配置集</h5><p>配置集：所有的配置的集合</p><h5 id="_7、配置集id" tabindex="-1"><a class="header-anchor" href="#_7、配置集id" aria-hidden="true">#</a> 7、配置集ID</h5><p>配置集ID(Data ID)：类似文件名。</p><h5 id="_8、配置分组" tabindex="-1"><a class="header-anchor" href="#_8、配置分组" aria-hidden="true">#</a> 8、配置分组</h5><p>默认所有的配置集都属于: DEFAULT_ GROUP 项目中的使用:每个微服务创建自己的命名空间，使用配置分组区分环境，dev,test, prod</p><h6 id="_1、配置各环境" tabindex="-1"><a class="header-anchor" href="#_1、配置各环境" aria-hidden="true">#</a> 1、配置各环境</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.8.1.png" alt="配置各环境" tabindex="0" loading="lazy"><figcaption>配置各环境</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.8.2.png" alt="配置各环境" tabindex="0" loading="lazy"><figcaption>配置各环境</figcaption></figure><h6 id="_2、使用分组" tabindex="-1"><a class="header-anchor" href="#_2、使用分组" aria-hidden="true">#</a> 2、使用分组</h6><p>在gulimall-coupon模块的bootstrap.properties配置文件中添加配置</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.nacos.config.group</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.8.3.png" alt="使用分组" tabindex="0" loading="lazy"><figcaption>使用分组</figcaption></figure><h6 id="_3、查看结果" tabindex="-1"><a class="header-anchor" href="#_3、查看结果" aria-hidden="true">#</a> 3、查看结果</h6><p>重启模块，刷新页面,可以发现配置已生效</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.8.4.png" alt="查看结果" tabindex="0" loading="lazy"><figcaption>查看结果</figcaption></figure><p>分组也可以应用在不同的场景下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.8.5.png" alt="分组也可以应用在不同的场景下" tabindex="0" loading="lazy"><figcaption>分组也可以应用在不同的场景下</figcaption></figure><h5 id="_9、加载多个配置集" tabindex="-1"><a class="header-anchor" href="#_9、加载多个配置集" aria-hidden="true">#</a> 9、加载多个配置集</h5><p>1、微服务任何配置信息，任何配置文件都可以放在配置中心中 2、只需要在bootstrap. properties说明加载配置中心中哪些配置文件即可 3、<code>@Value</code>, <code>@ConfigurationProperties</code>。。。 以前SpringBoot任何方法从配置文件中获取值，都能使用。 配置中心有的优先使用配置中心中的。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>datasource.yml
mybatis.yml
other.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1、新建多个配置文件" tabindex="-1"><a class="header-anchor" href="#_1、新建多个配置文件" aria-hidden="true">#</a> 1、新建多个配置文件</h6><p>新建datasource配置文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.9.1.png" alt="新建多个配置文件" tabindex="0" loading="lazy"><figcaption>新建多个配置文件</figcaption></figure><p>同理，新建其他配置文件</p><h6 id="_2、使用配置文件" tabindex="-1"><a class="header-anchor" href="#_2、使用配置文件" aria-hidden="true">#</a> 2、使用配置文件</h6><p>在gulimall-coupon模块的bootstrap.properties配置文件中添加配置</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#数据集id</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-config[0].data-id</span><span class="token punctuation">=</span><span class="token value attr-value">datasource.yml</span>
<span class="token comment">#数据分组</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-config[0].group</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token comment">#动态刷新</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-config[0].refresh</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token key attr-name">spring.cloud.nacos.config.ext-config[1].data-id</span><span class="token punctuation">=</span><span class="token value attr-value">mybatis.yml</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-config[1].group</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-config[1].refresh</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token key attr-name">spring.cloud.nacos.config.ext-config[2].data-id</span><span class="token punctuation">=</span><span class="token value attr-value">other.yml</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-config[2].group</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-config[2].refresh</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新版本需要使用extension-configs</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#数据集id</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[0].data-id</span><span class="token punctuation">=</span><span class="token value attr-value">datasource.yml</span>
<span class="token comment">#数据分组</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[0].group</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token comment">#动态刷新</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[0].refresh</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[1].data-id</span><span class="token punctuation">=</span><span class="token value attr-value">mybatis.yml</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[1].group</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[1].refresh</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[2].data-id</span><span class="token punctuation">=</span><span class="token value attr-value">other.yml</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[2].group</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span>
<span class="token key attr-name">spring.cloud.nacos.config.ext-configs[2].refresh</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.9.2.png" alt="使用配置文件" tabindex="0" loading="lazy"><figcaption>使用配置文件</figcaption></figure><h6 id="_3、取消以前的配置" tabindex="-1"><a class="header-anchor" href="#_3、取消以前的配置" aria-hidden="true">#</a> 3、取消以前的配置</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.9.3.png" alt="取消以前的配置" tabindex="0" loading="lazy"><figcaption>取消以前的配置</figcaption></figure><h6 id="_4、查看结果-2" tabindex="-1"><a class="header-anchor" href="#_4、查看结果-2" aria-hidden="true">#</a> 4、查看结果</h6><p>查看配置中心多配置文件是否生效</p><p>url: http://127.0.1.1:7000/coupon/coupon/test</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.9.4.1.png" alt="查看结果" tabindex="0" loading="lazy"><figcaption>查看结果</figcaption></figure><p>url: http://127.0.1.1:7000/coupon/coupon/list</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.9.4.2.png" alt="查看结果" tabindex="0" loading="lazy"><figcaption>查看结果</figcaption></figure><h6 id="_5、读取到的配置文件" tabindex="-1"><a class="header-anchor" href="#_5、读取到的配置文件" aria-hidden="true">#</a> 5、读取到的配置文件</h6><p>可以发现读取了4个配置文件</p><p>gulimall-coupon.properties 为默认读取到的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.5.9.5.1.png" alt="读取到的配置文件" tabindex="0" loading="lazy"><figcaption>读取到的配置文件</figcaption></figure><h4 id="_2-2-6、使用gateway" tabindex="-1"><a class="header-anchor" href="#_2-2-6、使用gateway" aria-hidden="true">#</a> 2.2.6、使用GateWay</h4><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.0.1.png" alt="image-20220721200526359" style="zoom:50%;"><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.0.2.png" alt="image-20220721200638957" style="zoom:50%;">`,252),P={href:"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},R=e('<p>选带GA的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.0.3.png" alt="使用GateWay" tabindex="0" loading="lazy"><figcaption>使用GateWay</figcaption></figure><h5 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h5><ul><li><blockquote><p><strong>Route</strong>: The basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates, and a collection of filters. A route is matched if the aggregate predicate is true.</p></blockquote></li></ul><blockquote><p>路由：网关的基本构建块。 它由ID，目的地URI，谓词集合和滤波器集合定义。 如果总谓词是真的，则匹配路由</p></blockquote>',5),T=a("strong",null,"Predicate",-1),D={href:"https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html",target:"_blank",rel:"noopener noreferrer"},L=a("code",null,"ServerWebExchange",-1),O=a("blockquote",null,[a("p",null,"断言：这是一个Java 8函数断言。 输入类型是Spring Framework ServerWebExchange。 这使您可以匹配HTTP请求的任何内容，例如标题或参数。")],-1),F=a("strong",null,"Filter",-1),N={href:"https://github.com/spring-cloud/spring-cloud-gateway/tree/2.2.x/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/GatewayFilter.java",target:"_blank",rel:"noopener noreferrer"},U=a("code",null,"GatewayFilter",-1),H=a("p",null,"过滤器：这些是已使用特定工厂构建的GateWayFilter的实例。 在这里，您可以在发送下游请求之前或之后修改请求和响应。",-1),W=e(`<h5 id="_2、工作流程" tabindex="-1"><a class="header-anchor" href="#_2、工作流程" aria-hidden="true">#</a> 2、工作流程</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.2.png" alt="Spring Cloud Gateway Diagram" tabindex="0" loading="lazy"><figcaption>Spring Cloud Gateway Diagram</figcaption></figure><h5 id="_3、新建网关模块" tabindex="-1"><a class="header-anchor" href="#_3、新建网关模块" aria-hidden="true">#</a> 3、新建网关模块</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.atguigu.gulimall
gulimall-gateway
API网关
com.atguigu.gulimall.gateway
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.3.1.png" alt="新建网关模块" tabindex="0" loading="lazy"><figcaption>新建网关模块</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.3.2.png" alt="新建网关模块" tabindex="0" loading="lazy"><figcaption>新建网关模块</figcaption></figure><p>我还是复制了资料提供的pom文件</p><p>pom文件为赤红色，可以右键 --&gt; Add as Maven Project</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.3.3.png" alt=" Add as Maven Project" style="zoom:50%;"><h5 id="_4、依赖common工程" tabindex="-1"><a class="header-anchor" href="#_4、依赖common工程" aria-hidden="true">#</a> 4、依赖common工程</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.4.png" alt="依赖common工程" tabindex="0" loading="lazy"><figcaption>依赖common工程</figcaption></figure><h5 id="_5、修改测试类" tabindex="-1"><a class="header-anchor" href="#_5、修改测试类" aria-hidden="true">#</a> 5、修改测试类</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>gateway</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallGatewayApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.5.png" alt="修改测试类" tabindex="0" loading="lazy"><figcaption>修改测试类</figcaption></figure><h5 id="_6、配置注册中心" tabindex="-1"><a class="header-anchor" href="#_6、配置注册中心" aria-hidden="true">#</a> 6、配置注册中心</h5><p>在gulimall-gateway模块的application.properties文件中配置注册中心</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.cloud.nacos.discovery.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>
<span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">gulimall-gateway</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">88</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.6.png" alt="配置注册中心" tabindex="0" loading="lazy"><figcaption>配置注册中心</figcaption></figure><h5 id="_7、新建网关命名空间" tabindex="-1"><a class="header-anchor" href="#_7、新建网关命名空间" aria-hidden="true">#</a> 7、新建网关命名空间</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.7.png" alt="新建网关命名空间" tabindex="0" loading="lazy"><figcaption>新建网关命名空间</figcaption></figure><h5 id="_8、添加配置中心" tabindex="-1"><a class="header-anchor" href="#_8、添加配置中心" aria-hidden="true">#</a> 8、添加配置中心</h5><p>在ulimall-gateway模块的resources目录下新建bootstrap.properties文件并添加配置</p><p>namespace为gateway命名空间的唯一标识</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">gulimall-gateway</span>
<span class="token key attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>
<span class="token key attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">8b0687c0-b126-4fd1-bbe0-ef8ae8da674e</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.8.png" alt="添加配置中心" tabindex="0" loading="lazy"><figcaption>添加配置中心</figcaption></figure><p>启动类加上<code>@EnableDiscoveryClient</code>注解</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.8.2.png" alt="启动类加上@EnableDiscoveryClient注解" tabindex="0" loading="lazy"><figcaption>启动类加上@EnableDiscoveryClient注解</figcaption></figure><h5 id="_9、添加配置" tabindex="-1"><a class="header-anchor" href="#_9、添加配置" aria-hidden="true">#</a> 9、添加配置</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.9.png" alt="添加配置" tabindex="0" loading="lazy"><figcaption>添加配置</figcaption></figure><h5 id="_10、运行项目" tabindex="-1"><a class="header-anchor" href="#_10、运行项目" aria-hidden="true">#</a> 10、运行项目</h5><p>运行项目发现报DataSource的错误</p><p>这是因为依赖了gulimall-connon模块，gulimall-connon模块依赖了mysql数据库</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.10.png" alt="运行项目" tabindex="0" loading="lazy"><figcaption>运行项目</figcaption></figure><h5 id="_11、解决方法" tabindex="-1"><a class="header-anchor" href="#_11、解决方法" aria-hidden="true">#</a> 11、解决方法</h5><p>修改@SpringBootApplication注解，排除DataSource自动配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者排除spring-boot-starter-jdbc</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.11.png" alt="解决方法" tabindex="0" loading="lazy"><figcaption>解决方法</figcaption></figure><h5 id="_12、运行项目" tabindex="-1"><a class="header-anchor" href="#_12、运行项目" aria-hidden="true">#</a> 12、运行项目</h5><p>发现网关是使用Netty做服务器的，Netty有非常高的网络性能</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.12.png" alt="运行项目" tabindex="0" loading="lazy"><figcaption>运行项目</figcaption></figure><h5 id="_13、配置路由规则" tabindex="-1"><a class="header-anchor" href="#_13、配置路由规则" aria-hidden="true">#</a> 13、配置路由规则</h5><p>在application.yml中配置</p><blockquote><p>The preceding route matches if the request contained a <code>green</code> query parameter</p><p>如果请求包含“green”查询参数，则前面的路由匹配。</p></blockquote><p>请求的url带target参数,例如：http://127.0.0.1:88/hello?target=123</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> baidu_routs
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.baidu.com/
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Query=target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>The preceding route matches if the request contained a <code>red</code> query parameter whose value matched the <code>gree.</code> regexp, so <code>green</code> and <code>greet</code> would match.</p><p>如果请求包含红色查询参数，其值与 gre 匹配，则前面的路由匹配。 正则表达式，所以 green 和 greet 会匹配。</p></blockquote><p>如果请求的target参数的值为baidu(可以为正则表达式),则转发到https://www.baidu.com/</p><p>如果请求的target参数的值为qq(可以为正则表达式),则转发到https://www.qq.com/</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> baidu_routs
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.baidu.com/
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Query=target<span class="token punctuation">,</span>baidu
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> qq_routs
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.qq.com/
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Query=target<span class="token punctuation">,</span>qq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.13.png" alt="配置路由规则" tabindex="0" loading="lazy"><figcaption>配置路由规则</figcaption></figure><h5 id="_14、查看结果" tabindex="-1"><a class="header-anchor" href="#_14、查看结果" aria-hidden="true">#</a> 14、查看结果</h5><p>运行模块查看结果😠</p><p>http://127.0.0.1:88/hello?target=baidu</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.14.1.png" alt="查看结果" tabindex="0" loading="lazy"><figcaption>查看结果</figcaption></figure><p>发现报错(如果不报错的话会把/hello带上,即https://www.baidu.com/hello)</p><p>输入http://127.0.0.1:88/?target=baidu 访问到百度**😄**</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.14.2.png" alt="访问到百度" tabindex="0" loading="lazy"><figcaption>访问到百度</figcaption></figure><p>输入http://127.0.0.1:88/?target=qq 访问到qq</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.14.3.png" alt="访问到qq" tabindex="0" loading="lazy"><figcaption>访问到qq</figcaption></figure><h5 id="_15、mvn-install报错" tabindex="-1"><a class="header-anchor" href="#_15、mvn-install报错" aria-hidden="true">#</a> 15、mvn install报错😡</h5><h6 id="_1、模块重复" tabindex="-1"><a class="header-anchor" href="#_1、模块重复" aria-hidden="true">#</a> 1、模块重复</h6><p>我在使用Maven Helper的<code>clear install</code>命令后，报了一个错误</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.1.1.png" alt="Maven Helper" style="zoom:50%;"><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.1.2.png" alt="clear install" style="zoom:50%;"><p>com.atguigu.gulimall:gulimall:0.0.1-SNAPSHOT (B:\\gulimall\\pom.xml)的第21行有一个错误</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> Some problems were encountered while processing the POMs:
&#39;modules.module[8]&#39; specifies duplicate child module gulimall-common @ line 21, column 17
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>处理POMS时遇到了一些问题：
&#39;modules.module[8]&#39; 指定重复的子模块 gulimall-common @ line 21, column 17
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.1.3.png" alt="第21行有一个错误" tabindex="0" loading="lazy"><figcaption>第21行有一个错误</figcaption></figure><p>最后发现我gulimall-common写重了，删掉第21行就行了(因该是我先写了，生成gulimall-common模块的时候又给我添加了一个)</p><h6 id="_2、没有找到junit4provider" tabindex="-1"><a class="header-anchor" href="#_2、没有找到junit4provider" aria-hidden="true">#</a> 2、没有找到JUnit4Provider</h6><p>修改后又报了个错<code>java.lang.ClassNotFoundException: org.apache.maven.surefire.junit4.JUnit4Provider</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.2.1.png" alt="没有找到JUnit4Provider" tabindex="0" loading="lazy"><figcaption>没有找到JUnit4Provider</figcaption></figure><p>方法一：</p><p>这个类是surefire-junit4里面的，可以添加这个依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.surefire<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>surefire-junit4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.21.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：</p><p>maven3使用junit4时需指定<code>org.apache.maven.surefire为surefire-junit47</code>,不然会报异常</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project gulimall-coupon: There are test failures.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.surefire<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>surefire-junit47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法三：</p><p>跳过测试</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.22.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.2.2.png" alt="maven3使用junit4时需指定org.apache.maven.surefire为surefire-junit47" tabindex="0" loading="lazy"><figcaption>maven3使用junit4时需指定org.apache.maven.surefire为surefire-junit47</figcaption></figure><h6 id="_3、报了很长的错误" tabindex="-1"><a class="header-anchor" href="#_3、报了很长的错误" aria-hidden="true">#</a> 3、报了很长的错误</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>he POM for org.springframework.boot:spring-boot-loader-tools:jar:2.1.8.RELEASE is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.springframework.boot:spring-boot-loader-tools:jar:2.1.8.RELEASE 的 POM 无效，传递依赖项（如果有）将不可用，启用调试日志以获取更多详细信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Caused by: java.lang.ClassNotFoundException: org.springframework.boot.loader.tools.LaunchScript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[WARNING] Error injecting: org.springframework.boot.maven.RepackageMojo
java.lang.NoClassDefFoundError:org/springframework/boot/loader/tools/Repackager$MainClassTimeoutWarningListener
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.1.8.RELEASE:repackage (repackage) on project gulimall-coupon: Execution repackage of goal org.springframework.boot:spring-boot-maven-plugin:2.1.8.RELEASE:repackage failed: A required class was missing while executing org.springframework.boot:spring-boot-maven-plugin:2.1.8.RELEASE:repackage: org/springframework/boot/loader/tools/LaunchScript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.3.1.png" alt="报了很长的错误" style="zoom:10%;"><p>找了好久,最后删除这个插件解决了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.3.2.png" alt="删除这个插件解决了" tabindex="0" loading="lazy"><figcaption>删除这个插件解决了</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.3.3.png" alt="删除这个插件解决了" tabindex="0" loading="lazy"><figcaption>删除这个插件解决了</figcaption></figure><p>同理将其他gulimall模块(除了gulmall-common模块和gulimall根项目)的配置文件的这个部分</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改改为</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
      <span class="token comment">&lt;!--maven3使用junit4时需指定org.apache.maven.surefire为surefire-junit47,不然会报异常--&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.surefire<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>surefire-junit47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于renren-fast已经跳过了单元测试，所以只需要删掉spring-boot-mavne-plugin插件就行了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.3.4.png" alt="删掉spring-boot-mavne-plugin插件" tabindex="0" loading="lazy"><figcaption>删掉spring-boot-mavne-plugin插件</figcaption></figure><p>renren-gengerator同gulimall模块(除了gulmall-common模块和gulimall根项目)一样配置</p><p>右击gulimall根项目--&gt; Run Maven --&gt;<code>clean install</code></p><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.3.5.png" alt="clean install" style="zoom:50%;"><p>可以看到所有项目构建成功</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2.2.6.15.3.6.png" alt="所有项目构建成功" tabindex="0" loading="lazy"><figcaption>所有项目构建成功</figcaption></figure><h6 id="_4、离线安装jar包" tabindex="-1"><a class="header-anchor" href="#_4、离线安装jar包" aria-hidden="true">#</a> 4、离线安装jar包</h6><p><strong>使用<code>mvn install</code>命令将下载好的jar安装至本地仓库中</strong></p><p>例如想使用如下依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.18.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载的jar包名为maven-surefire-plugin-2.18.1.jar</p><div class="language-maven line-numbers-mode" data-ext="maven"><pre class="language-maven"><code>mvn install:install-file
-Dfile=./maven-surefire-plugin-2.18.1.jar
-DgroupId=org.apache.maven.plugins
-DartifactId=maven-surefire-plugin
-Dversion=2.18.1
-Dpackaging=jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-Dfile</code> ：下载的jar包的路径</li><li><code>-DgroupId</code>：maven引用中的groupId，如下边的那个maven引用</li><li><code>-DartifactId</code> ： 这个是artifactId</li><li><code>-Dversion</code>：是版本号</li><li><code>-Dpackaging</code>：一般都是jar，因为你引入的就是jar包</li></ul><p>因此命令为:(命令需要在一行)</p><div class="language-maven line-numbers-mode" data-ext="maven"><pre class="language-maven"><code>mvn install:install-file -Dfile=./maven-surefire-plugin-2.18.1.jar -DgroupId=org.apache.maven.plugins -DartifactId=maven-surefire-plugin -Dversion=2.18.1 -Dpackaging=jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="三、前端学习" tabindex="-1"><a class="header-anchor" href="#三、前端学习" aria-hidden="true">#</a> 三、前端学习</h1><p>前端技术栈类比</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.0.png" alt="image-20220721201053638" tabindex="0" loading="lazy"><figcaption>image-20220721201053638</figcaption></figure><h2 id="_3-1、es6" tabindex="-1"><a class="header-anchor" href="#_3-1、es6" aria-hidden="true">#</a> 3.1、ES6</h2><h4 id="_3-1-1、简介" tabindex="-1"><a class="header-anchor" href="#_3-1-1、简介" aria-hidden="true">#</a> 3.1.1、简介</h4><p>ECMAScript 6.0（以下简称 ES6，ECMAScript 是一种由 Ecma 国际(前身为欧洲计算机制造商 协会,英文名称是 European Computer Manufacturers Association)通过 ECMA-262标准化的脚本 程序设计语言）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了，并且 从 ECMAScript 6 开始，开始采用年号来做版本。即 ECMAScript 2015，就是 ECMAScript6。 它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。 每年一个新版本。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.1.1.png" alt="ECMAScript" tabindex="0" loading="lazy"><figcaption>ECMAScript</figcaption></figure><h4 id="_3-1-2、什么是-ecmascrip" tabindex="-1"><a class="header-anchor" href="#_3-1-2、什么是-ecmascrip" aria-hidden="true">#</a> 3.1.2、什么是 ECMAScrip</h4><p>来看下前端的发展历程：</p><p>web1.0 时代： 最初的网页以 HTML 为主，是纯静态的网页。网页是只读的，信息流只能从服务的到客户端 单向流通。开发人员也只关心页面的样式和内容即可。</p><p>web2.0 时代：</p><ul><li>1995 年，网景工程师 Brendan Eich 花了 10 天时间设计了 JavaScript 语言。</li><li>1996 年，微软发布了 JScript，其实是 JavaScript 的逆向工程实现。</li><li>1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组 织 ECMA，希望这种语言能够成为国际标准。</li><li>1997 年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的 标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。JavaScript 和 JScript 都是 <code>ECMAScript</code>的标准实现者，随后各大浏览器厂商纷纷实现了<code>ECMAScript</code>标准。 所以，ECMAScript 是浏览器脚本语言的规范，而各种我们熟知的 js 语言，如 JavaScript 则是 规范的具体实现</li></ul><h4 id="_3-1-3、es6-新特性" tabindex="-1"><a class="header-anchor" href="#_3-1-3、es6-新特性" aria-hidden="true">#</a> 3.1.3、ES6 新特性</h4><h5 id="_1、let声明变量" tabindex="-1"><a class="header-anchor" href="#_1、let声明变量" aria-hidden="true">#</a> 1、let声明变量</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var 声明的变量往往会越域</span>
<span class="token comment">// let 声明的变量有严格局部作用域</span>
<span class="token punctuation">{</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: b is not defined</span>
<span class="token comment">// var 可以声明多次</span>
<span class="token comment">// let 只能声明一次</span>
<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">3</span>
<span class="token comment">// let n = 4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// Identifier &#39;n&#39; has already been declared</span>
<span class="token comment">// var 会变量提升</span>
<span class="token comment">// let 不存在变量提升</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ReferenceError: y is not defined</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、const-声明常量-只读变量" tabindex="-1"><a class="header-anchor" href="#_2、const-声明常量-只读变量" aria-hidden="true">#</a> 2、const 声明常量（只读变量）</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 声明之后不允许改变</span>
<span class="token comment">// 2. 一但声明必须初始化，否则会报错</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//Uncaught TypeError: Assignment to</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、解构表达式" tabindex="-1"><a class="header-anchor" href="#_3、解构表达式" aria-hidden="true">#</a> 3、解构表达式</h5><h6 id="_1、数组解构" tabindex="-1"><a class="header-anchor" href="#_1、数组解构" aria-hidden="true">#</a> 1、数组解构</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//以前我们想获取其中的值，只能通过角标。ES6 可以这样：</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// x，y，z 将与 arr 中的每个位置对应来取值</span>
<span class="token comment">// 然后打印</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、对象解构" tabindex="-1"><a class="header-anchor" href="#_2、对象解构" aria-hidden="true">#</a> 2、对象解构</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
    <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 解构表达式获取值，将 person 里面每一个属性和左边对应赋值</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> language <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>
<span class="token comment">// 等价于下面</span>
<span class="token comment">// const name = person.name;</span>
<span class="token comment">// const age = person.age;</span>
<span class="token comment">// const language = person.language;</span>
<span class="token comment">// 可以分别打印</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//扩展：如果想要将 name 的值赋值给其他变量，可以如下,nn 是新的变量名</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> nn<span class="token punctuation">,</span> age<span class="token punctuation">,</span> language <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、字符串扩展" tabindex="-1"><a class="header-anchor" href="#_4、字符串扩展" aria-hidden="true">#</a> 4、字符串扩展</h5><h6 id="_1、几个新的-api" tabindex="-1"><a class="header-anchor" href="#_1、几个新的-api" aria-hidden="true">#</a> 1、几个新的 API</h6><p>ES6 为字符串扩展了几个新的 API：</p><ul><li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串。 -</li><li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;hello.vue&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//tru</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、字符串模板" tabindex="-1"><a class="header-anchor" href="#_2、字符串模板" aria-hidden="true">#</a> 2、字符串模板</h6><p>模板字符串相当于加强版的字符串，用反引号 \`,除了作为普通字符串，</p><p>还可以用来定义多行 字符串，还可以在字符串中加入变量和表达式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、多行字符串</span>
<span class="token keyword">let</span> ss <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        &lt;div&gt;
        	&lt;span&gt;hello world&lt;span&gt;
        &lt;/div&gt;
    </span><span class="token template-punctuation string">\`</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 2、字符串插入变量和表达式。变量名写在 \${} 中，\${} 中可以放</span>
入 JavaScript 表达式。
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 3、字符串中调用函数</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;这是一个函数&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> sss <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">O(∩_∩)O 哈哈~，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sss<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// O(∩_∩)O 哈哈~，这是一个函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、函数优化" tabindex="-1"><a class="header-anchor" href="#_5、函数优化" aria-hidden="true">#</a> 5、函数优化</h5><h6 id="_1、函数参数默认值" tabindex="-1"><a class="header-anchor" href="#_1、函数参数默认值" aria-hidden="true">#</a> 1、函数参数默认值</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在 ES6 以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断 b 是否为空，为空就给默认值 1</span>
    b <span class="token operator">=</span> b <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 传一个参数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值</span>
<span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 传一个参数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、不定参数" tabindex="-1"><a class="header-anchor" href="#_2、不定参数" aria-hidden="true">#</a> 2、不定参数</h6><p>不定参数用来表示不确定参数个数，形如，...变量名，由...加上一个具名参数标识符组成。</p><p>具名参数只能放在参数列表的最后，并且有且只有一个不定参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//2</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、箭头函数" tabindex="-1"><a class="header-anchor" href="#_3、箭头函数" aria-hidden="true">#</a> 3、箭头函数</h6><p>ES6 中定义函数的简写方式</p><ul><li>一个参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//以前声明一个方法</span>
<span class="token comment">// var print = function (obj) {</span>
<span class="token comment">// console.log(obj);</span>
<span class="token comment">// }</span>
<span class="token comment">// 可以简写为：</span>
<span class="token keyword">var</span> <span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 测试调用</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>多个参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 两个参数的情况：</span>
<span class="token keyword">var</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 简写为：</span>
<span class="token comment">//当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。</span>
<span class="token keyword">var</span> <span class="token function-variable function">sum2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token comment">//测试调用</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
<span class="token comment">// 代码不止一行，可以用\`{}\`括起来</span>
<span class="token keyword">var</span> <span class="token function-variable function">sum3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//测试调用</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4、实战-箭头函数结合解构表达式" tabindex="-1"><a class="header-anchor" href="#_4、实战-箭头函数结合解构表达式" aria-hidden="true">#</a> 4、实战：箭头函数结合解构表达式</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//需求，声明一个对象，hello 方法需要对象的个别属性</span>
<span class="token comment">//以前的方式：</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
    <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello,&quot;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//现在的方式</span>
<span class="token keyword">var</span> <span class="token function-variable function">hello2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello,&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//测试</span>
<span class="token function">hello2</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6、对象优化" tabindex="-1"><a class="header-anchor" href="#_6、对象优化" aria-hidden="true">#</a> 6、对象优化</h5><h6 id="_1、新增的-api" tabindex="-1"><a class="header-anchor" href="#_1、新增的-api" aria-hidden="true">#</a> 1、新增的 API</h6><p>ES6 给 Object 拓展了许多新的方法，如：</p><ul><li><p><code>keys(obj)</code>：获取对象的所有 key 形成的数组</p></li><li><p><code>values(obj)</code>：获取对象的所有 value 形成的数组</p></li><li><p><code>entries(obj)</code>：获取对象的所有 key 和 value 形成的二维数组。</p><p>格式：<code>[[k1,v1],[k2,v2],...]</code></p></li><li><p><code>assign(dest, ...src)</code> ：将多个 src 对象的值 拷贝到 dest 中。</p><p>第一层为深拷贝，第二层为浅 拷贝</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
    <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[&quot;jack&quot;, 21, Array(3)]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[Array(2), Array(2), Arra</span>
<span class="token function">y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//Object.assign 方法的第一个参数是目标对象，后面的参数都是源对象。</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token comment">//{a: 1, b: 2, c: 3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、声明对象简写" tabindex="-1"><a class="header-anchor" href="#_2、声明对象简写" aria-hidden="true">#</a> 2、声明对象简写</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">23</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
<span class="token comment">// 传统</span>
<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> name <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>
<span class="token comment">// ES6：属性名和属性值变量名一样，可以省略</span>
<span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token punctuation">,</span> name <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">//{age: 23, name: &quot;张三&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、对象的函数属性简写" tabindex="-1"><a class="header-anchor" href="#_3、对象的函数属性简写" aria-hidden="true">#</a> 3、对象的函数属性简写</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">// 以前：</span>
    <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;在吃&quot;</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 箭头函数版：这里拿不到 this</span>
    <span class="token function-variable function">eat2</span><span class="token operator">:</span> <span class="token parameter">food</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;在吃&quot;</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 简写版：</span>
    <span class="token function">eat3</span><span class="token punctuation">(</span><span class="token parameter">food</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;在吃&quot;</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4、对象拓展运算符" tabindex="-1"><a class="header-anchor" href="#_4、对象拓展运算符" aria-hidden="true">#</a> 4、对象拓展运算符</h6><p>拓展运算符（...）用于取出参数对象所有可遍历属性然后拷贝到当前对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、拷贝对象（深拷贝）</span>
<span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Amy&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> someone <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>person1 <span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someone<span class="token punctuation">)</span> <span class="token comment">//{name: &quot;Amy&quot;, age: 15}</span>
<span class="token comment">// 2、合并对象</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Amy&quot;</span> <span class="token punctuation">}</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>age<span class="token punctuation">,</span> <span class="token operator">...</span>name <span class="token punctuation">}</span> <span class="token comment">//如果两个对象的字段名重复，后面对象字段值会覆盖前面对象的字段值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">//{age: 15, name: &quot;Amy&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7、map-和-reduce" tabindex="-1"><a class="header-anchor" href="#_7、map-和-reduce" aria-hidden="true">#</a> 7、map 和 reduce</h5><p>数组中新增了 map 和 reduce 方法</p><h6 id="_1、map" tabindex="-1"><a class="header-anchor" href="#_1、map" aria-hidden="true">#</a> 1、map</h6><p><code>map()</code>：接收一个函数，将原数组中的所有元素用这个函数处理后放入新数组返回。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、reduce" tabindex="-1"><a class="header-anchor" href="#_2、reduce" aria-hidden="true">#</a> 2、reduce</h6><p>语法：</p><p><code>arr.reduce(callback,[initialValue])</code></p><p><code>reduce</code> 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元 素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调 用 reduce 的数组。</p><p><code>callback</code> （执行数组中每个值的函数，包含四个参数）</p><ol><li>previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））</li><li>currentValue （数组中当前被处理的元素）</li><li>index （当前元素在数组中的索引）</li><li>array （调用 reduce 的数组） initialValue （作为第一次调用 callback</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//没有初始值：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//19</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-300</span>
<span class="token comment">//指定初始值：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">*</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8、promise" tabindex="-1"><a class="header-anchor" href="#_8、promise" aria-hidden="true">#</a> 8、Promise</h5><p>在 JavaScript 的世界中，所有代码都是单线程执行的。由于这个“缺陷”，导致 JavaScript 的所 有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现。一旦有一连 串的 ajax 请求 a,b,c,d... 后面的请求依赖前面的请求结果，就需要层层嵌套。这种缩进和层 层嵌套的方式，非常容易造成上下文代码混乱，我们不得不非常小心翼翼处理内层函数与外 层函数的数据，一旦内层函数使用了上层函数的变量，这种混乱程度就会加剧......总之，这 种<code>层叠上下文</code>的层层嵌套方式，着实增加了神经的紧张程度。</p><p>案例：用户登录，并展示该用户的各科成绩。在页面发送两次请求：</p><ol><li>查询用户，查询成功说明可以登录</li><li>查询用户成功，查询科目</li><li>根据科目的查询结果，获取去成绩</li></ol><p>分析：此时后台应该提供三个接口，一个提供用户查询接口，一个提供科目的接口，一个提 供各科成绩的接口，为了渲染方便，最好响应 json 数据。在这里就不编写后台接口了，而 是提供三个 json 文件，直接提供 json 数据，模拟后台接口：</p><p>user.json：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123456&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>user_corse_1.json:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;chinese&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>corse_score_10.json:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> 
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token number">90</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调函数嵌套的噩梦：层层嵌套</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;mock/user.json&quot;</span><span class="token punctuation">,</span>
    <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户：&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mock/user_corse_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询到课程：&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mock/corse_score_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
                    <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询到分数：&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常了：&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常了：&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常了：&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过 Promise 解决以上问题。</p><h6 id="_1、promise-语法" tabindex="-1"><a class="header-anchor" href="#_1、promise-语法" aria-hidden="true">#</a> 1、Promise 语法</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行异步操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 异步操作成功 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用 resolve，代表 Promise 将返回成功的结果</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用 reject，代表 Promise 会返回失败结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用箭头函数可以简写为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行异步操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 异步操作成功 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用 resolve，代表 Promise 将返回成功的结果</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用 reject，代表 Promise 会返回失败结果</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，在 promise 中就封装了一段异步执行的结果。</p><h6 id="_2、处理异步结果" tabindex="-1"><a class="header-anchor" href="#_2、处理异步结果" aria-hidden="true">#</a> 2、处理异步结果</h6><p>如果我们想要等待异步执行完成，做一些事情，我们可以通过 promise 的 then 方法来实现。 如果想要处理 promise 异步执行失败的事件，还可以跟上 catch：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步执行成功后的回调</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步执行失败后的回调</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、、promise-改造以前嵌套方式" tabindex="-1"><a class="header-anchor" href="#_3、、promise-改造以前嵌套方式" aria-hidden="true">#</a> 3、、Promise 改造以前嵌套方式</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;mock/user.json&quot;</span><span class="token punctuation">,</span>
        <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户：&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常了：&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mock/user_corse_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询到课程：&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常了：&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">corseId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>corseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mock/corse_score_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>corseId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询到分数：&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常了：&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4、优化处理" tabindex="-1"><a class="header-anchor" href="#_4、优化处理" aria-hidden="true">#</a> 4、优化处理</h6><p>优化：通常在企业开发中，会把 promise 封装成通用方法</p><p>如下：封装了一个通用的 get 请 求方法；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 实际开发中会单独放到 common.js 中</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
            <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用封装的 get 方法，实现查询分数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;mock/user.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询用户：&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mock/user_corse_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询到课程：&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">mock/corse_score_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;查询到分数：&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;出现异常了：&quot;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过比较，我们知道了 Promise 的扁平化设计理念，也领略了这种<code>上层设计</code>带来的好处。 我们的项目中会使用到这种异步处理的方式；</p><h5 id="_9、模块化" tabindex="-1"><a class="header-anchor" href="#_9、模块化" aria-hidden="true">#</a> 9、模块化</h5><h6 id="_1、什么是模块化" tabindex="-1"><a class="header-anchor" href="#_1、什么是模块化" aria-hidden="true">#</a> 1、什么是模块化</h6><p>模块化就是把代码进行拆分，方便重复利用。类似 java 中的导包：要使用一个包，必须先 导包。而 JS 中没有包的概念，换来的是 模块。</p><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。</p><ul><li><code>export</code>命令用于规定模块的对外接口。</li><li><code>import</code>命令用于导入其他模块提供的功能。</li></ul><h6 id="_2、export" tabindex="-1"><a class="header-anchor" href="#_2、export" aria-hidden="true">#</a> 2、export</h6><p>比如我定义一个 js 文件:hello.js，里面有一个对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我可以使用 export 将这个对象导出：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> util <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以简写为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>export</code>不仅可以导出对象，一切 JS 变量都可以导出。比如：基本类型变量、函数、数组、 对象。 当要导出多个值时，还可以简写。比如我有一个文件：user.js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;jack&quot;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">21</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>省略名称 上面的导出代码中，都明确指定了导出的变量名，这样其它人在导入使用时就必须准确写出 变量名，否则就会出错。 因此 js 提供了<code>default</code>关键字，可以对导出的变量名进行省略</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 无需声明对象的名字</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，当使用者导入时，可以任意起名字</p><h6 id="_3、import" tabindex="-1"><a class="header-anchor" href="#_3、import" aria-hidden="true">#</a> 3、import</h6><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这 个模块。</p><p>例如我要使用上面导出的 util：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入 util</span>
<span class="token keyword">import</span> util <span class="token keyword">from</span> <span class="token string">&#39;hello.js&#39;</span>
<span class="token comment">// 调用 util 中的属性</span>
util<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要批量导入前面导出的 name 和 age：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;user.js&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; , 今年&quot;</span><span class="token operator">+</span> age <span class="token operator">+</span><span class="token string">&quot;岁了&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是上面的代码暂时无法测试，因为浏览器目前还不支持 ES6 的导入和导出功能。除非借 助于工具，把 ES6 的语法进行编译降级到 ES5，比如<code>Babel-cli</code>工具 我们暂时不做测试，大家了解即可。</p><h2 id="_3-2、node-js" tabindex="-1"><a class="header-anchor" href="#_3-2、node-js" aria-hidden="true">#</a> 3.2、Node.js</h2><p>前端开发，少不了 node.js；Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p><p>http://nodejs.cn/api/</p><p>我们关注与 node.js 的 npm 功能就行；</p><p>NPM 是随同 NodeJS 一起安装的包管理工具，JavaScript-NPM，Java-Maven；</p><ol><li>官网下载安装 node.js，并使用 node -v 检查版本</li><li>配置 npm 使用淘宝镜像 npm config set registry http://registry.npm.taobao.org/</li><li>大家如果 npm install 安装依赖出现 chromedriver 之类问题，先在项目里运行下面命令 npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver 然后再运行 npm install</li></ol><h2 id="_3-3、vue" tabindex="-1"><a class="header-anchor" href="#_3-3、vue" aria-hidden="true">#</a> 3.3、Vue</h2><h4 id="_3-3-1、mvvm-思想" tabindex="-1"><a class="header-anchor" href="#_3-3-1、mvvm-思想" aria-hidden="true">#</a> 3.3.1、MVVM 思想</h4><ul><li>M：即 Model，模型，包括数据和一些基本操作</li><li>V：即 View，视图，页面渲染结果</li><li>VM：即 View-Model，模型与视图间的双向操作（无需开发人员干涉）</li></ul><p>在 MVVM 之前，开发人员从后端获取需要的数据模型，然后要通过 DOM 操作 Model 渲染 到 View 中。而后当用户操作视图，我们还需要通过 DOM 获取 View 中的数据，然后同步到 Model 中。</p><p>而 MVVM 中的 VM 要做的事情就是把 DOM 操作完全封装起来，开发人员不用再关心 Model 和 View 之间是如何互相影响的:</p><ul><li>只要我们 Model 发生了改变，View 上自然就会表现出来。</li><li>当用户修改了 View，Model 中的数据也会跟着改变。</li></ul><p>把开发人员从繁琐的 DOM 操作中解放出来，把关注点放在如何操作 Model 上。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.1.png" alt="MVVM 思想" tabindex="0" loading="lazy"><figcaption>MVVM 思想</figcaption></figure><h4 id="_3-3-2、vue简介" tabindex="-1"><a class="header-anchor" href="#_3-3-2、vue简介" aria-hidden="true">#</a> 3.3.2、Vue简介</h4><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库 结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>官网：https://cn.vuejs.org/</p><p>参考：https://cn.vuejs.org/v2/guide/</p><p>Git 地址：https://github.com/vuejs</p><p>尤雨溪，Vue.js 创作者，Vue Technology 创始人，致力于 Vue 的研究开发。</p><h4 id="_3-3-3、入门案例" tabindex="-1"><a class="header-anchor" href="#_3-3-3、入门案例" aria-hidden="true">#</a> 3.3.3、入门案例</h4><h5 id="_1、安装" tabindex="-1"><a class="header-anchor" href="#_1、安装" aria-hidden="true">#</a> 1、安装</h5><p>官网文档提供了 3 中安装方式：</p><ol><li><p>直接 script 引入本地 vue 文件。需要通过官网下载 vue 文件。</p></li><li><p>通过 script 引入 CDN 代理。需要联网，生产环境可以使用这种方式</p></li><li><p>通过 npm 安装。这种方式也是官网推荐的方式，需要 nodejs 环境。</p></li></ol><p>本课程就采用第三种方式</p><h5 id="_2、创建示例项目" tabindex="-1"><a class="header-anchor" href="#_2、创建示例项目" aria-hidden="true">#</a> 2、创建示例项目</h5><ol><li><p>新建文件夹 hello-vue，并使用 vscode 打开</p></li><li><p>使用 vscode 控制台，<code>npm install -y</code>；</p><p>项目会生成 package-lock.json 文件，类似于 maven 项目的 pom.xml 文件。</p></li><li><p>使用 <code>npm install vue</code>，给项目安装 vue；项目下会多 node_modules 目录，并且在下面有一个 vue 目录。</p></li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.3.2.png" alt="创建示例项目" tabindex="0" loading="lazy"><figcaption>创建示例项目</figcaption></figure><h5 id="_3、helloworld" tabindex="-1"><a class="header-anchor" href="#_3、helloworld" aria-hidden="true">#</a> 3、HelloWorld</h5><p>在 hello.html 中，我们编写一段简单的代码。</p><p>h2 中要输出一句话：<code>xx 非常帅</code>。前面的<code>xx</code>是要渲染的数据。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.3.3.png" alt="image-20220423112742052" tabindex="0" loading="lazy"><figcaption>image-20220423112742052</figcaption></figure><h5 id="_4、vue-声明式渲染" tabindex="-1"><a class="header-anchor" href="#_4、vue-声明式渲染" aria-hidden="true">#</a> 4、vue 声明式渲染</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{name}}，非常帅！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./node_modules/vue/dist/vue.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> 
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,277),Q=a("code",null,"el",-1),J=a("code",null,"data",-1),G=a("code",null,"name",-1),$=a("code",null,"h2",-1),Y=e(`<p>打开页面查看效果：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.3.4.1.png" alt="image-20220423113506472" tabindex="0" loading="lazy"><figcaption>image-20220423113506472</figcaption></figure><p>更神奇的在于，当你修改 name 属性时，页面会跟着变化：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.3.4.2.png" alt="image-20220423113608419" tabindex="0" loading="lazy"><figcaption>image-20220423113608419</figcaption></figure><h5 id="_5、双向绑定" tabindex="-1"><a class="header-anchor" href="#_5、双向绑定" aria-hidden="true">#</a> 5、双向绑定</h5><p>我们对刚才的案例进行简单修改：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>
            {{name}}，非常帅！！！有{{num}}个人为他点赞。
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// 创建 vue 实例</span>
        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token comment">// el 即 element，该 vue 实例要渲染的页面元素</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 渲染页面需要的数据</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">5</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双向绑定：</strong></p><p>效果：我们修改表单项，num 会发生变化。我们修改 num，表单项也会发生变化。为了实时观察到这个变化，我们将 num 输出到页面。</p><p>我们不需要关注他们为什么会建立起来关联，以及页面如何变化，我们只需要做好数据和视图的关联即可（MVVM）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.3.5.png" alt="image-20220423145301490" tabindex="0" loading="lazy"><figcaption>image-20220423145301490</figcaption></figure><h5 id="_6、事件处理" tabindex="-1"><a class="header-anchor" href="#_6、事件处理" aria-hidden="true">#</a> 6、事件处理</h5><p>给页面添加一个按钮：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>关注<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>
            {{name}}，非常帅！！！有{{num}}个人为他点赞。
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// 创建 vue 实例</span>
        <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token comment">// el 即 element，该 vue 实例要渲染的页面元素</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 渲染页面需要的数据</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">5</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.3.6.png" alt="image-20220423145629589" tabindex="0" loading="lazy"><figcaption>image-20220423145629589</figcaption></figure><h4 id="_3-3-4、概念" tabindex="-1"><a class="header-anchor" href="#_3-3-4、概念" aria-hidden="true">#</a> 3.3.4、概念</h4><h5 id="_1、创建-vue-实例" tabindex="-1"><a class="header-anchor" href="#_1、创建-vue-实例" aria-hidden="true">#</a> 1、创建 Vue 实例</h5><p>每个 Vue 应用都是通过用 <strong>Vue</strong> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构造函数中传入一个对象，并且在对象中声明各种 Vue 需要的数据和方法，包括：</p><ul><li><code>el</code></li><li><code>data</code></li><li><code>methods</code></li></ul><p>等等 接下来我们一 一介绍。</p><h5 id="_2、模板或元素" tabindex="-1"><a class="header-anchor" href="#_2、模板或元素" aria-hidden="true">#</a> 2、模板或元素</h5><blockquote><p>每个 Vue 实例都需要关联一段 Html 模板，Vue 会基于此模板进行视图渲染。</p></blockquote><p>我们可以通过 el 属性来指定。</p><p>例如一段 html 模板：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建 Vue 实例，关联这个 div</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，Vue 就可以基于 id 为<code>app</code>的 div 元素作为模板进行渲染了。在这个 div 范围以外的部分是无法使用 vue 特性的。</p><h5 id="_3、数据" tabindex="-1"><a class="header-anchor" href="#_3、数据" aria-hidden="true">#</a> 3、数据</h5><blockquote><p>当 Vue 实例被创建时，它会尝试获取在 <strong>data</strong> 中定义的<strong>所有属性</strong>，<strong>用于视图的渲染</strong>，并且<strong>监视</strong> <strong>data</strong> <strong>中的属性变化</strong>，当 data 发生改变，所有相关的视图都将重新渲染，这就是“<strong>响应式</strong>“系统。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>name 的变化会影响到<code>input</code>的值</li><li>input 中输入的值，也会导致 vm 中的 name 发生改变</li></ul><h5 id="_4、方法" tabindex="-1"><a class="header-anchor" href="#_4、方法" aria-hidden="true">#</a> 4、方法</h5><p>Vue 实例中除了可以定义 data 属性，也可以定义方法，并且在 Vue 实例的作用范围内使用。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{num}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// this 代表的当前 vue 实例</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、安装-vue-devtools-方便调试" tabindex="-1"><a class="header-anchor" href="#_5、安装-vue-devtools-方便调试" aria-hidden="true">#</a> 5、安装 vue-devtools 方便调试</h5><p>将软件包中的 vue-devtools 解压</p><p>打开 chrome 设置-&gt;扩展程序</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.4.5.1.png" alt="image-20220423152033660" tabindex="0" loading="lazy"><figcaption>image-20220423152033660</figcaption></figure><p>开启开发者模式，并加载插件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.4.5.2.png" alt="image-20220423152132595" tabindex="0" loading="lazy"><figcaption>image-20220423152132595</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.4.5.3.png" alt="image-20220423152149076" tabindex="0" loading="lazy"><figcaption>image-20220423152149076</figcaption></figure><p>打开浏览器控制台，选择 vue</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.4.5.4.png" alt="image-20220423152213540" tabindex="0" loading="lazy"><figcaption>image-20220423152213540</figcaption></figure><h5 id="_6、安装-vscode-的-vue-插件" tabindex="-1"><a class="header-anchor" href="#_6、安装-vscode-的-vue-插件" aria-hidden="true">#</a> 6、安装 vscode 的 vue 插件</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.4.6.png" alt="image-20220423152241897" tabindex="0" loading="lazy"><figcaption>image-20220423152241897</figcaption></figure><p>安装这个插件就可以有语法提示</p><h4 id="_3-3-5、指令" tabindex="-1"><a class="header-anchor" href="#_3-3-5、指令" aria-hidden="true">#</a> 3.3.5、指令</h4><p>什么是指令？</p><ul><li>指令 (Directives) 是带有<code>v-</code> 前缀的特殊特性。</li><li>指令特性的预期值是：<strong>单个</strong> <strong>JavaScript</strong> <strong>表达式</strong>。</li><li>指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</li></ul><p>例如我们在入门案例中的 v-on，代表绑定事件。</p><h5 id="_1、插值表达式" tabindex="-1"><a class="header-anchor" href="#_1、插值表达式" aria-hidden="true">#</a> 1、插值表达式</h5><h6 id="_1、花括号" tabindex="-1"><a class="header-anchor" href="#_1、花括号" aria-hidden="true">#</a> 1、花括号</h6><p>格式：<code>{{表达式}}</code></p><p>说明：</p><ul><li>该表达式支持 JS 语法，可以调用 js 内置函数（必须有返回值）</li><li>表达式必须有返回结果。例如 1 + 1，没有结果的表达式不允许使用，如：let a = 1 + 1;</li><li>可以直接获取 Vue 实例中定义的数据或函数</li></ul><h6 id="_2、插值闪烁" tabindex="-1"><a class="header-anchor" href="#_2、插值闪烁" aria-hidden="true">#</a> 2、插值闪烁</h6><p>使用<code>{{}}</code>方式在网速较慢时会出现问题。在数据未加载完成时，页面会显示出原始的<code>{{}}</code>， 加载完毕后才显示正确数据，我们称为插值闪烁。</p><p>我们将网速调慢一些，然后刷新页面，试试看刚才的案例:</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.5.1.2.png" alt="image-20220423152659085" tabindex="0" loading="lazy"><figcaption>image-20220423152659085</figcaption></figure><h6 id="_3、v-text-和v-html" tabindex="-1"><a class="header-anchor" href="#_3、v-text-和v-html" aria-hidden="true">#</a> 3、v-text 和v-html</h6><p>可以使用 <code>v-text</code> 和 <code>v-html</code> 指令来替代<code>{{}}</code></p><p>说明：</p><ul><li>v-text：将数据输出到元素内部，如果输出的数据有 HTML 代码，会作为普通文本输出</li><li>v-html：将数据输出到元素内部，如果输出的数据有 HTML 代码，会被渲染</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    v-text:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> 
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span> 
    v-html:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">&quot;&lt;h1&gt;大家好&lt;/h1&gt;&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果:</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.5.1.3.png" alt="image-20220423153113616" tabindex="0" loading="lazy"><figcaption>image-20220423153113616</figcaption></figure><p>并且不会出现插值闪烁，当没有数据时，会显示空白或者默认数据。</p><h5 id="_2、v-bind" tabindex="-1"><a class="header-anchor" href="#_2、v-bind" aria-hidden="true">#</a> 2、v-bind</h5><blockquote><p>html 属性不能使用双大括号形式绑定，我们使用 v-bind 指令给 HTML 标签属性绑定值； 而且在将<code>v-bind</code> 用于<code>class</code> 和<code>style</code> 时，Vue.js 做了专门的增强。</p></blockquote><h6 id="_1、绑定class" tabindex="-1"><a class="header-anchor" href="#_1、绑定class" aria-hidden="true">#</a> 1、绑定class</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>static<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ active: isActive, &#39;text-danger&#39;: hasError }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">isActive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> 
            <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、绑定style" tabindex="-1"><a class="header-anchor" href="#_2、绑定style" aria-hidden="true">#</a> 2、绑定style</h6><p><code>v-bind:style</code> 的对象语法十分直观，看着非常像 CSS，但其实是一个 JavaScript 对象。style 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，这种方式记得用单引号括起来) 来命名。</p><p>例如：<code>font-size</code>--&gt;<code>fontSize</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ color: activeColor, fontSize: fontSize + &#39;px&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">activeColor</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">30</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_3、绑定其他任意属性" tabindex="-1"><a class="header-anchor" href="#_3、绑定其他任意属性" aria-hidden="true">#</a> 3、绑定其他任意属性</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ color: activeColor, fontSize: fontS ize + &#39;px&#39; }<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">activeColor</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> 
            <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> 
            <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zhangsan<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_4、v-bind-缩写" tabindex="-1"><a class="header-anchor" href="#_4、v-bind-缩写" aria-hidden="true">#</a> 4、v-bind 缩写</h6><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ color: activeColor, fontSize: fontSize + &#39;px&#39; }<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、v-model" tabindex="-1"><a class="header-anchor" href="#_3、v-model" aria-hidden="true">#</a> 3、v-model</h5><p>刚才的 v-text、v-html、v-bind 可以看做是单向绑定，数据影响了视图渲染，但是反过来就不行。接下来学习的 v-model 是双向绑定，视图（View）和模型（Model）之间会互相影响。</p><p>既然是双向绑定，一定是在视图中可以修改数据，这样就限定了视图的元素类型。目前</p><p>v-model 的可使用元素有：</p><ul><li><code>input</code></li><li><code>select</code></li><li><code>textarea</code></li><li><code>checkbox</code></li><li><code>radio</code></li><li><code>components</code>（Vue 中的自定义组件）</li></ul><p>基本上除了最后一项，其它都是表单的输入项。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>language<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Java<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>language<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PHP<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>PHP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>language<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Swift<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>Swift<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>
        你选择了：{{language.join(&#39;,&#39;)}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>多个<code>CheckBox</code>对应一个 model 时，model 的类型是一个数组单个<code>checkbox</code> 值默认是boolean 类型</li><li><code>radio</code> 对应的值是 input 的 value 值</li><li><code>text</code> 和<code>textarea</code> 默认对应的 model 是字符串</li><li><code>select</code>单选对应字符串，多选对应也是数组</li></ul><p>效果：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.5.3.png" alt="image-20220423154631767" tabindex="0" loading="lazy"><figcaption>image-20220423154631767</figcaption></figure><h5 id="_4、v-on" tabindex="-1"><a class="header-anchor" href="#_4、v-on" aria-hidden="true">#</a> 4、v-on</h5><h6 id="_1、基本用法" tabindex="-1"><a class="header-anchor" href="#_1、基本用法" aria-hidden="true">#</a> 1、基本用法</h6><blockquote><p>v-on 指令用于给页面元素绑定事件</p></blockquote><p>语法： <code>v-on:事件名=&quot;js 片段或函数名&quot;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--事件中直接写 js 片段--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--事件指定一个回调函数，必须是 Vue 实例中定义的函数--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decrement<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>有{{num}}个赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> 
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">100</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//要使用 data 中的属性，必须 this.属性名</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，事件绑定可以简写，例如<code>v-on:click=&#39;add&#39;</code>可以简写为<code>@click=&#39;add&#39;</code></p><h6 id="_2、事件修饰符" tabindex="-1"><a class="header-anchor" href="#_2、事件修饰符" aria-hidden="true">#</a> 2、事件修饰符</h6><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</p><p>尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑， 而不是去处理 DOM 事件细节。</p><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。修饰符是由<strong>点开头的指令后缀</strong>来表示的。</p><ul><li><code>.stop</code> ：阻止事件冒泡到父元素</li><li><code>.prevent</code>：阻止默认事件发生</li><li><code>.capture</code>：使用事件捕获模式</li><li><code>.self</code>：只有元素自身触发事件才执行。（冒泡或捕获的都不执行）</li><li><code>.once</code>：只执行一次</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--右击事件，并阻止默认事件发生--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>contextmenu.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token comment">&lt;!--右击事件，不阻止默认事件发生--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>contextmenu</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decrement($event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>有{{num}}个赞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">100</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// ev.preventDefault(); this.num--;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：右键“点赞”，不会触发默认的浏览器右击事件；右键“取消”，会触发默认的浏览器右击事件）</p><h6 id="_3、按键修饰符" tabindex="-1"><a class="header-anchor" href="#_3、按键修饰符" aria-hidden="true">#</a> 3、按键修饰符</h6><p>在监听键盘事件时，我们经常需要检查常见的键值。Vue 允许为<code>v-on</code> 在监听键盘事件时添加按键修饰符：</p><p>只有在 <code>keyCode</code> 是 13 时调用 <code>vm.submit()</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>记住所有的 <code>keyCode</code> 比较困难，所以 Vue 为最常用的按键提供了别名：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 同上 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 缩写语法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全部的按键别名：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获“删除”和“退格”键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><h6 id="_4、组合按钮" tabindex="-1"><a class="header-anchor" href="#_4、组合按钮" aria-hidden="true">#</a> 4、组合按钮</h6><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Alt + C --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.alt.67</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clear<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- Ctrl + Click --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click.ctrl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Do something<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、v-for" tabindex="-1"><a class="header-anchor" href="#_5、v-for" aria-hidden="true">#</a> 5、v-for</h5><blockquote><p>遍历数据渲染页面是非常常用的需求，Vue 中通过 v-for 指令来实现</p></blockquote><h6 id="_1、遍历数组" tabindex="-1"><a class="header-anchor" href="#_1、遍历数组" aria-hidden="true">#</a> 1、遍历数组</h6><p>语法：<strong><code>v-for=&quot;item in items&quot;</code></strong></p><ul><li>items：要遍历的数组，需要在 vue 的 data 中定义好</li><li>item：迭代得到的当前正在遍历的元素</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in users<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            {{user.name}} - {{user.gender}} - {{user.age}}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;柳岩&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;范冰冰&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;刘亦菲&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;古力娜扎&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.5.5.1.png" alt="image-20220423160048459" tabindex="0" loading="lazy"><figcaption>image-20220423160048459</figcaption></figure><h6 id="_2、数组角标" tabindex="-1"><a class="header-anchor" href="#_2、数组角标" aria-hidden="true">#</a> 2、数组角标</h6><p>在遍历的过程中，如果我们需要知道数组角标，可以指定第二个参数：</p><p>语法：<strong><code>v-for=&quot;(item,index) in items&quot;</code></strong></p><ul><li>items：要迭代的数组</li><li>item：迭代得到的数组元素别名</li><li>index：迭代到的当前元素索引，从 0 开始。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(user, index) in users<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            {{index + 1}}. {{user.name}} - {{user.gender}} - {{user.age}}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果:</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.5.5.2.png" alt="image-20220423160834023" tabindex="0" loading="lazy"><figcaption>image-20220423160834023</figcaption></figure><h6 id="_3、遍历对象" tabindex="-1"><a class="header-anchor" href="#_3、遍历对象" aria-hidden="true">#</a> 3、遍历对象</h6><p>v-for 除了可以迭代数组，也可以迭代对象。语法基本类似语法：</p><ul><li><p><code>v-for=&quot;value in object&quot;</code></p><p>1 个参数时，得到的是对象的属性值</p></li><li><p><code>v-for=&quot;(value,key) in object&quot;</code></p><p>2 个参数时，第一个是属性值，第二个是属性名</p></li><li><p><code>v-for=&quot;(value,key,index) in object&quot;</code></p><p>3 个参数时，第三个是索引，从 0 开始</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(value, key, index) in user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            {{index + 1}}. {{key}} - {{value}}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> 
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.5.5.3.png" alt="image-20220423161527826" tabindex="0" loading="lazy"><figcaption>image-20220423161527826</figcaption></figure><h6 id="_4、key" tabindex="-1"><a class="header-anchor" href="#_4、key" aria-hidden="true">#</a> 4、Key</h6><blockquote><p>用来标识每一个元素的唯一特征，这样 Vue 可以使用“就地复用”策略<strong>有效的提高渲染的效率。</strong></p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item,index) in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”index”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in items<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”item.id”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最佳实践：</p><ol><li>如果 items 是数组，可以使用 index 作为每个元素的唯一标识</li><li>如果 items 是对象数组，可以使用 item.id 作为每个元素的唯一标识</li></ol><h5 id="_6、v-if-和-v-show" tabindex="-1"><a class="header-anchor" href="#_6、v-if-和-v-show" aria-hidden="true">#</a> 6、v-if 和 v-show</h5><h6 id="_1、基本用法-1" tabindex="-1"><a class="header-anchor" href="#_1、基本用法-1" aria-hidden="true">#</a> 1、基本用法</h6><p>v-if，顾名思义，条件判断。当得到结果为 true 时，所在的元素才会<strong>被渲染</strong>。</p><p>v-show，当得到结果为 true 时，所在的元素才会<strong>被显示</strong>。</p><p>语法：<code>v-if=&quot;布尔表达式&quot;</code>, <code>v-show=&quot;布尔表达式&quot;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show = !show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我呀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        看到我啦？！
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        看到我啦？！show
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> 
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、与v-for-结合" tabindex="-1"><a class="header-anchor" href="#_2、与v-for-结合" aria-hidden="true">#</a> 2、与v-for 结合</h6><p>当 v-if 和 v-for 出现在一起时，v-for 优先级更高。也就是说，会先遍历，再判断条件。修改 v-for 中的案例，添加 v-if：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(user, index) in users<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.gender == &#39;女&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        {{index + 1}}. {{user.name}} - {{user.gender}} - {{user.age}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：只显示女性</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.5.6.2.png" alt="image-20220423162141389" tabindex="0" loading="lazy"><figcaption>image-20220423162141389</figcaption></figure><h5 id="_7、v-else-和-v-else-if" tabindex="-1"><a class="header-anchor" href="#_7、v-else-和-v-else-if" aria-hidden="true">#</a> 7、v-else 和 v-else-if</h5><blockquote><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>random=Math.random()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我呀
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{random}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>random &gt;= 0.75<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        看到我啦？！v-if &gt;= 0.75
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>random &gt; 0.5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        看到我啦？！v-else-if &gt; 0.5
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>random &gt; 0.25<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        看到我啦？！v-else-if &gt; 0.25
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>
        看到我啦？！v-else
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">random</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-6、计算属性和侦听器" tabindex="-1"><a class="header-anchor" href="#_3-3-6、计算属性和侦听器" aria-hidden="true">#</a> 3.3.6、计算属性和侦听器</h4><h5 id="_1、计算属性-computed" tabindex="-1"><a class="header-anchor" href="#_1、计算属性-computed" aria-hidden="true">#</a> 1、计算属性（computed）</h5><blockquote><p>某些结果是基于之前数据实时计算出来的，我们可以利用计算属性。来完成</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>西游记：价格{{xyjPrice}}，数量：
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xyjNum<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>水浒传：价格{{shzPrice}}，数量：
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shzNum<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>总价：{{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">xyjPrice</span><span class="token operator">:</span> <span class="token number">56.73</span><span class="token punctuation">,</span>
            <span class="token literal-property property">shzPrice</span><span class="token operator">:</span> <span class="token number">47.98</span><span class="token punctuation">,</span>
            <span class="token literal-property property">xyjNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">shzNum</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xyjPrice <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xyjNum <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shzPrice <span class="token operator">*</span> th
                is<span class="token punctuation">.</span>shzNum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：只要依赖的属性发生变化，就会重新计算这个属性</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.6.1.png" alt="image-20220423162540755" tabindex="0" loading="lazy"><figcaption>image-20220423162540755</figcaption></figure><h5 id="_2、侦听" tabindex="-1"><a class="header-anchor" href="#_2、侦听" aria-hidden="true">#</a> 2、侦听</h5><blockquote><p><code>watch</code> 可以让我们监控一个值的变化。从而做出相应的反应。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>西游记：价格{{xyjPrice}}，数量：
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xyjNum<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>水浒传：价格{{shzPrice}}，数量：
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shzNum<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>总价：{{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        {{msg}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">xyjPrice</span><span class="token operator">:</span> <span class="token number">56.73</span><span class="token punctuation">,</span>
            <span class="token literal-property property">shzPrice</span><span class="token operator">:</span> <span class="token number">47.98</span><span class="token punctuation">,</span>
            <span class="token literal-property property">xyjNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">shzNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
        
    
    
    
    
    
    is<span class="token punctuation">.</span>shzNum<span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">totalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xyjPrice <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xyjNum <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shzPrice <span class="token operator">*</span> th

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">xyjNum</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">&quot;西游记没有更多库存了&quot;</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>xyjNum <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果:</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.6.2.png" alt="image-20220423162706812" tabindex="0" loading="lazy"><figcaption>image-20220423162706812</figcaption></figure><h5 id="_3、过滤器-filters" tabindex="-1"><a class="header-anchor" href="#_3、过滤器-filters" aria-hidden="true">#</a> 3、过滤器（filters）</h5><blockquote><p>过滤器不改变真正的<code>data</code>，而只是改变渲染的结果，并返回过滤后的版本。在很多不同的情况下，过滤器都是有用的，比如尽可能保持 API 响应的干净，并在前端处理数据的格式。</p></blockquote><p>示例：展示用户列表性别显示男女</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in userList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{user.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{user.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
                <span class="token comment">&lt;!-- 使用代码块实现，有代码侵入 --&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{user.gender===1? &quot;男&quot;:&quot;女&quot;}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">userList</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jacky&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;peter&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1、局部过滤器" tabindex="-1"><a class="header-anchor" href="#_1、局部过滤器" aria-hidden="true">#</a> 1、局部过滤器</h6><blockquote><p>册在当前 vue 实例中，只有当前实例能用</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">userList</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jacky&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;peter&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// filters 定义局部过滤器，只可以在当前 vue 实例中使用</span>
    <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">genderFilter</span><span class="token punctuation">(</span><span class="token parameter">gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> gender <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;男~&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;女~&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>|</code> 管道符号：表示使用后面的过滤器处理前面的数据</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{user.gender | genderFilter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_2、全局过滤器" tabindex="-1"><a class="header-anchor" href="#_2、全局过滤器" aria-hidden="true">#</a> 2、全局过滤器</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在创建 Vue 实例之前全局定义过滤器：</span>
Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;capitalize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何 vue 实例都可以使用：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{user.name | capitalize}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>过滤器常用来处理文本格式化的操作。</p><p>过滤器可以用在两个地方：</p><p>双花括号插值和 <code>v-bind</code>表达式</p><h4 id="_3-3-7、组件化" tabindex="-1"><a class="header-anchor" href="#_3-3-7、组件化" aria-hidden="true">#</a> 3.3.7、组件化</h4><p>在大型应用开发的时候，页面可以划分成很多部分。往往不同的页面，也会有相同的部分。 例如可能会有相同的头部导航。</p><p>但是如果每个页面都独自开发，这无疑增加了我们开发的成本。所以我们会把页面的不同部 分拆分成独立的组件，然后在不同页面就可以共享这些组件，避免重复开发。</p><blockquote><p>在vue 里，所有的 vue 实例都是组件</p></blockquote><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.7.0.png" alt="image-20220423163352698" tabindex="0" loading="lazy"><figcaption>image-20220423163352698</figcaption></figure><h5 id="_1、全局组件" tabindex="-1"><a class="header-anchor" href="#_1、全局组件" aria-hidden="true">#</a> 1、全局组件</h5><blockquote><p>我们通过 Vue 的 component 方法来定义一个全局组件</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--使用定义好的全局组件--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 定义全局组件，两个参数：1，组件名称。2，组件参数</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;button v-on:click=&quot;count++&quot;&gt;你点了我 {{ count }} 次，我记住了.&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>组件其实也是一个 Vue 实例，因此它在定义时也会接收：data、methods、生命周期函数等</li><li>不同的是组件不会与页面的元素绑定，否则就无法复用了，因此没有 el 属性。</li><li>但是组件渲染需要 html 模板，所以增加了 template 属性，值就是 HTML 模板</li><li>全局组件定义完毕，任何 vue 实例都可以直接在 HTML 中通过组件名称来使用组件了</li><li>data 必须是一个函数，不再是一个对象。</li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.7.1.png" alt="image-20220423163742349" tabindex="0" loading="lazy"><figcaption>image-20220423163742349</figcaption></figure><h5 id="_2、组件的复用" tabindex="-1"><a class="header-anchor" href="#_2、组件的复用" aria-hidden="true">#</a> 2、组件的复用</h5><p>定义好的组件，可以任意复用多次</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--使用定义好的全局组件--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,204),X={href:"https://cn.vuejs.org/v2/guide/components.html#data-%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},K=a("code",null,"data",-1),Z=e(`<p>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝；</p><p>当我们定义这个 <code>&lt;button-counter&gt;</code> 组件时，你可能会发现它的 <code>data</code> 并不是像这样直接提供一个对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取而代之的是，<strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 Vue 没有这条规则，点击一个按钮就可能会影响到<em>其它所有实例</em></p><h5 id="_3、局部组件" tabindex="-1"><a class="header-anchor" href="#_3、局部组件" aria-hidden="true">#</a> 3、局部组件</h5><blockquote><p>一旦全局注册，就意味着即便以后你不再使用这个组件，它依然会随着 Vue 的加载而加载。因此，对于一些并不频繁使用的组件，我们会采用局部注册。</p></blockquote><p>我们先在外部定义一个对象，结构与创建组件时传递的第二个参数一致：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;button v-on:click=&quot;count++&quot;&gt;你点了我 {{ count }} 次，我记住了.&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Vue 中使用它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">counter</span><span class="token operator">:</span> counter <span class="token comment">// 将定义的对象注册为组件</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>components</code> 就是当前 vue 对象子组件集合。</p><p>其 key 就是子组件名称</p><p>其值就是组件对象名</p></li><li><p>效果与刚才的全局注册是类似的，不同的是，这个 <code>counter</code> 组件只能在当前的 Vue 实例中使用</p></li></ul><p>简写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        counter <span class="token comment">// 将定义的对象注册为组件</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-8、生命周期钩子函数" tabindex="-1"><a class="header-anchor" href="#_3-3-8、生命周期钩子函数" aria-hidden="true">#</a> 3.3.8、生命周期钩子函数</h4><h5 id="_1、生命周期" tabindex="-1"><a class="header-anchor" href="#_1、生命周期" aria-hidden="true">#</a> 1、生命周期</h5><blockquote><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 ：创建实例，装载模板，渲染模板等等。Vue 为生命周期中的每个状态都设置了钩子函数（监听函数）。每当 Vue 实例处于不同的生命周期时，对应的函数就会被触发调用。</p></blockquote><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.8.1.png" alt="Vue 实例生命周期" style="zoom:50%;"><h5 id="_2、钩子函数" tabindex="-1"><a class="header-anchor" href="#_2、钩子函数" aria-hidden="true">#</a> 2、钩子函数</h5><p>beforeCreated：我们在用 Vue 时都要进行实例化，因此，该函数就是在 Vue 实例化时调用，也可以将他理解为初始化函数比较方便一点，在 Vue1.0 时，这个函数的名字就是init。</p><ul><li><code>created</code>：在创建实例之后进行调用。</li><li><code>beforeMount</code>：页面加载完成，没有渲染。如：此时页面还是<code>{{name}}</code></li><li><code>mounted</code>：我们可以将他理解为原生 js 中的 <code>window.onload=function({.,.})</code>,或许大家也在用 jquery，所以也可以理解为 jquery 中的<code>$(document).ready(function(){….})</code>，他的功能就是： 在 dom 文档渲染完毕之后将要执行的函数， 该函数在 Vue1.0 版本中名字为<code>compiled</code>。 此时页面中的<code>{{name}}</code>已被渲染成张三</li><li><code>beforeDestroy</code>：该函数将在销毁实例前进行调用 。</li><li><code>destroyed</code>：改函数将在销毁实例时进行调用。</li><li><code>beforeUpdate</code>：组件更新之前。</li><li><code>updated</code>：组件更新之后。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>赞！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>
            {{name}}，非常帅！！！有{{num}}个人点赞。
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../node_modules/vue/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">100</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;=========beforeCreate=============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据模型未加载：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot; 方 法 未 加 载 ：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html 模板未加载：&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;=========created=============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据模型已加载：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot; 方 法 已 加 载 ：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html 模板已加载：&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html 模板未渲染：&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;=========beforeMount=============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html 模板未渲染：&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;=========mounted=============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html 模板已渲染：&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;=========beforeUpdate=============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot; 数 据 模 型 已 更 新 ：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html 模板未更新：&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;=========updated=============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据模型已更新：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;html 模板已更新：&quot;</span> <span class="token operator">+</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-9、vue-模块化开发" tabindex="-1"><a class="header-anchor" href="#_3-3-9、vue-模块化开发" aria-hidden="true">#</a> 3.3.9、vue 模块化开发</h4><h5 id="_1、全局安装-webpack" tabindex="-1"><a class="header-anchor" href="#_1、全局安装-webpack" aria-hidden="true">#</a> 1、全局安装 webpack</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install webpack -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.npm安装报错</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.1.1.png" alt="npm安装报错" tabindex="0" loading="lazy"><figcaption>npm安装报错</figcaption></figure><p>2.以管理员方式运行cmd,重新执行<code>npm install webpack -g</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.1.2.png" alt="以管理员方式运行cmd" tabindex="0" loading="lazy"><figcaption>以管理员方式运行cmd</figcaption></figure><h5 id="_2、全局安装-vue-脚手架" tabindex="-1"><a class="header-anchor" href="#_2、全局安装-vue-脚手架" aria-hidden="true">#</a> 2、全局安装 vue 脚手架</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g @vue/cli-init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以管理员方式打开cmd，执行<code>npm install -g @vue/cli-init@4.0.3 </code>命令，安装4.0.3版本vue脚手架</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.2.png" alt="全局安装 vue 脚手架" tabindex="0" loading="lazy"><figcaption>全局安装 vue 脚手架</figcaption></figure><h5 id="_3、初始化-vue-项目" tabindex="-1"><a class="header-anchor" href="#_3、初始化-vue-项目" aria-hidden="true">#</a> 3、初始化 vue 项目；</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue init webpack appname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>vue 脚手架使用 webpack 模板初始化一个 appname 项目</p><h6 id="_1、-vue-不是内部或外部命令-也不是可运行的程序" tabindex="-1"><a class="header-anchor" href="#_1、-vue-不是内部或外部命令-也不是可运行的程序" aria-hidden="true">#</a> 1、&#39;vue&#39; 不是内部或外部命令，也不是可运行的程序</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm init webpack vue-demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.1.png" alt="初始化 vue 项目" tabindex="0" loading="lazy"><figcaption>初始化 vue 项目</figcaption></figure><h6 id="_2、卸载vue-cli-init" tabindex="-1"><a class="header-anchor" href="#_2、卸载vue-cli-init" aria-hidden="true">#</a> 2、卸载vue/cli-init</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm uninstall -g @vue/cli-init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.2.png" alt="卸载vue、cli-init" tabindex="0" loading="lazy"><figcaption>卸载vue、cli-init</figcaption></figure><h6 id="_3、安装vue-cli" tabindex="-1"><a class="header-anchor" href="#_3、安装vue-cli" aria-hidden="true">#</a> 3、安装vue/cli</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g @vue/cli@4.0.3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.3.png" alt="安装vue/cli" style="zoom:50%;"><h6 id="_4、配置环境变量" tabindex="-1"><a class="header-anchor" href="#_4、配置环境变量" aria-hidden="true">#</a> 4、配置环境变量</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.4.png" alt="image-20220425232327423" tabindex="0" loading="lazy"><figcaption>image-20220425232327423</figcaption></figure><h6 id="_5、查看vue是否安装" tabindex="-1"><a class="header-anchor" href="#_5、查看vue是否安装" aria-hidden="true">#</a> 5、查看vue是否安装</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue -V
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.5.png" alt="image-20220425232413958" tabindex="0" loading="lazy"><figcaption>image-20220425232413958</figcaption></figure><h6 id="_6、提示要使用vue-cli-init" tabindex="-1"><a class="header-anchor" href="#_6、提示要使用vue-cli-init" aria-hidden="true">#</a> 6、提示要使用<code>vue/cli-init</code></h6><p>😡就应该按自己的想法来</p><p>Command vue init requires a global addon to be installed. Please run npm install -g @vue/cli-init and try again.</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.6.png" alt="image-20220425232604227" tabindex="0" loading="lazy"><figcaption>image-20220425232604227</figcaption></figure><h6 id="_7、卸载vue-cli" tabindex="-1"><a class="header-anchor" href="#_7、卸载vue-cli" aria-hidden="true">#</a> 7、卸载<code>vue/cli</code></h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm uninstall -g @vue/cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.7.png" alt="image-20220425233234014" tabindex="0" loading="lazy"><figcaption>image-20220425233234014</figcaption></figure><h6 id="_8、修改环境变量" tabindex="-1"><a class="header-anchor" href="#_8、修改环境变量" aria-hidden="true">#</a> 8、修改环境变量</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.8.png" alt="image-20220425233656209" tabindex="0" loading="lazy"><figcaption>image-20220425233656209</figcaption></figure><h6 id="_9、没想到这个也要管理员方式运行cmd执行这个命令" tabindex="-1"><a class="header-anchor" href="#_9、没想到这个也要管理员方式运行cmd执行这个命令" aria-hidden="true">#</a> 9、没想到这个也要管理员方式运行cmd执行这个命令</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.9.png" alt="image-20220425234128781" tabindex="0" loading="lazy"><figcaption>image-20220425234128781</figcaption></figure><h6 id="_10、以管理员方式运行cmd执行命令" tabindex="-1"><a class="header-anchor" href="#_10、以管理员方式运行cmd执行命令" aria-hidden="true">#</a> 10、以管理员方式运行cmd执行命令</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue init webpack vue-demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.10.png" alt="image-20220425234603564" style="zoom:50%;"><h6 id="查看全局已安装" tabindex="-1"><a class="header-anchor" href="#查看全局已安装" aria-hidden="true">#</a> 📌查看全局已安装</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm ls -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.11.png" alt="image-20220425230733942" tabindex="0" loading="lazy"><figcaption>image-20220425230733942</figcaption></figure><p>📌查看已安装的包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm ls -g --depth 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>只会查到安装的包，并不会查到包的依赖。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.3.12.png" alt="image-20220425231419361" tabindex="0" loading="lazy"><figcaption>image-20220425231419361</figcaption></figure><h5 id="_4、启动-vue-项目" tabindex="-1"><a class="header-anchor" href="#_4、启动-vue-项目" aria-hidden="true">#</a> 4、启动 vue 项目；</h5><p>项目的 package.json 中有 scripts，代表我们能运行的命令</p><p>启动项目</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm start = npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd vue-demo
npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.4.png" alt="image-20220425234934384" tabindex="0" loading="lazy"><figcaption>image-20220425234934384</figcaption></figure><p>将项目打包</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm run build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5、模块化开发" tabindex="-1"><a class="header-anchor" href="#_5、模块化开发" aria-hidden="true">#</a> 5、模块化开发</h5><h6 id="_1、项目结构" tabindex="-1"><a class="header-anchor" href="#_1、项目结构" aria-hidden="true">#</a> 1、项目结构</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.5.1.png" alt="image-20220423170036954" tabindex="0" loading="lazy"><figcaption>image-20220423170036954</figcaption></figure><p>运行流程</p><ul><li>进入页面首先加载 index.html 和 main.js 文件。</li><li>main.js 导入了一些模块【vue、app、router】，并且创建 vue 实例，关联 index.html 页面的<code>&lt;div id=&quot;app&quot;&gt;</code>元素。使用了 router，导入了 App 组件。并且使用<code>&lt;App/&gt;</code>标签引用了这个组件</li><li>第一次默认显示 App 组件。App 组件有个图片和<code>&lt;router-view&gt;</code>，所以显示了图片。但是由于<code>&lt;router-view&gt;</code>代表路由的视图，默认是访问/#/路径（router 路径默认使用HASH 模式）。在 router 中配置的/是显示 HelloWorld 组件。</li><li>所以第一次访问，显示图片和 HelloWorld 组件。</li><li>我们尝试自己写一个组件， 并且加入路由。点击跳转。需要使用<code>&lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;</code>标签</li></ul><h6 id="_2、vue-单文件组件" tabindex="-1"><a class="header-anchor" href="#_2、vue-单文件组件" aria-hidden="true">#</a> 2、Vue 单文件组件</h6><p>Vue 单文件组件模板有三个部分；</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;HelloWorld&#39;</span><span class="token punctuation">,</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;Welcome to Your Vue.js App&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">h1,
    h2</span> <span class="token punctuation">{</span>
        <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Template</code>：编写模板</li><li><code>Script</code>：vue 实例配置</li><li><code>Style</code>：样式</li></ul><h6 id="_3、快速生成-vue-模板" tabindex="-1"><a class="header-anchor" href="#_3、快速生成-vue-模板" aria-hidden="true">#</a> 3、快速生成 vue 模板</h6><p>vscode 添加用户代码片段（快速生成 vue 模板）</p><p>文件--&gt;首选项--&gt;用户代码片段--&gt;点击新建代码片段--取名vue.json确定</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;生成 vue 模板&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
			<span class="token string">&quot;&lt;template&gt;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&lt;/template&gt;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&lt;script&gt;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//这里可以导入其他文件（比如：组件，工具 js，第三方插件 js，json文件，图片文件等等）&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//例如：import 《组件名称》 from &#39;《组件路径》&#39;;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;export default {&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//import 引入的组件需要注入到对象中才能使用&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;components: {},&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;props: {},&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;data() {&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//这里存放数据&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;return {&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;};&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;},&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//计算属性 类似于 data 概念&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;computed: {},&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//监控 data 中的数据变化&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;watch: {},&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//方法集合&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;methods: {&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;},&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//生命周期 - 创建完成（可以访问当前 this 实例）&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;created() {&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;},&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;//生命周期 - 挂载完成（可以访问 DOM 元素）&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;mounted() {&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;},&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;beforeCreate() {}, //生命周期 - 创建之前&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;beforeMount() {}, //生命周期 - 挂载之前&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;beforeUpdate() {}, //生命周期 - 更新之前&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;updated() {}, //生命周期 - 更新之后&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;beforeDestroy() {}, //生命周期 - 销毁之前&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;destroyed() {}, //生命周期 - 销毁完成&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;activated() {}, //如果页面有 keep-alive 缓存功能，这个函数会触发&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&lt;/script&gt;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&lt;style scoped&gt;&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;$4&quot;</span><span class="token punctuation">,</span>
			<span class="token string">&quot;&lt;/style&gt;&quot;</span>
		<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;生成 vue 模板&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4、导入element-ui-快速开发" tabindex="-1"><a class="header-anchor" href="#_4、导入element-ui-快速开发" aria-hidden="true">#</a> 4、导入element-ui 快速开发</h6><ol><li><h6 id="安装-element-ui" tabindex="-1"><a class="header-anchor" href="#安装-element-ui" aria-hidden="true">#</a> 安装 element-ui：</h6><p>以管理员方式运行VS Code，终端执行该命令</p><div class="language-npm line-numbers-mode" data-ext="npm"><pre class="language-npm"><code> npm i element-ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.5.4.1.png" alt="image-20220426114244549" tabindex="0" loading="lazy"><figcaption>image-20220426114244549</figcaption></figure></li><li><p>在 main.js 中引入 element-ui 就可以全局使用了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;element-ui/lib/theme-chalk/index.css&#39;</span> 
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.5.4.0.png" alt="image-20220426125248537" tabindex="0" loading="lazy"><figcaption>image-20220426125248537</figcaption></figure><p><code>el-radio</code>这个标签报错😡</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.5.4.2.png" alt="image-20220426124714910" tabindex="0" loading="lazy"><figcaption>image-20220426124714910</figcaption></figure><p>加个div包裹起来就行了(找了好久😰)</p><p>这个<code>el-radio</code>还报红，但是能运行，我把<code>ES Link</code>这个插件禁用了，才不报红</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3.3.9.5.4.3.png" alt="image-20220426124956527" tabindex="0" loading="lazy"><figcaption>image-20220426124956527</figcaption></figure></li><li><p>将 App.vue 改为 element-ui 中的后台布局</p></li><li><p>添加测试路由、组件，测试跳转逻辑</p><p>(1) 参照文档 el-menu 添加 router 属性</p><p>(2) 参照文档 el-menu-item 指定 index 需要跳转的地址</p></li></ol><h2 id="_3-5、babel" tabindex="-1"><a class="header-anchor" href="#_3-5、babel" aria-hidden="true">#</a> 3.5、Babel</h2><p>Babel 是一个 JavaScript 编译器，我们可以使用 es 的最新语法编程，而不用担心浏览器兼容问题。他会自动转化为浏览器兼容的代码</p><h2 id="_3-6、webpack" tabindex="-1"><a class="header-anchor" href="#_3-6、webpack" aria-hidden="true">#</a> 3.6、Webpack</h2><p>自动化项目构建工具。gulp 也是同类产品</p>`,99);function aa(p,na){const s=o("ExternalLinkIcon");return c(),l("div",null,[d,a("p",null,[n("Docker 安装文档："),a("a",g,[n("Install Docker Engine on CentOS | Docker Documentation"),t(s)])]),k,a("blockquote",null,[a("p",null,[a("a",m,[n("yum"),t(s)]),n("-config-manager命令是对资源库（"),v,n("下的文件）进行增删改查，推荐使用yum-config-manager命令进行改动，系统默认没有安装这个命令，这个命令在yum-utils包里，可以通过"),h,n("安装")])]),b,a("h4",f,[y,n(" 1.10.1、下载人人开源的"),a("a",x,[n("renren-generator"),t(s)])]),_,a("p",null,[n("官网教程:"),a("a",q,[n("简介 | MyBatis-Plus (baomidou.com)"),t(s)])]),w,z,j,a("p",null,[n("各依赖支持情况: "),a("a",S,[n("MySQL :: MySQL Connector/J 8.0 Developer Guide :: 2 Compatibility with MySQL and Java Versions"),t(s)])]),E,a("p",null,[n("Spring Clould Alibaba中文文档: "),a("a",I,[n("spring-cloud-alibaba/README-zh.md at 2021.x · alibaba/spring-cloud-alibaba (github.com)"),t(s)])]),V,a("p",null,[n("nacos官方文档: "),a("a",C,[n("什么是 Nacos"),t(s)])]),a("p",null,[n("nacos中文文档: "),a("a",A,[n("spring-cloud-alibaba/readme-zh.md at 2021.x · alibaba/spring-cloud-alibaba (github.com)"),t(s)])]),M,a("p",null,[n("官方文档："),a("a",P,[n("Spring Cloud Gateway"),t(s)])]),R,a("ul",null,[a("li",null,[a("blockquote",null,[a("p",null,[T,n(": This is a "),a("a",D,[n("Java 8 Function Predicate"),t(s)]),n(". The input type is a "),a("a",B,[n("Spring Framework "),L,t(s)]),n(". This lets you match on anything from the HTTP request, such as headers or parameters.")])])])]),O,a("ul",null,[a("li",null,[a("blockquote",null,[a("p",null,[F,n(": These are instances of "),a("a",N,[U,t(s)]),n(" that have been constructed with a specific factory. Here, you can modify requests and responses before or after sending the downstream request.")]),H])])]),W,a("p",null,[n("首先通过 new Vue()来创建 Vue 实例 然后构造函数接收一个对象，对象中有一些属性： "),Q,n("：是 element 的缩写，通过 id 选中要渲染的页面元素，本例中是一个 div "),J,n("：数据，数据是一个对象，里面有很多属性，都可以渲染到视图中 "),G,n("：这里我们指定了一个 name 属性 页面中的"),$,n("元素中，我们通过"+u(p.name)+"的方式，来渲染刚刚定义的 name 属性。",1)]),Y,a("p",null,[a("a",X,[n("组件的 "),K,n(" 属性必须是函数！"),t(s)])]),Z])}const ea=i(r,[["render",aa],["__file","base1.html.vue"]]);export{ea as default};
