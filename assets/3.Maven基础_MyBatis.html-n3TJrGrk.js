import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c,a as n,b as a,d as t,e as p}from"./app-ldxHvpH7.js";const i={},u=p('<h1 id="javaweb基础3——maven基础-mybatis" tabindex="-1"><a class="header-anchor" href="#javaweb基础3——maven基础-mybatis" aria-hidden="true">#</a> JavaWeb基础3——Maven基础&amp;MyBatis</h1><h2 id="一、构建工具maven" tabindex="-1"><a class="header-anchor" href="#一、构建工具maven" aria-hidden="true">#</a> 一、构建工具Maven</h2><h3 id="_1-1-简介" tabindex="-1"><a class="header-anchor" href="#_1-1-简介" aria-hidden="true">#</a> 1.1 简介</h3><p><strong>Maven</strong>是专门用于<strong>管理和构建Java项目</strong>的工具。</p><p><strong>传统项目管理缺点：</strong></p><p>1.jar包版本不统一、不兼容</p><p>2.工程升级维护过程操作繁琐</p><p><strong>Maven介绍：</strong></p><p>Maven 的本质是一个<strong>项目管理工具</strong>，将项目开发和管理过程抽象成一个项目对象模型（POM）。</p><p>maven是用java语言写的，它管理的项目都以面对对象形式设计，最终<strong>把一个项目看成一个对象</strong>，即POM。</p><p><strong>POM:</strong></p><p>POM（Project Object Model）：项目对象模型</p><h4 id="_1-1-1-作用和功能" tabindex="-1"><a class="header-anchor" href="#_1-1-1-作用和功能" aria-hidden="true">#</a> 1.1.1 作用和功能</h4><p><strong>作用：</strong></p><p>**项目构建：**提供标准的、<strong>跨平台</strong>的自动化项目构建方式</p><p>**依赖管理：**方便快捷的管理项目依赖的资源（jar包），避免资源间的版本冲突问题</p><p>**统一开发结构：**提供标准的、统一的项目结构</p><p><strong>功能：</strong></p><p>Maven是专门用于管理和构建Java项目的工具，它的主要功能有：</p><ul><li><strong>提供了一套标准化的项目结构</strong></li></ul><p>每一个开发工具（IDE）都有自己不同的项目结构，它们互相之间不通用。</p><p>而Maven提供了一套标准化的项目结构，<strong>所有的IDE使用Maven构建的项目完全一样</strong>，所以IDE创建的Maven项目可以通用。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/32a99c6beb9c42a2a09f9d32a7e4051b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>提供了一套标准化的构建流程（编译，测试，打包，发布……）</strong></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/638a130ec1874256991de06c02444f04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>提供了一套依赖管理机制</strong></li></ul><p>Maven使用标准的<strong>坐标</strong>配置来管理各种依赖， 只需要简单的配置就可以完成依赖管理：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/825cd7e723704ae5b67bcce18ed31f3c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-1-2-maven模型" tabindex="-1"><a class="header-anchor" href="#_1-1-2-maven模型" aria-hidden="true">#</a> 1.1.2 Maven模型</h4><ul><li><p>项目对象模型pom (Project Object Model)</p></li><li><p>依赖管理模型(Dependency)</p></li><li><p>插件(Plugin)</p></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/c2c442ad43d24bc7b3588895cded3401.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>项目对象模型pom</strong>就是将我们自己抽象成一个对象模型，有自己专属的坐标，是唯一标识。</p><p>项目对象模型pom通过xml格式保存的pom.xml文件。该文件用于管理：源代码、配置文件、开发者的信息和角色、问题追踪系统、组织信息、项目授权、项目的url、项目的依赖关系等等。</p><p>如下图所示是一个Maven项目：</p><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/762aa50fdb9a4c5c873c710e252db847.png" alt="" loading="lazy"> <strong>依赖管理模型</strong>则是使用坐标来描述当前项目依赖哪些第三方jar包，如下图所示：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/93922f56c78a4857b7405c4bf44da00f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>项目管理模型和依赖管理模型结合起来，体现Maven方便的依赖管理。</p><p><strong>构建生命周期和插件部分</strong>用来完成 <strong><code>标准化构建流程</code></strong> 。</p><p>如我们需要<strong>编译</strong>，Maven提供了一个编译插件供我们使用。我们需要<strong>打包</strong>，Maven就提供了一个打包插件提供我们使用等。</p><h4 id="_1-1-3-仓库" tabindex="-1"><a class="header-anchor" href="#_1-1-3-仓库" aria-hidden="true">#</a> 1.1.3 仓库</h4><p>Maven用坐标配置管理依赖。</p><p>依赖jar包则其实存储在本地仓库中，项目运行时从本地仓库中拿需要的依赖jar包。</p>',42),r=n("li",null,[n("p",null,[n("strong",null,"本地仓库"),a("：自己电脑上存储资源的仓库（是个目录），连接远程仓库获取资源")])],-1),d=n("p",null,[n("strong",null,"中央仓库"),a("：由Maven团队维护的全球唯一的仓库，Maven团队维护，存储所有资源的仓库")],-1),k={href:"https://repo1.maven.org/maven2/",title:"Central Repository:",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[n("p",null,[n("strong",null,"远程仓库(私服)"),a("：一般由公司团队搭建的私有仓库。部门/公司范围内存储资源的仓库，从中央仓库获取资源")])],-1),g=p('<p><strong>私服的作用：</strong></p><ul><li>保存具有版权的资源，包含购买或自主研发的jar。中央仓库中的jar都是开源的，不能存储具有版权的资源</li><li>一定范围内共享资源，仅对内部开放，不对外共享</li></ul><p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包：</p><ul><li><p>如果有，则在项目直接引用;</p></li><li><p>如果没有，则去中央仓库中下载对应的jar包到本地仓库。</p></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/9caef45c0d3249339575dbb6127a3487.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果还可以搭建远程仓库，将来jar包的查找顺序则变为：</p><blockquote><p>本地仓库 --&gt; 远程仓库--&gt; 中央仓库</p></blockquote><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/d5b72bc176ca4ba4848972962a12ff53.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-1-4-maven-坐标详解" tabindex="-1"><a class="header-anchor" href="#_1-1-4-maven-坐标详解" aria-hidden="true">#</a> 1.1.4 Maven 坐标详解</h4><p><strong>什么是坐标？</strong></p><ul><li><p>Maven 中的坐标是<strong>资源的唯一标识</strong></p></li><li><p>使用坐标来定义项目或引入项目中需要的依赖</p></li></ul><p><strong>所有坐标官网（需要梯子）：</strong></p>',12),v={href:"https://mvnrepository.com/",title:"https://mvnrepository.com/",target:"_blank",rel:"noopener noreferrer"},b=p(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/9a7028c21b834009aa75abce90b96a64.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/52683fcf4a604819b0ed68f274f1fd6a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Maven 坐标主要组成</strong></p><ul><li><p>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</p></li><li><p>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</p></li><li><p>version：定义当前项目版本号</p></li><li><p>scope：范围，像Servlet、jsp依赖都需要设置范围为provided</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--
      此处为什么需要添加该标签?
      provided指的是在编译和测试过程中有效,在运行时无效，最后生成的war包时不会加入
       因为Tomcat的lib目录中已经有servlet-api这个jar包，如果在生成war包的时候生效就会和Tomcat中的jar包冲突，导致报错
    --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p><strong>注意：</strong></p><ul><li><p>上面所说的资源可以是插件、依赖、当前项目。</p></li><li><p>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</p></li></ul></blockquote><h3 id="_1-2-maven安装配置" tabindex="-1"><a class="header-anchor" href="#_1-2-maven安装配置" aria-hidden="true">#</a> 1.2 Maven安装配置</h3><p><strong>1.下载</strong></p>`,7),q={href:"https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020",title:"apache",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>Binary是可执行版本，已经编译好可以直接使用。</p><p>Source是源代码版本，需要自己编译成可执行软件才可使用。</p><p>我们选择已经编译好的windows可执行版本进行安装：选择zip版本(linux选择tar.gz)</p><p><strong>2.配置环境变量：</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/d87f852d32414bf9a2ff9cddd900f8e2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/5d7b4e87aee442bd91ce886b066122e1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>3.配置本地仓库</strong></p><p>修改 D:\\apache-maven-3.8.6\\conf\\settings.xml 中的 <code>&lt;localRepository&gt;</code> 为一个指定目录（例如D:\\apache-maven-3.8.6\\mvn\\_resp）作为本地仓库，用来存储jar包。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/1d2e6f9adefb4d4da72578a49684f81f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">&gt;</span></span>D:\\apache-maven-3.8.6\\mvn_resp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4.配置jdk</strong></p><p>默认使用jdk1.4，太老，可能会出问题要手动配置：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/a210e147d76943abab5034b6a1202c1d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将下面代码加到<code>&lt;profiles &gt;</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>  
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span>  
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>  
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">&gt;</span></span>  
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>  
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>   
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.配置阿里云私服:</strong></p><p>中央仓库在国外，所以下载jar包速度可能比较慢，而阿里公司提供了一个远程仓库，里面基本也都有开源项目的jar包。</p><p>修改 conf/settings.xml 中的 <code>&lt;mirrors&gt;</code>标签，为其添加如下子标签：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>          
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-maven基本使用" tabindex="-1"><a class="header-anchor" href="#_1-3-maven基本使用" aria-hidden="true">#</a> 1.3 Maven基本使用</h3><h4 id="_1-3-1-maven常用命令" tabindex="-1"><a class="header-anchor" href="#_1-3-1-maven常用命令" aria-hidden="true">#</a> 1.3.1 Maven常用命令</h4><ul><li><p>compile ：编译，生成target目录</p></li><li><p>clean：清理，删除target目录</p></li><li><p>test：测试，执行test文件下测试代码</p></li><li><p>package：打包，将当前项目打包成的jar包</p></li><li><p>install：安装，将当前项目打成jar包，并安装到本地仓库</p></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/5575c75c956248ea94d643c644cdd431.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>编译命令演示：</strong></p><p>命令行运行<strong>mvn compile。</strong></p><p>首次编译会先从阿里云（之前conf/settings.xml配置了阿里云私服）下载编译需要插件的jar包，在本地仓库（之前conf/settings.xml配置了本地仓库位置）也能看到下载好的插件。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/68964d433bca46c69d95e4343a0765cd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在项目下会生成一个 <code>target</code> 目录，里面保存编译后的字节码文件。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/13b8974d28914a4baa2cbd25b3abbadf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>清理命令演示：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上述命令可以看到</p><ul><li><p>从阿里云下载清理需要的插件jar包</p></li><li><p>删除项目下的 <code>target</code> 目录</p></li></ul><h4 id="_1-3-2-maven-生命周期" tabindex="-1"><a class="header-anchor" href="#_1-3-2-maven-生命周期" aria-hidden="true">#</a> 1.3.2 Maven 生命周期</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2da5e14e32a6436da50099a4ba44ddc6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>简洁版：</strong></p><ul><li>**clean：**清理上次构建结果</li><li>**valide：**校验工程信息是否正确</li><li>**comple：**编译工程</li><li>**test：**执行工程测试流程(标注的test的程序)</li><li>**package：**打包工程</li><li>**verify：**验证包的有效性</li><li>**install：**安装包到本地仓库</li><li>**deploy：**推送包到远程仓库</li></ul></blockquote><p>Maven 构建项目生命周期描述的是一次构建过程经历经历了多少个事件</p><p>Maven 对项目构建的生命周期划分为3套：</p><ul><li><p>**clean ：**项目清理的处理，移除所有上一次构建生成的文件。</p></li><li><p><strong>default(或 build)</strong> ：核心工作，例如编译，测试，打包，安装等。</p></li><li><p><strong>site</strong> ： 产生报告，发布站点等。这套生命周期一般不会使用。</p></li></ul><p><strong>Clean 生命周期</strong></p><p>当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段：</p><ul><li>pre-clean：执行一些需要在clean之前完成的工作</li><li>clean：移除所有上一次构建生成的文件</li><li>post-clean：执行一些需要在clean之后立刻完成的工作</li></ul><p><strong>default生命周期</strong></p><table><thead><tr><th style="text-align:left;">阶段</th><th style="text-align:left;">处理</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">验证 validate</td><td style="text-align:left;">验证项目</td><td style="text-align:left;">验证项目是否正确且所有必须信息是可用的</td></tr><tr><td style="text-align:left;">编译 compile</td><td style="text-align:left;">执行编译</td><td style="text-align:left;">源代码编译在此阶段完成</td></tr><tr><td style="text-align:left;">测试 Test</td><td style="text-align:left;">测试</td><td style="text-align:left;">使用适当的单元测试框架（例如JUnit）运行测试。</td></tr><tr><td style="text-align:left;">包装 package</td><td style="text-align:left;">打包</td><td style="text-align:left;">创建JAR/WAR包如在 pom.xml 中定义提及的包</td></tr><tr><td style="text-align:left;">检查 verify</td><td style="text-align:left;">检查</td><td style="text-align:left;">对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td style="text-align:left;">安装 install</td><td style="text-align:left;">安装</td><td style="text-align:left;">安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td style="text-align:left;">部署 deploy</td><td style="text-align:left;">部署</td><td style="text-align:left;">拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td></tr></tbody></table><blockquote><p><strong>注意：</strong></p><ul><li><strong>打包前先clean是好习惯，能够保证上一次构建的输出不会影响到本次构建。</strong></li><li><strong>同一套生命周期内，执行后边的命令，前面的所有命令会自动执行。例如执行安装会先执行打包。</strong></li></ul></blockquote><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/5e95d72e561744c1990882dafc81e62c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/fc80eaeb72b741cbb5a60a547e8ee8e6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>site构建生命周期：</strong></p><ul><li>pre-site：执行一些需要在生成站点文档之前完成的工作</li><li>site：生成项目的站点文档</li><li>post-site： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy：将生成的站点文档部署到特定的服务器上</li></ul><h3 id="_1-4-idea使用maven" tabindex="-1"><a class="header-anchor" href="#_1-4-idea使用maven" aria-hidden="true">#</a> 1.4 IDEA使用Maven</h3><h4 id="_1-4-1-idea配置maven环境" tabindex="-1"><a class="header-anchor" href="#_1-4-1-idea配置maven环境" aria-hidden="true">#</a> 1.4.1 IDEA配置Maven环境</h4><blockquote><p><strong>注意：<strong>一定要先file-close project</strong>关闭项目</strong>， 然后再设置，就是全局设置，否则仅本项目内生效。</p></blockquote><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/81fe06bed3c14a5a89203ce21263b8da.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>设置 IDEA 使用本地安装的 Maven，并修改配置文件路径，记得apply：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/b78d058d3719475aaf99a96e32d4bb2d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>apply再ok。</p><h4 id="_1-4-2-idea-创建-maven项目" tabindex="-1"><a class="header-anchor" href="#_1-4-2-idea-创建-maven项目" aria-hidden="true">#</a> 1.4.2 IDEA 创建 Maven项目</h4><p>file-new module-选择构建Maven、jdk版本最好大于1.5：</p><blockquote><p>也可以先创建空项目，在项目内创建Maven模块。</p><p>下面生成器Maven archetype（原型）是创建Maven web的，在下下一篇讲Tomcat时会用到</p></blockquote><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/f13417cf3d5b4c3c9054b32161d95142.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>填写模块名称，坐标信息，点击finish，创建完成</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4563a70fc2fa4786a65622ac3b24aae3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建好的项目目录结构如下：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/e8d6773aff0f44b4aae7e081c5d63c94.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后在java文件夹下建包，创建类</p><p><strong>导入Maven项目</strong>：open-双击项目的pom.xml文件即可</p><h4 id="_1-4-3-pom-xml解释" tabindex="-1"><a class="header-anchor" href="#_1-4-3-pom-xml解释" aria-hidden="true">#</a> 1.4.3 pom.xml解释</h4><p>此阶段packaging不用设置，默认是打包成jar包，以后创建Maven web时候要配置成war。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/518d6ade61bf4c43b394cc94b85618e2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-4-4-idea创建maven-web项目" tabindex="-1"><a class="header-anchor" href="#_1-4-4-idea创建maven-web项目" aria-hidden="true">#</a> 1.4.4 IDEA创建Maven web项目</h4><p>现阶段还用不到，将在Tomcat的文章里详细书写：</p>`,71),y={href:"https://blog.csdn.net/qq_40991313/article/details/125970595?spm=1001.2014.3001.5501",title:"JavaWeb基础5——HTTP&Tomcat&Servlet_vincewm的博客-CSDN博客",target:"_blank",rel:"noopener noreferrer"},h=p(`<h4 id="_1-4-5-配置-maven-helper-插件" tabindex="-1"><a class="header-anchor" href="#_1-4-5-配置-maven-helper-插件" aria-hidden="true">#</a> <strong>1.4.5 配置 Maven-Helper 插件</strong></h4><p>Maven-Helper可以右键Maven项目，直接run Maven和调试。</p><p>File --&gt; Settings--Plugins--搜索 Maven，选择第一个 Maven Helper，点击Install安装，弹出面板中点击Accept--重启</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/03b3665e5e4f4946b50389511d01339a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-4-6-编码设置-报错解决" tabindex="-1"><a class="header-anchor" href="#_1-4-6-编码设置-报错解决" aria-hidden="true">#</a> 1.4.6 编码设置，报错解决</h4><p>打包时出现编码错误：</p><p>**彻底解决：**全部编码设置成utf-8</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/c8a31840cda743139ee90bd6b100e14d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>单文件解决：</strong></p><p>在pom.xml配置如下代码，适用于项目要在不同项目移动：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.encoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.encoding</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-依赖管理" tabindex="-1"><a class="header-anchor" href="#_1-5-依赖管理" aria-hidden="true">#</a> 1.5 依赖管理</h3><h4 id="_1-5-1-依赖概述" tabindex="-1"><a class="header-anchor" href="#_1-5-1-依赖概述" aria-hidden="true">#</a> <strong>1.5.1 依赖概述</strong></h4><p><strong>依赖</strong></p><p>依赖指当前项目运行所需的jar，一个项目可以设置多个依赖。</p><p>groupId：依赖所属群组id。</p><p>artifactId：依赖所属项目id。</p><p>version：依赖版本号。</p><p>scope：依赖生效范围。</p><p>optional：为true时是可选依赖，指对外隐藏当前所依赖的资源——不透明。设置后其他依赖引用本项目时候将无法看到这个依赖。控制别人能不能看到你用到你。</p><p>exclusions-exclusion：排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。控制你引用的项目中需要排除的依赖。</p><p><strong>依赖范围scope</strong></p><p>依赖的jar默认在任何地方使用，通过scope便签设定其范围。</p><p>通过设置坐标的依赖范围(scope)，可以设置对应jar包的作用范围：编译环境、测试环境、运行环境。</p><p>如下图所示给 <code>junit</code> 依赖通过 <code>scope</code> 标签指定依赖的作用范围。 那么这个依赖就只能作用在测试环境，其他环境下不能使用。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/e3b8a97d5bf645b281219863eec86946.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>依赖范围scope可取值：</strong></p><table><thead><tr><th style="text-align:left;"><strong>依赖范围</strong></th><th style="text-align:left;">编译classpath</th><th style="text-align:left;">测试classpath</th><th style="text-align:left;">运行classpath</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>compile</strong></td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">logback</td></tr><tr><td style="text-align:left;"><strong>test</strong></td><td style="text-align:left;">-</td><td style="text-align:left;">Y</td><td style="text-align:left;">-</td><td style="text-align:left;">Junit</td></tr><tr><td style="text-align:left;"><strong>provided</strong></td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">-</td><td style="text-align:left;">servlet-api</td></tr><tr><td style="text-align:left;"><strong>runtime</strong></td><td style="text-align:left;">-</td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">jdbc驱动</td></tr><tr><td style="text-align:left;"><strong>system</strong></td><td style="text-align:left;">Y</td><td style="text-align:left;">Y</td><td style="text-align:left;">-</td><td style="text-align:left;">存储在本地的jar包</td></tr></tbody></table><p>配置后可以在依赖中看到：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/39e170c8e40d408e900a9bda951307be.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>依赖具有传递性</strong></p><p><strong>直接依赖</strong>：在当前项目中通过依赖配置建立的依赖关系</p><p><strong>间接依赖</strong>：被资源的资源如果依赖其他资源，当前项目间接依赖其他资源 <img src="https://gitlab.com/apzs/image/-/raw/master/image/4a770eb3bf6a4c78b1690a6f11ff7483.png" alt="" loading="lazy"></p><p><strong>project2直接引用project3依赖</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/d4097031263c408589934bb0956db19a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>依赖传递冲突问题</strong></p><p>**路径优先：**当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</p><p>**声明优先：**当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</p><p>**特殊优先：**当同级配置了相同资源的不同版本，<strong>后配置的覆盖先配置的</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4b0a9fd916c34766b0facdf8b9c9b1eb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>可选依赖</strong>optional</p><p>可选依赖指对外隐藏当前所依赖的资源——不透明</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/aef94648fbd44c44b75a5aad56a02a15.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>排除依赖</strong>exclusions-exclusion</p><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/026749534e29480c856020f43a6a4961.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-5-2-导入依赖" tabindex="-1"><a class="header-anchor" href="#_1-5-2-导入依赖" aria-hidden="true">#</a> 1.5.2 导入依赖</h4><p>1.点击底栏依赖：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/8e70c28b8d5e4d2fbd1dc2f8cc7aed65.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>或者在pom.xml使用alt+insert快捷键，点击添加依赖项：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/ae6157fd146740008fa2ef96b681c91b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2.搜索需要导入的依赖项，点击添加导入：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/a65e892c58be4cf38ac2af7c906d340d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_1-5-3-依赖jar包引用-设置自动刷新" tabindex="-1"><a class="header-anchor" href="#_1-5-3-依赖jar包引用-设置自动刷新" aria-hidden="true">#</a> <strong>1.5.3 依赖jar包引用，设置自动刷新</strong></h4><p><strong>使用坐标引入依赖的jar包</strong></p><p>1.在项目的 pom.xml 中编写 <code>&lt;dependencies&gt;</code> 标签</p><p>2.在 <code>&lt;dependencies&gt;</code> 标签中 使用 <code>&lt;dependency&gt;</code> 引入坐标</p><p>3.定义坐标的 groupId，artifactId，version</p>`,58),x={href:"https://so.csdn.net/so/search?q=Maven&spm=1001.2101.3001.7020",title:"Maven",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"例如org.sonatype.nexus，此id前半部分org.sonatype代表此项目隶属的组织或公司，后部分代表项目的名称。",-1),M=n("p",null,"如果此项目多模块话开发的话就子模块可以分为org.sonatype.nexus.plugins和org.sonatype.nexus.utils等。特别注意的是groupId不应该对应项目隶属的组织或公司，也就是说groupId不能只有org.sonatype而没有nexus。",-1),w=n("p",null,[a("**artifactId：**构件ID。该元素定义实际项目中的一个Maven项目或者是子模块，如上面官方约定中所说，"),n("strong",null,"构建名称必须小写字母，没有其他的特殊字符"),a("，推荐使用“"),n("strong",null,"实际项目名称－模块名称"),a("”的方式定义，例如：spirng-mvn、spring-core等。")],-1),_=n("figure",null,[n("img",{src:"https://gitlab.com/apzs/image/-/raw/master/image/f079d8baf18a4ebd824871fba28b2a9b.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),j=n("figure",null,[n("img",{src:"https://gitlab.com/apzs/image/-/raw/master/image/a0069af968d84b03af7babc451f09915.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),B=n("p",null,"点击刷新按钮，使坐标生效",-1),D=n("figure",null,[n("img",{src:"https://gitlab.com/apzs/image/-/raw/master/image/573c71460fff444c8bf113d53cd46b9d.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),z=n("p",null,"注意：",-1),N=n("li",null,[n("p",null,"具体的坐标我们可以到如下网站进行搜索")],-1),I={href:"https://mvnrepository.com/",title:"https://mvnrepository.com/",target:"_blank",rel:"noopener noreferrer"},L=p(`<p><strong>设置自动刷新：</strong></p><p>File --&gt; Settings---Build Tools---any changes</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/e7ab5d6163e84adc80f57e1923777d1f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>快捷方式引入jar包</strong></p><p>1.在 pom.xml 中 按 alt + insert，选择 Dependency</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/98f44f85e66c45ad9ec6fa587d773fe2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2.在弹出的面板中搜索对应坐标，然后双击选中对应坐标</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/b03c04f9c8034c8a963bb1c94e285eaf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3.点击刷新按钮，使坐标生效</p><h3 id="_1-6-插件" tabindex="-1"><a class="header-anchor" href="#_1-6-插件" aria-hidden="true">#</a> 1.6 插件</h3><p><strong>插件</strong></p><ul><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能。</li><li>默认maven在各个生命周期上绑定有预设的功能。</li><li>通过插件可以自定义其他功能。</li></ul><p><strong>示例：Tomcat部署的插件</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、mybatis" tabindex="-1"><a class="header-anchor" href="#二、mybatis" aria-hidden="true">#</a> 二、Mybatis</h2><h3 id="_2-1-mybatis概述" tabindex="-1"><a class="header-anchor" href="#_2-1-mybatis概述" aria-hidden="true">#</a> 2.1 Mybatis概述</h3><h4 id="_2-1-1-mybatis、持久层、框架简介" tabindex="-1"><a class="header-anchor" href="#_2-1-1-mybatis、持久层、框架简介" aria-hidden="true">#</a> 2.1.1 Mybatis、持久层、框架简介</h4>`,17),C={href:"https://mybatis.net.cn/",title:"MyBatis中文网",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,[n("p",null,[a("MyBatis 是一款优秀的"),n("strong",null,"持久层框架"),a("，用于"),n("strong",null,"简化 JDBC 开发")])],-1),U=n("li",null,[n("p",null,"MyBatis 本是 Apache 的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github")],-1),A={href:"https://mybatis.org/mybatis-3/zh/index.html",title:"mybatis – MyBatis 3 | 简介",target:"_blank",rel:"noopener noreferrer"},F=p(`<p><strong>持久层：</strong></p><ul><li><p>负责将数据保存到数据库的那一层代码。</p><p>以后开发我们会<strong>将操作数据库的Java代码作为持久层</strong>。而<strong>Mybatis就是对jdbc代码进行了封装</strong>。</p></li><li><p>JavaEE三层架构：表现层做页面展示、业务层做逻辑处理、持久层对数据持久化</p></li><li><p>下图是持久层框架的使用占比。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/954dd4c3496a42249c71083562fd3e1e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><p><strong>框架：</strong></p><ul><li><p>框架就是一个半成品软件，是一套<strong>可重用的、通用的、软件基础代码模型</strong></p></li><li><p>在框架的基础之上构建软件编写更加高效、规范、通用、可扩展</p></li></ul><h4 id="_2-1-2-mybatis对比jdbc" tabindex="-1"><a class="header-anchor" href="#_2-1-2-mybatis对比jdbc" aria-hidden="true">#</a> 2.1.2 Mybatis对比JDBC</h4><p><strong>JDBC 缺点</strong></p><p>下面是 JDBC 代码，我们通过该代码分析都存在什么缺点：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/26eb553deed5416d819409d6d2fa270e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>硬编码</p><ul><li><p>注册驱动、获取连接</p><p>上图标1的代码有很多字符串，而这些是连接数据库的四个基本信息，以后如果要将Mysql数据库换成其他的关系型数据库的话，这四个地方都需要修改，如果放在此处就意味着要修改我们的源代码。</p></li><li><p>SQL语句</p><p>上图标2的代码。如果表结构发生变化，SQL语句就要进行更改。这也不方便后期的维护。</p></li></ul></li><li><p>操作繁琐</p><ul><li><p>手动设置参数</p></li><li><p>手动封装结果集</p><p>上图标4的代码是对查询到的数据进行封装，而这部分代码是没有什么技术含量，而且特别耗费时间的。</p></li></ul></li></ul><p><strong>Mybatis 优化</strong></p><ul><li><p><strong>硬编码</strong>可以配置到<strong>配置文件</strong></p></li><li><p>操作繁琐的地方mybatis都<strong>自动完成</strong></p></li></ul><p>如图所示</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/28e9e422a1774914a9eba665072e9df6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-核心配置文件mybatis-config-xml" tabindex="-1"><a class="header-anchor" href="#_2-2-核心配置文件mybatis-config-xml" aria-hidden="true">#</a> 2.2 核心配置文件mybatis-config.xml</h3><p>核心配置文件标签必须有向后顺序（相比之下，SQL映射配置文件的同级标签没有先后顺序），如下：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/2f1da003493f48d4961672caedf6fbcf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-2-1-configuration【根标签】" tabindex="-1"><a class="header-anchor" href="#_2-2-1-configuration【根标签】" aria-hidden="true">#</a> 2.2.1 configuration【根标签】</h4><p>所有子标签均需书写在当前根标签内部</p><p>示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>
        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--根标签configuration--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--    typeAliases类型别名--&gt;</span>
<span class="token comment">&lt;!--    指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.pojo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token comment">&lt;!--
    environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment
    尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。
    --&gt;</span>
<span class="token comment">&lt;!--    default是每个environment默认使用的环境 ID--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        指定每个 environment 元素定义的环境 ID--&gt;</span>
<span class="token comment">&lt;!--        注意：环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--            事务管理器transactionManager的配置，不用太在意，事务管理之后是用Spring接管--&gt;</span>
<span class="token comment">&lt;!--            在 MyBatis 中有两种类型的事务管理器（也就是 type=&quot;[JDBC|MANAGED]&quot;）：--&gt;</span>
 
<span class="token comment">&lt;!--            JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。--&gt;</span>
<span class="token comment">&lt;!--            MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!--            数据源dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。--&gt;</span>
 
<span class="token comment">&lt;!--            大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。--&gt;</span>
<span class="token comment">&lt;!--            有三种内建的数据源类型（也就是 type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）：--&gt;</span>
<span class="token comment">&lt;!--            POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。--&gt;</span>
<span class="token comment">&lt;!--            UNPOOLED– 这个数据源的实现会每次请求时打开和关闭连接。--&gt;</span>
<span class="token comment">&lt;!--            JNDI – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token comment">&lt;!--数据库连接信息--&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql:///mybatis?useSSL=false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--加载sql映射文件，告诉MyBatis 去哪寻找映射SQL 的语句。--&gt;</span>
<span class="token comment">&lt;!--        Maven项目编译后，java和resources下的目录和文件都在同一个跟目录下，所以路径是这样的，注意路径是/，不是.--&gt;</span>
<span class="token comment">&lt;!--        &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;--&gt;</span>
<span class="token comment">&lt;!--        &lt;mapper resource=&quot;package1/mapper/UserMapper.xml&quot;/&gt;--&gt;</span>
<span class="token comment">&lt;!--        扫描包指定name的包下所有mapper配置文件--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.mapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-properties【属性标签】" tabindex="-1"><a class="header-anchor" href="#_2-2-2-properties【属性标签】" aria-hidden="true">#</a> 2.2.2 properties【属性标签】</h4><p>作用：<strong>将数据库配置属性从dataSource标签内部提取到外部</strong></p><p>属性：</p><p>resource：设置外部属性文件类路径</p><p>url：设置外部属性文件真实路径</p><p>示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 属性标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>druid.properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 设置数据库环境 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--设置事务管理器--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!--设置数据源--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${driverClassName}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${url}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${username}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${password}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token comment">&lt;!-- &lt;property name=&quot;initialSize&quot; value=&quot;\${initialSize}&quot;/&gt;  --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-settings【设置标签】" tabindex="-1"><a class="header-anchor" href="#_2-2-3-settings【设置标签】" aria-hidden="true">#</a> 2.2.3 settings【设置标签】</h4><p>作用： 是mybatis中极为重要的调整设置，他们会<strong>改变mybatis的运行时行为</strong></p><p>mapUnderscoreToCamelCase：开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</p><p>默认值为false,当设置为true时开启驼峰命名</p><p>注意：只能将a_bc与aBc自动映射，不能将a_b与aBc自动映射</p><p>示例代码</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--开启驼峰式命名自动映射--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapUnderscoreToCamelCase<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-4-typealiases【类型别名】" tabindex="-1"><a class="header-anchor" href="#_2-2-4-typealiases【类型别名】" aria-hidden="true">#</a> 2.2.4 <strong>typeAliases【类型别名】</strong></h4><p><strong>alias译为别名</strong> 作用 ：类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。 自定义别名</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Author<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>domain.blog.Author<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Blog<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>domain.blog.Blog<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Comment<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>domain.blog.Comment<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>domain.blog.Post<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Section<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>domain.blog.Section<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Tag<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>domain.blog.Tag<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以指定一个包名进行扫描，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- typeAliases类型别名 --&gt;</span>
<span class="token comment">&lt;!-- 给指定name包下的所有类起一个别名 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.pojo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样sql映射文件resultType属性就可以省略路径package1.pojo:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        映射配置文件 UserMapper.xml--&gt;</span>
<span class="token comment">&lt;!--namespace名称空间，该命名空间和对应mapper接口的全限定名一致--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.mapper.UserMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--    resultType=&quot;User&quot;或&quot;user&quot;也可以，因为核心配置文件中有给package1.pojo起别名，且有别名后不区分大小写--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAll<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.pojo.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from tb_user;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-5-typehandlers【类型处理器】" tabindex="-1"><a class="header-anchor" href="#_2-2-5-typehandlers【类型处理器】" aria-hidden="true">#</a> 2.2.5 typeHandlers【类型处理器】</h4><h4 id="_2-2-6-objectfactory【对象工厂】" tabindex="-1"><a class="header-anchor" href="#_2-2-6-objectfactory【对象工厂】" aria-hidden="true">#</a> 2.2.6 objectFactory【对象工厂】</h4><h4 id="_2-2-7-plugins-插件" tabindex="-1"><a class="header-anchor" href="#_2-2-7-plugins-插件" aria-hidden="true">#</a> 2.2.7 plugins（插件）</h4><h4 id="_2-2-8-environments【数据库环境设置】" tabindex="-1"><a class="header-anchor" href="#_2-2-8-environments【数据库环境设置】" aria-hidden="true">#</a> 2.2.8 <strong>environments【数据库环境设置】</strong></h4><p>作用：<strong>配置数据库连接环境信息。</strong></p><blockquote><ul><li>可以配置多个environment。</li><li>环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。这样通过default属性切换不同的environment环境**。**</li><li>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</li></ul></blockquote><p><strong>environments</strong>属性default是每个environment默认使用的环境 ID</p><p><strong>environment</strong>属性id是指定该 environment 元素定义的环境 ID。</p><p><strong>事务管理器transactionManager</strong>属性type有两种：</p><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</p><p>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。</p><p><strong>数据源dataSource</strong> 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源,type有三种：</p><p>POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 UNPOOLED– 这个数据源的实现会每次请求时打开和关闭连接。 JNDI – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。</p><p>示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--
environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment
尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。
--&gt;</span>
<span class="token comment">&lt;!--    default是每个environment默认使用的环境 ID--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        指定每个 environment 元素定义的环境 ID--&gt;</span>
<span class="token comment">&lt;!--        注意：环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--            事务管理器transactionManager的配置，不用太在意，事务管理之后是用Spring接管--&gt;</span>
<span class="token comment">&lt;!--            在 MyBatis 中有两种类型的事务管理器（也就是 type=&quot;[JDBC|MANAGED]&quot;）：--&gt;</span>

<span class="token comment">&lt;!--            JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。--&gt;</span>
<span class="token comment">&lt;!--            MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!--            数据源dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。--&gt;</span>

<span class="token comment">&lt;!--            大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。--&gt;</span>
<span class="token comment">&lt;!--            有三种内建的数据源类型（也就是 type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）：--&gt;</span>
<span class="token comment">&lt;!--            POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。--&gt;</span>
<span class="token comment">&lt;!--            UNPOOLED– 这个数据源的实现会每次请求时打开和关闭连接。--&gt;</span>
<span class="token comment">&lt;!--            JNDI – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!--数据库连接信息--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql:///mybatis?useSSL=false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-9-databaseidprovider-数据库厂商标识" tabindex="-1"><a class="header-anchor" href="#_2-2-9-databaseidprovider-数据库厂商标识" aria-hidden="true">#</a> 2.2.9 databaseIdProvider（数据库厂商标识）</h4><h4 id="_2-2-10-mappers-【映射器】" tabindex="-1"><a class="header-anchor" href="#_2-2-10-mappers-【映射器】" aria-hidden="true">#</a> 2.2.10 mappers 【映射器】</h4><p>作用：加载映射文件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--加载sql映射文件，告诉MyBatis 去哪寻找映射SQL 的语句。--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以扫描包寻找sql映射文件文件，推荐这种方法</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--扫描mapper--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.mapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-mybatis入门案例-不用mapper" tabindex="-1"><a class="header-anchor" href="#_2-3-mybatis入门案例-不用mapper" aria-hidden="true">#</a> 2.3 Mybatis入门案例（不用mapper）</h3><h4 id="_2-3-1-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-3-1-代码实现" aria-hidden="true">#</a> 2.3.1 代码实现</h4><p><strong>需求：查询user表中所有的数据</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/e824eee9518f471fad4d26cd9df79d04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>1.创建user表，添加数据</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>create database mybatis;
use mybatis;

drop table if exists tb_user;

create table tb_user(
    id int primary key auto_increment,
    username varchar(20),
    password varchar(20),
    gender char(1),
    addr varchar(30)
);

INSERT INTO tb_user VALUES (1, &#39;zhangsan&#39;, &#39;123&#39;, &#39;男&#39;, &#39;北京&#39;);
INSERT INTO tb_user VALUES (2, &#39;李四&#39;, &#39;234&#39;, &#39;女&#39;, &#39;天津&#39;);
INSERT INTO tb_user VALUES (3, &#39;王五&#39;, &#39;11&#39;, &#39;男&#39;, &#39;西安&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.创建模块，导入坐标</strong></p><p>在创建好的模块中的 pom.xml 配置文件中添加依赖的坐标:</p><p>其实依赖<strong>只需要导入mybatis,mysql即可，其他是日志、测试之类的</strong>。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--mybatis 依赖--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token comment">&lt;!--mysql 驱动--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token comment">&lt;!--junit 单元测试--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token comment">&lt;!-- 添加slf4j日志api --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 添加logback-classic依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 添加logback-core依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>**注意：**需要在项目的 resources 目录下创建logback的配置文件</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--
        CONSOLE ：表示当前的日志信息是可以输出到控制台的。
    --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Console<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>[%level]  %cyan([%thread]) %boldGreen(%logger{15}) - %msg %n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--    这里要改，包名--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DEBUG<span class="token punctuation">&quot;</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Console<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>
 
 
    <span class="token comment">&lt;!--
      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF
     ， 默认debug
      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。
      --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DEBUG<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Console<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>slf4j，simple logging facade for java的缩写，翻译为java的简单日志外观。slf4j是一个开源项目，它提供我们一个一致的API来使用不同的日志框架，比如： java.util.logging，logback，log4j等。slf4j使用户可以在运行时嵌入他们想使用的日志框架。从名字中可以看出，它其实使用的是facade设计模式来实现的。</p><p>Logback是SpringBoot内置的日志处理框架,你会发现spring-boot-starter其中包含了spring-boot-starter-logging，该依赖内容就是 Spring Boot 默认的日志框架 logback。官方文档：http://logback.qos.ch/manual/</p><p><strong>3.编写 MyBatis 核心配置文件</strong> -- &gt; 替换连接信息 解决硬编码问题</p><p>在模块下的 resources 目录下创建mybatis的配置文件 <code>mybatis-config.xml</code>，内容如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>
        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--根标签configuration--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--    typeAliases类型别名--&gt;</span>
<span class="token comment">&lt;!--    指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.pojo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
 
    <span class="token comment">&lt;!--
    environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment
    尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。
    --&gt;</span>
<span class="token comment">&lt;!--    default是每个environment默认使用的环境 ID--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        指定每个 environment 元素定义的环境 ID--&gt;</span>
<span class="token comment">&lt;!--        注意：环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--            事务管理器transactionManager的配置--&gt;</span>
<span class="token comment">&lt;!--            在 MyBatis 中有两种类型的事务管理器（也就是 type=&quot;[JDBC|MANAGED]&quot;）：--&gt;</span>
 
<span class="token comment">&lt;!--            JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。--&gt;</span>
<span class="token comment">&lt;!--            MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!--            数据源dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。--&gt;</span>
 
<span class="token comment">&lt;!--            大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。--&gt;</span>
<span class="token comment">&lt;!--            有三种内建的数据源类型（也就是 type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）：--&gt;</span>
<span class="token comment">&lt;!--            POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。--&gt;</span>
<span class="token comment">&lt;!--            UNPOOLED– 这个数据源的实现会每次请求时打开和关闭连接。--&gt;</span>
<span class="token comment">&lt;!--            JNDI – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token comment">&lt;!--数据库连接信息--&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql:///mybatis?useSSL=false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1234<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--加载sql映射文件，告诉MyBatis 去哪寻找映射SQL 的语句。--&gt;</span>
<span class="token comment">&lt;!--        Maven项目编译后，java和resources下的目录和文件都在同一个跟目录下，所以路径是这样的--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.编写 SQL 映射文件</strong> --&gt; 统一管理sql语句，解决硬编码问题</p><p>在模块的 <code>resources</code> 目录下创建映射配置文件 <code>UserMapper.xml</code>，内容如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        映射配置文件 UserMapper.xml--&gt;</span>
<span class="token comment">&lt;!--namespace名称空间，该命名空间和对应mapper接口的全限定名一致--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAll<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.pojo.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from tb_user;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>另外，可通过resultMap实现对数据库列名起别名</strong>，以解决数据库列名和User类属性命名法不对应问题（数据库标识符不区分大小写，采用下划线命名法，java标识符常用驼峰命名法）：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--    统一起别名，resultMap标签的id为自定义的唯一标识，type为package1.pojo.User，若核心配置有typeAliases扫描pojo包，user--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        对数据库的指定列起别名--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>passWord<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--    起别名了，resultType改成resultMap，值为上面resultMap的id--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAll<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from tb_user;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>根标签</strong>【mapper】</p><p>作用：所用子标签均需书写在mapper内部</p><p>namespace与接口全路径类名【类的全限定名】一致</p><p><strong>八大子标签：</strong></p><p>insert：定义增加SQL语句</p><p>delete：定义删除SQL语句</p><p>update：定义修改语句</p><p>select:定义查询SQL语句</p><p>sql：定义SQL语句块</p><p>resultMap：定义结果集映射【resultType解决不了时，使用resultMap】</p><p>cache：定义缓冲类</p><p>cache-ref：定义引用缓存</p><p><strong>5.在package1.pojo包下创建 User类</strong></p>`,96),O={href:"https://so.csdn.net/so/search?q=POJO&spm=1001.2101.3001.7020",title:"POJO",target:"_blank",rel:"noopener noreferrer"},P=n("strong",null,"没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的，没有遵从特定的Java对象模型、约定或框架（如EJB）的不受任何限制的java对象",-1),J=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">package1<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span>
<span class="token comment">//pojo译为，简单的Java对象.其实就是没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的，没有遵从特定的Java对象模型、约定或框架（如EJB）的不受任何限制的java对象。</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
<span class="token comment">//下面两个passWord改成password</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> passWord<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> addr<span class="token punctuation">;</span>
 
    <span class="token comment">//省略了 setter 和 getter</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>
                <span class="token string">&quot;, username=&#39;&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, passWord=&#39;&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, gender=&#39;&quot;</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, addr=&#39;&quot;</span> <span class="token operator">+</span> addr <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6.在package1包下编写 MybatisDemo 测试类</strong></p><p><strong>步骤：</strong></p><p>1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</p><p>session译为“会话”，factory译为“工厂”。</p><p>2. 获取SqlSession对象，用它来执行sql</p><p>3. 执行sql</p><p>4. 释放资源</p><p><strong>示例：</strong></p><p><strong>不用太花时间记，第三步执行SQL前的代码在所有案例中都是一样的，直接复制粘贴即可。而且整合Spring后就只剩mapper优化后的执行方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span>
        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//2. 获取SqlSession对象，用它来执行sql</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. 执行sql，这步不用记，一般这步都是使用mapper代理开发       sqlSession.getMapper(UserMapper.class);</span>
        <span class="token comment">//参数是一个字符串，该字符串必须是映射配置文件的namespace.id</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">&quot;test.selectAll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4. 释放资源</span>
        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>回顾对比一下jdbc：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> 
<span class="token doc-comment comment">/**
 * 简单版
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 注册驱动</span>
        
        <span class="token comment">//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//通过反射获取Driver实现类对象，从而加载驱动，注册驱动语句DriverManager.registerDriver(driver)在Driver的静态代码块里做过了。</span>
        <span class="token comment">//此句仅在mysql可省略，其他数据库不能省略</span>
        <span class="token comment">//2. 获取连接</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> passWord <span class="token operator">=</span> <span class="token string">&quot;1234&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> passWord<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. 定义sql</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;update student set age = 80 where name=&#39;xiaohua&#39;&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//4. 获取执行sql的对象 Statement</span>
        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//5. 执行sql</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//受影响的行数</span>
        <span class="token comment">//6. 处理结果</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//7. 释放资源</span>
        stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_2-3-2-sqlsessionfactory工具类抽取" tabindex="-1"><a class="header-anchor" href="#_2-3-2-sqlsessionfactory工具类抽取" aria-hidden="true">#</a> 2.3.2 SqlSessionFactory工具类抽取</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> 
	<span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步执行SQL前的代码在所有案例中都是一样的，这些重复代码就会造成一些<strong>问题:</strong></p><ul><li><p>重复代码不利于后期的维护</p></li><li><p><strong>SqlSessionFactory工厂类进行重复创建</strong></p><ul><li>就相当于每次买手机都需要重新创建一个手机生产工厂来给你制造一个手机一样，<strong>资源消耗非常大但性能却非常低</strong>。所以这么做是不允许的。</li></ul></li></ul><p><strong>解决方案</strong></p><ul><li><p>代码重复可以<strong>抽取工具类</strong></p></li><li><p>对指定代码只需要执行一次可以使用<strong>静态代码块</strong></p></li></ul><blockquote><p><strong>注意：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>虽然上面语句也重复，但<strong>不能抽取到工具类</strong>里。因为SqlSession是一个连接、<strong>会话</strong>，每次连接数据库时候创建一次会话是合适，如果所有连接都共用一个会话会互相影响。</p><p>SqlSession是一个<strong>会话</strong>，相当于JDBC中的一个Connection对象，Mybatis中所有的数据库交互都由SqlSession来完成。</p></blockquote><p><strong>代码示例：</strong></p><p><strong>抽取工具类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionFactoryUtils</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>
 
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">//静态代码块会随着类的加载而自动执行，且只执行一次</span>
        <span class="token comment">//静态代码块不能抛异常，要用try-catch</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用工具类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span><span class="token class-name">SqlSessionFactoryUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-3-3-idea连接数据库" tabindex="-1"><a class="header-anchor" href="#_2-3-3-idea连接数据库" aria-hidden="true">#</a> 2.3.3 IDEA连接数据库</h4><p><strong>解决SQL映射文件的警告提示：</strong></p><p>在入门案例映射配置文件中存在报红的情况。问题如下：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/eb97cc15bfcb4f55b72c676f62138c5e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>产生的原因：Idea和数据库没有建立连接，不识别表信息。但是大家一定要记住，它并不影响程序的执行。</p></li><li><p>解决方式：在Idea中配置MySQL数据库连接。</p></li></ul><p><strong>IDEA中配置MySQL数据库连接</strong></p><ul><li>点击IDEA右边框的 <code>Database</code> ，在展开的界面点击 <code>+</code> 选择 <code>Data Source</code> ，再选择 <code>MySQL</code></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/eeb8cd9e4ce5451a9dcadb717ab15361.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>在弹出的界面进行基本信息的填写</li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/538e8e11a78449edb8e04603346613c6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>点击完成后就能看到数据库编译器界面</p></li><li><p>而此界面就和 <code>navicat</code> 工具一样可以进行数据库的操作。也可以编写SQL语句</p></li></ul><p>另外，如果发现写表明时候没有提示：</p><p><strong>打开File的settings，把SQL Dialects选项的右边那个None改为你的默认数据库，我这边之前默认的是Generic SQL，然后我把它改回了我使用的mysql，之后就会有提示了。</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/82bca1833abe44ae9e911fd436765634.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-4-mapper代理开发" tabindex="-1"><a class="header-anchor" href="#_2-4-mapper代理开发" aria-hidden="true">#</a> 2.4 Mapper代理开发</h3><h4 id="_2-4-1-目的" tabindex="-1"><a class="header-anchor" href="#_2-4-1-目的" aria-hidden="true">#</a> 2.4.1 目的</h4><p><strong>Mapper 代理方式的目的：</strong></p><ul><li><p>解决原生方式中的硬编码</p></li><li><p>简化后期执行SQL</p></li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/c6bfee517a7240ebb18cebc44cb3da92.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-4-2-使用mapper实现查询" tabindex="-1"><a class="header-anchor" href="#_2-4-2-使用mapper实现查询" aria-hidden="true">#</a> <strong>2.4.2 使用mapper实现查询</strong></h4><p>1.定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下。如下图放就可以，因为编译Maven后java和resources下的目录和文件都在同一个根目录下。</p><blockquote><p>注意：在resources下建多层文件夹要用斜杠，例如aa/bb，不能aa.bb。如果直接建aa.bb，则只建了一个名为aa.bb的文件夹，而不是两个。</p></blockquote><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/846dcb2bb7b341e382acb3f9f2d42576.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/ffbb65aa78b6429ea3818b05b6c9edd8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2.设置SQL映射文件的namespace属性为Mapper接口全限定名：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        映射配置文件 UserMapper.xml--&gt;</span>
<span class="token comment">&lt;!--namespace名称空间，该命名空间和对应mapper接口的全限定名一致--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.mapper.UserMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAll<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.pojo.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from tb_user;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.在 Mapper 接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/ea01953b74b0430b927dda47334af89a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>4.Mapper代理开发</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span>
        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//2. 获取SqlSession对象，用它来执行sql</span>
        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3. 执行sql</span>
        <span class="token comment">//参数是一个字符串，该字符串必须是映射配置文件的namespace.id</span>
<span class="token comment">//        List&lt;User&gt; users = sqlSession.selectList(&quot;test.selectAll&quot;);</span>
        <span class="token comment">//3.1获取UserMapper接口的代理对象</span>
        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//3.2调用sql方法</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4. 释放资源</span>
        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：<strong>如果Mapper接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用在核心配置文件mybatis-config.xml中用</strong>包扫描</strong>的方式简化SQL映射文件的加载。示例：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>mappers<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>加载sql映射文件，告诉<span class="token class-name">MyBatis</span> 去哪寻找映射<span class="token constant">SQL</span> 的语句。<span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token class-name">Maven</span>项目编译后，java和resources下的目录和文件都在同一个跟目录下，所以路径是这样的，注意路径是<span class="token operator">/</span>，不是<span class="token punctuation">.</span>-<span class="token operator">-&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">&quot;UserMapper.xml&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">&quot;package1/mapper/UserMapper.xml&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>简化成：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--加载sql映射文件，告诉MyBatis 去哪寻找映射SQL 的语句。--&gt;</span>
    <span class="token comment">&lt;!-- Maven项目编译后，java和resources下的目录和文件都在同一个跟目录下，所以路径是这样的，注意路径是/，不是.--&gt;</span>
    <span class="token comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;--&gt;</span>
    <span class="token comment">&lt;!-- &lt;mapper resource=&quot;package1/mapper/UserMapper.xml&quot;/&gt;--&gt;</span>
    <span class="token comment">&lt;!-- 扫描包指定name的包下所有mapper配置文件--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.mapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-配置文件实现增删改查" tabindex="-1"><a class="header-anchor" href="#_2-5-配置文件实现增删改查" aria-hidden="true">#</a> 2.5 配置文件实现增删改查</h3><h4 id="_2-5-0-mybatisx插件、占位符、xml特殊字符转义" tabindex="-1"><a class="header-anchor" href="#_2-5-0-mybatisx插件、占位符、xml特殊字符转义" aria-hidden="true">#</a> 2.5.0 MybatisX插件、占位符、XML特殊字符转义</h4><p><strong>安装MybatisX插件：</strong></p><p>Setting--Plugins--MybatisX</p><p>作用是通过小鸟图标，方便mapper接口和mapper配置文件之间代码的统一。</p><p><strong>参数占位符：</strong></p><p>参数占位符里的内容为传入的参数名，或者参数的成员变量名，或map的键名。</p><p>mybatis提供了两种参数占位符：</p><ul><li><p>#{} ：执行SQL时，会将 #{} 占位符替换为？，将来自动设置参数值。底层使用的是 <code>PreparedStatement</code></p></li><li><p>\${} ：拼接SQL。底层使用的是 <code>Statement</code>，会存在SQL注入问题。</p></li></ul><p>示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select * from tb_user where id=#{id};
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特殊字符处理：</strong></p><p>1.转义字符</p><p>XML中，需要转义的字符有：</p><table><thead><tr><th>原始字符</th><th>转义字符</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td><code>&amp;amp;</code></td></tr><tr><td><code>&lt;</code></td><td><code>&amp;lt;</code></td></tr><tr><td><code>&gt;</code></td><td><code>&amp;gt;</code></td></tr><tr><td><code>&quot;</code></td><td><code>&amp;quot;</code></td></tr><tr><td><code>&#39;</code></td><td><code>&amp;apos;</code></td></tr></tbody></table><p>2.CDATA区</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select * from tb_user where id <span class="token cdata">&lt;![CDATA[
        &gt;        
    ]]&gt;</span> #{id};
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-1-环境准备" tabindex="-1"><a class="header-anchor" href="#_2-5-1-环境准备" aria-hidden="true">#</a> 2.5.1 环境准备</h4><ul><li><p>数据库表（tb_brand）及数据准备</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">--</span> 删除tb_brand表
drop table <span class="token keyword">if</span> exists tb_brand<span class="token punctuation">;</span>
<span class="token operator">--</span> 创建tb_brand表
create table tb_brand
<span class="token punctuation">(</span>
    <span class="token operator">--</span> id 主键
    id           <span class="token keyword">int</span> primary key auto_increment<span class="token punctuation">,</span>
    <span class="token operator">--</span> 品牌名称
    brand_name   <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">--</span> 企业名称
    company_name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">--</span> 排序字段
    ordered      <span class="token keyword">int</span><span class="token punctuation">,</span>
    <span class="token operator">--</span> 描述信息
    description  <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">--</span> 状态：<span class="token number">0</span>：禁用  <span class="token number">1</span>：启用
    status       <span class="token keyword">int</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span> 添加数据
insert into tb_brand <span class="token punctuation">(</span>brand_name<span class="token punctuation">,</span> company_name<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> description<span class="token punctuation">,</span> status<span class="token punctuation">)</span>
values <span class="token punctuation">(</span><span class="token char">&#39;三只松鼠&#39;</span><span class="token punctuation">,</span> &#39;三只松鼠股份有限公司<span class="token char">&#39;, 5, &#39;</span>好吃不上火&#39;<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token char">&#39;华为&#39;</span><span class="token punctuation">,</span> &#39;华为技术有限公司&#39;<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> &#39;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#39;<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token char">&#39;小米&#39;</span><span class="token punctuation">,</span> &#39;小米科技有限公司<span class="token char">&#39;, 50, &#39;</span>are you ok&#39;<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实体类 Brand</p><p>在 <code>com.itheima.pojo</code> 包下创建 Brand 实体类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>
    <span class="token comment">// id 主键</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token comment">// 品牌名称</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brandName<span class="token punctuation">;</span>
    <span class="token comment">// 企业名称</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> companyName<span class="token punctuation">;</span>
    <span class="token comment">// 排序字段</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> ordered<span class="token punctuation">;</span>
    <span class="token comment">// 描述信息</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token comment">// 状态：0：禁用  1：启用</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>
    
    <span class="token comment">//省略 setter and getter。自己写时要补全这部分代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写测试用例</p><p>测试代码需要在 <code>test/java</code> 目录下创建包及测试用例。项目结构如下：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/dd175fc1a913469881bc5f32d69b3499.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h4 id="_2-5-2-resulttype查询所有" tabindex="-1"><a class="header-anchor" href="#_2-5-2-resulttype查询所有" aria-hidden="true">#</a> <strong>2.5.2 resultType查询所有</strong></h4><blockquote><p>适用于数据库字段名和实体类属性名一致的情况。</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--        映射配置文件 UserMapper.xml--&gt;</span>
<span class="token comment">&lt;!--namespace名称空间，该命名空间和对应mapper接口的全限定名一致--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.mapper.UserMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAll<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>package1.pojo.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from tb_user;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-3-resultmap给列起别名并查询所有" tabindex="-1"><a class="header-anchor" href="#_2-5-3-resultmap给列起别名并查询所有" aria-hidden="true">#</a> <strong>2.5.3 resultMap给列起别名并查询所有</strong></h4><blockquote><p>适用于数据库字段名和实体类属性名不同的情况。</p></blockquote><p>SQL语句下划线命名法的<strong>列名</strong>和java实体类驼峰命名法的<strong>成员变量不同</strong>，会导致数据库给成员变量无法赋值的问题。<strong>通过resultMap标签给数据库列名起别名，可以解决这个问题。</strong></p><blockquote><p>**注意：**只有select方法能用到resultMap，删改查都用不到。</p></blockquote><p>接口<strong>UserMapper.java</strong>定义抽象方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>SQL语句简单的话，也可以使用注解，xml就不需要再生成statement了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * 查询所有
  * <span class="token keyword">@return</span>
  */</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from tb_brand&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">&quot;brandResultMap&quot;</span><span class="token punctuation">)</span>    <span class="token comment">//xml里要有resultMap标签起别名</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>UserMapper.xml</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.itheima.mapper.BrandMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--给列名起别名，让列名和成员变量一致，实现赋值--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brand<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--
            id：完成主键字段的映射
                column：表的列名
                property：实体类的属性名
            result：完成一般字段的映射
                column：表的列名
                property：实体类的属性名
        --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brand_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>company_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>companyName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAll<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select *
        from tb_brand;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sql映射配置文件查询成功后通过测试类<code>List&lt;Brand&gt; brands = brandMapper.selectAll();</code>获得所有对象组成的List列表。</p><h4 id="_2-5-4-单条件查询" tabindex="-1"><a class="header-anchor" href="#_2-5-4-单条件查询" aria-hidden="true">#</a> <strong>2.5.4 单条件查询</strong></h4><p>UserMapper.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>UserMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--parameterType=&quot;int&quot;可省略--&gt;</span>
<span class="token comment">&lt;!--传入单个参数，#{}里的值可以随便命名，系统都会自动识别的，例如写成id=#{aaabb}都是能成功查询的--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userResultMap<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
        select * from tb_user where id=#{id};
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong></p><ul><li>单个参数不用@Param注解起别名，会自动识别要传的参数。</li><li>如果是传入多个参数，就需要使用下面三种传多参数方法。</li></ul></blockquote><h4 id="_2-5-5-多条件查询-三种传多参方法" tabindex="-1"><a class="header-anchor" href="#_2-5-5-多条件查询-三种传多参方法" aria-hidden="true">#</a> 2.5.5 多条件查询（三种传多参方法）</h4><p><strong><code>BrandMapper</code>.java</strong></p><p>三种传参方法：</p><blockquote><p><strong>事先注意：</strong></p><p>mapper传参数，如果参数包括对象和散装参数，那么对象必须也注解，写SQL语句时候不能忘记对象.属性，例如brand.status.</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPageAndCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;begin&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;brand&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p><strong>①散装参数</strong>：使用 <code>@Param(&quot;参数名称&quot;)</code> 标记每一个参数，在映射配置文件中就需要使用 <code>#{参数名称}</code> 进行占位</p><p>BrandMapper.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;companyName&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> companyName<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;brandName&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>BrandMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByCondition<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_brand
    where status = #{status}
    and company_name like #{companyName}
    and brand_name like #{brandName}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>②实体类封装参数</strong>：将多个参数封装成一个 实体对象 ，将该实体对象作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 <code>#{内容}</code> 时，里面的<strong>内容必须和实体类属性名保持一致</strong>。</p><p>BrandMapper.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>BrandMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByCondition<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_brand
    where status = #{status}
    and company_name like #{companyName}
    and brand_name like #{brandName}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Demo.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
brand<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
brand<span class="token punctuation">.</span><span class="token function">setCompanyName</span><span class="token punctuation">(</span>companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
brand<span class="token punctuation">.</span><span class="token function">setBrandName</span><span class="token punctuation">(</span>brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③map集合</strong>：将多个参数封装到map集合中，将map集合作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 <code>#{内容}</code> 时，里面的<strong>内容必须和map集合中键的名称一致</strong>。</p><p>BrandMapper.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>BrandMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByCondition<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_brand
    where status = #{status}
    and company_name like #{companyName}
    and brand_name like #{brandName}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Demo.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span> <span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;companyName&quot;</span><span class="token punctuation">,</span> companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;brandName&quot;</span> <span class="token punctuation">,</span> brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> brands <span class="token operator">=</span> brandMapper<span class="token punctuation">.</span><span class="token function">selectByCondition</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BrandMapper.xml都是一样的</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByCondition<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_brand
    where status = #{status}
    and company_name like #{companyName}
    and brand_name like #{brandName}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试类：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//接收参数</span>
    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> companyName <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> brandName <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">;</span>
 
    <span class="token comment">// 处理参数</span>
    companyName <span class="token operator">=</span> <span class="token string">&quot;%&quot;</span> <span class="token operator">+</span> companyName <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">;</span>
    brandName <span class="token operator">=</span> <span class="token string">&quot;%&quot;</span> <span class="token operator">+</span> brandName <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">;</span>
 
    <span class="token comment">//1. 获取SqlSessionFactory</span>
    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 获取SqlSession对象</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3. 获取Mapper接口的代理对象</span>
    <span class="token class-name">BrandMapper</span> brandMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//4. 执行方法</span>
	<span class="token comment">//方式一 ：接口方法参数使用 @Param 方式调用的方法</span>
    <span class="token comment">//List&lt;Brand&gt; brands = brandMapper.selectByCondition(status, companyName, brandName);</span>
    <span class="token comment">//方式二 ：接口方法参数是 实体类对象 方式调用的方法</span>
     <span class="token comment">//封装对象</span>
    <span class="token comment">/* Brand brand = new Brand();
        brand.setStatus(status);
        brand.setCompanyName(companyName);
        brand.setBrandName(brandName);*/</span>
    
    <span class="token comment">//List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);</span>
    
    <span class="token comment">//方式三 ：接口方法参数是 map集合对象 方式调用的方法</span>
    <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span> <span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;companyName&quot;</span><span class="token punctuation">,</span> companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;brandName&quot;</span> <span class="token punctuation">,</span> brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> brands <span class="token operator">=</span> brandMapper<span class="token punctuation">.</span><span class="token function">selectByCondition</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//5. 释放资源</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述功能实现存在很大的问题。用户在输入条件时，肯定不会所有的条件都填写，这个时候我们的SQL语句就不能那样写，要使用动态SQL。</p><h4 id="_2-5-6-多条件动态查询-动态sql" tabindex="-1"><a class="header-anchor" href="#_2-5-6-多条件动态查询-动态sql" aria-hidden="true">#</a> 2.5.6 多条件动态查询（动态SQL）</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3a930f3e4c114cbd8245f779f46484a2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>**动态SQL：**SQL语句随着用户的输入或外部条件的变化而变化，称为动态SQL。</p><p>Mybatis关于动态SQL的<strong>标签</strong>：</p><blockquote><ul><li><p>if</p></li><li><p>choose (when, otherwise)</p></li><li><p>trim (where, set)</p></li><li><p>foreach</p></li></ul></blockquote><p><strong>if标签</strong>的test 属性：逻辑表达式</p><p>为了防止出现SQL语句where 后直接跟and的情况，给所有条件加了and，并且where后跟了1=1.</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByCondition<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_brand
<span class="token comment">&lt;!--        这里1=1是防止where后直接跟and的情况发生，更好的办法是用where标签，根据语法动态去and或where关键字--&gt;</span>
    where 1=1
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            and status = #{status}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>companyName != null and companyName != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            and company_name like #{companyName}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandName != null and brandName != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            and brand_name like #{brandName}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>where 标签</strong>作用：</p><ul><li><p>替换where关键字</p></li><li><p>会动态的去掉第一个条件前的 and</p></li><li><p>如果所有的参数没有值则不加where关键字</p></li></ul><p>示例：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByCondition<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_brand
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--where标签下注意所有if都要加and--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            and status = #{status}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>companyName != null and companyName != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            and company_name like #{companyName}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandName != null and brandName != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            and brand_name like #{brandName}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-7-单条件动态查询-动态sql" tabindex="-1"><a class="header-anchor" href="#_2-5-7-单条件动态查询-动态sql" aria-hidden="true">#</a> 2.5.7 单条件动态查询（动态SQL）</h4><p>先选择，再输入查询。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/efea4121d2394ff0b61fe9372d38c1f2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong><code>choose（when，otherwise）</code><strong>标签</strong>类似于Java 中的switch</strong>语句，自带break。</p><blockquote><p><strong>注意：</strong></p><p>choose-when是多选一，一项<code>&lt;when&gt;</code>满足条件后其他就不判断了。</p><p><code>&lt;if&gt;</code>可以多层判断。</p></blockquote><p><strong>代码：</strong></p><p>BrandMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByConditionSingle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_brand
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--相当于switch--&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--相当于case--&gt;</span>
                status = #{status}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>companyName != null and companyName != &#39;&#39; <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--相当于case--&gt;</span>
                company_name like #{companyName}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandName != null and brandName != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--相当于case--&gt;</span>
                brand_name like #{brandName}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BrandMapper.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByConditionSingle</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Demo.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByConditionSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//接收参数</span>
    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> companyName <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> brandName <span class="token operator">=</span> <span class="token string">&quot;华为&quot;</span><span class="token punctuation">;</span>
 
    <span class="token comment">// 处理参数</span>
    companyName <span class="token operator">=</span> <span class="token string">&quot;%&quot;</span> <span class="token operator">+</span> companyName <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">;</span>
    brandName <span class="token operator">=</span> <span class="token string">&quot;%&quot;</span> <span class="token operator">+</span> brandName <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">;</span>
 
    <span class="token comment">//封装对象</span>
    <span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//brand.setStatus(status);</span>
    brand<span class="token punctuation">.</span><span class="token function">setCompanyName</span><span class="token punctuation">(</span>companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//brand.setBrandName(brandName);</span>
 
    <span class="token comment">//1. 获取SqlSessionFactory</span>
    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 获取SqlSession对象</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3. 获取Mapper接口的代理对象</span>
    <span class="token class-name">BrandMapper</span> brandMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4. 执行方法</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> brands <span class="token operator">=</span> brandMapper<span class="token punctuation">.</span><span class="token function">selectByConditionSingle</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brands<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//5. 释放资源</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-8-添加数据" tabindex="-1"><a class="header-anchor" href="#_2-5-8-添加数据" aria-hidden="true">#</a> 2.5.8 添加数据</h4><p>BrandMapper.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
   * 添加，如果返回值为int，则返回改变的行数，也可void，通过异常了解添加成功或失败
   */</span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BrandMapper.xml</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">&quot;add&quot;</span><span class="token operator">&gt;</span>
    insert into tb_brand <span class="token punctuation">(</span>brand_name<span class="token punctuation">,</span> company_name<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> description<span class="token punctuation">,</span> status<span class="token punctuation">)</span>
    values <span class="token punctuation">(</span>#<span class="token punctuation">{</span>brandName<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>companyName<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>ordered<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>description<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//接收参数</span>
    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> companyName <span class="token operator">=</span> <span class="token string">&quot;波导手机&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> brandName <span class="token operator">=</span> <span class="token string">&quot;波导&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token string">&quot;手机中的战斗机&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ordered <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
 
    <span class="token comment">//封装对象</span>
    <span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    brand<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    brand<span class="token punctuation">.</span><span class="token function">setCompanyName</span><span class="token punctuation">(</span>companyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    brand<span class="token punctuation">.</span><span class="token function">setBrandName</span><span class="token punctuation">(</span>brandName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    brand<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
    brand<span class="token punctuation">.</span><span class="token function">setOrdered</span><span class="token punctuation">(</span>ordered<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//1. 获取SqlSessionFactory</span>
    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 获取SqlSession对象</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true); //设置自动提交事务，这种情况不需要手动提交事务了</span>
    <span class="token comment">//3. 获取Mapper接口的代理对象</span>
    <span class="token class-name">BrandMapper</span> brandMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4. 执行方法</span>
    
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brandMapper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//要手动提交，不然会回滚事务。如果前面sqlSessionFactory.openSession(true)，就不用再提交事务了</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//5. 释放资源</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Mybatis事务：</strong><br><img src="https://gitlab.com/apzs/image/-/raw/master/image/2d24bc46bbd14a329308622970db52bb.png" alt="" loading="lazy"></p><p><strong>返回主键</strong></p><p>在 insert 标签上添加如下属性：</p><ul><li><p>useGeneratedKeys：是够获取自动增长的主键值。true表示获取</p></li><li><p>keyProperty ：指定将获取到的主键值封装到哪儿个属性里</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">&quot;add&quot;</span> useGeneratedKeys<span class="token operator">=</span><span class="token string">&quot;true&quot;</span> keyProperty<span class="token operator">=</span><span class="token string">&quot;id&quot;</span><span class="token operator">&gt;</span>
    insert into tb_brand <span class="token punctuation">(</span>brand_name<span class="token punctuation">,</span> company_name<span class="token punctuation">,</span> ordered<span class="token punctuation">,</span> description<span class="token punctuation">,</span> status<span class="token punctuation">)</span>
    values <span class="token punctuation">(</span>#<span class="token punctuation">{</span>brandName<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>companyName<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>ordered<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>description<span class="token punctuation">}</span><span class="token punctuation">,</span> #<span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>brandMapper<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-9-修改全部字段" tabindex="-1"><a class="header-anchor" href="#_2-5-9-修改全部字段" aria-hidden="true">#</a> 2.5.9 修改全部字段</h4><p>获取到修改后的数据和id，修改此id对应的一行数据。</p><p><code>BrandMapper</code> 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
   * 修改
   */</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BrandMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>update<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    update tb_brand
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>brandName != null and brandName != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            brand_name = #{brandName},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>companyName != null and companyName != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            company_name = #{companyName},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ordered != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            ordered = #{ordered},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>description != null and description != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            description = #{description},
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status != null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            status = #{status}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>
    where id = #{id};
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MybatisTest类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//接收参数</span>
    <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> companyName <span class="token operator">=</span> <span class="token string">&quot;波导手机&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> brandName <span class="token operator">=</span> <span class="token string">&quot;波导&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token string">&quot;波导手机,手机中的战斗机&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ordered <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
 
    <span class="token comment">//封装对象</span>
    <span class="token class-name">Brand</span> brand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    brand<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//        brand.setCompanyName(companyName);</span>
    <span class="token comment">//        brand.setBrandName(brandName);</span>
    <span class="token comment">//        brand.setDescription(description);</span>
    <span class="token comment">//        brand.setOrdered(ordered);</span>
    brand<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//1. 获取SqlSessionFactory</span>
    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 获取SqlSession对象</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span>
    <span class="token comment">//3. 获取Mapper接口的代理对象</span>
    <span class="token class-name">BrandMapper</span> brandMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4. 执行方法</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> brandMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//提交事务</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//5. 释放资源</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-10-修改动态字段" tabindex="-1"><a class="header-anchor" href="#_2-5-10-修改动态字段" aria-hidden="true">#</a> 2.5.10 修改动态字段</h4><p>在修改界面用户可能只修改部分属性， 所以加条件<code>&lt;if&gt;</code>判断每个属性修改框用户有没有填写，用<code>&lt;set&gt;</code>防止更新语句最后一行有逗号。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4bbf72d7ddbd47d2bbb7ebc85dd0feb7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-5-11-删除一行数据" tabindex="-1"><a class="header-anchor" href="#_2-5-11-删除一行数据" aria-hidden="true">#</a> 2.5.11 删除一行数据</h4><p><code>BrandMapper</code> 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * 根据id删除
  */</span>
<span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BrandMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deleteById<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    delete from tb_brand where id = #{id};
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MybatisTest类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//接收参数</span>
    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
 
    <span class="token comment">//1. 获取SqlSessionFactory</span>
    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 获取SqlSession对象</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span>
    <span class="token comment">//3. 获取Mapper接口的代理对象</span>
    <span class="token class-name">BrandMapper</span> brandMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4. 执行方法</span>
    brandMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//提交事务</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//5. 释放资源</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-12-批量删除" tabindex="-1"><a class="header-anchor" href="#_2-5-12-批量删除" aria-hidden="true">#</a> 2.5.12 批量删除</h4><p>编写SQL时需要遍历数组来拼接SQL语句。Mybatis 提供了 <code>foreach</code> 标签供我们使用</p><p><strong>foreach 标签</strong></p><p>用来迭代任何可迭代的对象（如数组，集合）。</p><ul><li><p>collection 属性：指定遍历的数组</p><ul><li><p>mybatis会将数组参数，封装为一个Map集合。</p><ul><li><p>默认：array = 数组，key是array而不是数组名，如collection=&quot;array&quot;和void deleteByIds(int[] ids);</p></li><li><p>可以使用@Param注解改变map集合的默认key的名称为数组名，如collection=&quot;ids&quot;和void deleteByIds(@Param(&quot;ids&quot;) int[] ids);</p></li></ul></li></ul></li><li><p>item 属性：本次迭代获取到的元素，如item=&quot;id&quot;。</p></li><li><p>separator 属性：集合项迭代之间的分隔符。<code>foreach</code> 标签不会错误地添加多余的分隔符。也就是最后一次迭代不会加分隔符。如separator=&quot;,&quot;</p></li><li><p>open 属性：该属性值是在拼接SQL语句之前拼接的语句，只会拼接一次。如open=&quot;(&quot;</p></li><li><p>close 属性：该属性值是在拼接SQL语句拼接后拼接的语句，只会拼接一次。如close=&quot;)&quot;</p></li></ul><p><code>BrandMapper</code> 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * 批量删除
  */</span>
<span class="token keyword">void</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BrandMapper.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deleteByIds<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    delete from tb_brand where id
    in
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>array<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        #{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
    ;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MybatisTest类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteByIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">//接收参数</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    <span class="token comment">//1. 获取SqlSessionFactory</span>
    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 获取SqlSession对象</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span>
    <span class="token comment">//3. 获取Mapper接口的代理对象</span>
    <span class="token class-name">BrandMapper</span> brandMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">BrandMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//4. 执行方法</span>
    brandMapper<span class="token punctuation">.</span><span class="token function">deleteByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//提交事务</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//5. 释放资源</span>
    sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-mybatis参数传递" tabindex="-1"><a class="header-anchor" href="#_2-6-mybatis参数传递" aria-hidden="true">#</a> 2.6 Mybatis参数传递</h3><p>Mybatis 接口方法中可以接收各种各样的参数，如下：</p><ul><li><p>多个参数</p></li><li><p>单个参数：单个参数又可以是如下类型</p><ul><li><p><strong>POJO 类型，传入对象</strong></p></li><li><p>Map 集合类型，传入map</p></li><li><p>Collection 集合类型</p></li><li><p>List 集合类型</p></li><li><p>Array 类型</p></li><li><p>其他类型</p></li></ul></li></ul><blockquote><p><strong>事先注意：</strong></p><p>mapper传参数，如果<strong>参数包括对象和散装参数</strong>，那么<strong>对象必须也注解</strong>，写SQL语句时候不能忘记对象.属性，例如brand.status.</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPageAndCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;begin&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;brand&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p><strong>多个参数注解传递</strong></p><p>如下面的代码，就是接收两个参数，而接收多个参数需要使用 <code>@Param</code> 注解，那么为什么要加该注解呢？这个问题要弄明白就必须来研究Mybatis 底层对于这些参数是如何处理的。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>User select(@Param(&quot;username&quot;) String username,@Param(&quot;password&quot;) String password);
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>select<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_user
    where 
        username=#{username}
        and password=#{password}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注解底层，了解即可</strong></p><p>我们在接口方法中定义多个参数，Mybatis 会将这些参数封装成 Map 集合对象，值就是参数值，而键在没有使用 <code>@Param</code> 注解时有以下命名规则：</p><ul><li><p>以 arg 开头 ：第一个参数就叫 arg0，第二个参数就叫 arg1，以此类推。如：</p><blockquote><p>map.put(&quot;arg0&quot;，参数值1);</p><p>map.put(&quot;arg1&quot;，参数值2);</p></blockquote></li><li><p>以 param 开头 ： 第一个参数就叫 param1，第二个参数就叫 param2，依次类推。如：</p><blockquote><p>map.put(&quot;param1&quot;，参数值1);</p><p>map.put(&quot;param2&quot;，参数值2);</p></blockquote></li></ul><p>代码验证：</p><ul><li><p>在 <code>UserMapper</code> 接口中定义如下方法</p><p>User select(String username,String password);</p></li><li><p>在 <code>UserMapper.xml</code> 映射配置文件中定义SQL</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>select<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_user
    where 
        username=#{arg0}
        and password=#{arg1}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>select<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_user
    where 
        username=#{param1}
        and password=#{param2}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>运行代码结果如下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/3d4e42ec0d1e4c15b5fdbca53ad616de.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>在映射配合文件的SQL语句中使用用 <code>arg</code> 开头的和 <code>param</code> 书写，代码的可读性会变的特别差，此时可以使用 <code>@Param</code> 注解。</li></ul><p>在接口方法参数上使用 <code>@Param</code> 注解，Mybatis 会将 <code>arg</code> 开头的键名替换为对应注解的属性值。</p><p>代码验证：</p><ul><li><p>在 <code>UserMapper</code> 接口中定义如下方法，在 <code>username</code> 参数前加上 <code>@Param</code> 注解</p><p>User select(@Param(&quot;username&quot;) String username, String password);</p><p>Mybatis 在封装 Map 集合时，键名就会变成如下：</p><blockquote><p>map.put(&quot;username&quot;，参数值1);</p><p>map.put(&quot;arg1&quot;，参数值2);</p><p>map.put(&quot;param1&quot;，参数值1);</p><p>map.put(&quot;param2&quot;，参数值2);</p></blockquote></li><li><p>在 <code>UserMapper.xml</code> 映射配置文件中定义SQL</p></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>select<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_user
    where 
        username=#{username}
        and password=#{param2}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行程序结果没有报错。而如果将 <code>#{}</code> 中的 <code>username</code> 还是写成 <code>arg0</code></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>select<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select *
    from tb_user
    where 
        username=#{arg0}
        and password=#{param2}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行程序则可以看到错误</li></ul><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/f7f003dfdf5e4eedb3a988ee0e28e901.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>结论：以后接口参数是多个时，在每个参数上都使用 <code>@Param</code> 注解。这样代码的可读性更高。</strong></p><h3 id="_2-7-注解实现增删改查" tabindex="-1"><a class="header-anchor" href="#_2-7-注解实现增删改查" aria-hidden="true">#</a> 2.7 注解实现增删改查</h3><p>如果<strong>SQL语句简单</strong>，使用注解开发会比配置文件开发更加<strong>方便</strong>。</p><p>如下就是使用注解进行开发</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;select * from tb_user where id = #{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong></p><ul><li><p>注解后是没有分号的。</p></li><li><p>注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 <code>statement</code></p></li></ul></blockquote><p>Mybatis 针对 CURD 操作都提供了对应的注解，已经做到见名知意。如下：</p><ul><li><p>查询 ：@Select</p></li><li><p>添加 ：@Insert</p></li><li><p>修改 ：@Update</p></li><li><p>删除 ：@Delete</p></li></ul><p>**注意：**在官方文档中 <code>入门</code> 中有这样的一段话：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/e417dfe1489947c3ad579d47d51cfa83.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以，<strong>注解完成简单功能，配置文件完成复杂功能。</strong></p><p>而我们之前写的动态 SQL 就是复杂的功能，如果用注解使用的话，就需要使用到 Mybatis 提供的SQL构建器来完成，而对应的代码如下：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4553fc6b112a4cb58f9bb932346417e3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上述代码将java代码和SQL语句融到了一块，使得代码的可读性大幅度降低。</p>`,226);function T(Q,R){const s=o("ExternalLinkIcon");return l(),c("div",null,[u,n("ul",null,[r,n("li",null,[d,n("ul",null,[n("li",null,[a("地址： "),n("a",k,[a("Central Repository:"),t(s)])])])]),m]),g,n("p",null,[n("a",v,[a("https://mvnrepository.com/"),t(s)])]),b,n("p",null,[a("官方下载链接：https://maven."),n("a",q,[a("apache"),t(s)]),a(".org/download.cgi")]),f,n("p",null,[n("a",y,[a("JavaWeb基础5——HTTP&Tomcat&Servlet_vincewm的博客-CSDN博客"),t(s)])]),h,n("blockquote",null,[n("p",null,[a("**groupId：**定义当前"),n("a",x,[a("Maven"),t(s)]),a("项目隶属的实际项目。")]),S,M,w]),_,j,B,D,n("blockquote",null,[z,n("ul",null,[N,n("li",null,[n("p",null,[n("a",I,[a("https://mvnrepository.com/"),t(s)])])])])]),L,n("p",null,[n("a",C,[a("MyBatis中文网"),t(s)])]),n("ul",null,[E,U,n("li",null,[n("p",null,[a("官网："),n("a",A,[a("mybatis – MyBatis 3 | 简介"),t(s)])])])]),F,n("p",null,[n("a",O,[a("POJO"),t(s)]),a("(Plain Old Java Objects)译为，简单的Java对象，其实就是"),P,a("。")]),J])}const W=e(i,[["render",T],["__file","3.Maven基础_MyBatis.html.vue"]]);export{W as default};
