import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,e as d}from"./app-db_OQQsY.js";const i={},r=d(`<h1 id="《arthas进阶》" tabindex="-1"><a class="header-anchor" href="#《arthas进阶》" aria-hidden="true">#</a> 《Arthas进阶》</h1><h1 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h1><ol><li>类和类加载器相关的命令</li><li>monitor/watch/trace/stack等核心命令的使用</li><li>火焰图的生成</li><li>Arthas实战案例</li></ol><h1 id="dump" tabindex="-1"><a class="header-anchor" href="#dump" aria-hidden="true">#</a> dump</h1><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>将已加载类的字节码文件保存到特定目录：logs/arthas/classdump/</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><table><thead><tr><th>数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><code>[c:]</code></td><td>类所属 ClassLoader 的 hashcode</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr></tbody></table><h2 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>把String类的字节码文件保存到~/logs/arthas/classdump/目录下
dump java.lang.String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>把demo包下所有的类的字节码文件保存到~/logs/arthas/classdump/目录下
dump demo.*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果" tabindex="-1"><a class="header-anchor" href="#效果" aria-hidden="true">#</a> 效果</h2><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310223714230.png" alt="image-20200310223714230" tabindex="0" loading="lazy"><figcaption>image-20200310223714230</figcaption></figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310223850169.png" alt="image-20200310223850169" style="zoom:67%;"><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200310224236313.png" alt="image-20200310224236313" style="zoom:67%;"><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>dump作用：将正在JVM中运行的程序的字节码文件提取出来，保存在logs相应的目录下</p><p>不同的类加载器放在不同的目录下</p><h1 id="classloader" tabindex="-1"><a class="header-anchor" href="#classloader" aria-hidden="true">#</a> classloader</h1><h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h2><p>获取类加载器的信息</p><h2 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h2><ol><li><p><code>classloader</code> 命令将 JVM 中所有的classloader的信息统计出来，并可以展示继承树，urls等。</p></li><li><p>可以让指定的classloader去getResources，打印出所有查找到的resources的url。对于<code>ResourceNotFoundException</code>异常比较有用。</p></li></ol><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h2><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>[l]</td><td>按类加载实例进行统计</td></tr><tr><td>[t]</td><td>打印所有ClassLoader的继承树</td></tr><tr><td>[a]</td><td>列出所有ClassLoader加载的类，请谨慎使用</td></tr><tr><td><code>[c:]</code></td><td>ClassLoader的hashcode</td></tr><tr><td><code>[c: r:]</code></td><td>用ClassLoader去查找resource</td></tr><tr><td><code>[c: load:]</code></td><td>用ClassLoader去加载指定的类</td></tr></tbody></table><h2 id="举例-1" tabindex="-1"><a class="header-anchor" href="#举例-1" aria-hidden="true">#</a> 举例</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>默认按类加载器的类型查看统计信息
classloader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311092606080.png" alt="image-20200311092606080" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>按类加载器的实例查看统计信息，可以看到类加载的hashCode
classloader -l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311092709402.png" alt="image-20200311092709402" tabindex="0" loading="lazy"><figcaption>image-20200311092709402</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>查看ClassLoader的继承树
classloader -t
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311092759627.png" alt="image-20200311092759627" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>通过类加载器的hash，查看此类加载器实际所在的位置
classloader -c 680f2737
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311093005661.png" alt="image-20200311093005661" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>使用ClassLoader去查找指定资源resource所在的位置
classloader -c 680f2737 -r META-INF/MANIFEST.MF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311093248859.png" alt="image-20200311093248859" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>使用ClassLoader去查找类的class文件所在的位置
classloader -c 680f2737 -r java/lang/String.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311094534683.png" alt="image-20200311094534683" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>使用ClassLoader去加载类
classloader -c 70dea4e --load java.lang.String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311094910635.png" alt="image-20200311094910635" style="zoom:67%;"><h2 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h2><p>classloader命令主要作用有哪些？</p><ol><li>显示所有类加载器的信息</li><li>获取某个类加载器所在的jar包</li><li>获取某个资源在哪个jar包中</li><li>加载某个类</li></ol><h1 id="monitor" tabindex="-1"><a class="header-anchor" href="#monitor" aria-hidden="true">#</a> monitor</h1><h2 id="目标-1" tabindex="-1"><a class="header-anchor" href="#目标-1" aria-hidden="true">#</a> 目标</h2><p>monitor命令：监控指定类中方法的执行情况</p><h2 id="作用-2" tabindex="-1"><a class="header-anchor" href="#作用-2" aria-hidden="true">#</a> 作用</h2><blockquote><p>对匹配 <code>class-pattern</code>／<code>method-pattern</code>的类、方法的调用进行监控。</p><p><code>monitor</code> 命令是一个非实时返回命令，实时返回命令是输入之后立即返回</p><p>而非实时返回的命令，则是不断的等待目标 Java 进程返回信息，直到用户输入 <code>Ctrl+C</code> 为止。</p></blockquote><h2 id="参数说明-1" tabindex="-1"><a class="header-anchor" href="#参数说明-1" aria-hidden="true">#</a> 参数说明</h2><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[c:]</code></td><td>统计周期，默认值为120秒</td></tr></tbody></table><h2 id="举例-2" tabindex="-1"><a class="header-anchor" href="#举例-2" aria-hidden="true">#</a> 举例</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>过5秒监控一次，类demo.MathGame中primeFactors方法
monitor -c 5 demo.MathGame primeFactors
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311101017085.png" alt="image-20200311101017085" tabindex="0" loading="lazy"><figcaption>image-20200311101017085</figcaption></figure><h2 id="监控的维度说明" tabindex="-1"><a class="header-anchor" href="#监控的维度说明" aria-hidden="true">#</a> 监控的维度说明</h2><table><thead><tr><th>监控项</th><th>说明</th></tr></thead><tbody><tr><td>timestamp</td><td>时间戳</td></tr><tr><td>class</td><td>Java类</td></tr><tr><td>method</td><td>方法（构造方法、普通方法）</td></tr><tr><td>total</td><td>调用次数</td></tr><tr><td>success</td><td>成功次数</td></tr><tr><td>fail</td><td>失败次数</td></tr><tr><td>rt</td><td>平均耗时</td></tr><tr><td>fail-rate</td><td>失败率</td></tr></tbody></table><h2 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h2><p>monitor命令的作用是什么？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用来监视一个时间段中指定方法的执行次数，成功次数，失败次数，耗时等这些信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h1><h2 id="目标-2" tabindex="-1"><a class="header-anchor" href="#目标-2" aria-hidden="true">#</a> 目标</h2><p>观察到指定方法的调用情况</p><h2 id="作用-3" tabindex="-1"><a class="header-anchor" href="#作用-3" aria-hidden="true">#</a> 作用</h2><blockquote><p>方法执行数据观测，让你能方便的观察到指定方法的调用情况。</p><p>能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写OGNL 表达式进行对应变量的查看。</p></blockquote><h2 id="参数说明-2" tabindex="-1"><a class="header-anchor" href="#参数说明-2" aria-hidden="true">#</a> 参数说明</h2><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td><em>express</em></td><td>观察表达式</td></tr><tr><td><em>condition-express</em></td><td>条件表达式</td></tr><tr><td>[b]</td><td>在<strong>方法调用之前</strong>观察 before</td></tr><tr><td>[e]</td><td>在<strong>方法异常之后</strong>观察 exception</td></tr><tr><td>[s]</td><td>在<strong>方法返回之后</strong>观察 success</td></tr><tr><td>[f]</td><td>在<strong>方法结束之后</strong>(正常返回和异常返回)观察 finish</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td>[x:]</td><td>指定输出结果的属性遍历深度，默认为 1</td></tr></tbody></table><p>这里重点要说明的是观察表达式，观察表达式的构成主要由ognl 表达式组成，所以你可以这样写<code>&quot;{params,returnObj}&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p><h3 id="特别说明" tabindex="-1"><a class="header-anchor" href="#特别说明" aria-hidden="true">#</a> 特别说明</h3><ul><li>watch 命令定义了4个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li><li>4个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li><li>这里要注意<code>方法入参</code>和<code>方法出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li><li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li></ul><h2 id="举例-3" tabindex="-1"><a class="header-anchor" href="#举例-3" aria-hidden="true">#</a> 举例</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>观察demo.MathGame类中primeFactors方法出参和返回值，结果属性遍历深度为2。
params表示所有参数数组(因为不确定是几个参数)，returnObject表示返回值

watch demo.MathGame primeFactors &quot;{params,returnObj}&quot; -x 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311103008904.png" alt="image-20200311103008904" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>观察方法入参，对比前一个例子，返回值为空（事件点为方法执行前，因此获取不到返回值）

watch demo.MathGame primeFactors &quot;{params,returnObj}&quot; -x 2 -b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311152248842.png" alt="image-20200311152248842" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>观察当前对象中的属性，如果想查看方法运行前后，当前对象中的属性，可以使用target关键字，代表当前对象
watch demo.MathGame primeFactors &#39;target&#39; -x 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311153804431.png" alt="image-20200311153804431" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>同时观察方法调用前和方法返回后，参数里-n 2，表示只执行两次。
这里输出结果中，第一次输出的是方法调用前的观察表达式的结果，第二次输出的是方法返回后的表达式的结果
params表示参数，target表示执行方法的对象，returnObject表示返回值

watch demo.MathGame primeFactors &quot;{params,target,returnObj}&quot; -x 2 -b -s -n 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311153004991.png" alt="image-20200311153004991" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>使用target.field_name访问当前对象的某个属性
watch demo.MathGame primeFactors &#39;target.illegalArgumentCount&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311154005898.png" alt="image-20200311154005898" style="zoom:80%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>条件表达式的例子，输出第1参数小于的情况
watch demo.MathGame primeFactors &quot;{params[0],target}&quot; &quot;params[0]&lt;0&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311155053465.png" alt="image-20200311155053465" style="zoom:80%;"><h2 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h2><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>[b]</td><td>begin 监视方法执行前的情况</td></tr><tr><td>[e]</td><td>exception 监视出现异常的情况</td></tr><tr><td>[s]</td><td>success 执行成功的情况</td></tr><tr><td>[f]</td><td>finish 执行完毕的情况，包含成功或失败</td></tr></tbody></table><h1 id="trace" tabindex="-1"><a class="header-anchor" href="#trace" aria-hidden="true">#</a> trace</h1><h2 id="目标-3" tabindex="-1"><a class="header-anchor" href="#目标-3" aria-hidden="true">#</a> 目标</h2><p>学习trace这条命令的使用</p><p>对方法内部调用路径进行追踪，并输出方法路径上的每个节点上耗时</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><blockquote><p><code>trace</code> 命令能主动搜索 <code>class-pattern</code>／<code>method-pattern</code> 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</p><p>观察表达式的构成主要由ognl 表达式组成，所以你可以这样写<code>&quot;{params,returnObj}&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p><p>很多时候我们只想看到某个方法的rt大于某个时间之后的trace结果，现在Arthas可以按照方法执行的耗时来进行过滤了，例如<code>trace *StringUtils isBlank &#39;#cost&gt;100&#39;</code>表示当执行时间超过100ms的时候，才会输出trace的结果。</p><p>watch/stack/trace这个三个命令都支持<code>#cost</code>耗时条件过滤</p></blockquote><h2 id="参数说明-3" tabindex="-1"><a class="header-anchor" href="#参数说明-3" aria-hidden="true">#</a> 参数说明</h2><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td><em>condition-express</em></td><td>条件表达式，使用OGNL表达式</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认是通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>设置命令执行次数</td></tr><tr><td><code>#cost</code></td><td>方法执行耗时，单位是毫秒</td></tr></tbody></table><h2 id="举例-4" tabindex="-1"><a class="header-anchor" href="#举例-4" aria-hidden="true">#</a> 举例</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>trace函数指定类的指定方法
trace demo.MathGame run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311171209739.png" alt="image-20200311171209739" tabindex="0" loading="lazy"><figcaption>image-20200311171209739</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>如果方法调用的次数很多，那么可以用-n参数指定捕捉结果的次数。比如下面的例子里，捕捉到一次调用就退出命令。
trace demo.MathGame run -n 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311171239100.png" alt="image-20200311171239100" tabindex="0" loading="lazy"><figcaption>image-20200311171239100</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>默认情况下，trace不会包含jdk里的函数调用，如果希望trace jdk里的函数，需要显式设置--skipJDKMethod false。
trace --skipJDKMethod false demo.MathGame run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311171325682.png" alt="image-20200311171325682" tabindex="0" loading="lazy"><figcaption>image-20200311171325682</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>据调用耗时过滤，trace大于0.5ms的调用路径
trace demo.MathGame run &#39;#cost &gt; .5&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311171441982.png" alt="image-20200311171441982" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>可以用正则表匹配路径上的多个类和函数，一定程度上达到多层trace的效果。
trace -E com.test.ClassA|org.test.ClassB method1|method2|method3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4" aria-hidden="true">#</a> 小结</h2><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>class-pattern</td><td>类名表达式匹配</td></tr><tr><td>method-pattern</td><td>方法名表达式匹配</td></tr><tr><td>condition-express</td><td>条件表达式</td></tr><tr><td>#cost</td><td>过滤条件，只追踪满足的耗时方法</td></tr></tbody></table><h1 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> stack</h1><h2 id="作用-4" tabindex="-1"><a class="header-anchor" href="#作用-4" aria-hidden="true">#</a> 作用</h2><p>输出当前方法被调用的调用路径</p><h2 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h2><blockquote><p>很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。</p></blockquote><h2 id="参数说明-4" tabindex="-1"><a class="header-anchor" href="#参数说明-4" aria-hidden="true">#</a> 参数说明</h2><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><em>class-pattern</em></td><td>类名表达式匹配</td></tr><tr><td><em>method-pattern</em></td><td>方法名表达式匹配</td></tr><tr><td><em>condition-express</em></td><td>条件表达式，OGNL</td></tr><tr><td>[E]</td><td>开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td><code>[n:]</code></td><td>执行次数限制</td></tr></tbody></table><h2 id="举例-5" tabindex="-1"><a class="header-anchor" href="#举例-5" aria-hidden="true">#</a> 举例</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>获取primeFactors的调用路径
stack demo.MathGame primeFactors
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311173954382.png" alt="image-20200311173954382" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>条件表达式来过滤，第0个参数的值小于0，-n表示获取2次
stack demo.MathGame primeFactors &#39;params[0]&lt;0&#39; -n 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311174229013.png" alt="image-20200311174229013" style="zoom:67%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>据执行时间来过滤，耗时大于0.5毫秒
stack demo.MathGame primeFactors &#39;#cost&gt;0.5&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311174408523.png" alt="image-20200311174408523" style="zoom:67%;"><h2 id="小结-5" tabindex="-1"><a class="header-anchor" href="#小结-5" aria-hidden="true">#</a> 小结</h2><p>stack命令的作用是什么？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输出当前方法被调用的路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="tt" tabindex="-1"><a class="header-anchor" href="#tt" aria-hidden="true">#</a> tt</h1><h2 id="作用-5" tabindex="-1"><a class="header-anchor" href="#作用-5" aria-hidden="true">#</a> 作用</h2><p>time-tunnel 时间隧道</p><p>记录下指定方法每次调用的入参和返回信息，并能对这些不同时间下调用的信息进行观测</p><h2 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2" aria-hidden="true">#</a> 介绍</h2><blockquote><p><code>watch</code> 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。</p><p>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。</p><p>于是乎，TimeTunnel 命令就诞生了。</p></blockquote><h2 id="参数解析" tabindex="-1"><a class="header-anchor" href="#参数解析" aria-hidden="true">#</a> 参数解析</h2><table><thead><tr><th>tt的参数</th><th>说明</th></tr></thead><tbody><tr><td>-t</td><td>记录某个方法在一个时间段中的调用</td></tr><tr><td>-l</td><td>显示所有已经记录的列表</td></tr><tr><td>-n 次数</td><td>只记录多少次</td></tr><tr><td>-s 表达式</td><td>搜索表达式</td></tr><tr><td>-i 索引号</td><td>查看指定索引号的详细调用信息</td></tr><tr><td>-p</td><td>重新调用指定的索引号时间碎片</td></tr></tbody></table><ul><li><p><code>-t</code></p><p>tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p></li><li><p><code>-n 3</code></p><p>当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p><p>此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断tt命令的记录过程，避免人工操作无法停止的情况。</p></li></ul><h2 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>最基本的使用来说，就是记录下当前方法的每次调用环境现场。
tt -t demo.MathGame primeFactors
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200321200911157.png" alt="image-20200321200911157" tabindex="0" loading="lazy"><figcaption>image-20200321200911157</figcaption></figure><h3 id="表格字段说明" tabindex="-1"><a class="header-anchor" href="#表格字段说明" aria-hidden="true">#</a> 表格字段说明</h3><table><thead><tr><th>表格字段</th><th>字段解释</th></tr></thead><tbody><tr><td>INDEX</td><td>时间片段记录编号，每一个编号代表着一次调用，后续tt还有很多命令都是基于此编号指定记录操作，非常重要。</td></tr><tr><td>TIMESTAMP</td><td>方法执行的本机时间，记录了这个时间片段所发生的本机时间</td></tr><tr><td>COST(ms)</td><td>方法执行的耗时</td></tr><tr><td>IS-RET</td><td>方法是否以正常返回的形式结束</td></tr><tr><td>IS-EXP</td><td>方法是否以抛异常的形式结束</td></tr><tr><td>OBJECT</td><td>执行对象的<code>hashCode()</code>，注意，曾经有人误认为是对象在JVM中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td></tr><tr><td>CLASS</td><td>执行的类名</td></tr><tr><td>METHOD</td><td>执行的方法名</td></tr></tbody></table><ul><li><p>条件表达式</p><p>不知道大家是否有在使用过程中遇到以下困惑</p><ul><li>Arthas 似乎很难区分出重载的方法</li><li>我只需要观察特定参数，但是 tt 却全部都给我记录了下来</li></ul><p>条件表达式也是用 <code>OGNL</code> 来编写，核心的判断对象依然是 <code>Advice</code> 对象。除了 <code>tt</code> 命令之外，<code>watch</code>、<code>trace</code>、<code>stack</code> 命令也都支持条件表达式。</p></li><li><p>解决方法重载</p><p><code>tt -t *Test print params.length==1</code></p><p>通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写</p><p><code>tt -t *Test print &#39;params[1] instanceof Integer&#39;</code></p></li><li><p>解决指定参数</p><p><code>tt -t *Test print params[0].mobile==&quot;13989838402&quot;</code></p></li></ul><h3 id="检索调用记录" tabindex="-1"><a class="header-anchor" href="#检索调用记录" aria-hidden="true">#</a> 检索调用记录</h3><p>当你用 <code>tt</code> 记录了一大片的时间片段之后，你希望能从中筛选出自己需要的时间片段，这个时候你就需要对现有记录进行检索。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tt -l
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200321194350208.png" alt="image-20200321194350208" tabindex="0" loading="lazy"><figcaption>image-20200321194350208</figcaption></figure><p>需要筛选出 <code>primeFactors</code> 方法的调用信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tt -s &#39;method.name==&quot;primeFactors&quot;&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200321194724694.png" alt="image-20200321194724694" tabindex="0" loading="lazy"><figcaption>image-20200321194724694</figcaption></figure><h3 id="查看调用信息" tabindex="-1"><a class="header-anchor" href="#查看调用信息" aria-hidden="true">#</a> 查看调用信息</h3><p>对于具体一个时间片的信息而言，你可以通过 <code>-i</code> 参数后边跟着对应的 <code>INDEX</code> 编号查看到他的详细信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tt -i 1002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200321201648590.png" alt="image-20200321201648590" style="zoom:80%;"><h3 id="重做一次调用" tabindex="-1"><a class="header-anchor" href="#重做一次调用" aria-hidden="true">#</a> 重做一次调用</h3><p>当你稍稍做了一些调整之后，你可能需要前端系统重新触发一次你的调用，此时得求爷爷告奶奶的需要前端配合联调的同学再次发起一次调用。而有些场景下，这个调用不是这么好触发的。</p><p><code>tt</code> 命令由于保存了当时调用的所有现场信息，所以我们可以自己主动对一个 <code>INDEX</code> 编号的时间片自主发起一次调用，从而解放你的沟通成本。此时你需要 <code>-p</code> 参数。通过 <code>--replay-times</code> 指定 调用次数，通过 <code>--replay-interval</code> 指定多次调用间隔(单位ms, 默认1000ms)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tt -i 1002 -p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200321195211743.png" alt="image-20200321195211743" style="zoom:80%;"><h2 id="小结-6" tabindex="-1"><a class="header-anchor" href="#小结-6" aria-hidden="true">#</a> 小结</h2><p>作用：记录指定方法每次调用的入参和返回值，并后期还可以对这些信息进行观测</p><table><thead><tr><th>tt的参数</th><th>说明</th></tr></thead><tbody><tr><td>-t</td><td>记录方法在一个时间段中调用</td></tr><tr><td>-l</td><td>显示所有已经记录的列表</td></tr><tr><td>-n 次数</td><td>只记录多少次</td></tr><tr><td>-s 搜索表达式</td><td>指定搜索表达式</td></tr><tr><td>-i 索引号</td><td>查看它的详细信息</td></tr></tbody></table><h1 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h1><h2 id="作用-6" tabindex="-1"><a class="header-anchor" href="#作用-6" aria-hidden="true">#</a> 作用</h2><blockquote><p>全局开关</p></blockquote><h2 id="全局选项" tabindex="-1"><a class="header-anchor" href="#全局选项" aria-hidden="true">#</a> 全局选项</h2><table><thead><tr><th>名称</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>unsafe</td><td>false</td><td>是否支持对系统级别的类进行增强，打开该开关可能导致把JVM搞挂，请慎重选择！</td></tr><tr><td>dump</td><td>false</td><td>是否支持被增强了的类dump到外部文件中，如果打开开关，class文件会被dump到<code>/\${application dir}/arthas-class-dump/</code>目录下，具体位置详见控制台输出</td></tr><tr><td>batch-re-transform</td><td>true</td><td>是否支持批量对匹配到的类执行retransform操作</td></tr><tr><td>json-format</td><td>false</td><td>是否支持json化的输出</td></tr><tr><td>disable-sub-class</td><td>false</td><td>是否禁用子类匹配，默认在匹配目标类的时候会默认匹配到其子类，如果想精确匹配，可以关闭此开关</td></tr><tr><td>debug-for-asm</td><td>false</td><td>打印ASM相关的调试信息</td></tr><tr><td>save-result</td><td>false</td><td>是否打开执行结果存日志功能，打开之后所有命令的运行结果都将保存到<code>~/logs/arthas-cache/result.log</code>中</td></tr><tr><td>job-timeout</td><td>1d</td><td>异步后台任务的默认超时时间，超过这个时间，任务自动停止；比如设置 1d, 2h, 3m, 25s，分别代表天、小时、分、秒</td></tr><tr><td>print-parent-fields</td><td>true</td><td>是否打印在parent class里的filed</td></tr></tbody></table><h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><h3 id="查看所有的options" tabindex="-1"><a class="header-anchor" href="#查看所有的options" aria-hidden="true">#</a> 查看所有的options</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>options
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200322092041440.png" alt="image-20200322092041440" tabindex="0" loading="lazy"><figcaption>image-20200322092041440</figcaption></figure><h3 id="获取option的值" tabindex="-1"><a class="header-anchor" href="#获取option的值" aria-hidden="true">#</a> 获取option的值</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>options json-format
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200322092136758.png" alt="image-20200322092136758" tabindex="0" loading="lazy"><figcaption>image-20200322092136758</figcaption></figure><h3 id="设置指定的option" tabindex="-1"><a class="header-anchor" href="#设置指定的option" aria-hidden="true">#</a> 设置指定的option</h3><p>例如，想打开执行结果存日志功能，输入如下命令即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>options save-result true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200322092300964.png" alt="image-20200322092300964" tabindex="0" loading="lazy"><figcaption>image-20200322092300964</figcaption></figure><h2 id="小结-7" tabindex="-1"><a class="header-anchor" href="#小结-7" aria-hidden="true">#</a> 小结</h2><p>options的作用是：查看或设置arthas全局环境变量</p><h1 id="profiler火焰图" tabindex="-1"><a class="header-anchor" href="#profiler火焰图" aria-hidden="true">#</a> profiler火焰图</h1><h2 id="目标-4" tabindex="-1"><a class="header-anchor" href="#目标-4" aria-hidden="true">#</a> 目标</h2><p>生成火焰图</p><h2 id="介绍-3" tabindex="-1"><a class="header-anchor" href="#介绍-3" aria-hidden="true">#</a> 介绍</h2><p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</p><p>命令基本运行结构是 <code>profiler 命令 [命令参数]</code></p><h2 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1" aria-hidden="true">#</a> 案例</h2><h3 id="启动profiler" tabindex="-1"><a class="header-anchor" href="#启动profiler" aria-hidden="true">#</a> 启动profiler</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ profiler start
Started [cpu] profiling
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>默认情况下，生成的是cpu的火焰图，即event为<code>cpu</code>。可以用<code>--event</code>参数来指定。</p></blockquote><h3 id="显示支持的事件" tabindex="-1"><a class="header-anchor" href="#显示支持的事件" aria-hidden="true">#</a> 显示支持的事件</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ profiler list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取已采集的sample的数量" tabindex="-1"><a class="header-anchor" href="#获取已采集的sample的数量" aria-hidden="true">#</a> 获取已采集的sample的数量</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ profiler getSamples
23
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看profiler状态" tabindex="-1"><a class="header-anchor" href="#查看profiler状态" aria-hidden="true">#</a> 查看profiler状态</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ profiler status
[cpu] profiling is running for 4 seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以查看当前profiler在采样哪种<code>event</code>和采样时间。</p><h3 id="停止profiler" tabindex="-1"><a class="header-anchor" href="#停止profiler" aria-hidden="true">#</a> 停止profiler</h3><h4 id="生成svg格式结果" tabindex="-1"><a class="header-anchor" href="#生成svg格式结果" aria-hidden="true">#</a> 生成svg格式结果</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ profiler stop
profiler output file: /tmp/demo/arthas-output/20191125-135546.svg
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，生成的结果保存到应用的<code>工作目录</code>下的<code>arthas-output</code>目录。可以通过 <code>--file</code>参数来指定输出结果路径。比如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ profiler stop --file /tmp/output.svg
profiler output file: /tmp/output.svg
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成html格式结果" tabindex="-1"><a class="header-anchor" href="#生成html格式结果" aria-hidden="true">#</a> 生成html格式结果</h4><p>默认情况下，结果文件是<code>svg</code>格式，如果想生成<code>html</code>格式，可以用<code>--format</code>参数指定：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ profiler stop --format html
profiler output file: /tmp/test/arthas-output/20191125-143329.html
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在<code>--file</code>参数里用文件名指名格式。比如<code>--file /tmp/result.html</code> 。</p><h3 id="通过浏览器查看arthas-output下面的profiler结果" tabindex="-1"><a class="header-anchor" href="#通过浏览器查看arthas-output下面的profiler结果" aria-hidden="true">#</a> 通过浏览器查看arthas-output下面的profiler结果</h3><p>默认情况下，arthas使用3658端口，则可以打开： http://localhost:3658/arthas-output/ 查看到<code>arthas-output</code>目录下面的profiler结果：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200322095520034.png" alt="image-20200322095520034" tabindex="0" loading="lazy"><figcaption>image-20200322095520034</figcaption></figure><p>点击可以查看具体的结果：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200322095504907.png" alt="image-20200322095504907" tabindex="0" loading="lazy"><figcaption>image-20200322095504907</figcaption></figure><h2 id="火焰图的含义" tabindex="-1"><a class="header-anchor" href="#火焰图的含义" aria-hidden="true">#</a> 火焰图的含义</h2><p>火焰图是基于 perf 结果产生的SVG 图片，用来展示 CPU 的调用栈。</p><blockquote><p>y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。</p><p>x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的。</p><p><strong>火焰图就是看顶层的哪个函数占据的宽度最大。只要有&quot;平顶&quot;（plateaus），就表示该函数可能存在性能问题。</strong></p><p>颜色没有特殊含义，因为火焰图表示的是 CPU 的繁忙程度，所以一般选择暖色调。</p></blockquote><h2 id="小结-8" tabindex="-1"><a class="header-anchor" href="#小结-8" aria-hidden="true">#</a> 小结</h2><table><thead><tr><th>profiler</th><th>命令作用</th></tr></thead><tbody><tr><td>profiler start</td><td>启动profiler，默认情况下，生成cpu的火焰图</td></tr><tr><td>profiler list</td><td>显示所有支持的事件</td></tr><tr><td>profiler getSamples</td><td>获取已采集的sample的数量</td></tr><tr><td>profiler status</td><td>查看profiler的状态，运行的时间</td></tr><tr><td>profiler stop</td><td>停止profiler，生成火焰图的结果，指定输出目录和输出格式：svg或html</td></tr></tbody></table><h1 id="arthas实践" tabindex="-1"><a class="header-anchor" href="#arthas实践" aria-hidden="true">#</a> Arthas实践</h1><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h2><h3 id="_1-哪个controller处理了请求" tabindex="-1"><a class="header-anchor" href="#_1-哪个controller处理了请求" aria-hidden="true">#</a> 1. 哪个Controller处理了请求</h3><p>我们可以快速定位一个请求是被哪些<code>Filter</code>拦截的，或者请求最终是由哪些<code>Servlet</code>处理的。但有时，我们想知道一个请求是被哪个Spring MVC Controller处理的。如果翻代码的话，会比较难找，并且不一定准确。通过Arthas可以精确定位是哪个<code>Controller</code>处理请求。</p><h3 id="_2-每个请求的调用参数和返回值是多少" tabindex="-1"><a class="header-anchor" href="#_2-每个请求的调用参数和返回值是多少" aria-hidden="true">#</a> 2. 每个请求的调用参数和返回值是多少</h3><p>通过watch来查看请求的参数和返回值</p><h2 id="准备场景" tabindex="-1"><a class="header-anchor" href="#准备场景" aria-hidden="true">#</a> 准备场景</h2><p>将ssm_student.war项目部署到Linux的tomcat服务器下，可以正常访问。</p><p>启动之后，访问：http://192.168.254.199:8080/ssm_student ，会返回如下页面。192.168.254.199 是Linux服务器的地址。</p><p>那么这个请求是被哪个<code>Controller</code>处理的呢？</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311201333701.png" alt="image-20200311201333701" style="zoom:80%;"><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤</h2><ol><li>trace定位DispatcherServlet</li><li>jad反编译DispatcherServlet</li><li>watch定位handler</li><li>使用watch得到方法的入参和返回值</li></ol><h2 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤" aria-hidden="true">#</a> 实现步骤</h2><p>第1步：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在浏览器上进行登录操作，检查最耗时的方法
trace *.DispatcherServlet *
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311210304299.png" alt="image-20200311210304299" style="zoom:80%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>可以分步trace，请求最终是被DispatcherServlet#doDispatch()处理了
trace *.FrameworkServlet doService
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311210115377.png" alt="image-20200311210115377" tabindex="0" loading="lazy"><figcaption>image-20200311210115377</figcaption></figure><p>第2步：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>trace结果里把调用的行号打印出来了，我们可以直接在IDE里查看代码（也可以用jad命令反编译）
jad --source-only *.DispatcherServlet doDispatch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311210459511.png" alt="image-20200311210459511" style="zoom:67%;"><p>第3步：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>watch *.DispatcherServlet getHandler &#39;returnObj&#39;
查看返回的结果，得到使用到了2个控制器的方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200311210600265.png" alt="image-20200311210600265" tabindex="0" loading="lazy"><figcaption>image-20200311210600265</figcaption></figure><p>第4步：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>watch com.itheima.controller.* * {params,returnObj} -x 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/image-20200322110452326.png" alt="image-20200322110452326" style="zoom:80%;"><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>通过trace, jad, watch最后得到这个操作由2个控制器来处理，分别是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.itheima.controller.UserController.login()
com.itheima.controller.StudentController.findAll()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="学习总结" tabindex="-1"><a class="header-anchor" href="#学习总结" aria-hidden="true">#</a> 学习总结</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>dump</td><td>将已加载类的字节码文件保存到特定的目录中</td></tr><tr><td>classloader</td><td>获取类加载器的信息</td></tr><tr><td>monitor</td><td>监控指定类中方法的执行情况</td></tr><tr><td>watch</td><td>观察到指定方法的调用情况</td></tr><tr><td>trace</td><td>对方法内部调用路径进行追踪，并输出方法路径上每个节点上耗时</td></tr><tr><td>stack</td><td>输出当前方法被调用的路径</td></tr><tr><td>tt</td><td>记录指定方法每次调用的入参和返回信息</td></tr><tr><td>options</td><td>全局开关</td></tr><tr><td>profiler</td><td>生成火焰图</td></tr></tbody></table>`,244),s=[r];function n(l,c){return a(),t("div",null,s)}const m=e(i,[["render",n],["__file","Arthas进阶-笔记.html.vue"]]);export{m as default};
