import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a,b as n,d as t,e}from"./app-ldxHvpH7.js";const l={},u=e(`<h1 id="四、前后端联调" tabindex="-1"><a class="header-anchor" href="#四、前后端联调" aria-hidden="true">#</a> 四、前后端联调</h1><h2 id="_4-1、商品服务-api-三级分类" tabindex="-1"><a class="header-anchor" href="#_4-1、商品服务-api-三级分类" aria-hidden="true">#</a> 4.1、商品服务-API-三级分类</h2><h3 id="_4-1-1、商品服务-api-三级分类后端" tabindex="-1"><a class="header-anchor" href="#_4-1-1、商品服务-api-三级分类后端" aria-hidden="true">#</a> 4.1.1、商品服务-API-三级分类后端</h3><h4 id="_1、先执行sql" tabindex="-1"><a class="header-anchor" href="#_1、先执行sql" aria-hidden="true">#</a> 1、先执行sql</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.1.png" alt="image-20220426164247687" tabindex="0" loading="lazy"><figcaption>image-20220426164247687</figcaption></figure><h4 id="_2、修改com-atguigu-gulimall-product-controller-categorycontroller的list方法" tabindex="-1"><a class="header-anchor" href="#_2、修改com-atguigu-gulimall-product-controller-categorycontroller的list方法" aria-hidden="true">#</a> 2、修改<code>com.atguigu.gulimall.product.controller.CategoryController</code>的list方法</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.2.1.png" alt="image-20220426164551505" tabindex="0" loading="lazy"><figcaption>image-20220426164551505</figcaption></figure><p>改为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
     * 查询分类几子分类，以树状形式组装
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">listWithTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.2.2.png" alt="image-20220426164901518" tabindex="0" loading="lazy"><figcaption>image-20220426164901518</figcaption></figure><h4 id="_3、实现categoryservice的listwithtree方法" tabindex="-1"><a class="header-anchor" href="#_3、实现categoryservice的listwithtree方法" aria-hidden="true">#</a> 3、实现<code>CategoryService</code>的<code>listWithTree</code>方法</h4><h5 id="_1、categoryservice接口添加方法" tabindex="-1"><a class="header-anchor" href="#_1、categoryservice接口添加方法" aria-hidden="true">#</a> 1、CategoryService接口添加方法</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">listWithTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.3.1.png" alt="image-20220426165019336" tabindex="0" loading="lazy"><figcaption>image-20220426165019336</figcaption></figure><h5 id="_2、先查询所有" tabindex="-1"><a class="header-anchor" href="#_2、先查询所有" aria-hidden="true">#</a> 2、先查询所有</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">listWithTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//baseMapper就是ServiceImpl&lt;CategoryDao, CategoryEntity&gt;中的CategoryDao</span>
    <span class="token comment">//查询所有分类</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.3.2.png" alt="image-20220426170219018" tabindex="0" loading="lazy"><figcaption>image-20220426170219018</figcaption></figure><h5 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试" aria-hidden="true">#</a> 3、测试</h5><p>http://localhost:10000/product/category/list/tree</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.3.3.png" alt="image-20220426170316381" tabindex="0" loading="lazy"><figcaption>image-20220426170316381</figcaption></figure><h5 id="_4、实体添加属性" tabindex="-1"><a class="header-anchor" href="#_4、实体添加属性" aria-hidden="true">#</a> 4、实体添加属性</h5><p>在<code>com.atguigu.gulimall.product.entity.CategoryEntity</code>类添加<code>children</code>字段</p><p><code>children</code>字段为其下一级分类（共有三级分类）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.3.4.png" alt="image-20220426172202666" tabindex="0" loading="lazy"><figcaption>image-20220426172202666</figcaption></figure><h5 id="_5、修改service层代码" tabindex="-1"><a class="header-anchor" href="#_5、修改service层代码" aria-hidden="true">#</a> 5、修改Service层代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">listWithTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//baseMapper就是ServiceImpl&lt;CategoryDao, CategoryEntity&gt;中的CategoryDao</span>
        <span class="token comment">//查询所有分类</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> topCategory <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//查出一级分类</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>categoryEntity <span class="token operator">-&gt;</span> categoryEntity<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token comment">//映射方法，改变对象结构</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                    menu<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">getAllChildren</span><span class="token punctuation">(</span>menu<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> menu<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">//根据sort字段排序</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token operator">-&gt;</span>menu<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>menu<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">//搜集</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> topCategory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 从list集合中获得当前菜单的子菜单
     * <span class="token keyword">@param</span> <span class="token parameter">root</span> 当前菜单
     * <span class="token keyword">@param</span> <span class="token parameter">list</span>  菜单集合
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAllChildren</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>categoryEntity <span class="token operator">-&gt;</span> root<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>categoryEntity<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">//</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                    <span class="token comment">//递归求解其子菜单</span>
                     menu<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">getAllChildren</span><span class="token punctuation">(</span>menu<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token keyword">return</span> menu<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">//根据sort字段排序</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token operator">-&gt;</span>menu<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>menu<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> collect<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.3.5.png" alt="image-20220426205730443" style="zoom:50%;"><h5 id="_6、查看结果" tabindex="-1"><a class="header-anchor" href="#_6、查看结果" aria-hidden="true">#</a> 6、查看结果</h5><p>可以看到数据已经按树状显示，并且按sort字段排序**😄**</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.1.3.6.png" alt="image-20220426205415943" tabindex="0" loading="lazy"><figcaption>image-20220426205415943</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.可以通过Collection 系列集合提供的stream()或parallelStream()</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2.通过Arrays中的静态方法stream() 获收数组流</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//3.通过Stream类中的静态方法of()</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream3 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4.迭代方式创建无限流</span>
<span class="token comment">//10、12、14、16、18、20、22、24、26、28 ······(从10开始，下一个是 10+2=12,下一个是12+2······)</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stream4 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//10、12、14、16、18</span>
stream4<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//5.生成方式创建无限流</span>
<span class="token comment">//没有种子，每一次生成的元素与上一次生成的元素没有关系，生成的元素为double类型</span>
<span class="token comment">// 1.2 1.2 1.2 1.2 1.2</span>
<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> stream5 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//0.3522966301192748</span>
<span class="token comment">//0.20867372930661876</span>
<span class="token comment">//0.06987341089850951</span>
<span class="token comment">//0.10069902801339281</span>
<span class="token comment">//0.3395435668418123</span>
stream5<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-2、商品服务-api-三级分类前端" tabindex="-1"><a class="header-anchor" href="#_4-1-2、商品服务-api-三级分类前端" aria-hidden="true">#</a> 4.1.2、商品服务-API-三级分类前端</h3><h4 id="_1、先启动项目" tabindex="-1"><a class="header-anchor" href="#_1、先启动项目" aria-hidden="true">#</a> 1、先启动项目</h4><h5 id="_1、启动后端" tabindex="-1"><a class="header-anchor" href="#_1、启动后端" aria-hidden="true">#</a> 1、启动后端</h5><p>启动 <code>renren-fast</code>的<code>io.renren.RenrenApplication</code>类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.1.1.png" alt="image-20220426213132389" tabindex="0" loading="lazy"><figcaption>image-20220426213132389</figcaption></figure><h5 id="_2、启动前端" tabindex="-1"><a class="header-anchor" href="#_2、启动前端" aria-hidden="true">#</a> 2、启动前端</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.1.2.png" alt="image-20220426213208523" tabindex="0" loading="lazy"><figcaption>image-20220426213208523</figcaption></figure><h4 id="_2、跨域报错" tabindex="-1"><a class="header-anchor" href="#_2、跨域报错" aria-hidden="true">#</a> 2、跨域报错😠</h4><p><code>跨域</code>：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是 浏览器对<strong>javascript</strong>施加的安全限制。</p><p><code>同源策略</code>：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域；</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.2.0.1.png" alt="image-20220721201231225" style="zoom:67%;"><p>跨域流程：</p><p>非简单请求(PUT、DELETE) 等,需要先发送预检请求</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.2.0.2.png" alt="image-20220721201441177" style="zoom:50%;"><p>参考网址： https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</p><p>解决跨域-（一）使用nginx部署为同一域</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.2.0.3.png" alt="image-20220721201658286" style="zoom:67%;"><p>解决跨域-（二）配置当次请求允许跨域</p><p><strong>添加响应头</strong></p><ul><li>Access-Control-Allow-Origin：支持哪些来源的请求跨域</li><li>Access-Control-Allow-Methods：支持哪些方法跨域</li><li>Access-Control-Allow-Credentials：跨域请求默认不包含cookie，设置为true可以包含 cookie</li><li>Access-Control-Expose-Headers：跨域请求暴露的字段 CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段： Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如 果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</li><li>Access-Control-Max-Age：表明该响应的有效时间为多少秒。在有效时间内，浏览器无 须为同一请求再次发起预检请求。请注意，浏览器自身维护了一个最大有效时间，如果 该首部字段的值超过了最大有效时间，将不会生效。</li></ul><h5 id="_1、浏览器输入网址" tabindex="-1"><a class="header-anchor" href="#_1、浏览器输入网址" aria-hidden="true">#</a> 1、浏览器输入网址</h5><p>http://localhost:8001/#/login</p><p>可以</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.2.1.png" alt="跨域报错" tabindex="0" loading="lazy"><figcaption>跨域报错</figcaption></figure><h5 id="_2、解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_2、解决跨域问题" aria-hidden="true">#</a> 2、解决跨域问题</h5><p>1、方式一:</p>`,58),r={href:"https://blog.csdn.net/qq_28325291/article/details/113931232",target:"_blank",rel:"noopener noreferrer"},d=a("p",null,"跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。",-1),k=e(`<p>把 <code>renren-fast</code>模块的<code>io.renren.config.CorsConfig</code>类的<code>addCorsMappings</code>方法注释打开</p><p>这个本来是开着的，由于我使用的是资料提供的代码，所有这里先取消注释，后来这个是要注释掉的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.2.2.png" alt="image-20220426213642581" tabindex="0" loading="lazy"><figcaption>image-20220426213642581</figcaption></figure><p>2、添加过滤器</p><blockquote><p>项目中前后端分离部署，所以需要解决跨域的问题。 我们使用cookie存放用户登录的信息，在spring拦截器进行权限控制，当权限不符合时，直接返回给用户固定的json结果。 当用户登录以后，正常使用；当用户退出登录状态时或者token过期时，由于拦截器和跨域的顺序有问题，出现了跨域的现象。 我们知道一个http请求，先走filter，到达servlet后才进行拦截器的处理，如果我们把cors放在filter里，就可以优先于权限拦截器执行。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>renren<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">CorsConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">UrlBasedCorsConfigurationSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">CorsFilter</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * springboot解决跨域问题
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig2</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.2.2.2.png" alt="image-20220426221916301" tabindex="0" loading="lazy"><figcaption>image-20220426221916301</figcaption></figure><h4 id="_3、添加一级菜单" tabindex="-1"><a class="header-anchor" href="#_3、添加一级菜单" aria-hidden="true">#</a> 3、添加一级菜单</h4><p>添加商品系统为一级菜单</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.3.png" alt="image-20220426223335101" tabindex="0" loading="lazy"><figcaption>image-20220426223335101</figcaption></figure><h4 id="_4、数据库中查看" tabindex="-1"><a class="header-anchor" href="#_4、数据库中查看" aria-hidden="true">#</a> 4、数据库中查看</h4><p>可以看到商品系统已经添加进来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.4.png" alt="image-20220426223429705" tabindex="0" loading="lazy"><figcaption>image-20220426223429705</figcaption></figure><h4 id="_5、添加二级菜单" tabindex="-1"><a class="header-anchor" href="#_5、添加二级菜单" aria-hidden="true">#</a> 5、添加二级菜单</h4><p>添加分类维护为商品系统的下一级菜单</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.5.png" alt="image-20220426224339948" tabindex="0" loading="lazy"><figcaption>image-20220426224339948</figcaption></figure><h4 id="_6、分析路由规则" tabindex="-1"><a class="header-anchor" href="#_6、分析路由规则" aria-hidden="true">#</a> 6、分析路由规则</h4><h5 id="_1、菜单url与访问url对应关系" tabindex="-1"><a class="header-anchor" href="#_1、菜单url与访问url对应关系" aria-hidden="true">#</a> 1、菜单URL与访问URL对应关系</h5><p>可以发现当菜单URL为<code>product/category</code>时，访问的url为<code>product-category</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.6.1.1.png" alt="image-20220426230159499" tabindex="0" loading="lazy"><figcaption>image-20220426230159499</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.6.1.2.png" alt="image-20220426230258838" tabindex="0" loading="lazy"><figcaption>image-20220426230258838</figcaption></figure><h5 id="_2、访问url与路径的关系" tabindex="-1"><a class="header-anchor" href="#_2、访问url与路径的关系" aria-hidden="true">#</a> 2、访问URL与路径的关系</h5><p>可以发现当访问的URL为<code>sys-role</code>时，文件路径为src/views/modules/sys/role.vue</p><p>因此分类维护<code>product-category</code>的文件路径src/views/modules/product/category.vue</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.6.2.1.png" alt="image-20220426230951488" tabindex="0" loading="lazy"><figcaption>image-20220426230951488</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.6.2.2.png" alt="image-20220426230916453" tabindex="0" loading="lazy"><figcaption>image-20220426230916453</figcaption></figure><h4 id="_7、创建目录和vue文件" tabindex="-1"><a class="header-anchor" href="#_7、创建目录和vue文件" aria-hidden="true">#</a> 7、创建目录和vue文件</h4><p>在<code>src/views/modules/</code>目录中创建<code>product</code>目录，在<code>product</code>目录下创建<code>category.vue</code>文件</p><p>在<code>category.vue</code>中输入vue然后回车，生成模板</p><p>随便在div写点东西，然后运行项目</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.7.1.png" alt="image-20220427155235060" tabindex="0" loading="lazy"><figcaption>image-20220427155235060</figcaption></figure><h4 id="_8、发现es-link注释报错-项目能运行" tabindex="-1"><a class="header-anchor" href="#_8、发现es-link注释报错-项目能运行" aria-hidden="true">#</a> 8、发现ES Link注释报错(项目能运行)</h4><p>这个ES Link我禁用了还报错😠，但是项目能运行</p><p>这个ES Link真是阴魂不散</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.8.1.png" alt="image-20220427154646562" tabindex="0" loading="lazy"><figcaption>image-20220427154646562</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.8.2.png" alt="image-20220427155049406" tabindex="0" loading="lazy"><figcaption>image-20220427155049406</figcaption></figure><h6 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一</h6><p>将<code>eslintrc.js</code>里面的<code>extends: &#39;standard&#39;,</code>注释掉就不报错了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.8.3.png" alt="image-20220427160029935" tabindex="0" loading="lazy"><figcaption>image-20220427160029935</figcaption></figure><h6 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二</h6><p>删掉<code>build\\webpack.base.conf.js</code>里面的<code>createLintingRule()</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.8.4.png" alt="image-20220427160549017" tabindex="0" loading="lazy"><figcaption>image-20220427160549017</figcaption></figure><h6 id="方法三" tabindex="-1"><a class="header-anchor" href="#方法三" aria-hidden="true">#</a> 方法三</h6><p>删掉<code>build\\webpack.base.conf.js</code>里面<code>reateLintingRule()</code>方法里面的代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.8.5.png" alt="image-20220503140831432" tabindex="0" loading="lazy"><figcaption>image-20220503140831432</figcaption></figure><h6 id="方法四" tabindex="-1"><a class="header-anchor" href="#方法四" aria-hidden="true">#</a> 方法四</h6><p>删掉<code>config\\index.js</code>里面的<code>useEslint: true,</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.8.6.png" alt="image-20220503141016797" tabindex="0" loading="lazy"><figcaption>image-20220503141016797</figcaption></figure><p>📌后来我又使用的是renren-fast-vue，放弃了资料提供的做好的代码</p><p>报了一个VS Code的错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>could not use PowerShell to find Visual Studio 2017 or newer, try re-running with &#39;--loglevel silly&#39; for more details
无法使用Power Shell查找Visual Studio 2017或更新，请尝试使用“ -loglevel Silly”重新运行，以获取更多详细信息
You need to install the latest version of Visual Studio        
find VS including the &quot;Desktop development with C++&quot; workload.
您需要安装最新版本的Visual Studio查找VS，包括“带有C ++的桌面开发”工作负载。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.8.7.png" alt="image-20220426234340229" tabindex="0" loading="lazy"><figcaption>image-20220426234340229</figcaption></figure><p>修改一下msvs_version版本就行了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm config set msvs_version 2019
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9、使用tree树形组件" tabindex="-1"><a class="header-anchor" href="#_9、使用tree树形组件" aria-hidden="true">#</a> 9、使用tree树形组件</h4>`,55),m=a("code",null,"src\\views\\modules\\product\\category.vue",-1),g={href:"https://element.eleme.io/#/zh-CN/component/tree",target:"_blank",rel:"noopener noreferrer"},v=e(`<p><a href="code/4.1.2.9.category.vue">点击查看<code>category.vue</code>完整代码</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.9.1.png" alt="image-20220429123519980" tabindex="0" loading="lazy"><figcaption>image-20220429123519980</figcaption></figure><p>封装的发送<code>ajax</code>请求方法在<code>src\\utils\\httpRequest.js</code>文件内，<code>get</code>请求可以复制<code>src\\views\\modules\\sys\\role.vue</code>里面的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.9.2.png" alt="image-20220429123839285" tabindex="0" loading="lazy"><figcaption>image-20220429123839285</figcaption></figure><h4 id="_10、运行项目" tabindex="-1"><a class="header-anchor" href="#_10、运行项目" aria-hidden="true">#</a> 10、运行项目</h4><h5 id="_1、端口访问错误" tabindex="-1"><a class="header-anchor" href="#_1、端口访问错误" aria-hidden="true">#</a> 1、端口访问错误</h5><p>发现请求的url为 http://localhost:8080/renren-fast/product/category/list/tree</p><p>而正确的url为 http://localhost:10000/product/category/list/tree</p><p>访问的是8080端口下的renren-fast，而想访问的是10000端口</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.10.1.png" alt="image-20220427203758880" tabindex="0" loading="lazy"><figcaption>image-20220427203758880</figcaption></figure><h5 id="_2、修改端口" tabindex="-1"><a class="header-anchor" href="#_2、修改端口" aria-hidden="true">#</a> 2、修改端口</h5><p><code>ctrl+shift+F</code> 全局搜索<code>localhost:8080/renren-fast</code></p><p>发现其定义在<code>static\\config\\index.js</code>里的<code>window.SITE_CONFIG[&#39;baseUrl&#39;]</code>字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.10.2.1.png" alt="image-20220427205415040" tabindex="0" loading="lazy"><figcaption>image-20220427205415040</figcaption></figure><p>由于要向多个模块发请求，所以可以指定访问网关，网关再路由到其他模块</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//localhost:88</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ps:后面又修改为 <code>http://localhost:88/api</code> 了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.10.2.2.png" alt="image-20220427205600163" tabindex="0" loading="lazy"><figcaption>image-20220427205600163</figcaption></figure><h5 id="_3、刷新页面" tabindex="-1"><a class="header-anchor" href="#_3、刷新页面" aria-hidden="true">#</a> 3、刷新页面</h5><p>刷新页面发现验证码也给网关发请求了，这是因为刚刚配置了basUrl，所有请求都发给网关</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.10.3.1.png" alt="刷新页面" tabindex="0" loading="lazy"><figcaption>刷新页面</figcaption></figure><h4 id="_11、修改网关配置" tabindex="-1"><a class="header-anchor" href="#_11、修改网关配置" aria-hidden="true">#</a> 11、修改网关配置</h4><p>先让网关都转给renren-fast模块</p><h5 id="_1、renren-fast模块注册到注册中心" tabindex="-1"><a class="header-anchor" href="#_1、renren-fast模块注册到注册中心" aria-hidden="true">#</a> 1、renren-fast模块注册到注册中心</h5><p>1、依赖<code>gulimall-common</code>模块</p><p><code>gulimall-common</code>模块配置的有nacos，依赖<code>gulimall-common</code>模块后，点击刷新</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.1.png" alt="image-20220427210524719" tabindex="0" loading="lazy"><figcaption>image-20220427210524719</figcaption></figure><p>由于<code>gulimall-common</code>模块依赖了配置中心，&quot;renren-fast&quot;模块暂时没配，所以可以先排除掉配置中心</p><p>这样的话运行可以不报错(不排除也能运行，不过会报错)</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、修改配置文件" tabindex="-1"><a class="header-anchor" href="#_2、修改配置文件" aria-hidden="true">#</a> 2、修改配置文件</h5><p>配置应用名和注册中心地址</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>  
    <span class="token key atrule">application</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> renren<span class="token punctuation">-</span>fast
    <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
      <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
        <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
          <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.2.png" alt="image-20220427210950685" tabindex="0" loading="lazy"><figcaption>image-20220427210950685</figcaption></figure><h5 id="_3、启动类添加服务发现注解" tabindex="-1"><a class="header-anchor" href="#_3、启动类添加服务发现注解" aria-hidden="true">#</a> 3、启动类添加服务发现注解</h5><h6 id="_1、添加注解" tabindex="-1"><a class="header-anchor" href="#_1、添加注解" aria-hidden="true">#</a> 1、添加注解</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableDiscoveryClient</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.3.1.png" alt="image-20220427211241374" tabindex="0" loading="lazy"><figcaption>image-20220427211241374</figcaption></figure><h6 id="_2、提示gson不存在" tabindex="-1"><a class="header-anchor" href="#_2、提示gson不存在" aria-hidden="true">#</a> 2、提示Gson不存在</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.3.2.png" alt="image-20220427211712823" tabindex="0" loading="lazy"><figcaption>image-20220427211712823</figcaption></figure><h6 id="_3、添加gson依赖" tabindex="-1"><a class="header-anchor" href="#_3、添加gson依赖" aria-hidden="true">#</a> 3、添加gson依赖</h6><p>添加gson依赖后，重启模块</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.3.3.png" alt="image-20220427211829461" tabindex="0" loading="lazy"><figcaption>image-20220427211829461</figcaption></figure><h6 id="_4、配置中心报错" tabindex="-1"><a class="header-anchor" href="#_4、配置中心报错" aria-hidden="true">#</a> 4、配置中心报错</h6><p>由于在<code>gulimall-common</code>配置了配置中心，而项目没有配置配置中心地址和端口</p><p>因此项目启动时，会报配置中心相关的错误，这里先不用管</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.3.4.png" alt="image-20220428160014549" tabindex="0" loading="lazy"><figcaption>image-20220428160014549</figcaption></figure><h5 id="_4、查看注册中心" tabindex="-1"><a class="header-anchor" href="#_4、查看注册中心" aria-hidden="true">#</a> 4、查看注册中心</h5><p>启动nacos，在浏览器输入: http://localhost:8848/nacos/</p><p>用户名和密码都为nacos</p><p>可以发现已经注册到nacos上了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.4.png" alt="image-20220427212615394" tabindex="0" loading="lazy"><figcaption>image-20220427212615394</figcaption></figure><h5 id="_5、修改网关配置" tabindex="-1"><a class="header-anchor" href="#_5、修改网关配置" aria-hidden="true">#</a> 5、修改网关配置</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> admin_route
  <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//renren<span class="token punctuation">-</span>fast   <span class="token comment">#loadbalanced 负载均衡</span>
  <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> Path=/api/<span class="token important">**</span>		  <span class="token comment">#Path请求路径，请求路径前面加一个/api，**表示任意请求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.5.1.png" alt="image-20220427213105152" tabindex="0" loading="lazy"><figcaption>image-20220427213105152</figcaption></figure><p>前端的index.js的baseUrl也由</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">window.SITE_CONFIG[&#39;baseUrl&#39;]</span> <span class="token punctuation">=</span> <span class="token value attr-value">&#39;http://localhost:88&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改为</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">window.SITE_CONFIG[&#39;baseUrl&#39;]</span> <span class="token punctuation">=</span> <span class="token value attr-value">&#39;http://localhost:88/api&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参考文档:https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#the-cookie-route-predicate-factory</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.5.2.png" alt="image-20220427214715052" tabindex="0" loading="lazy"><figcaption>image-20220427214715052</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.5.3.png" alt="image-20220427215853495" tabindex="0" loading="lazy"><figcaption>image-20220427215853495</figcaption></figure><h5 id="_6、重启项目" tabindex="-1"><a class="header-anchor" href="#_6、重启项目" aria-hidden="true">#</a> 6、重启项目</h5><p>重启项目发现还是访问不了</p><p>访问不了的原因是</p><p>前端访问了 http://localhost:88/api/captcha.jpg</p><p>通过网关，断言匹配到了 /api/**</p><p>所以网关路由到了renren-fast模块,即找到了 http://localhost:8080</p><p>然后将<code> http://localhost:8080</code>与<code> /api/captcha.jpg</code>组成了 http://localhost:8080/api/captcha.jpg</p><p>而正确的路径为 http://localhost:8080/renren-fast/captcha.jpg</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.6.png" alt="image-20220427215308179" tabindex="0" loading="lazy"><figcaption>image-20220427215308179</figcaption></figure><h5 id="_7、路径重写" tabindex="-1"><a class="header-anchor" href="#_7、路径重写" aria-hidden="true">#</a> 7、路径重写</h5><p>将将请求由 http://localhost:88/api/captcha.jpg 变为 http://localhost:8080/renren-fast/captcha.jpg</p><p>然后重启项目</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">filters</span><span class="token punctuation">:</span>
  <span class="token comment">#路径重写,将请求由 http://localhost:88/api/captcha.jpg 变为 http://localhost:8080/renren-fast/captcha.jpg</span>
  <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">&gt;</span>/<span class="token punctuation">?</span>.<span class="token important">*)</span><span class="token punctuation">,</span>/renren<span class="token punctuation">-</span>fast/$\\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.7.1.png" alt="image-20220428162416500" tabindex="0" loading="lazy"><figcaption>image-20220428162416500</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.11.7.2.png" alt="image-20220427220727452" tabindex="0" loading="lazy"><figcaption>image-20220427220727452</figcaption></figure><h4 id="_12、验证码已经显示出来了" tabindex="-1"><a class="header-anchor" href="#_12、验证码已经显示出来了" aria-hidden="true">#</a> 12、验证码已经显示出来了</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.12.png" alt="image-20220427221353624" tabindex="0" loading="lazy"><figcaption>image-20220427221353624</figcaption></figure><h4 id="_13、跨域请求" tabindex="-1"><a class="header-anchor" href="#_13、跨域请求" aria-hidden="true">#</a> 13、跨域请求</h4><p>点击登录发现没反应，看一下控制台显示跨域请求</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Access to XMLHttpRequest at &#39;http://localhost:88/api/sys/login&#39; from origin &#39;http://localhost:8001&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.13.1.png" alt="image-20220427224950491" tabindex="0" loading="lazy"><figcaption>image-20220427224950491</figcaption></figure><p>查看Network可以看到有<code>CORS error</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.13.2.png" alt="image-20220427225621837" tabindex="0" loading="lazy"><figcaption>image-20220427225621837</figcaption></figure><p>点击第二个login，发现请求方式为<code>OPTION</code>，表示这个请求为<code>域检请求</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.13.3.png" alt="image-20220427225801035" tabindex="0" loading="lazy"><figcaption>image-20220427225801035</figcaption></figure><h4 id="_14、后端配置允许跨域请求" tabindex="-1"><a class="header-anchor" href="#_14、后端配置允许跨域请求" aria-hidden="true">#</a> 14、后端配置允许跨域请求</h4><p>由于前端指定访问网关，网关再路由到其他模块，所有可以再网关模块配置跨域请求，这样别的模块就不用配置跨域请求了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">CorsConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span></span><span class="token class-name">CorsWebFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span></span><span class="token class-name">UrlBasedCorsConfigurationSource</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/4/27
 * @Description: 跨域请求过滤器
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallCorsConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CorsWebFilter</span> <span class="token function">corsWebFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加允许的请求头</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加允许的请求方式</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加允许的请求来源</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//是否允许携带cookie进行跨域</span>
        <span class="token comment">//设为false会丢失cookie信息</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//CorsWebFilter需要传入CorsConfigurationSource接口类型的参数</span>
        <span class="token comment">//UrlBasedCorsConfigurationSource是CorsConfigurationSource接口的实现类</span>
        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// &quot;/**&quot;表示任意路径</span>
        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span>corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsWebFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.14.png" alt="image-20220427230019471" tabindex="0" loading="lazy"><figcaption>image-20220427230019471</figcaption></figure><h4 id="_15、刷新前端页面" tabindex="-1"><a class="header-anchor" href="#_15、刷新前端页面" aria-hidden="true">#</a> 15、刷新前端页面</h4><p>重启<code>gulimall-gateway</code>模块，刷新前端页面</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>The &#39;Access-Control-Allow-Origin&#39; header contains multiple values &#39;http://localhost:8001, http://localhost:8001&#39;, but only one is allowed.
&#39;Access-Control-Allow-Origin&#39;头包含多个值，但只有一个被允许
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.15.1.png" alt="image-20220427231312786" tabindex="0" loading="lazy"><figcaption>image-20220427231312786</figcaption></figure><p>NetWork也可以看到包含了两个</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.15.2.png" alt="image-20220427231548647" tabindex="0" loading="lazy"><figcaption>image-20220427231548647</figcaption></figure><h4 id="_16、取消renren-fast项目的跨域配置" tabindex="-1"><a class="header-anchor" href="#_16、取消renren-fast项目的跨域配置" aria-hidden="true">#</a> 16、取消renren-fast项目的跨域配置</h4><p>包含两个值的原因是gulimall-gateway配置了跨域</p><p>而renren-fast项目默认也配置了跨域</p><p>因此取消的renren-fast项目的跨域配置就行了</p><p>注释到这里</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.16.png" alt="image-20220427232200865" tabindex="0" loading="lazy"><figcaption>image-20220427232200865</figcaption></figure><h4 id="_17、重新刷新前端页面" tabindex="-1"><a class="header-anchor" href="#_17、重新刷新前端页面" aria-hidden="true">#</a> 17、重新刷新前端页面</h4><p>重启renren-fast项目后,重新刷新前端页面,点击登录后，发现已经登录成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.2.17.png" alt="image-20220427232353711" tabindex="0" loading="lazy"><figcaption>image-20220427232353711</figcaption></figure><h3 id="_4-1-3、显示商品服务下的分类维护" tabindex="-1"><a class="header-anchor" href="#_4-1-3、显示商品服务下的分类维护" aria-hidden="true">#</a> 4.1.3、显示商品服务下的分类维护</h3><h4 id="_1、分类维护页面" tabindex="-1"><a class="header-anchor" href="#_1、分类维护页面" aria-hidden="true">#</a> 1、分类维护页面</h4><p>点击<code>商品系统</code>下的<code>分类维护</code>，发现没有数据，打开控制台，发现给网关发送了请求，但请求失败</p><p>请求路径为: http://localhost:88/api/product/category/list/tree</p><p>正确的请求为: http://localhost:10000/product/category/list/tree</p><p>网关由于没有配置<code>gulimall-product</code>，因此默认路由到了<code>renren-fast</code></p><p>即: http://localhost:8080/renren-fast/category/list/tree</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.1.png" alt="image-20220428160942870" tabindex="0" loading="lazy"><figcaption>image-20220428160942870</figcaption></figure><h4 id="_2、网关添加配置" tabindex="-1"><a class="header-anchor" href="#_2、网关添加配置" aria-hidden="true">#</a> 2、网关添加配置</h4><p>在网关的配置文件中添加路由到<code>gulumall-product</code>模块的配置</p><p>(<code>product_route</code>的<code>filters</code>写错了，少写了个<code>s</code>😨)</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> product_route
  <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimall<span class="token punctuation">-</span>product
  <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> Path=/api/product/<span class="token important">**</span>
  <span class="token key atrule">filter</span><span class="token punctuation">:</span>  <span class="token comment">#这里应该为\`filters\`，少写了一个\`s\`</span>
    <span class="token comment">#http://localhost:88/api/product/category/list/tree 变为http://localhost:10000/product/category/list/tree</span>
    <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">&gt;</span>/<span class="token punctuation">?</span>.<span class="token important">*)</span><span class="token punctuation">,</span>/$\\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.2.png" alt="image-20220428163318103" tabindex="0" loading="lazy"><figcaption>image-20220428163318103</figcaption></figure><h4 id="_3、新建product命名空间" tabindex="-1"><a class="header-anchor" href="#_3、新建product命名空间" aria-hidden="true">#</a> 3、新建product命名空间</h4><h5 id="_1、新建product命名空间-作为gilimall-product项目在配置中心的命名空间" tabindex="-1"><a class="header-anchor" href="#_1、新建product命名空间-作为gilimall-product项目在配置中心的命名空间" aria-hidden="true">#</a> 1、新建product命名空间，作为<code>gilimall-product</code>项目在配置中心的命名空间</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.3.1.png" alt="image-20220428164008683" tabindex="0" loading="lazy"><figcaption>image-20220428164008683</figcaption></figure><h5 id="_2、复制product的命名空间id" tabindex="-1"><a class="header-anchor" href="#_2、复制product的命名空间id" aria-hidden="true">#</a> 2、复制product的命名空间ID</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.3.2.png" alt="image-20220428164334571" tabindex="0" loading="lazy"><figcaption>image-20220428164334571</figcaption></figure><h4 id="_4、配置配置中心" tabindex="-1"><a class="header-anchor" href="#_4、配置配置中心" aria-hidden="true">#</a> 4、配置配置中心</h4><p>在<code>gulimall-product</code>模块的resource目录下新建<code>bootstrap.properties</code>文件，并配置 应用名、配置中心地址、命名空间等</p><p><code>namespace</code>写刚刚复制的product的命名空间ID</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">gulimall-product</span>

<span class="token key attr-name">spring.cloud.nacos.config.server-addr</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:8848</span>
<span class="token key attr-name">spring.cloud.nacos.config.namespace</span><span class="token punctuation">=</span><span class="token value attr-value">d6d03bd1-5815-4fa1-8caf-93b09462fd45</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.4.png" alt="image-20220428165002877" tabindex="0" loading="lazy"><figcaption>image-20220428165002877</figcaption></figure><h4 id="_5、配置注册中心" tabindex="-1"><a class="header-anchor" href="#_5、配置注册中心" aria-hidden="true">#</a> 5、配置注册中心</h4><p>在<code>gulimall-product</code>模块的<code>application.yml</code>配置文件中配置注册中心地址</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.5.png" alt="image-20220428165402783" tabindex="0" loading="lazy"><figcaption>image-20220428165402783</figcaption></figure><h4 id="_6、开启服务发现" tabindex="-1"><a class="header-anchor" href="#_6、开启服务发现" aria-hidden="true">#</a> 6、开启服务发现</h4><p><code>gulimall-product</code>模块添加<code>@EnableDiscoveryClient</code>注解，来开启服务发现</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.6.png" alt="image-20220428165643767" tabindex="0" loading="lazy"><figcaption>image-20220428165643767</figcaption></figure><h4 id="_7、查看是否添加到注册中心" tabindex="-1"><a class="header-anchor" href="#_7、查看是否添加到注册中心" aria-hidden="true">#</a> 7、查看是否添加到注册中心</h4><p>重新启动<code>gulimall-product</code>项目,可以看到<code>gulimall-product</code>已经添加到注册中心上了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.7.png" alt="image-20220428170006762" tabindex="0" loading="lazy"><figcaption>image-20220428170006762</figcaption></figure><h4 id="_8、查看前端页面" tabindex="-1"><a class="header-anchor" href="#_8、查看前端页面" aria-hidden="true">#</a> 8、查看前端页面</h4><h5 id="_1、第二个tree的请求出错" tabindex="-1"><a class="header-anchor" href="#_1、第二个tree的请求出错" aria-hidden="true">#</a> 1、第二个tree的请求出错</h5><p>发现第二个tree的请求出错（第一个<code>OPTIONS</code>请求方式的<code>域检请求</code>请求成功）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.8.1.png" alt="image-20220428170834876" tabindex="0" loading="lazy"><figcaption>image-20220428170834876</figcaption></figure><h5 id="_2、令牌无效" tabindex="-1"><a class="header-anchor" href="#_2、令牌无效" aria-hidden="true">#</a> 2、令牌无效</h5><p>http://localhost:88/api/product/category/list/tree</p><p>直接访问会出现<code>invalid token</code>：令牌无效，非法的令牌</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.8.2.png" alt="image-20220428171048454" tabindex="0" loading="lazy"><figcaption>image-20220428171048454</figcaption></figure><h5 id="_3、直接访问正常" tabindex="-1"><a class="header-anchor" href="#_3、直接访问正常" aria-hidden="true">#</a> 3、直接访问正常</h5><p>http://localhost:10000/product/category/list/tree</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.8.3.png" alt="image-20220428173622969" tabindex="0" loading="lazy"><figcaption>image-20220428173622969</figcaption></figure><h5 id="_4、查看匹配的路由" tabindex="-1"><a class="header-anchor" href="#_4、查看匹配的路由" aria-hidden="true">#</a> 4、查看匹配的路由</h5><p>在<code>gulimall-gateway</code>模块的<code>application.yml</code>配置文件中修改日志级别</p><p>root表示所有包</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>logging<span class="token operator">:</span>
  level<span class="token operator">:</span>
    root<span class="token operator">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新运行项目</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.8.4.png" alt="image-20220428180356028" tabindex="0" loading="lazy"><figcaption>image-20220428180356028</figcaption></figure><h4 id="_9、调整路由顺序" tabindex="-1"><a class="header-anchor" href="#_9、调整路由顺序" aria-hidden="true">#</a> 9、调整路由顺序</h4><p>令牌无效的原因是<code>product_route</code>没有生效，先被<code>admin_route</code>拦截了</p><p>调整一下<code>product_route</code>和<code>admin_route</code>的路由顺序</p><p>(<code>product_route</code>的<code>filters</code>写错了，少写了个<code>s</code>😨)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.9.png" alt="image-20220428171421729" tabindex="0" loading="lazy"><figcaption>image-20220428171421729</figcaption></figure><h4 id="_10、发现错误" tabindex="-1"><a class="header-anchor" href="#_10、发现错误" aria-hidden="true">#</a> 10、发现错误</h4><h5 id="_1、请求报错" tabindex="-1"><a class="header-anchor" href="#_1、请求报错" aria-hidden="true">#</a> 1、请求报错</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.10.1.png" alt="image-20220428173247272" tabindex="0" loading="lazy"><figcaption>image-20220428173247272</figcaption></figure><h5 id="_2、直接访问正常" tabindex="-1"><a class="header-anchor" href="#_2、直接访问正常" aria-hidden="true">#</a> 2、直接访问正常</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.10.2.png" alt="image-20220428173746039" tabindex="0" loading="lazy"><figcaption>image-20220428173746039</figcaption></figure><h5 id="_3、修改日志级别" tabindex="-1"><a class="header-anchor" href="#_3、修改日志级别" aria-hidden="true">#</a> 3、修改日志级别</h5><p>在<code>gulimall-gateway</code>模块的<code>application.yml</code>配置文件中修改日志级别</p><p>root表示所有包</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">root</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.10.3.png" alt="image-20220428173856379" tabindex="0" loading="lazy"><figcaption>image-20220428173856379</figcaption></figure><h5 id="_4、查看错误" tabindex="-1"><a class="header-anchor" href="#_4、查看错误" aria-hidden="true">#</a> 4、查看错误</h5><p>的确匹配到了<code>product_route</code>但是请求路径变成了 http://192.168.19.1:10000/api/product/category/list/tree</p><p>而正确的路径应该为: http://192.168.19.1:10000/product/category/list/tree</p><p>没有这个<code>/api</code>，应该是路径重写没有生效</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.10.4.1.png" alt="image-20220428173111604" tabindex="0" loading="lazy"><figcaption>image-20220428173111604</figcaption></figure><p>这里的ip为<code>192.168.19.1</code>是因为它用的是VMnet8的ip</p><p><code>cmd</code>输入<code>ipconfig</code>命令可以查看所有ip</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ipconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.10.4.2.png" alt="image-20220428182149959" tabindex="0" loading="lazy"><figcaption>image-20220428182149959</figcaption></figure><h5 id="_5、少写了个s" tabindex="-1"><a class="header-anchor" href="#_5、少写了个s" aria-hidden="true">#</a> 5、少写了个s😨</h5><p><code>filters</code>写成了<code>filter</code>,少写了个s😨</p><p>改过来就行了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.10.5.png" alt="image-20220428182642830" tabindex="0" loading="lazy"><figcaption>image-20220428182642830</figcaption></figure><h4 id="_11、刷新页面" tabindex="-1"><a class="header-anchor" href="#_11、刷新页面" aria-hidden="true">#</a> 11、刷新页面</h4><p>已经不报错，并且数据也获取到了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.11.1.png" alt="image-20220428182729802" tabindex="0" loading="lazy"><figcaption>image-20220428182729802</figcaption></figure><p>控制台也输出数据了，数据在<code>data.data</code>中</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.11.2.png" alt="image-20220428183017017" tabindex="0" loading="lazy"><figcaption>image-20220428183017017</figcaption></figure><h4 id="_12、获得数据" tabindex="-1"><a class="header-anchor" href="#_12、获得数据" aria-hidden="true">#</a> 12、获得数据</h4><p>使用<code>console.log(data)</code>返回的数据在<code>data.data</code>中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>console.log(data)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.12.1.png" alt="image-20220428184002713" tabindex="0" loading="lazy"><figcaption>image-20220428184002713</figcaption></figure><p>因此使用<code>console.log(data.data.data)</code>即为数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.12.2.png" alt="image-20220428184312865" tabindex="0" loading="lazy"><figcaption>image-20220428184312865</figcaption></figure><p>这样写可以少写一个<code>.data</code>，由<code>console.log(data.data.data)</code>改为<code>console.log(data.data)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.12.3.png" alt="image-20220428184442887" tabindex="0" loading="lazy"><figcaption>image-20220428184442887</figcaption></figure><p>把数据赋给<code>data</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.12.4.png" alt="image-20220428185149029" tabindex="0" loading="lazy"><figcaption>image-20220428185149029</figcaption></figure><h4 id="_13、结构出来了" tabindex="-1"><a class="header-anchor" href="#_13、结构出来了" aria-hidden="true">#</a> 13、结构出来了</h4><p>结构出来了但是没有数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.13.png" alt="image-20220428184923869" tabindex="0" loading="lazy"><figcaption>image-20220428184923869</figcaption></figure><h4 id="_14、修改属性名字段" tabindex="-1"><a class="header-anchor" href="#_14、修改属性名字段" aria-hidden="true">#</a> 14、修改属性名字段</h4><p>默认的属性名为<code>label</code>，要改为<code>name</code></p><p><code>data</code>也改为<code>menu</code>，共3处</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.14.png" alt="image-20220428185623465" tabindex="0" loading="lazy"><figcaption>image-20220428185623465</figcaption></figure><h4 id="_15、显示树形结构" tabindex="-1"><a class="header-anchor" href="#_15、显示树形结构" aria-hidden="true">#</a> 15、显示树形结构</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.15.png" alt="image-20220428185858698" tabindex="0" loading="lazy"><figcaption>image-20220428185858698</figcaption></figure><h4 id="_16、显示添加和删除" tabindex="-1"><a class="header-anchor" href="#_16、显示添加和删除" aria-hidden="true">#</a> 16、显示添加和删除</h4><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>展示数据</td><td>array</td><td></td></tr><tr><td>node-key</td><td>每个树节点用来作为唯一标识的属性，整棵树应该是唯一的</td><td>String</td><td></td></tr><tr><td>props</td><td>配置选项</td><td>object</td><td></td></tr><tr><td>expand-on-click-node</td><td>是否在点击节点的时候展开或者收缩节点， 默认值为 true，如果为 false，则只有点箭头图标的时候才会展开或者收缩节点。</td><td>boolean</td><td>true</td></tr><tr><td>show-checkbox</td><td>节点是否可被选择</td><td>boolean</td><td>false</td></tr></tbody></table><p>以下代码均在<code>category.vue</code>文件中修改</p><h5 id="_1、显示append和delete" tabindex="-1"><a class="header-anchor" href="#_1、显示append和delete" aria-hidden="true">#</a> 1、显示<code>append</code>和<code>delete</code></h5><p>在<code>el-tree</code>标签内添加 <code>Append</code>和<code>Delete</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>custom-tree-node<span class="token punctuation">&quot;</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ node, data }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ node.label }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mini<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>() =&gt; append(data)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      Append
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mini<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>() =&gt; remove(node, data)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      Delete
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、添加append和remove方法" tabindex="-1"><a class="header-anchor" href="#_2、添加append和remove方法" aria-hidden="true">#</a> 2、添加<code>append</code>和<code>remove</code>方法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;append方法中的data参数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;remove方法中的node参数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;remove方法中的data参数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、修改添加和删除按钮显示规则" tabindex="-1"><a class="header-anchor" href="#_3、修改添加和删除按钮显示规则" aria-hidden="true">#</a> 3、修改添加和删除按钮显示规则</h5><p>当不是叶子节点时才显示<code>Append</code></p><p>在内容为<code>Append</code>对应的<code>el-button</code>标签内添加属性<code>v-if=&quot;data.catLevel&lt;=2&quot;</code>,使当前节点深度少于2时才显示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>v-if=&quot;data.catLevel&lt;=2&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当没有子节点时才显示<code>Delete</code></p><p>在内容为<code>Delete</code>对应的<code>el-button</code>标签内添加属性<code>v-if=&quot;data.children.length==0&quot;</code>,使当前节点没有子节点时才显示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>v-if=&quot;data.children.length==0&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4、el-tree标签内添加属性" tabindex="-1"><a class="header-anchor" href="#_4、el-tree标签内添加属性" aria-hidden="true">#</a> 4、<code>el-tree</code>标签内添加属性</h5><p><code>:expand-on-click-node=&quot;false&quot;</code>使用户只有点击箭头图标的时候才会展开或者收缩节点。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token punctuation">:</span>expand-on-click-node<span class="token punctuation">=</span>&quot;false&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5、显示复选框" tabindex="-1"><a class="header-anchor" href="#_5、显示复选框" aria-hidden="true">#</a> 5、显示复选框</h5><p><code>el-tree</code>标签内添加<code>show-checkbox</code>属性</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>show-checkbox
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6、添加节点标识" tabindex="-1"><a class="header-anchor" href="#_6、添加节点标识" aria-hidden="true">#</a> 6、添加节点标识</h5><p>由于<code>catId</code>为唯一id，不会重复，所以把<code>catId</code>作为节点标识</p><p><s>给<code>el-tree</code>标签添加属性<code>node-key=&quot;data.catId&quot;</code></s>,把<code>catId</code>作为节点标识，加快渲染效率</p><p>应该为<code>node-key=&quot;catId&quot;</code>，后面发现写错了,可以看到点击“摄影摄像”，下方直接打印的&quot;catId&quot;即为想要设置的值，并不在data下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.3.16.6.png" alt="image-20220429205157370" tabindex="0" loading="lazy"><figcaption>image-20220429205157370</figcaption></figure><h4 id="_17、完整代码" tabindex="-1"><a class="header-anchor" href="#_17、完整代码" aria-hidden="true">#</a> 17、完整代码</h4><p><a href="code/4.1.3.17.vue">点击查看完整代码</a></p><h3 id="_4-1-4、分类维护实现添加和删除功能" tabindex="-1"><a class="header-anchor" href="#_4-1-4、分类维护实现添加和删除功能" aria-hidden="true">#</a> 4.1.4、分类维护实现添加和删除功能</h3><h4 id="_1、添加测试数据" tabindex="-1"><a class="header-anchor" href="#_1、添加测试数据" aria-hidden="true">#</a> 1、添加测试数据</h4><p>Duplicate entry &#39;1432&#39; for key &#39;Primary &#39;: 主键重复</p><p>Duplicate: 重复，复制</p><p>我都没用，它说我主键重复😨</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.1.1.png" alt="image-20220429090628243" tabindex="0" loading="lazy"><figcaption>image-20220429090628243</figcaption></figure><p>不写<code>cat_id</code>直接添加数据，发现<code>cat_id</code>已经到1433了，<s>应该是导入的sql语句已经用过1432了</s></p><p>（这里是<code>navicat</code>没显示完,1432已经被使用了，死坑😈）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.1.2.png" alt="image-20220429091322757" tabindex="0" loading="lazy"><figcaption>image-20220429091322757</figcaption></figure><p>汉字乱码是因为<code>cmd</code>编码为<code>gbk</code>，而mysql设置的编码为<code>utf-8</code>，这里不用管它</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.1.3.png" alt="image-20220429110456709" tabindex="0" loading="lazy"><figcaption>image-20220429110456709</figcaption></figure><h4 id="_2、测试删除方法" tabindex="-1"><a class="header-anchor" href="#_2、测试删除方法" aria-hidden="true">#</a> 2、测试删除方法</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.2.1.png" alt="image-20220429092432729" tabindex="0" loading="lazy"><figcaption>image-20220429092432729</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST http://localhost:10000/product/category/delete
Content-Type: application/json

[1433]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.2.2.png" alt="image-20220429091751970" tabindex="0" loading="lazy"><figcaption>image-20220429091751970</figcaption></figure><p>可以看到已经成功了(&quot;msg&quot;为&quot;success&quot;)</p><p>刷新一下表，已经没有测试数据了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.2.3.png" alt="image-20220429092613049" tabindex="0" loading="lazy"><figcaption>image-20220429092613049</figcaption></figure><h4 id="_3、删除功能controller" tabindex="-1"><a class="header-anchor" href="#_3、删除功能controller" aria-hidden="true">#</a> 3、删除功能Controller</h4><p><code>categoryService.removeByIds(Arrays.asList(catIds));</code>这一行应该删掉，这里写错了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 删除
 * @RequestBody ;获取请求体，必须发送POST请求
 * SpringMVC自动将请求体的数据(json) ，转为对应的对象
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/delete&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> catIds<span class="token punctuation">)</span><span class="token punctuation">{</span>
    categoryService<span class="token punctuation">.</span><span class="token function">removeByIds</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>catIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这一行应该删掉</span>

    <span class="token comment">//检查当前删除的菜单是否被别的地方引用</span>
    <span class="token comment">//categoryService.removeByIds(Arrays.asList(catIds));</span>

    <span class="token comment">//批量删除</span>
    categoryService<span class="token punctuation">.</span><span class="token function">removeMenuByIds</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>catIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.3.png" alt="image-20220429100222561" tabindex="0" loading="lazy"><figcaption>image-20220429100222561</figcaption></figure><h4 id="_4、删除功能service接口" tabindex="-1"><a class="header-anchor" href="#_4、删除功能service接口" aria-hidden="true">#</a> 4、删除功能Service接口</h4><p>在Controller的调用该方法的地方使用<code>alt+enter</code>快捷键可以快速转到<code>CategoryService</code>接口，并生成该方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.4.png" alt="image-20220429093531976" tabindex="0" loading="lazy"><figcaption>image-20220429093531976</figcaption></figure><h4 id="_5、实现批量删除方法" tabindex="-1"><a class="header-anchor" href="#_5、实现批量删除方法" aria-hidden="true">#</a> 5、实现批量删除方法</h4><p>在接口类的左侧点击下箭头可以迅速跳转到实现类,使用<code>alt+enter</code>快捷将添加未实现的方法</p><p>先需要检查，由于不知道什么业务会引用菜单，因此先加个<code>//TODO</code>做个标记(由于生成的时候里面有很多<code>//TODO</code>所以待办事项看起来有很多)</p><p>(当然也可以使用<code>IDEA</code>中的<code>Favorites</code>,这个感觉很好用)</p><p>然后再使用逻辑删除来批量删除数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeMenuByIds</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> asList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//TODO 检查当前删除的菜单是否被别的地方引用</span>

    <span class="token comment">//逻辑删除(show_status作为标志位，置为0表示删除)</span>
    baseMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>asList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.5.png" alt="image-20220429095942397" tabindex="0" loading="lazy"><figcaption>image-20220429095942397</figcaption></figure><h4 id="_6、配置逻辑删除" tabindex="-1"><a class="header-anchor" href="#_6、配置逻辑删除" aria-hidden="true">#</a> 6、配置逻辑删除</h4><h5 id="_1、添加配置" tabindex="-1"><a class="header-anchor" href="#_1、添加配置" aria-hidden="true">#</a> 1、添加配置</h5><blockquote><p>配置<code>com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig</code></p></blockquote><p>(这个配置正好和需求是反的)</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> flag <span class="token comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span>
      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 逻辑已删除值(默认为 1)</span>
      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 逻辑未删除值(默认为 0)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.6.1.png" alt="image-20220429101346965" tabindex="0" loading="lazy"><figcaption>image-20220429101346965</figcaption></figure><h5 id="_2、添加注解" tabindex="-1"><a class="header-anchor" href="#_2、添加注解" aria-hidden="true">#</a> 2、添加注解</h5><blockquote><p>在<code>com.atguigu.gulimall.product.entity.CategoryEntity</code>类的<code>showStatus</code>字段添加注解</p><ul><li><code>value</code>逻辑未删除除的值</li><li><code>delval</code> 逻辑被删除的值</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@TableLogic</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>delval <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.6.2.png" alt="image-20220429101838137" tabindex="0" loading="lazy"><figcaption>image-20220429101838137</figcaption></figure><h5 id="_3、调整日志级别" tabindex="-1"><a class="header-anchor" href="#_3、调整日志级别" aria-hidden="true">#</a> 3、调整日志级别</h5><p>在<code>gulimall-product\\src\\main\\resources\\application.yml</code>里面添加配置,调成<code>debug</code>级别</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.atguigu.gulimall</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图的gulimall写错了,后来没打印sql语句才发现的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.6.3.png" alt="image-20220429102750359" tabindex="0" loading="lazy"><figcaption>image-20220429102750359</figcaption></figure><h4 id="_7、测试" tabindex="-1"><a class="header-anchor" href="#_7、测试" aria-hidden="true">#</a> 7、测试</h4><h5 id="_1、添加测试数据-1" tabindex="-1"><a class="header-anchor" href="#_1、添加测试数据-1" aria-hidden="true">#</a> 1、添加测试数据</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.1.png" alt="image-20220429102907478" tabindex="0" loading="lazy"><figcaption>image-20220429102907478</figcaption></figure><h5 id="_2、删除cat-id为1434的数据" tabindex="-1"><a class="header-anchor" href="#_2、删除cat-id为1434的数据" aria-hidden="true">#</a> 2、删除cat_id为1434的数据</h5><p>重新运行项目，点击运行按钮，发送删除的请求</p><p>可以看到已经删除成功了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST http://localhost:10000/product/category/delete
Content-Type: application/json

[1434]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.2.png" alt="image-20220429103123471" tabindex="0" loading="lazy"><figcaption>image-20220429103123471</figcaption></figure><h5 id="_3、检查是否逻辑删除" tabindex="-1"><a class="header-anchor" href="#_3、检查是否逻辑删除" aria-hidden="true">#</a> 3、检查是否逻辑删除</h5><h6 id="_1、刷新后-发现直接删除了" tabindex="-1"><a class="header-anchor" href="#_1、刷新后-发现直接删除了" aria-hidden="true">#</a> 1、刷新后，发现直接删除了</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.3.1.png" alt="image-20220429103338298" tabindex="0" loading="lazy"><figcaption>image-20220429103338298</figcaption></figure><h6 id="_2、删除方法" tabindex="-1"><a class="header-anchor" href="#_2、删除方法" aria-hidden="true">#</a> 2、删除方法</h6><p>删除<code>CategoryController</code>类的这一行</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.3.2.png" alt="image-20220429103415229" tabindex="0" loading="lazy"><figcaption>image-20220429103415229</figcaption></figure><h6 id="_3、重新测试" tabindex="-1"><a class="header-anchor" href="#_3、重新测试" aria-hidden="true">#</a> 3、重新测试</h6><p>重启项目,重新测试发现没有打印sql语句，这个日志配置写错了一个字母😨</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.atguigu.gulimall</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.3.3.png" alt="image-20220429104837069" tabindex="0" loading="lazy"><figcaption>image-20220429104837069</figcaption></figure><h6 id="_4、发现还是直接删除了" tabindex="-1"><a class="header-anchor" href="#_4、发现还是直接删除了" aria-hidden="true">#</a> 4、<s>发现还是直接删除了</s></h6><p>需要点击右下角的下一页，显示后面的数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.3.4.png" alt="image-20220429105019814" tabindex="0" loading="lazy"><figcaption>image-20220429105019814</figcaption></figure><h6 id="_5、打印的sql语句显示的是逻辑删除" tabindex="-1"><a class="header-anchor" href="#_5、打印的sql语句显示的是逻辑删除" aria-hidden="true">#</a> 5、打印的sql语句显示的是逻辑删除</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.3.5.png" alt="image-20220429105123536" tabindex="0" loading="lazy"><figcaption>image-20220429105123536</figcaption></figure><h6 id="_6、使用cmd连接mysql" tabindex="-1"><a class="header-anchor" href="#_6、使用cmd连接mysql" aria-hidden="true">#</a> 6、使用<code>cmd</code>连接mysql</h6><p>可以看到其实是逻辑删除，数据还在，而且<code>show_status</code>已经标记为0了(坑爹<code>navicat</code>不一页显示全数据😈)</p><p>汉字乱码是因为<code>cmd</code>编码为<code>gbk</code>，而mysql设置的编码为<code>utf-8</code>，这里不用管它</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.3.6.png" alt="image-20220429105941270" tabindex="0" loading="lazy"><figcaption>image-20220429105941270</figcaption></figure><h6 id="_7、右下角可以翻页" tabindex="-1"><a class="header-anchor" href="#_7、右下角可以翻页" aria-hidden="true">#</a> 7、右下角可以翻页</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.3.7.png" alt="image-20220429130754284" tabindex="0" loading="lazy"><figcaption>image-20220429130754284</figcaption></figure><h6 id="_8、点击设置可以更改每页显示的行数" tabindex="-1"><a class="header-anchor" href="#_8、点击设置可以更改每页显示的行数" aria-hidden="true">#</a> 8、点击设置可以更改每页显示的行数</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.4.7.3.8.png" alt="image-20220429131007804" tabindex="0" loading="lazy"><figcaption>image-20220429131007804</figcaption></figure><h3 id="_4-1-5、分类维护前端发送删除请求" tabindex="-1"><a class="header-anchor" href="#_4-1-5、分类维护前端发送删除请求" aria-hidden="true">#</a> 4.1.5、分类维护前端发送删除请求</h3><h4 id="_1、封装请求的工具类" tabindex="-1"><a class="header-anchor" href="#_1、封装请求的工具类" aria-hidden="true">#</a> 1、封装请求的工具类</h4><p>封装的发送<code>ajax</code>请求方法在<code>src\\utils\\httpRequest.js</code>文件内</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.1.png" alt="image-20220429122946232" tabindex="0" loading="lazy"><figcaption>image-20220429122946232</figcaption></figure><h4 id="_2、post请求模块" tabindex="-1"><a class="header-anchor" href="#_2、post请求模块" aria-hidden="true">#</a> 2、post请求模块</h4><p><code>post</code>请求可以复制<code>src\\views\\modules\\sys\\role.vue</code>里面的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.2.png" alt="image-20220429124108364" tabindex="0" loading="lazy"><figcaption>image-20220429124108364</figcaption></figure><h4 id="_3、新建用户片段" tabindex="-1"><a class="header-anchor" href="#_3、新建用户片段" aria-hidden="true">#</a> 3、新建用户片段</h4><h5 id="_1、选择用户片段" tabindex="-1"><a class="header-anchor" href="#_1、选择用户片段" aria-hidden="true">#</a> 1、选择用户片段</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.3.1.png" alt="image-20220429124726677" tabindex="0" loading="lazy"><figcaption>image-20220429124726677</figcaption></figure><h5 id="_2、点击以前生成的模板" tabindex="-1"><a class="header-anchor" href="#_2、点击以前生成的模板" aria-hidden="true">#</a> 2、点击以前生成的模板</h5><p>如果跳过前面的前端部分，在这里可以点击<code>新建全局代码片段文件...</code>，然后复制全部代码模板</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.3.2.png" alt="image-20220429124827693" tabindex="0" loading="lazy"><figcaption>image-20220429124827693</figcaption></figure><h5 id="_3、添加get和post请求模板" tabindex="-1"><a class="header-anchor" href="#_3、添加get和post请求模板" aria-hidden="true">#</a> 3、添加<code>get</code>和<code>post</code>请求模板</h5><p>在后面添加添加<code>get</code>和<code>post</code>请求模板,输入&quot;httpget&quot;和&quot;httppost&quot;即可出现相应代码片段</p><p><code>get</code>请求模板</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;http-get 请求&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;httpget&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token string">&quot;this.\\\\$http({&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;url: this.\\\\$http.adornUrl(&#39;&#39;),&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;method: &#39;get&#39;,&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;params: this.\\\\$http.adornParams({})&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;}).then(({data}) =&gt; {&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;})&quot;</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;httpGET 请求&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>post</code>请求模板</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;http-post 请求&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;httppost&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token string">&quot;this.\\\\$http({&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;url: this.\\\\$http.adornUrl(&#39;&#39;),&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;method: &#39;post&#39;,&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;data: this.\\\\$http.adornData(data, false)&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;}).then(({ data }) =&gt; { });&quot;</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;httpPOST 请求&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="code/4.1.5.3.3.%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF.snippets">点击查看完整代码模板</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.3.3.png" alt="image-20220429124905747" tabindex="0" loading="lazy"><figcaption>image-20220429124905747</figcaption></figure><h4 id="_4、编写删除代码" tabindex="-1"><a class="header-anchor" href="#_4、编写删除代码" aria-hidden="true">#</a> 4、编写删除代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ids <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&#39;/product/category/delete&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功...&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">//重新发送请求,更新数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.4.png" alt="image-20220429193841630" tabindex="0" loading="lazy"><figcaption>image-20220429193841630</figcaption></figure><h4 id="_5、添加测试数据" tabindex="-1"><a class="header-anchor" href="#_5、添加测试数据" aria-hidden="true">#</a> 5、添加测试数据</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.5.png" alt="image-20220429193328389" tabindex="0" loading="lazy"><figcaption>image-20220429193328389</figcaption></figure><h4 id="_6、点击删除" tabindex="-1"><a class="header-anchor" href="#_6、点击删除" aria-hidden="true">#</a> 6、点击删除</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.6.1.png" alt="image-20220429194221023" tabindex="0" loading="lazy"><figcaption>image-20220429194221023</figcaption></figure><p>可以看到，已经显示删除成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.6.2.png" alt="image-20220429194316686" tabindex="0" loading="lazy"><figcaption>image-20220429194316686</figcaption></figure><h4 id="_7、查看结果" tabindex="-1"><a class="header-anchor" href="#_7、查看结果" aria-hidden="true">#</a> 7、查看结果</h4><p>可以看到<code>测试数据5</code>的<code>show_status</code>字段已经为0了（已经逻辑删除了）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.7.png" alt="image-20220429194442816" tabindex="0" loading="lazy"><figcaption>image-20220429194442816</figcaption></figure><h4 id="_8、体验优化" tabindex="-1"><a class="header-anchor" href="#_8、体验优化" aria-hidden="true">#</a> 8、体验优化</h4><h5 id="_1、添加删除提示框" tabindex="-1"><a class="header-anchor" href="#_1、添加删除提示框" aria-hidden="true">#</a> 1、添加删除提示框</h5>`,352),b={href:"https://element.eleme.io/#/zh-CN/component/message-box",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$confirm</span><span class="token punctuation">(</span><span class="token string">&quot;此操作将永久删除该文件, 是否继续?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;提示&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">confirmButtonText</span><span class="token operator">:</span> <span class="token string">&quot;确定&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cancelButtonText</span><span class="token operator">:</span> <span class="token string">&quot;取消&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;warning&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;删除成功!&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;已取消删除&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加删除提示框</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$confirm</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">是否删除【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】菜单</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;提示&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">confirmButtonText</span><span class="token operator">:</span> <span class="token string">&quot;确定&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cancelButtonText</span><span class="token operator">:</span> <span class="token string">&quot;取消&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;warning&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> ids <span class="token operator">=</span> <span class="token punctuation">[</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/delete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> datas <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】删除成功</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//重新发送请求,更新数据</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;已取消删除&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、删除后默认展开其父节点" tabindex="-1"><a class="header-anchor" href="#_2、删除后默认展开其父节点" aria-hidden="true">#</a> 2、删除后默认展开其父节点</h5><blockquote><p>default-expanded-keys: 默认展开的节点的 key 的数组</p></blockquote><p><code>el-tree</code>标签添加属性<code>:default-expanded-keys=&quot;expandedKey&quot;</code></p><p><code>data</code>的中<code>return</code>语句里添加<code> expandedKey: [],</code></p><p><code>remove</code>方法添加<code> this.expandedKey = [node.parent.data.catId];</code></p><h6 id="_1、发现并没有展开" tabindex="-1"><a class="header-anchor" href="#_1、发现并没有展开" aria-hidden="true">#</a> 1、发现并没有展开</h6><p>把<code>测试数据5</code>的<code>show_status</code>字段重新置为<code>1</code>后再删除，发现并没有展开</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.8.2.1.png" alt="image-20220429203815538" tabindex="0" loading="lazy"><figcaption>image-20220429203815538</figcaption></figure><h6 id="_2、修改node-key" tabindex="-1"><a class="header-anchor" href="#_2、修改node-key" aria-hidden="true">#</a> 2、修改<code>node-key</code></h6><p>把<code>node-key=&quot;data.catId&quot;</code>改为<code>node-key=&quot;catId&quot;</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.8.2.2.png" alt="image-20220429204100137" tabindex="0" loading="lazy"><figcaption>image-20220429204100137</figcaption></figure><p>可以看到点击“摄影摄像”，下方直接打印的&quot;catId&quot;即为想要设置的值，并不在data下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.5.8.2.3.png" alt="image-20220429205411898" tabindex="0" loading="lazy"><figcaption>image-20220429205411898</figcaption></figure><h4 id="_9、完整代码" tabindex="-1"><a class="header-anchor" href="#_9、完整代码" aria-hidden="true">#</a> 9、完整代码</h4><p><a href="code/4.1.5.9.vue">点击查看完整代码</a></p><h3 id="_4-1-6、分类维护新增功能" tabindex="-1"><a class="header-anchor" href="#_4-1-6、分类维护新增功能" aria-hidden="true">#</a> 4.1.6、分类维护新增功能</h3><h4 id="_1、前端发送新增请求" tabindex="-1"><a class="header-anchor" href="#_1、前端发送新增请求" aria-hidden="true">#</a> 1、前端发送新增请求</h4><h5 id="_1、添加页面" tabindex="-1"><a class="header-anchor" href="#_1、添加页面" aria-hidden="true">#</a> 1、添加页面</h5><p>再<code>template</code>标签的<code>div</code>里面添加页面</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提示<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialogVisible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>30%<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>分类名称<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category.name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialog-footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialogVisible = false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addCatagory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、添加数据字段" tabindex="-1"><a class="header-anchor" href="#_2、添加数据字段" aria-hidden="true">#</a> 2、添加数据字段</h5><p>在<code>data</code>的<code>return</code>语句中添加<code> category: { name: &quot;&quot; },</code></p><h5 id="_3、添加提交方法" tabindex="-1"><a class="header-anchor" href="#_3、添加提交方法" aria-hidden="true">#</a> 3、添加提交方法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">addCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;catagory中的数据:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、点击append显示对话框" tabindex="-1"><a class="header-anchor" href="#_4、点击append显示对话框" aria-hidden="true">#</a> 4、点击<code>append</code>显示对话框</h5><p>在<code>append</code>方法中添加<code>this.dialogVisible = true;</code></p><h5 id="_5、测试" tabindex="-1"><a class="header-anchor" href="#_5、测试" aria-hidden="true">#</a> 5、测试</h5><p>点击&quot;append&quot;按钮，输入分类名称，点击确定，可以发现<code>category</code>中的数据有<code>name: &#39;hhh&#39;</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.6.5.png" alt="image-20220429213147531" tabindex="0" loading="lazy"><figcaption>image-20220429213147531</figcaption></figure><h5 id="_6、修改category数据" tabindex="-1"><a class="header-anchor" href="#_6、修改category数据" aria-hidden="true">#</a> 6、修改<code>category</code>数据</h5><p>而后端需要的由以下五个数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.6.6.png" alt="image-20220429213643518" tabindex="0" loading="lazy"><figcaption>image-20220429213643518</figcaption></figure><p>修改<code>data</code>数据下<code>retrun</code>里面的<code>category</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>category: { name: &quot;&quot;, parentCid: 0, catLevel: 0, showStatus: 1, sort: 0 },
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_7、修改append方法" tabindex="-1"><a class="header-anchor" href="#_7、修改append方法" aria-hidden="true">#</a> 7、修改<code>append</code>方法</h5><p>在<code>append</code>方法中添加以下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//&lt;点击append按钮的节点&gt;为&lt;要添加的节点&gt;的父节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid <span class="token operator">=</span> data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span>
<span class="token comment">//&lt;要添加的节点&gt;的父节点的层级为&lt;点击append按钮的节点&gt;+1</span>
<span class="token comment">//data.catLevel*1 可以将 String类型的 data.catLevel 转为 int 类型</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>catLevel <span class="token operator">=</span> data<span class="token punctuation">.</span>catLevel <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8、测试category携带的参数" tabindex="-1"><a class="header-anchor" href="#_8、测试category携带的参数" aria-hidden="true">#</a> 8、测试category携带的参数</h5><p>可以看到这些数据都带上了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.6.8.png" alt="image-20220429215054133" tabindex="0" loading="lazy"><figcaption>image-20220429215054133</figcaption></figure><h5 id="_9、向后端发送新增请求" tabindex="-1"><a class="header-anchor" href="#_9、向后端发送新增请求" aria-hidden="true">#</a> 9、向后端发送新增请求</h5><p><code>addCatagory</code>方法内添加向后端发送新增请求的代码(输入<code>httppost</code>会生成用户代码片段)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">addCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/save&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">添加成功</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//重新获取数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//默认展开的菜单节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_10、添加菜单" tabindex="-1"><a class="header-anchor" href="#_10、添加菜单" aria-hidden="true">#</a> 10、添加菜单</h5><p>点击&quot;append&quot;按钮，输入分类名称，点击确定，可以发现已经有数据了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.6.10.png" alt="image-20220429221202449" tabindex="0" loading="lazy"><figcaption>image-20220429221202449</figcaption></figure><h5 id="_11、完整代码" tabindex="-1"><a class="header-anchor" href="#_11、完整代码" aria-hidden="true">#</a> 11、完整代码</h5><p><a href="code/4.1.6.11.vue">点击查看完整代码</a></p><h3 id="_4-1-7、分类维护增删查改" tabindex="-1"><a class="header-anchor" href="#_4-1-7、分类维护增删查改" aria-hidden="true">#</a> 4.1.7、分类维护增删查改</h3><h4 id="_1、添加修改按钮" tabindex="-1"><a class="header-anchor" href="#_1、添加修改按钮" aria-hidden="true">#</a> 1、添加修改按钮</h4><p>在<code>删除</code>按钮下添加修改按钮</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mini<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>() =&gt; edit(data)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Edit
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、添加数据" tabindex="-1"><a class="header-anchor" href="#_2、添加数据" aria-hidden="true">#</a> 2、添加数据</h4><p>添加数据字段，用来标识当前对话框是添加还是删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//对话框的类型(添加或删除)</span>
<span class="token literal-property property">dialogType</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
<span class="token comment">//对话框的标题(添加分类或删除分类)</span>
<span class="token literal-property property">dialogTitle</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、添加catagory数据字段" tabindex="-1"><a class="header-anchor" href="#_3、添加catagory数据字段" aria-hidden="true">#</a> 3、添加<code>catagory</code>数据字段</h4><p>添加<code> catId: null,</code>字段</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parentCid</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">catLevel</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">showStatus</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">catId</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、编写edit方法" tabindex="-1"><a class="header-anchor" href="#_4、编写edit方法" aria-hidden="true">#</a> 4、编写<code>edit</code>方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改按钮...&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>name <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>catId <span class="token operator">=</span> data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogType <span class="token operator">=</span> <span class="token string">&quot;edit&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogTitle <span class="token operator">=</span> <span class="token string">&quot;修改分类&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">//打开添加或修改的对话框</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、修改append方法" tabindex="-1"><a class="header-anchor" href="#_5、修改append方法" aria-hidden="true">#</a> 5、修改<code>append</code>方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;append方法中的data参数：&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogType <span class="token operator">=</span> <span class="token string">&quot;append&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogTitle <span class="token operator">=</span> <span class="token string">&quot;添加分类&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">//&lt;点击append按钮的节点&gt;为&lt;要添加的节点&gt;的父节点</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid <span class="token operator">=</span> data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span>
  <span class="token comment">//&lt;要添加的节点&gt;的父节点的层级为&lt;点击append按钮的节点&gt;+1</span>
  <span class="token comment">//data.catLevel*1 可以将 String类型的 data.catLevel 转为 int 类型</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>catLevel <span class="token operator">=</span> data<span class="token punctuation">.</span>catLevel <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、修改确定按钮绑定的事件方法" tabindex="-1"><a class="header-anchor" href="#_6、修改确定按钮绑定的事件方法" aria-hidden="true">#</a> 6、修改确定按钮绑定的事件方法</h4><p>修改确定按钮点击事件调用的方法为<code>submitData</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submitData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7、添加submitdata方法" tabindex="-1"><a class="header-anchor" href="#_7、添加submitdata方法" aria-hidden="true">#</a> 7、添加<code>submitData</code>方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">submitData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dialogType <span class="token operator">==</span> <span class="token string">&quot;append&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dialogType <span class="token operator">==</span> <span class="token string">&quot;edit&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">editCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8、打印修改请求数据" tabindex="-1"><a class="header-anchor" href="#_8、打印修改请求数据" aria-hidden="true">#</a> 8、打印修改请求数据</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">editCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//关闭对话框</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改提交的数据：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.7.8.png" alt="image-20220430180933340" tabindex="0" loading="lazy"><figcaption>image-20220430180933340</figcaption></figure><h4 id="_9、对话框内添加标签" tabindex="-1"><a class="header-anchor" href="#_9、对话框内添加标签" aria-hidden="true">#</a> 9、对话框内添加标签</h4><p>在<code>el-dialog</code>标签内添加<code>el-form-item</code>标签</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>图标<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category.icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>计量单位<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category.productUnit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>off<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10、发送修改请求" tabindex="-1"><a class="header-anchor" href="#_10、发送修改请求" aria-hidden="true">#</a> 10、发送修改请求</h4><p>这里的代码写的有问题(后面测试发现数据库已经修改数据了，但是前端没有显示，刷新后才能显示)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">editCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改提交的数据：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token punctuation">{</span>catId<span class="token punctuation">,</span>name<span class="token punctuation">,</span>icon<span class="token punctuation">,</span>productUnit<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&#39;/product/category/update&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>catId<span class="token punctuation">,</span>name<span class="token punctuation">,</span>icon<span class="token punctuation">,</span>productUnit<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//关闭对话框</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">//重新获取数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//默认展开的菜单节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应该写为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">editCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改提交的数据：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token punctuation">{</span> catId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> icon<span class="token punctuation">,</span> productUnit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> catId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> icon<span class="token punctuation">,</span> productUnit <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">添加成功</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关闭对话框</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">//重新获取数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//默认展开的菜单节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11、修改edit方法-动态获取值" tabindex="-1"><a class="header-anchor" href="#_11、修改edit方法-动态获取值" aria-hidden="true">#</a> 11、修改<code>edit</code>方法,动态获取值</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改按钮...&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>catId <span class="token operator">=</span> data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogType <span class="token operator">=</span> <span class="token string">&quot;edit&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogTitle <span class="token operator">=</span> <span class="token string">&quot;修改分类&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">//打开添加或修改的对话框</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/product/category/info/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>catId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改按钮调用后端回显的数据:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>name <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>icon <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>icon<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>productUnit <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>productUnit<span class="token punctuation">;</span>
    <span class="token comment">//更新父菜单id，发送修改请求后，可以展开父节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>parentCid<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12、修改append方法" tabindex="-1"><a class="header-anchor" href="#_12、修改append方法" aria-hidden="true">#</a> 12、修改<code>append</code>方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">append</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;append方法中的data参数：&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//清空category数据</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogType <span class="token operator">=</span> <span class="token string">&quot;append&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogTitle <span class="token operator">=</span> <span class="token string">&quot;添加分类&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">//&lt;点击append按钮的节点&gt;为&lt;要添加的节点&gt;的父节点</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid <span class="token operator">=</span> data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span>
  <span class="token comment">//&lt;要添加的节点&gt;的父节点的层级为&lt;点击append按钮的节点&gt;+1</span>
  <span class="token comment">//data.catLevel*1 可以将 String类型的 data.catLevel 转为 int 类型</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>catLevel <span class="token operator">=</span> data<span class="token punctuation">.</span>catLevel <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function">clearCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>category <span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">parentCid</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">catLevel</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">showStatus</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">productUnit</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">catId</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13、修改addcatagory方法" tabindex="-1"><a class="header-anchor" href="#_13、修改addcatagory方法" aria-hidden="true">#</a> 13、修改<code>addCatagory</code>方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">addCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;添加提交的数据：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> parentCid<span class="token punctuation">,</span> catLevel<span class="token punctuation">,</span> showStatus<span class="token punctuation">,</span> sort<span class="token punctuation">,</span> icon <span class="token punctuation">,</span>productUnit<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/save&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> parentCid<span class="token punctuation">,</span> catLevel<span class="token punctuation">,</span> showStatus<span class="token punctuation">,</span> sort<span class="token punctuation">,</span> icon <span class="token punctuation">,</span>productUnit<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">添加成功</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关闭对话框</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">//重新获取数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//默认展开的菜单节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14、优化体验-防止误关对话框" tabindex="-1"><a class="header-anchor" href="#_14、优化体验-防止误关对话框" aria-hidden="true">#</a> 14、优化体验,防止误关对话框</h4><h5 id="_1、添加close-on-click-modal属性" tabindex="-1"><a class="header-anchor" href="#_1、添加close-on-click-modal属性" aria-hidden="true">#</a> 1、添加<code>close-on-click-modal</code>属性</h5><p>在<code>el-dialog</code>标签内添加<code>close-on-click-modal</code>属性</p><p>使用户只有在点击&quot;×&quot;、&quot;取消&quot;、&quot;确定&quot;才会关闭对话框，防止误点到其他地方导致关闭了对话框</p><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>close-on-click-modal</td><td>是否可以通过点击 modal 关闭 Dialog</td><td>boolean</td><td>—</td><td>true</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>close-on-click-modal=&quot;false&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、控制台显示需要boolean类型-而给出的是-string-类型" tabindex="-1"><a class="header-anchor" href="#_2、控制台显示需要boolean类型-而给出的是-string-类型" aria-hidden="true">#</a> 2、控制台显示需要<code>Boolean</code>类型，而给出的是&quot;String&quot;类型</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.7.14.2.png" alt="image-20220430204554937" tabindex="0" loading="lazy"><figcaption>image-20220430204554937</figcaption></figure><h5 id="_3、使用v-bind属性" tabindex="-1"><a class="header-anchor" href="#_3、使用v-bind属性" aria-hidden="true">#</a> 3、使用<code>v-bind</code>属性</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>:close-on-click-modal=&quot;false&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.7.14.3.png" alt="image-20220430204921080" tabindex="0" loading="lazy"><figcaption>image-20220430204921080</figcaption></figure><h5 id="_4、控制台不报错了" tabindex="-1"><a class="header-anchor" href="#_4、控制台不报错了" aria-hidden="true">#</a> 4、控制台不报错了</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.7.14.4.png" alt="image-20220430205044369" tabindex="0" loading="lazy"><figcaption>image-20220430205044369</figcaption></figure><h4 id="_15、修改后前端不更新数据" tabindex="-1"><a class="header-anchor" href="#_15、修改后前端不更新数据" aria-hidden="true">#</a> 15、修改后前端不更新数据</h4><p>修改分类名称后，发现数据库已经修改数据了，但是前端没有显示，刷新后才能显示</p><h4 id="_16、修改editcatagory方法" tabindex="-1"><a class="header-anchor" href="#_16、修改editcatagory方法" aria-hidden="true">#</a> 16、修改<code>editCatagory</code>方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">editCatagory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;修改提交的数据：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token punctuation">{</span> catId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> icon<span class="token punctuation">,</span> productUnit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> catId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> icon<span class="token punctuation">,</span> productUnit <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">添加成功</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关闭对话框</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">//重新获取数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//默认展开的菜单节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>category<span class="token punctuation">.</span>parentCid<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_17、完整代码-1" tabindex="-1"><a class="header-anchor" href="#_17、完整代码-1" aria-hidden="true">#</a> 17、完整代码</h4><p><a href="code/4.1.7.17.vue">点击查看完整代码</a></p><h3 id="_4-1-8、添加拖拽节点功能" tabindex="-1"><a class="header-anchor" href="#_4-1-8、添加拖拽节点功能" aria-hidden="true">#</a> 4.1.8、添加拖拽节点功能</h3><h4 id="_1、添加拖拽功能" tabindex="-1"><a class="header-anchor" href="#_1、添加拖拽功能" aria-hidden="true">#</a> 1、添加拖拽功能</h4>`,108),f={href:"https://element.eleme.cn/#/zh-CN/component/tree",target:"_blank",rel:"noopener noreferrer"},y=e(`<table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">draggable</td><td style="text-align:left;">是否开启拖拽节点功能</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">allow-drop</td><td style="text-align:left;">拖拽时判定目标节点能否被放置。<code>type</code> 参数有三种情况：&#39;prev&#39;、&#39;inner&#39; 和 &#39;next&#39;，分别表示放置在目标节点前、插入至目标节点和放置在目标节点后</td><td style="text-align:left;">Function(draggingNode, dropNode, type)</td><td style="text-align:left;"></td></tr></tbody></table><p><code>el-tree</code>标签添加属性 <code>draggable :allow-drop=&quot;allowDrop&quot;</code></p><p>添加数据字段<code>maxLength: 0,</code> 表示拖拽节点及其子节点在整颗树的最大深度</p><p>并添加<code>allowDrop</code>方法，判断是否可以拖动</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 判断该节点是否可以拖拽(节点最大深度不能大于3)
 * <span class="token keyword">@param</span> <span class="token parameter">draggingNode</span>  被拖拽的节点
 * <span class="token keyword">@param</span> <span class="token parameter">dropNode</span>      目标节点
 * <span class="token keyword">@param</span> <span class="token parameter">type</span>  放置在目标节点前：&#39;prev&#39;、插入至目标节点：&#39;inner&#39;、 放置在目标节点后：&#39;next&#39;
 * <span class="token keyword">@return</span>
 */</span>
<span class="token function">allowDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;拖拽节点:&quot;</span><span class="token punctuation">,</span> draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//最大深度初始化为该该节点的深度,表示没有子节点</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;拖拽节点后的menu:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这里的整棵树是指：被拖动节点和目标节点 及其子节点 和 其所有父节点 组成的树</strong></p><p>编写拖动的节点及其子节点在整颗大树下的最深深度（这里的代码有问题）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">countNodeLevel</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> children <span class="token operator">=</span> data<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>catLevel <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>catLevel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//递归查找其子树的子树的最大深度</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、测试数据1" tabindex="-1"><a class="header-anchor" href="#_2、测试数据1" aria-hidden="true">#</a> 2、测试数据1</h4><h5 id="_1、拖拽前" tabindex="-1"><a class="header-anchor" href="#_1、拖拽前" aria-hidden="true">#</a> 1、拖拽前</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.2.1.1.png" alt="image-20220430233700326" tabindex="0" loading="lazy"><figcaption>image-20220430233700326</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.2.1.2.png" alt="image-20220430233559727" tabindex="0" loading="lazy"><figcaption>image-20220430233559727</figcaption></figure><h5 id="_2、拖拽后" tabindex="-1"><a class="header-anchor" href="#_2、拖拽后" aria-hidden="true">#</a> 2、拖拽后</h5><p>(不用管控制台里的next，跟这个没有影响，只是我选的一组数据不是inner而已)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.2.2.1.png" alt="image-20220430234003283" tabindex="0" loading="lazy"><figcaption>image-20220430234003283</figcaption></figure><p>可以发现catLevel改变了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.2.2.2.png" alt="image-20220430234200253" tabindex="0" loading="lazy"><figcaption>image-20220430234200253</figcaption></figure><h4 id="_3、测试数据2" tabindex="-1"><a class="header-anchor" href="#_3、测试数据2" aria-hidden="true">#</a> 3、测试数据2</h4><h5 id="_1、拖动前" tabindex="-1"><a class="header-anchor" href="#_1、拖动前" aria-hidden="true">#</a> 1、拖动前</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.1.1.png" alt="image-20220430235635855" tabindex="0" loading="lazy"><figcaption>image-20220430235635855</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.1.2.png" alt="image-20220430235733676" tabindex="0" loading="lazy"><figcaption>image-20220430235733676</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.1.3.png" alt="image-20220430235821830" tabindex="0" loading="lazy"><figcaption>image-20220430235821830</figcaption></figure><h5 id="_2、拖动后" tabindex="-1"><a class="header-anchor" href="#_2、拖动后" aria-hidden="true">#</a> 2、拖动后</h5><p>(不用管控制台里的next，跟这个没有影响，只是我选的一组数据不是inner而已)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.2.1.png" alt="image-20220501000013931" tabindex="0" loading="lazy"><figcaption>image-20220501000013931</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.2.2.png" alt="image-20220501000137695" tabindex="0" loading="lazy"><figcaption>image-20220501000137695</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.2.3.png" alt="image-20220501000306998" tabindex="0" loading="lazy"><figcaption>image-20220501000306998</figcaption></figure><h5 id="_3、menu中的数据" tabindex="-1"><a class="header-anchor" href="#_3、menu中的数据" aria-hidden="true">#</a> 3、menu中的数据</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.3.1.png" alt="image-20220501000725560" tabindex="0" loading="lazy"><figcaption>image-20220501000725560</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.3.2.png" alt="image-20220501000839585" tabindex="0" loading="lazy"><figcaption>image-20220501000839585</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.3.3.3.png" alt="image-20220501000923470" tabindex="0" loading="lazy"><figcaption>image-20220501000923470</figcaption></figure><p>可见menu中的数据已经改变了</p><p><code>被拖拽节点</code>的子节点的<code>catLevel</code>都被改为了<code>被拖拽节点</code>的<code>catLevel</code></p><h4 id="_4、修改countnodelevel方法" tabindex="-1"><a class="header-anchor" href="#_4、修改countnodelevel方法" aria-hidden="true">#</a> 4、修改<code>countNodeLevel</code>方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">countNodeLevel</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> children <span class="token operator">=</span> data<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>catLevel <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>catLevel<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//递归查找其子树的子树的最大深度</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1、测试数据1" tabindex="-1"><a class="header-anchor" href="#_1、测试数据1" aria-hidden="true">#</a> 1、测试数据1</h5><p>改动后，节点信息显示正常，并且打印了正确的节点深度</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.4.1.1.png" alt="image-20220501154304218" tabindex="0" loading="lazy"><figcaption>image-20220501154304218</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.4.1.2.png" alt="image-20220501154457199" tabindex="0" loading="lazy"><figcaption>image-20220501154457199</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.4.1.3.png" alt="image-20220501154606221" tabindex="0" loading="lazy"><figcaption>image-20220501154606221</figcaption></figure><h5 id="_2、测试数据2" tabindex="-1"><a class="header-anchor" href="#_2、测试数据2" aria-hidden="true">#</a> <strong>2、测试数据2</strong></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.4.2.1.png" alt="image-20220501154951313" tabindex="0" loading="lazy"><figcaption>image-20220501154951313</figcaption></figure><p>还是能显示正确的深度</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.4.2.2.png" alt="image-20220501155115738" tabindex="0" loading="lazy"><figcaption>image-20220501155115738</figcaption></figure><h5 id="_3、测试数据3" tabindex="-1"><a class="header-anchor" href="#_3、测试数据3" aria-hidden="true">#</a> 3、测试数据3</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.4.3.1.png" alt="image-20220501155748334" tabindex="0" loading="lazy"><figcaption>image-20220501155748334</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.8.4.3.2.png" alt="image-20220501160239808" tabindex="0" loading="lazy"><figcaption>image-20220501160239808</figcaption></figure><p>经测试可以看到，最长深度的计算没有问题了</p><h4 id="_5、修改allowdrop方法" tabindex="-1"><a class="header-anchor" href="#_5、修改allowdrop方法" aria-hidden="true">#</a> 5、修改<code>allowDrop</code>方法</h4><p><strong>这里的整棵树是指：被拖动节点和目标节点 及其子节点 和 其所有父节点 组成的树</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 判断该节点是否可以拖拽(节点最大深度不能大于3)
 * <span class="token keyword">@param</span> <span class="token parameter">draggingNode</span>  被拖拽的节点
 * <span class="token keyword">@param</span> <span class="token parameter">dropNode</span>      目标节点
 * <span class="token keyword">@param</span> <span class="token parameter">type</span>  放置在目标节点前：&#39;prev&#39;、插入至目标节点：&#39;inner&#39;、 放置在目标节点后：&#39;next&#39;
 * <span class="token keyword">@return</span>
 */</span>
<span class="token function">allowDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;拖拽节点:&quot;</span><span class="token punctuation">,</span> draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//最大深度初始化为该该节点的深度,表示没有子节点</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;拖拽节点后的menu:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//拖拽节点及其子节点组成的树的最大深度</span>
  <span class="token keyword">let</span> deep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">-</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token string">&quot;inner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//类型为 inner(表示在目标节点的内部)</span>
    <span class="token comment">//拖拽后整颗树的最大深度=(目标节点的深度 + 拖拽节点及其子节点组成的树的最大深度)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel <span class="token operator">+</span> deep<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token comment">//类型为 prev 或 next (表示在目标节点的上面或下面，与目标节点同级)</span>
      <span class="token comment">//拖拽后整颗树的最大深度=(目标节点的父节点的深度 + 拖拽节点及其子节点组成的树的最大深度)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>level <span class="token operator">+</span> deep<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、完整代码" tabindex="-1"><a class="header-anchor" href="#_6、完整代码" aria-hidden="true">#</a> 6、完整代码</h4><p><a href="code/4.1.8.6.vue">点击查看完整代码</a></p><h3 id="_4-1-9、添加拖拽节点回调函数" tabindex="-1"><a class="header-anchor" href="#_4-1-9、添加拖拽节点回调函数" aria-hidden="true">#</a> 4.1.9、添加拖拽节点回调函数</h3><table><thead><tr><th style="text-align:left;">事件名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">回调参数</th></tr></thead><tbody><tr><td style="text-align:left;">node-drop</td><td style="text-align:left;">拖拽成功完成时触发的事件</td><td style="text-align:left;">共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event</td></tr></tbody></table><h4 id="_1、el-tree添加属性" tabindex="-1"><a class="header-anchor" href="#_1、el-tree添加属性" aria-hidden="true">#</a> 1、<code>el-tree</code>添加属性</h4><p><code>el-tree</code>添加<code>@node-drop=&quot;handleDrop&quot;</code>属性</p><h4 id="_2、添加回调方法" tabindex="-1"><a class="header-anchor" href="#_2、添加回调方法" aria-hidden="true">#</a> 2、添加回调方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;tree drop: &quot;</span><span class="token punctuation">,</span> dropNode<span class="token punctuation">.</span>label<span class="token punctuation">,</span> dropType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、查看回调参数的数据" tabindex="-1"><a class="header-anchor" href="#_3、查看回调参数的数据" aria-hidden="true">#</a> 3、查看回调参数的数据</h4><p>数据和拖动节点的数据差不多</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.9.3.png" alt="image-20220501233323689" tabindex="0" loading="lazy"><figcaption>image-20220501233323689</figcaption></figure><h4 id="_4、编写拖拽成功后触发的事件" tabindex="-1"><a class="header-anchor" href="#_4、编写拖拽成功后触发的事件" aria-hidden="true">#</a> 4、编写拖拽成功后触发的事件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 拖拽成功后的回调函数，用来更新节点的信息
 * <span class="token keyword">@param</span> <span class="token parameter">draggingNode</span>  被拖拽节点对应的 Node (draggingNode里的数据不会更新)
 * <span class="token keyword">@param</span> <span class="token parameter">dropNode</span>      结束拖拽时最后进入的节点 
 * (dropNode里面的childNodes,parent等会动态更新(dropNode里面的data为数据库获取到的,不会更新))
 * <span class="token keyword">@param</span> <span class="token parameter">type</span>  被拖拽节点的放置位置（before、after、inner）
 * 放置在目标节点前：&#39;prev&#39;、插入至目标节点：&#39;inner&#39;、 放置在目标节点后：&#39;next&#39;
 * <span class="token keyword">@return</span>
 */</span>
<span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;拖拽成功的回调参数: &quot;</span><span class="token punctuation">,</span> draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//当前节点的父节点id</span>
  <span class="token keyword">let</span> pCid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">//拖动节点后，被拖动节点的新的父节点的所有子节点数组</span>
  <span class="token keyword">let</span> sliblings <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">//1、找到父节点id和父节点的子节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dropType <span class="token operator">==</span> <span class="token string">&quot;inner&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//类型为 inner(表示在目标节点的内部)</span>
    <span class="token comment">//dropNode.data表示的是数据库获取到的data数据</span>
    pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span>
    <span class="token comment">//dropNode里的数据(除了.data)表示的是element-ui动态更新的数据</span>
    <span class="token comment">//这里的dropNode.childNodes是拖动成功后，已经更新的节点的子节点信息</span>
    <span class="token comment">//拖拽到内部,则dropNode即为其父节点</span>
    sliblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//类型为 prev 或 next (表示在目标节点的上面或下面，与目标节点同级)</span>
    <span class="token comment">//拖拽到上面或下面，则 目标节点的父节点即为拖拽节点的父节点</span>
    <span class="token comment">//如果托拖拽到一级菜单(level=1)dropNode.parent.data装的是一级菜单集合(和dropNode.parent.childNodes数据一样),获取到的catId为undefined</span>
    <span class="token comment">//如果为undefined赋值为0</span>
    pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//这里的dropNode.parent为element-ui提供的，是拖拽后的更新过的数据(draggingNode里的数据不会跟新)</span>
    <span class="token comment">//拖拽到上面或下面，则 目标节点的父节点子节点即为被拖动节点的新的父节点的所有子节点</span>
    sliblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//2、将子节点更新的数据放到updateNodes中</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sliblings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果是正在托拽的节点，需要更新其父id</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sliblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">==</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> catLevel <span class="token operator">=</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel<span class="token punctuation">;</span>
      <span class="token comment">//当前节点的层级发生变化就更新子节点层级</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sliblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">!=</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//其实这个catLevel始终都是等于sliblings[i].level,即更新后的level</span>
        catLevel <span class="token operator">=</span> sliblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>
        <span class="token comment">//更新子节点层级</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateChildNodeLevel</span><span class="token punctuation">(</span>sliblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">catId</span><span class="token operator">:</span> sliblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span><span class="token literal-property property">sort</span><span class="token operator">:</span> i<span class="token punctuation">,</span><span class="token literal-property property">parentCid</span><span class="token operator">:</span> pCid<span class="token punctuation">,</span><span class="token literal-property property">catLevel</span><span class="token operator">:</span> catLevel<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">catId</span><span class="token operator">:</span> sliblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span> <span class="token literal-property property">sort</span><span class="token operator">:</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//3、把数据发送给后端</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;拖拽节点成功后，发送给后端的数据:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">//拖动节点后，更新其子节点的层级</span>
<span class="token function">updateChildNodeLevel</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> catId <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span>
      <span class="token keyword">let</span> catLevel <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">catId</span><span class="token operator">:</span> catId<span class="token punctuation">,</span> <span class="token literal-property property">catLevel</span><span class="token operator">:</span> catLevel <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//递归更新子节点层级</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateChildNodeLevel</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、后端添加批量修改功能" tabindex="-1"><a class="header-anchor" href="#_5、后端添加批量修改功能" aria-hidden="true">#</a> 5、后端添加批量修改功能</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 修改节点的树形结构
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update/sort&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">updateSort</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CategoryEntity</span><span class="token punctuation">[</span><span class="token punctuation">]</span> category<span class="token punctuation">)</span><span class="token punctuation">{</span>
    categoryService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、handledrop方法里添加代码" tabindex="-1"><a class="header-anchor" href="#_6、handledrop方法里添加代码" aria-hidden="true">#</a> 6、<code>handleDrop</code>方法里添加代码</h4><p>在第3步那里添加向后端发送请求的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/update/sort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">菜单结构修改成功</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//重新获取数据</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//默认展开的菜单节点</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token punctuation">[</span>pCid<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、测试是否成功修改" tabindex="-1"><a class="header-anchor" href="#_7、测试是否成功修改" aria-hidden="true">#</a> 7、测试是否成功修改</h4><p>修改代码结构后，刷新页面，发现树的结构已正确显示</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.9.7.1.png" alt="image-20220502154324423" tabindex="0" loading="lazy"><figcaption>image-20220502154324423</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.9.7.2.png" alt="image-20220502154013655" tabindex="0" loading="lazy"><figcaption>image-20220502154013655</figcaption></figure><h3 id="_4-1-10、多次拖拽后一次提交" tabindex="-1"><a class="header-anchor" href="#_4-1-10、多次拖拽后一次提交" aria-hidden="true">#</a> 4.1.10、多次拖拽后一次提交</h3><p>多次拖拽后一次提交有可能出现其他的用户修改后，当前用户没有及时更新，当前用户覆盖了其他用户数据，但当前用户并不知情</p><p>(不能像修改节点信息那样,点击<code>edit</code>向后端发送请求，获取最新数据)</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">draggable</td><td style="text-align:left;">是否开启拖拽节点功能</td><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td></tr></tbody></table><h4 id="_1、添加开关" tabindex="-1"><a class="header-anchor" href="#_1、添加开关" aria-hidden="true">#</a> 1、添加开关</h4>`,78),w=a("strong",null,"element-ui",-1),x=a("strong",null,"Switch开关",-1),_=a("strong",null,"文字描述",-1),z={href:"https://element.eleme.io/#/zh-CN/component/switch",target:"_blank",rel:"noopener noreferrer"},q=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>draggable<span class="token punctuation">&quot;</span></span> <span class="token attr-name">active-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>开启拖拽<span class="token punctuation">&quot;</span></span> <span class="token attr-name">inactive-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>关闭拖拽<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、修改el-tree的draggable属性" tabindex="-1"><a class="header-anchor" href="#_2、修改el-tree的draggable属性" aria-hidden="true">#</a> 2、修改<code>el-tree</code>的<code>draggable</code>属性</h4><p>动态绑定<code>draggable</code>的值来确定是否可以拖拽</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token punctuation">:</span>draggable<span class="token punctuation">=</span>&quot;draggable&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、添加数据字段" tabindex="-1"><a class="header-anchor" href="#_3、添加数据字段" aria-hidden="true">#</a> 3、添加数据字段</h4><p>默认设置为不可拖拽</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>//是否可以拖拽
<span class="token key attr-name">draggable</span><span class="token punctuation">:</span> <span class="token value attr-value">false,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、添加批量保存按钮" tabindex="-1"><a class="header-anchor" href="#_4、添加批量保存按钮" aria-hidden="true">#</a> 4、添加批量保存按钮</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>draggable<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>batchSave<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>批量保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5、添加batchsave方法" tabindex="-1"><a class="header-anchor" href="#_5、添加batchsave方法" aria-hidden="true">#</a> 5、添加<code>batchSave</code>方法</h4><p>删除<code>handleDrop</code>方法里向后端发送请求的代码，把向后端发送请求的代码写到<code>batchSave</code>里</p><p>由于<code>batchSave</code>里面没有<code>pCid</code>，因此需要在<code>data</code>里添加<code>pCid : 0,</code></p><p>在<code>handleDrop</code>方法里，计算完<code>pCid</code>把它赋给<code>this.pCid</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">batchSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/update/sort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">菜单结构修改成功</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//重新获取数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//默认展开的菜单节点</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>pCid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//重新赋给pCid默认值</span>
    <span class="token comment">//这一步可以可以省略，但前端使用变量后重新赋初值是一个良好的习惯</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pCid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、使用动态更新的层级" tabindex="-1"><a class="header-anchor" href="#_6、使用动态更新的层级" aria-hidden="true">#</a> 6、使用动态更新的层级</h4><p>由于加入了<strong>批量提交</strong>功能，当节点拖拽多次后才提交给后端</p><p>因此如果获取<code>data</code>里的<strong>节点的层级</strong>和<strong>节点的父节点id</strong>会导致获取到了没有更新的错误数据</p><p>(而以前获取<code>data</code>里的数据后立即向后端发送请求，重新获取新的已经更新过的数据，因此不会发生错误)</p><p><s>(其实不更新<strong>节点的层级</strong>也可以，因为错误的<strong>节点层级</strong>只用来计算拖动节点的局部树的深度，<code>push</code>的都是动态更新的层级,</s></p><p><s>而且恰巧被拖动节点的局部树都是使用未跟新的层级，因此计算的深度也是正确的结果,由于这些节点的层级并不用来做其他用途，</s></p><p><s>其实使用旧的层级来确定是否允许拖动并没有问题,但<code>return dropNode.parent.level + deep &lt;= 3;</code>必须使用动态更新的层级，</s></p><p><s>因为假设一个节点的层级由2变为了1，其可以在里面再放2层，如果使用未更新的层级则会显示不可以放，但其实是可以的，</s></p><p><s><code>return dropNode.data.catLevel + deep &lt;= 3;</code>不用改，因为目标节点的层级并不会改变,只有被拖拽节点及其子节点层级会改变</s></p><p><s>总结：被拖动节点的局部树的层级并不影响其深度，可以不用修改，当拖拽到<code>prev</code>或<code>next</code>后，目标节点的层级并不会改变不用修改，但<code>return dropNode.parent.level + deep &lt;= 3;</code>必须使用动态更新的层级)</s></p><p>(可以使用不动态更新的层级是建立在被拖动节点其子节点的结构(主要是深度)没有改变的情况下，类型为<code>prev</code>、<code>next</code>其父节点有可能是已经被拖拽的节点、类型为<code>inner</code>目标节点也有可能为已经被拖拽过的节点。其层级可能已经改变，因此也必须使用动态更新的数据，被拖动节点的子节点也需要使用动态更新的子节点，层级也需要使用动态更新的层级)</p><p>例子:</p><ol><li>一个节点的层级由2变为了1，其可以在里面再放2层，如果使用未更新的层级则会显示不可以放，但其实是可以的</li><li>一个节点的层级由3变为了2，其可以在里面再放1层，如果使用未更新的层级则会显示不可以放，但其实是可以的</li><li>一个节点的层级由2变为了1，把一个深度为2的节点放到这个节点的子节点的<code>prev</code>或<code>next</code>，如果使用未更新的层级则会显示不可以放，但其实是可以的</li></ol><p>所以应使用<code>element-ui</code>提供的动态更新的<strong>层级</strong>和<strong>父节点id</strong></p><p>(以前的代码使用的就是<code>element-ui</code>提供的动态更新的父节点id，因此不用修改了)</p><p>修改<code>allowDrop</code>方法里的代码，使用被拖拽节点的<code>element-ui</code>提供的动态更新的层级</p><p>被拖拽节点如果被再次拖拽<code>draggingNode.level</code>和 <code>draggingNode.data.catLevel</code>有可能会不一样</p><p>把这段代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改改为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> draggingNode<span class="token punctuation">.</span>level<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把这段代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> deep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">-</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改改为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> deep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">-</span> draggingNode<span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><s><code>allowDrop</code>方法里的这一行不用修改，因为目标节点的层级并不会改变,只有被拖拽节点及其子节点层级会改变</s></p><p>把这段代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">return</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catLevel <span class="token operator">+</span> deep <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><s>可以</s>必须修改为~~(也可以不修改)~~</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">return</span> dropNode<span class="token punctuation">.</span>level <span class="token operator">+</span> deep <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>子节点也使用动态更新的层级，参数不传被拖拽节点的<code>data</code>字段,而传被拖拽节点本身</p><p>动态获取其子节点和子节点的层级</p><p>把这段代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改该为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>draggingNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把这段代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">countNodeLevel</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> children <span class="token operator">=</span> data<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>catLevel <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>catLevel<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//递归查找其子树的子树的最大深度</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改该为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">countNodeLevel</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//递归查找其子树的子树的最大深度</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、测试-1" tabindex="-1"><a class="header-anchor" href="#_7、测试-1" aria-hidden="true">#</a> 7、测试</h4><p>开拖拽后，连续拖拽以下两次，发现允许拖拽，证明代码没问题</p><p>初始结构</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.10.7.1.png" alt="image-20220502172234731" tabindex="0" loading="lazy"><figcaption>image-20220502172234731</figcaption></figure><p>把<code>2.1</code>拖拽到一级菜单</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.10.7.2.png" alt="image-20220502182545906" tabindex="0" loading="lazy"><figcaption>image-20220502182545906</figcaption></figure><p>把<code>3.1</code>拖拽到<code>2.1</code>下，发现是可以的，如果没有使用动态更新的数据，会显示不可以拖拽</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.10.7.3.png" alt="image-20220502192350288" tabindex="0" loading="lazy"><figcaption>image-20220502192350288</figcaption></figure><h4 id="_8、完整代码" tabindex="-1"><a class="header-anchor" href="#_8、完整代码" aria-hidden="true">#</a> 8、完整代码</h4><h5 id="_1、不使用动态更新的层级之前的错误代码" tabindex="-1"><a class="header-anchor" href="#_1、不使用动态更新的层级之前的错误代码" aria-hidden="true">#</a> 1、不使用动态更新的层级之前的错误代码</h5><p><a href="code/4.1.10.8.1.vue">点击查看完整代码</a></p><h5 id="_2、使用动态更新的层级之后的正确的代码" tabindex="-1"><a class="header-anchor" href="#_2、使用动态更新的层级之后的正确的代码" aria-hidden="true">#</a> 2、使用动态更新的层级之后的正确的代码</h5><p><a href="code/4.1.10.8.2.vue">点击查看完整代码</a></p><h3 id="_4-1-11、优化体验" tabindex="-1"><a class="header-anchor" href="#_4-1-11、优化体验" aria-hidden="true">#</a> 4.1.11、优化体验</h3><h4 id="_1、提交后展开多个节点" tabindex="-1"><a class="header-anchor" href="#_1、提交后展开多个节点" aria-hidden="true">#</a> 1、提交后展开多个节点</h4><p>拖拽节点并批量保存成功后展开的节点只有一个，即展开的是最后一次拖拽的父节点</p><p>因此可以将<code>pCid: 0,</code>改为<code>pCid: [],</code></p><p><code>this.pCid = pCid;</code>改为<code>this.pCid.push(pCid);</code></p><p><code>this.pCid = 0;</code>改为<code>this.pCid = [];</code></p><p>这样每拖拽节点成功后，都能保存其父节点id，批量保存后可以显示所有拖拽节点成功的节点的父节点id</p><p>(但没拖拽成功但展开的节点在批量保存后不能再次展开)</p><h4 id="_2、以前展开的节点-提交后依然展开" tabindex="-1"><a class="header-anchor" href="#_2、以前展开的节点-提交后依然展开" aria-hidden="true">#</a> 2、以前展开的节点，提交后依然展开</h4><table><thead><tr><th style="text-align:left;">事件名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">回调参数</th></tr></thead><tbody><tr><td style="text-align:left;">node-expand</td><td style="text-align:left;">节点被展开时触发的事件</td><td style="text-align:left;">共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身</td></tr><tr><td style="text-align:left;">node-collapse</td><td style="text-align:left;">节点被关闭时触发的事件</td><td style="text-align:left;">共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身</td></tr></tbody></table><p><code>el-tree</code>添加属性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>@node-expand=&quot;nodeExpand&quot;
@node-collapse=&quot;nodeCollapse&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加方法:(现在 <code>this.pCid</code>表示的是提交拖拽结果时需要展开的节点)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//节点被展开时触发的事件</span>
<span class="token function">nodeExpand</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> node<span class="token punctuation">,</span> ele</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;节点被展开时触发的事件:&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span> node<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pCid<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">//节点被关闭时触发的事件</span>
<span class="token function">nodeCollapse</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> node<span class="token punctuation">,</span> ele</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;节点被关闭时触发的事件&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span> node<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pCid<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理，可以使编辑、修改、添加，只要是重新获取数据(调用<code>this.getMenus();</code>)导致展开的节点被折叠的都可以做相似的操作</p><p>也可以另辟蹊径：当展开节点时就把它加入到默认展开的节点的 key 的数组，当折叠节点时就把它从默认展开的节点的 key 的数组里删除</p><p>这样重新获取数据后，以前展开的节点都会被展开</p><h5 id="_1、使用该方法前" tabindex="-1"><a class="header-anchor" href="#_1、使用该方法前" aria-hidden="true">#</a> 1、使用该方法前</h5><p><a href="code/4.1.11.2.1.vue">点击查看使用该方法前的代码</a></p><h5 id="_2、使用该方法后" tabindex="-1"><a class="header-anchor" href="#_2、使用该方法后" aria-hidden="true">#</a> 2、使用该方法后</h5><p><a href="code/4.1.11.2.2.vue">点击查看使用该方法后的代码</a></p><h5 id="_3、后端报错" tabindex="-1"><a class="header-anchor" href="#_3、后端报错" aria-hidden="true">#</a> 3、后端报错</h5><p>当开启拖拽节点后，不拖拽节点，直接批量保存后页面没反应</p><p>打开控制台报500的错误，证明是后端的错误</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.11.2.3.1.png" alt="image-20220502230717102" tabindex="0" loading="lazy"><figcaption>image-20220502230717102</figcaption></figure><p>打开后端发现，实体列表不能为空</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.11.2.3.2.png" alt="image-20220502230934587" tabindex="0" loading="lazy"><figcaption>image-20220502230934587</figcaption></figure><p>后端加个判断就行了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 修改节点的树形结构
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update/sort&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">updateSort</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CategoryEntity</span><span class="token punctuation">[</span><span class="token punctuation">]</span> category<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>category<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> category<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        categoryService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.11.2.3.3.png" alt="image-20220502231359263" tabindex="0" loading="lazy"><figcaption>image-20220502231359263</figcaption></figure><p>重启项目后，再次不拖拽节点，直接批量保存不报错了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.11.2.3.4.png" alt="image-20220502231603498" tabindex="0" loading="lazy"><figcaption>image-20220502231603498</figcaption></figure><h4 id="_3、开启拖拽功能后-不能添加、修改、删除节点" tabindex="-1"><a class="header-anchor" href="#_3、开启拖拽功能后-不能添加、修改、删除节点" aria-hidden="true">#</a> 3、开启拖拽功能后，不能添加、修改、删除节点</h4><p>在<code>append</code>、<code>remove</code>、<code>edit</code>方法开头都加上如下类似代码(只需修改一下<code>message</code>)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>draggable<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;开启拖拽后不可以删除菜单&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、批量提交后关闭拖拽功能" tabindex="-1"><a class="header-anchor" href="#_4、批量提交后关闭拖拽功能" aria-hidden="true">#</a> 4、批量提交后关闭拖拽功能</h4><p>在<code>batchSave</code>最后添加如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//关闭拖拽功能</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>draggable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、完整代码" tabindex="-1"><a class="header-anchor" href="#_5、完整代码" aria-hidden="true">#</a> 5、完整代码</h4><p><a href="code/4.1.11.5.vue">点击查看完整代码</a></p><h3 id="_4-1-12、批量删除" tabindex="-1"><a class="header-anchor" href="#_4-1-12、批量删除" aria-hidden="true">#</a> 4.1.12、批量删除</h3><h4 id="_1、添加按钮" tabindex="-1"><a class="header-anchor" href="#_1、添加按钮" aria-hidden="true">#</a> 1、添加按钮</h4>`,109),S=a("strong",null,"element-ui",-1),I=a("strong",null,"Button按钮",-1),E=a("strong",null,"基本用法",-1),j=a("strong",null,"危险按钮",-1),A={href:"https://element.eleme.io/#/zh-CN/component/button",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>在批量保存右边添加批量删除按钮(代码写在批量保存下面，el-tree上面)</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>danger<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>batchDelete<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>批量删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、添加el-tree属性" tabindex="-1"><a class="header-anchor" href="#_2、添加el-tree属性" aria-hidden="true">#</a> 2、添加<code>el-tree</code>属性</h4><p>在<code>el-tree</code>标签里添加<code>ref=&quot;menuTree&quot;</code>属性，标记这个组件的名字</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ref=&quot;menuTree&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、添加批量删除方法" tabindex="-1"><a class="header-anchor" href="#_3、添加批量删除方法" aria-hidden="true">#</a> 3、添加批量删除方法</h4><table><thead><tr><th style="text-align:left;">方法名</th><th style="text-align:left;">说明</th><th style="text-align:left;">参数</th></tr></thead><tbody><tr><td style="text-align:left;">getCheckedNodes</td><td style="text-align:left;">若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点所组成的数组</td><td style="text-align:left;">(leafOnly, includeHalfChecked) 接收两个 boolean 类型的参数，1. 是否只是叶子节点，默认值为 <code>false</code> 2. 是否包含半选节点，默认值为 <code>false</code></td></tr><tr><td style="text-align:left;">getCheckedKeys</td><td style="text-align:left;">若节点可被选择（即 <code>show-checkbox</code> 为 <code>true</code>），则返回目前被选中的节点的 key 所组成的数组</td><td style="text-align:left;">(leafOnly) 接收一个 boolean 类型的参数，若为 <code>true</code> 则仅返回被选中的叶子节点的 keys，默认值为 <code>false</code></td></tr></tbody></table><p><code>this.$refs</code>会获取当前vue文件所有组件</p><p><code>this.$refs.menuTree</code>获取当前vue文件所有标签中<code>ref</code>属性为<code>menuTree</code>或<code>components{}</code>里面为<code>menuTree</code>的组件</p><p>然后再调用该组件的方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//批量删除</span>
<span class="token function">batchDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> catIds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>menuTree<span class="token punctuation">.</span><span class="token function">getCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;批量删除的id：&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>catIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>menuTree
    <span class="token punctuation">.</span><span class="token function">getCheckedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> node<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;批量删除的名字:&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$confirm</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">是否删除【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>names<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】这些菜单</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&quot;提示&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">confirmButtonText</span><span class="token operator">:</span> <span class="token string">&quot;确定&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cancelButtonText</span><span class="token operator">:</span> <span class="token string">&quot;取消&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;warning&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/delete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span>catIds<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> datas <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">批量删除成功</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//重新发送请求,更新数据</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;已取消批量删除&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3种方式可以获取到选中节点的id</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> catIds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>menuTree<span class="token punctuation">.</span><span class="token function">getCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> catIds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>menuTree<span class="token punctuation">.</span><span class="token function">getCheckedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token operator">=&gt;</span>node<span class="token punctuation">.</span>catId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> catIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>menuTree<span class="token punctuation">.</span><span class="token function">getCheckedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> catIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>catId<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、体验优化" tabindex="-1"><a class="header-anchor" href="#_4、体验优化" aria-hidden="true">#</a> 4、体验优化</h4><p>当没有选中节点的时候，不出现<strong>批量删除</strong>按钮</p><h5 id="_1、添加数据字段" tabindex="-1"><a class="header-anchor" href="#_1、添加数据字段" aria-hidden="true">#</a> 1、添加数据字段</h5><p>在<code>data</code>里添加字段，用于判断是否显示<strong>批量删除</strong>按钮</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> canBatchDeletion: false,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、添加v-if属性" tabindex="-1"><a class="header-anchor" href="#_2、添加v-if属性" aria-hidden="true">#</a> 2、添加<code>v-if</code>属性</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canBatchDeletion<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>danger<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>batchDelete<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>批量删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、添加事件" tabindex="-1"><a class="header-anchor" href="#_3、添加事件" aria-hidden="true">#</a> 3、添加事件</h5><table><thead><tr><th style="text-align:left;">事件名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">回调参数</th></tr></thead><tbody><tr><td style="text-align:left;">check-change</td><td style="text-align:left;">节点选中状态发生变化时的回调</td><td style="text-align:left;">共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点本身是否被选中、节点的子树中是否有被选中的节点</td></tr></tbody></table><p><code>el-tree</code>标签内添加属性</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">@check-change</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;nodeCheckChange&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4、编写方法" tabindex="-1"><a class="header-anchor" href="#_4、编写方法" aria-hidden="true">#</a> 4、编写方法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">nodeCheckChange</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> checked<span class="token punctuation">,</span> indeterminate</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> catIds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>menuTree<span class="token punctuation">.</span><span class="token function">getCheckedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>catIds<span class="token punctuation">)</span>
  <span class="token comment">//如果catIds长度为0就不显示批量删除按钮</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>canBatchDeletion <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>catIds<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、发现页面有抖动现象" tabindex="-1"><a class="header-anchor" href="#_5、发现页面有抖动现象" aria-hidden="true">#</a> 5、发现页面有抖动现象</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.12.4.5.1.gif" alt="4.1.7.6.4.5" tabindex="0" loading="lazy"><figcaption>4.1.7.6.4.5</figcaption></figure><p>把这一行加个div设个高度就可以解决</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span> <span class="token property">line-height</span><span class="token punctuation">:</span> 50px</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>draggable<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">active-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>开启拖拽<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">inactive-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>关闭拖拽<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- draggable为true时，开启了拖拽功能，批量保存才显示 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>draggable<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>batchSave<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>批量保存<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canBatchDeletion<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>danger<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>batchDelete<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>批量删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.1.12.4.5.2.gif" alt="4.1.7.6.4.5.2" tabindex="0" loading="lazy"><figcaption>4.1.7.6.4.5.2</figcaption></figure><h5 id="_6、点击批量删除后-隐藏该按钮" tabindex="-1"><a class="header-anchor" href="#_6、点击批量删除后-隐藏该按钮" aria-hidden="true">#</a> 6、点击批量删除后，隐藏该按钮</h5><p>在<code>batchDelete</code>方法里面 重新发送请求,更新数据<code>this.getMenus();</code>的这行下面添加这行代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//不显示批量删除按钮
this.canBatchDeletion = false;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7、完整代码" tabindex="-1"><a class="header-anchor" href="#_7、完整代码" aria-hidden="true">#</a> 7、完整代码</h5><p><a href="code/4.1.12.4.7.vue">点击查看完整代码</a></p><h2 id="_4-2、商品服务-api-品牌管理" tabindex="-1"><a class="header-anchor" href="#_4-2、商品服务-api-品牌管理" aria-hidden="true">#</a> 4.2、商品服务-API-品牌管理</h2><h3 id="_4-2-1、添加品牌管理前端页面" tabindex="-1"><a class="header-anchor" href="#_4-2-1、添加品牌管理前端页面" aria-hidden="true">#</a> 4.2.1、添加品牌管理前端页面</h3><h4 id="_1、复制brand-vue文件" tabindex="-1"><a class="header-anchor" href="#_1、复制brand-vue文件" aria-hidden="true">#</a> 1、复制<code>brand.vue</code>文件</h4><p>复制以前逆向生成的<code>gulimall-product</code>项目的<code>brand.vue</code>文件(在<code>\\main\\resources\\src\\views\\modules\\product</code>文件夹下)</p><p>📌如果已经删除了可以查看<code>1.10.10</code>节的笔记，重新逆向生成<code>gulimall-product</code>项目</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.1.1.png" alt="image-20220503114854616" tabindex="0" loading="lazy"><figcaption>image-20220503114854616</figcaption></figure><h4 id="_2、复制到product文件夹下" tabindex="-1"><a class="header-anchor" href="#_2、复制到product文件夹下" aria-hidden="true">#</a> 2、复制到<code>product</code>文件夹下</h4><p>复制到前端项目的<code>renren-fast-vue\\src\\views\\modules\\product</code>文件夹下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.1.2.1.png" alt="image-20220503115203222" tabindex="0" loading="lazy"><figcaption>image-20220503115203222</figcaption></figure><h5 id="快速打开product文件夹" tabindex="-1"><a class="header-anchor" href="#快速打开product文件夹" aria-hidden="true">#</a> 📌快速打开<code>product</code>文件夹</h5><p>选中<code>product</code>--&gt;右键--&gt;在文件资源管理器中显示</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.1.2.2.png" alt="image-20220503120339993" tabindex="0" loading="lazy"><figcaption>image-20220503120339993</figcaption></figure><h4 id="_3、删除-0-不显示-1-显示" tabindex="-1"><a class="header-anchor" href="#_3、删除-0-不显示-1-显示" aria-hidden="true">#</a> 3、删除<code>[0-不显示；1-显示]</code></h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.1.3.png" alt="image-20220503120956488" tabindex="0" loading="lazy"><figcaption>image-20220503120956488</figcaption></figure><h4 id="_4、报了个错" tabindex="-1"><a class="header-anchor" href="#_4、报了个错" aria-hidden="true">#</a> 4、报了个错</h4><p>This relative module was not found: 未找到此相关模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.1.4.1.png" alt="image-20220503163746900" tabindex="0" loading="lazy"><figcaption>image-20220503163746900</figcaption></figure><p>就是找不到<code>brand-add-or-update</code>，把<code>brand-add-or-update.vue</code>文件也复制进去就行了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.1.4.2.png" alt="image-20220503170253394" tabindex="0" loading="lazy"><figcaption>image-20220503170253394</figcaption></figure><h4 id="_5、添加品牌管理路由" tabindex="-1"><a class="header-anchor" href="#_5、添加品牌管理路由" aria-hidden="true">#</a> 5、添加品牌管理路由</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.1.5.png" alt="image-20220503165715370" tabindex="0" loading="lazy"><figcaption>image-20220503165715370</figcaption></figure><h4 id="_6、已成功显示" tabindex="-1"><a class="header-anchor" href="#_6、已成功显示" aria-hidden="true">#</a> 6、已成功显示</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.1.6.png" alt="image-20220503170705172" tabindex="0" loading="lazy"><figcaption>image-20220503170705172</figcaption></figure><h3 id="_4-2-2、为显示状态所在的列添加按钮" tabindex="-1"><a class="header-anchor" href="#_4-2-2、为显示状态所在的列添加按钮" aria-hidden="true">#</a> 4.2.2、为显示状态所在的列添加按钮</h3><h4 id="_1、添加按钮-1" tabindex="-1"><a class="header-anchor" href="#_1、添加按钮-1" aria-hidden="true">#</a> 1、添加按钮</h4>`,63),R=a("strong",null,"element-ui",-1),C=a("strong",null,"Table表格",-1),D=a("strong",null,"的自定义列模板",-1),B={href:"https://element.eleme.io/#/zh-CN/component/table",target:"_blank",rel:"noopener noreferrer"},T=e(`<blockquote><p>通过 <code>Scoped slot</code> 可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-icon-time<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">margin-left</span><span class="token punctuation">:</span> 10px</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>{{ scope.row.date }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),L=a("strong",null,"element-ui",-1),G=a("strong",null,"Switch开关",-1),M=a("strong",null,"基本用法",-1),O={href:"https://element.eleme.io/#/zh-CN/component/switch",target:"_blank",rel:"noopener noreferrer"},N=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#13ce66<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#ff4949<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此在<code>label</code>为显示状态的列里面，添加如下模板</p><p><code>scope.row</code>获取当前行数据，<code>scope.row.showStatus</code>获取当前行数据中键为<code>showStatus</code>的值</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope.row.showStatus<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#13ce66<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#ff4949<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.1.1.png" alt="image-20220503173256805" tabindex="0" loading="lazy"><figcaption>image-20220503173256805</figcaption></figure><p>效果就出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.1.2.png" alt="image-20220503173852450" tabindex="0" loading="lazy"><figcaption>image-20220503173852450</figcaption></figure><h4 id="_2、新建和批量删除按钮不显示" tabindex="-1"><a class="header-anchor" href="#_2、新建和批量删除按钮不显示" aria-hidden="true">#</a> 2、<code>新建</code>和<code>批量删除</code>按钮不显示</h4><p>由于使用了<code>v-if</code>当<code>isAuth(&#39;product:brand:save&#39;)</code>为<code>true</code>（没有权限）时，就不显示按钮</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.2.1.png" alt="image-20220503175051236" tabindex="0" loading="lazy"><figcaption>image-20220503175051236</figcaption></figure><p>把<code>src\\utils\\index.js</code>的<code>isAuth</code>方法的这一行删掉</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.2.2.png" alt="image-20220503174636295" tabindex="0" loading="lazy"><figcaption>image-20220503174636295</figcaption></figure><p>直接返回<code>true</code>就行了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.2.3.png" alt="image-20220503174745909" tabindex="0" loading="lazy"><figcaption>image-20220503174745909</figcaption></figure><p>可以看到按钮已经显示了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.2.4.png" alt="image-20220503174810653" tabindex="0" loading="lazy"><figcaption>image-20220503174810653</figcaption></figure><h4 id="_3、修改对话框" tabindex="-1"><a class="header-anchor" href="#_3、修改对话框" aria-hidden="true">#</a> 3、修改对话框</h4><p>点击新建按钮的弹出框写在<code>brand-add-or-update.vue</code>文件里，在这里引入的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.3.1.png" alt="image-20220503175515419" tabindex="0" loading="lazy"><figcaption>image-20220503175515419</figcaption></figure><p>删掉这些，还是使用按钮的方式</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.3.2.png" alt="image-20220503175845685" tabindex="0" loading="lazy"><figcaption>image-20220503175845685</figcaption></figure><p><code>v-model</code>绑定的数据还是和删除掉的<code>el-input</code>标签双向绑定的数据一样，是<code>dataForm.showStatus</code>不变</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataForm.showStatus<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#13ce66<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#ff4949<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.3.3.png" alt="image-20220503180026375" tabindex="0" loading="lazy"><figcaption>image-20220503180026375</figcaption></figure><p>点击<code>新建</code>后弹出的<code>显示状态</code>已经是按钮了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.3.4.png" alt="image-20220503180641548" tabindex="0" loading="lazy"><figcaption>image-20220503180641548</figcaption></figure><h4 id="_4、修改表单宽度" tabindex="-1"><a class="header-anchor" href="#_4、修改表单宽度" aria-hidden="true">#</a> 4、修改表单宽度</h4><p>表单的宽度有点窄</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.4.1.png" alt="image-20220503180824164" tabindex="0" loading="lazy"><figcaption>image-20220503180824164</figcaption></figure><p>这里改为<code>140px</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.4.2.png" alt="image-20220503180933818" tabindex="0" loading="lazy"><figcaption>image-20220503180933818</figcaption></figure><p>这样就好看多了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.4.3.png" alt="image-20220503181014800" tabindex="0" loading="lazy"><figcaption>image-20220503181014800</figcaption></figure><h4 id="_5、绑定监听事件" tabindex="-1"><a class="header-anchor" href="#_5、绑定监听事件" aria-hidden="true">#</a> 5、绑定监听事件</h4><table><thead><tr><th style="text-align:left;">事件名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">回调参数</th></tr></thead><tbody><tr><td style="text-align:left;">change</td><td style="text-align:left;">switch 状态发生变化时的回调函数</td><td style="text-align:left;">新状态的值</td></tr></tbody></table><h5 id="_1、为按钮添加监听事件" tabindex="-1"><a class="header-anchor" href="#_1、为按钮添加监听事件" aria-hidden="true">#</a> 1、为按钮添加监听事件</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope.row.showStatus<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#13ce66<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#ff4949<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateBrandStatus<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.1.png" alt="image-20220504155713996" tabindex="0" loading="lazy"><figcaption>image-20220504155713996</figcaption></figure><h5 id="_2、编写回调方法" tabindex="-1"><a class="header-anchor" href="#_2、编写回调方法" aria-hidden="true">#</a> 2、编写回调方法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//显示状态按钮的回调函数</span>
<span class="token function">updateBrandStatus</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;显示状态:&quot;</span><span class="token operator">+</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、只显示true或false" tabindex="-1"><a class="header-anchor" href="#_3、只显示true或false" aria-hidden="true">#</a> 3、只显示<code>true</code>或<code>false</code></h5><p>只显示<code>true</code>或<code>false</code>，并不能确定是哪个按钮的事件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.3.png" alt="image-20220504160833252" tabindex="0" loading="lazy"><figcaption>image-20220504160833252</figcaption></figure><h5 id="_4、修改调用方法的参数" tabindex="-1"><a class="header-anchor" href="#_4、修改调用方法的参数" aria-hidden="true">#</a> 4、修改调用方法的参数</h5><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope.row.showStatus<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#13ce66<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#ff4949<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateBrandStatus(scope.row)<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、修改回调方法" tabindex="-1"><a class="header-anchor" href="#_5、修改回调方法" aria-hidden="true">#</a> 5、修改回调方法</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//显示状态按钮的回调函数</span>
<span class="token function">updateBrandStatus</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;显示状态:&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，已经可以获取显示状态对应按钮那一行的信息和按钮状态了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.5.png" alt="image-20220504162444824" tabindex="0" loading="lazy"><figcaption>image-20220504162444824</figcaption></figure><h5 id="_6、测试后端接口" tabindex="-1"><a class="header-anchor" href="#_6、测试后端接口" aria-hidden="true">#</a> 6、测试后端接口</h5><p>点击<code>BrandController</code>类<code>update</code>方法左侧的小图标，进入IDEA自带的<code>HTTP Client</code>调试工具进行测试</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>###
POST http://localhost:10000/product/brand/update
Content-Type: application/json

{&quot;brandId&quot;: 1,&quot;logo&quot;: &quot;xxx&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.6.1.png" alt="image-20220504163757244" tabindex="0" loading="lazy"><figcaption>image-20220504163757244</figcaption></figure><p>可以看到<code>logo</code>列已更新</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.6.2.png" alt="image-20220504164033831" tabindex="0" loading="lazy"><figcaption>image-20220504164033831</figcaption></figure><p>7、修改<code>updateBrandStatus</code>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//显示状态按钮的回调函数</span>
<span class="token function">updateBrandStatus</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;显示状态:&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>brandId<span class="token punctuation">,</span>showStatus<span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&#39;/product/brand/update&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>brandId<span class="token punctuation">,</span>showStatus<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;状态更新成功&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8、控制台报错" tabindex="-1"><a class="header-anchor" href="#_8、控制台报错" aria-hidden="true">#</a> 8、控制台报错</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.8.1.png" alt="image-20220504165445351" tabindex="0" loading="lazy"><figcaption>image-20220504165445351</figcaption></figure><p>查看请求体的内容</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.8.2.png" alt="image-20220504165604410" tabindex="0" loading="lazy"><figcaption>image-20220504165604410</figcaption></figure><p>后端也报了警告</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2022-05-04 16:55:41.980  WARN 18564 --- [io-10000-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize instance of \`java.lang.Integer\` out of VALUE_TRUE token; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of \`java.lang.Integer\` out of VALUE_TRUE token
 at [Source: (PushbackInputStream); line: 1, column: 27] (through reference chain: com.atguigu.gulimall.product.entity.BrandEntity[&quot;showStatus&quot;])]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不能把<code>showStatus</code>的值转为<code>java.lang.Integer</code>类型</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.8.3.png" alt="image-20220504165704201" tabindex="0" loading="lazy"><figcaption>image-20220504165704201</figcaption></figure><p>数据库是使用<code>1</code>或<code>0</code>来表示<strong>显示</strong>与<strong>不显示</strong>，而不是<code>true</code>或<code>false</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.8.4.png" alt="image-20220504170055609" tabindex="0" loading="lazy"><figcaption>image-20220504170055609</figcaption></figure><h5 id="_9、修改showstatus值的类型" tabindex="-1"><a class="header-anchor" href="#_9、修改showstatus值的类型" aria-hidden="true">#</a> 9、修改<code>showStatus</code>值的类型</h5><p>方法一：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">active-value</td><td style="text-align:left;">switch 打开时的值</td><td style="text-align:left;">boolean / string / number</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">nactive-value</td><td style="text-align:left;">switch 关闭时的值</td><td style="text-align:left;">boolean / string / number</td><td style="text-align:left;">false</td></tr></tbody></table><p>指定switch 打开或关闭的值</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope.row.showStatus<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#13ce66<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#ff4949<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateBrandStatus(scope.row)<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:active-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:inactive-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><s>方法二：</s></p><p>三元运算符判断（<strong>这种方法不行</strong>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//显示状态按钮的回调函数</span>
<span class="token function">updateBrandStatus</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;显示状态:&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>brandId<span class="token punctuation">,</span>showStatus<span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&#39;/product/brand/update&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>brandId<span class="token punctuation">,</span><span class="token literal-property property">showStatus</span><span class="token operator">:</span>showStatus<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;状态更新成功&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法不可以初始化正确的开关状态(默认使用<code>true</code>或<code>false</code>来表示开关状态，由于这种方法返回<code>1</code>或<code>0</code>，所以只能默认显示关闭状态)</p><h6 id="_1、先让显示状态开关打开" tabindex="-1"><a class="header-anchor" href="#_1、先让显示状态开关打开" aria-hidden="true">#</a> 1、先让显示状态开关打开</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.9.1.png" alt="image-20220504182321591" tabindex="0" loading="lazy"><figcaption>image-20220504182321591</figcaption></figure><h6 id="_2、当刷新页面后-显示状态还是关闭" tabindex="-1"><a class="header-anchor" href="#_2、当刷新页面后-显示状态还是关闭" aria-hidden="true">#</a> 2、当刷新页面后，显示状态还是关闭</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.9.2.png" alt="image-20220504182757184" tabindex="0" loading="lazy"><figcaption>image-20220504182757184</figcaption></figure><h6 id="_3、但数据库其实已更新为1了" tabindex="-1"><a class="header-anchor" href="#_3、但数据库其实已更新为1了" aria-hidden="true">#</a> 3、但数据库其实已更新为1了</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.9.3.png" alt="image-20220504183048856" tabindex="0" loading="lazy"><figcaption>image-20220504183048856</figcaption></figure><h5 id="_10、查看效果" tabindex="-1"><a class="header-anchor" href="#_10、查看效果" aria-hidden="true">#</a> 10、查看效果</h5><p>使用方法一刷新页面后，显示状态依然可以正确展示，但方法二不行</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.2.5.10.png" alt="image-20220504171102995" tabindex="0" loading="lazy"><figcaption>image-20220504171102995</figcaption></figure><p>同理修改<code>brand-add-or-update.vue</code>文件里<code>el-switch</code>标签里的这两个属性</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataForm.showStatus<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#13ce66<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#ff4949<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:active-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:inactive-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-3、对象存储oos" tabindex="-1"><a class="header-anchor" href="#_4-2-3、对象存储oos" aria-hidden="true">#</a> 4.2.3、对象存储OOS</h3><p>对象存储服务（Object Storage Service，OSS）是一种海量、安全、低成本、高可靠的云存储 服务，适合存放任意类型的文件。容量和处理能力弹性扩展，多种存储类型供选择，全面优化存储成本。</p><p>常用的文件存储方式：</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.0.1.png" alt="image-20220504231711548" tabindex="0" loading="lazy"><figcaption>image-20220504231711548</figcaption></figure><p>本项目采用阿里云对象存储服务</p><p>阿里云对象存储-普通上传方式</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.0.2.png" alt="image-20220721202146252" style="zoom:50%;"><p>阿里云对象存储-服务端签名后直传</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.0.3.png" alt="image-20220721202225102" style="zoom:50%;"><h4 id="_1、实名认证" tabindex="-1"><a class="header-anchor" href="#_1、实名认证" aria-hidden="true">#</a> 1、实名认证</h4><h5 id="_1、登陆后-点击控制台" tabindex="-1"><a class="header-anchor" href="#_1、登陆后-点击控制台" aria-hidden="true">#</a> 1、登陆后，点击控制台</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.1.1.png" alt="image-20220504212358467" tabindex="0" loading="lazy"><figcaption>image-20220504212358467</figcaption></figure><h5 id="_2、点击实名认证按钮" tabindex="-1"><a class="header-anchor" href="#_2、点击实名认证按钮" aria-hidden="true">#</a> 2、点击实名认证按钮</h5><p>鼠标经过小人头像，在弹出的框中点击的实名认证，按步骤操作即可</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.1.2.png" alt="image-20220504212450484" tabindex="0" loading="lazy"><figcaption>image-20220504212450484</figcaption></figure><h4 id="_2、开启oss对象存储服务" tabindex="-1"><a class="header-anchor" href="#_2、开启oss对象存储服务" aria-hidden="true">#</a> 2、开启OSS对象存储服务</h4><h5 id="_1、点击左上角的三条横杠" tabindex="-1"><a class="header-anchor" href="#_1、点击左上角的三条横杠" aria-hidden="true">#</a> 1、点击左上角的三条横杠</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.2.1.png" alt="image-20220504212845267" tabindex="0" loading="lazy"><figcaption>image-20220504212845267</figcaption></figure><h5 id="_2、点击对象存储oss" tabindex="-1"><a class="header-anchor" href="#_2、点击对象存储oss" aria-hidden="true">#</a> 2、点击对象存储OSS</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.2.2.png" alt="image-20220504212952128" tabindex="0" loading="lazy"><figcaption>image-20220504212952128</figcaption></figure><h5 id="_3、点击立即开通" tabindex="-1"><a class="header-anchor" href="#_3、点击立即开通" aria-hidden="true">#</a> 3、点击立即开通</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.2.3.png" alt="image-20220504213041621" tabindex="0" loading="lazy"><figcaption>image-20220504213041621</figcaption></figure><h5 id="_4、勾选协议-然后点击立即开通" tabindex="-1"><a class="header-anchor" href="#_4、勾选协议-然后点击立即开通" aria-hidden="true">#</a> 4、勾选协议，然后点击立即开通</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.2.4.png" alt="image-20220504213212922" tabindex="0" loading="lazy"><figcaption>image-20220504213212922</figcaption></figure><h5 id="_5、点击管理控制台" tabindex="-1"><a class="header-anchor" href="#_5、点击管理控制台" aria-hidden="true">#</a> 5、点击管理控制台</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.2.5.png" alt="image-20220504213312344" tabindex="0" loading="lazy"><figcaption>image-20220504213312344</figcaption></figure><h5 id="_6、查看帮助文档" tabindex="-1"><a class="header-anchor" href="#_6、查看帮助文档" aria-hidden="true">#</a> 6、查看帮助文档</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.2.6.png" alt="image-20220504223019548" tabindex="0" loading="lazy"><figcaption>image-20220504223019548</figcaption></figure><h4 id="_3、创建bucket" tabindex="-1"><a class="header-anchor" href="#_3、创建bucket" aria-hidden="true">#</a> 3、创建Bucket</h4><p>参考链接：https://help.aliyun.com/document_detail/31947.html</p>`,117),V=a("thead",null,[a("tr",null,[a("th",{style:{"text-align":"left"}},"中文"),a("th",{style:{"text-align":"left"}},"英文"),a("th",{style:{"text-align":"left"}},"说明")])],-1),F=a("tr",null,[a("td",{style:{"text-align":"left"}},"存储空间"),a("td",{style:{"text-align":"left"}},"Bucket"),a("td",{style:{"text-align":"left"}},"存储空间是您用于存储对象（Object）的容器，所有的对象都必须隶属于某个存储空间。")],-1),U=a("tr",null,[a("td",{style:{"text-align":"left"}},"对象/文件"),a("td",{style:{"text-align":"left"}},"Object"),a("td",{style:{"text-align":"left"}},"对象是 OSS 存储数据的基本单元，也被称为OSS的文件。对象由元信息（Object Meta）、用户数据（Data）和文件名（Key）组成。对象由存储空间内部唯一的Key来标识。")],-1),W=a("td",{style:{"text-align":"left"}},"地域",-1),Q=a("td",{style:{"text-align":"left"}},"Region",-1),H={style:{"text-align":"left"}},$={href:"https://help.aliyun.com/document_detail/31837.htm#concept-zt4-cvy-5db",target:"_blank",rel:"noopener noreferrer"},K=a("td",{style:{"text-align":"left"}},"访问域名",-1),X=a("td",{style:{"text-align":"left"}},"Endpoint",-1),J={style:{"text-align":"left"}},Z={href:"https://help.aliyun.com/document_detail/31837.htm#concept-zt4-cvy-5db",target:"_blank",rel:"noopener noreferrer"},Y=a("tr",null,[a("td",{style:{"text-align":"left"}},"访问密钥"),a("td",{style:{"text-align":"left"}},"AccessKey"),a("td",{style:{"text-align":"left"}},"AccessKey，简称 AK，指的是访问身份验证中用到的AccessKeyId 和AccessKeySecret。OSS通过使用AccessKeyId 和AccessKeySecret对称加密的方法来验证某个请求的发送者身份。AccessKeyId用于标识用户，AccessKeySecret是用户用于加密签名字符串和OSS用来验证签名字符串的密钥，其中AccessKeySecret 必须保密。")],-1),aa=e(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.3.1.png" alt="image-20220504223548831" tabindex="0" loading="lazy"><figcaption>image-20220504223548831</figcaption></figure><h5 id="_1、点击创建bucket" tabindex="-1"><a class="header-anchor" href="#_1、点击创建bucket" aria-hidden="true">#</a> 1、点击创建Bucket</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.3.1.png" alt="image-20220504223758657" tabindex="0" loading="lazy"><figcaption>image-20220504223758657</figcaption></figure><h5 id="_2、创建bucket" tabindex="-1"><a class="header-anchor" href="#_2、创建bucket" aria-hidden="true">#</a> 2、创建Bucket</h5><p>随便输个Bucket名称</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.3.2.1.png" alt="image-20220504225120652" tabindex="0" loading="lazy"><figcaption>image-20220504225120652</figcaption></figure><p>🚀读写权限的对话框中要选择&quot;继续修改&quot;</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.3.2.2.png" alt="image-20220504225234319" tabindex="0" loading="lazy"><figcaption>image-20220504225234319</figcaption></figure><h5 id="_3、点击上传文件" tabindex="-1"><a class="header-anchor" href="#_3、点击上传文件" aria-hidden="true">#</a> 3、点击上传文件</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.3.3.png" alt="image-20220504225642860" tabindex="0" loading="lazy"><figcaption>image-20220504225642860</figcaption></figure><h4 id="_4、使用java代码上传" tabindex="-1"><a class="header-anchor" href="#_4、使用java代码上传" aria-hidden="true">#</a> 4、使用Java代码上传</h4><h5 id="_1、上传策略" tabindex="-1"><a class="header-anchor" href="#_1、上传策略" aria-hidden="true">#</a> 1、上传策略</h5><p>用户先向应用服务器获取上传策略，应用服务器根据服务器内部存储的阿里云的账号和密码生成一个防伪签名，防伪签名包括<strong>授权令牌</strong>、阿里云哪个<strong>地址</strong>、哪个<strong>位值</strong>等信息，前端带着防伪签名和要上传的文件交给阿里云，阿里云可以验证这些签名是否正确。</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.0.png" alt="image-20220504230801395" tabindex="0" loading="lazy"><figcaption>image-20220504230801395</figcaption></figure><h5 id="_2、查看文档" tabindex="-1"><a class="header-anchor" href="#_2、查看文档" aria-hidden="true">#</a> 2、查看文档</h5><p>参考文档：https://help.aliyun.com/document_detail/195870.html</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.2.1.png" alt="image-20220504232317468" tabindex="0" loading="lazy"><figcaption>image-20220504232317468</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.2.2.png" alt="image-20220504232339802" tabindex="0" loading="lazy"><figcaption>image-20220504232339802</figcaption></figure><h5 id="_3、操作步骤" tabindex="-1"><a class="header-anchor" href="#_3、操作步骤" aria-hidden="true">#</a> 3、操作步骤</h5><p>参考文档：https://help.aliyun.com/document_detail/32006.html</p><h6 id="_1、添加依赖" tabindex="-1"><a class="header-anchor" href="#_1、添加依赖" aria-hidden="true">#</a> 1、添加依赖</h6><p>在<code>gulimall-product</code>模块内添加阿里云的oss依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;
    &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;
    &lt;version&gt;3.5.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.1.png" alt="image-20220504233153801" tabindex="0" loading="lazy"><figcaption>image-20220504233153801</figcaption></figure><h6 id="_2、添加测试方法" tabindex="-1"><a class="header-anchor" href="#_2、添加测试方法" aria-hidden="true">#</a> 2、添加测试方法</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 对象存储OSS测试
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">FileNotFoundException</span></span>
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>
   <span class="token comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span>
   <span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">&quot;oss-cn-beijing.aliyuncs.com&quot;</span><span class="token punctuation">;</span>
   <span class="token comment">// 云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，创建并使用RAM子账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建。</span>
   <span class="token class-name">String</span> accessKeyId <span class="token operator">=</span> <span class="token string">&quot;LTAl4FwfjSycd1APnuG9bjj&quot;</span><span class="token punctuation">;</span>
   <span class="token class-name">String</span> accessKeySecret <span class="token operator">=</span> <span class="token string">&quot;O6xaxyiWfSlitcOkSuK27ju4hXT5HI&quot;</span><span class="token punctuation">;</span>

   <span class="token comment">// 创建OSSClient实例。</span>
   <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 上传文件流。</span>
   <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token string">&quot;gulimall-hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.png&quot;</span><span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 关闭OSSClient。</span>
   ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上传成功。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、修改endpoint" tabindex="-1"><a class="header-anchor" href="#_3、修改endpoint" aria-hidden="true">#</a> 3、修改<code>endpoint</code></h6><p>点击概览，查看<code>Endpoint</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.3.png" alt="image-20220504235015158" tabindex="0" loading="lazy"><figcaption>image-20220504235015158</figcaption></figure><h6 id="_4、添加accesskey" tabindex="-1"><a class="header-anchor" href="#_4、添加accesskey" aria-hidden="true">#</a> 4、添加AccessKey</h6><p>1、点击<strong>AccessKey管理</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.4.1.png" alt="image-20220504235453599" tabindex="0" loading="lazy"><figcaption>image-20220504235453599</figcaption></figure><p>2、点击<strong>开始使用子用户AccessKey</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.4.2.png" alt="image-20220504235549106" tabindex="0" loading="lazy"><figcaption>image-20220504235549106</figcaption></figure><p>3、点击<strong>创建用户</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.4.3.png" alt="image-20220504235623910" tabindex="0" loading="lazy"><figcaption>image-20220504235623910</figcaption></figure><p>4、创建用户</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.4.4.png" alt="image-20220505000109142" tabindex="0" loading="lazy"><figcaption>image-20220505000109142</figcaption></figure><p>5、复制<strong>AccessKey ID</strong> 和 <strong>AccessKey Secret</strong></p><p><strong>AccessKey ID</strong> 和 <strong>AccessKey Secret</strong>只会出现一次，关掉这个页面就再也看不到了，因此测试成功之前不要关闭该页面</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.4.5.0.png" alt="image-20220505001844577" tabindex="0" loading="lazy"><figcaption>image-20220505001844577</figcaption></figure><p>6、为这个AccessKey添加权限</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.4.5.png" alt="image-20220505000806248" tabindex="0" loading="lazy"><figcaption>image-20220505000806248</figcaption></figure><p>7、选择<strong>管理对象存储服务(OSS)权限</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.4.6.png" alt="image-20220505001118061" tabindex="0" loading="lazy"><figcaption>image-20220505001118061</figcaption></figure><p>8、点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.4.7.png" alt="image-20220505001200826" tabindex="0" loading="lazy"><figcaption>image-20220505001200826</figcaption></figure><p>9、粘贴<strong>AccessKey ID</strong> 和 <strong>AccessKey Secret</strong></p><p>把<strong>AccessKey ID</strong> 和 <strong>AccessKey Secret</strong>粘贴到<code>accessKeyId</code>和<code>accessKeySecret</code></p><h6 id="_5、修改inputstream里面的文件的位置" tabindex="-1"><a class="header-anchor" href="#_5、修改inputstream里面的文件的位置" aria-hidden="true">#</a> 5、修改<strong>inputStream</strong>里面的文件的位置</h6><p>点击文件--&gt;右键--&gt;属性--&gt;安全--&gt;复制对象名称</p><p>把复制的文件路径粘贴到<code>FileInputStream</code>里面</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.5.png" alt="image-20220505161036130" tabindex="0" loading="lazy"><figcaption>image-20220505161036130</figcaption></figure><h6 id="_6、修改putobject方法的参数" tabindex="-1"><a class="header-anchor" href="#_6、修改putobject方法的参数" aria-hidden="true">#</a> 6、修改<code>putObject</code>方法的参数</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token string">&quot;gulimall-clouds&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.png&quot;</span><span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数为创建Bucket时的名称</p><p>第二个为上传的文件起一个文件名，可以通过<strong>阿里云提供的域名+该文件名</strong>访问这个图片</p><p>第三个不用改，为刚才图片的IO流</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.6.png" alt="image-20220505161839620" tabindex="0" loading="lazy"><figcaption>image-20220505161839620</figcaption></figure><h6 id="_7、测试-2" tabindex="-1"><a class="header-anchor" href="#_7、测试-2" aria-hidden="true">#</a> 7、测试</h6><p>可以看到，测试已经通过</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.7.1.png" alt="image-20220505162104781" tabindex="0" loading="lazy"><figcaption>image-20220505162104781</figcaption></figure><p>阿里云上已经看到图片了</p><p>复制这个URL即可直接访问</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.4.3.7.2.png" alt="image-20220505162407468" tabindex="0" loading="lazy"><figcaption>image-20220505162407468</figcaption></figure><h4 id="_5、oss整合spring-boot" tabindex="-1"><a class="header-anchor" href="#_5、oss整合spring-boot" aria-hidden="true">#</a> 5、OSS整合Spring Boot</h4>`,66),na={href:"https://github.com/alibaba/aliyun-spring-boot/blob/master/aliyun-spring-boot-samples/aliyun-oss-spring-boot-sample/README-zh.md",target:"_blank",rel:"noopener noreferrer"},sa=e(`<p>(<strong>先删掉刚才<code>gulimall-product</code>模块的<code>aliyun-sdk-oss</code>依赖和测试方法</strong>)</p><h5 id="_1、修改-pom-xml-文件" tabindex="-1"><a class="header-anchor" href="#_1、修改-pom-xml-文件" aria-hidden="true">#</a> 1、修改 pom.xml 文件</h5><p>修改<code>gulimall-common</code>模块 pom.xml 文件，引入 aliyun-oss-spring-boot-starter</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alicloud-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.5.1.1.png" alt="image-20220505165703522" tabindex="0" loading="lazy"><figcaption>image-20220505165703522</figcaption></figure><p>最新的参考文档<code>artifactId</code>已经改了</p><p>使用最新版的会报<code>Cannot resolve com.alibaba.cloud:aliyun-oss-spring-boot-starter:unknown</code>这个错误</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.5.1.2.png" alt="image-20220505165730515" tabindex="0" loading="lazy"><figcaption>image-20220505165730515</figcaption></figure><h5 id="_2、在配置文件中配置oss" tabindex="-1"><a class="header-anchor" href="#_2、在配置文件中配置oss" aria-hidden="true">#</a> 2、在配置文件中配置OSS</h5><p>在<code>gulimall-product</code>模块中的配置文件中配置OSS</p><p>使用自己的<code>access-key</code>和<code>secret-key</code>，配置自己地域的<code>endpoint</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">alicloud</span><span class="token punctuation">:</span>
      <span class="token key atrule">access-key</span><span class="token punctuation">:</span> LTAl4FwfjSycd1APnuG9bjj
      <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> O6xaxyiWfSlitcOkSuK27ju4hXT5HI
      <span class="token key atrule">oss</span><span class="token punctuation">:</span>
        <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>beijing.aliyuncs.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.5.2.png" alt="image-20220505170749948" tabindex="0" loading="lazy"><figcaption>image-20220505170749948</figcaption></figure><h5 id="_3、添加测试方法" tabindex="-1"><a class="header-anchor" href="#_3、添加测试方法" aria-hidden="true">#</a> 3、添加测试方法</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">OSSClient</span> ossClient<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpload2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>

   <span class="token comment">// 上传文件流。</span>
   <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\2.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token string">&quot;gulimall-anonymous&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2.png&quot;</span><span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// 关闭OSSClient。</span>
   ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上传成功。。。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的报错不用管，这个是IDEA没有识别出来</p><p>使用<code>@Resource</code>注解不报红，<code>@Resource</code>注解写在字段上按名称注入,<code>@Autowired</code>注解写在字段上按类型注入</p><p><code>putObject</code>方法的第一个参数要更改成自己的Bucket名</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.5.3.png" alt="image-20220505172414935" tabindex="0" loading="lazy"><figcaption>image-20220505172414935</figcaption></figure><h5 id="_4、测试" tabindex="-1"><a class="header-anchor" href="#_4、测试" aria-hidden="true">#</a> 4、测试</h5><p>重启<code>gulimall-common</code>模块和<code>gulimall-product</code>模块，运行测试方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.3.5.4.png" alt="image-20220505171924124" tabindex="0" loading="lazy"><figcaption>image-20220505171924124</figcaption></figure><h3 id="_4-2-4、新建gulimall-third-party模块" tabindex="-1"><a class="header-anchor" href="#_4-2-4、新建gulimall-third-party模块" aria-hidden="true">#</a> 4.2.4、新建<code>gulimall-third-party</code>模块</h3><p>(**先删掉刚才<code>gulimall-common</code>模块 pom.xml里面的spring-cloud-starter-alicloud-oss依赖、删掉<code>gulimall-product</code>模块中在配置文件中配置的OSS、删掉测试方法 **)</p><h4 id="_1、新建模块" tabindex="-1"><a class="header-anchor" href="#_1、新建模块" aria-hidden="true">#</a> 1、新建模块</h4><h5 id="_1、新建gulimall-third-party模块" tabindex="-1"><a class="header-anchor" href="#_1、新建gulimall-third-party模块" aria-hidden="true">#</a> 1、新建<code>gulimall-third-party</code>模块</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.atguigu.gulimall
gulimall-third-party
第三方服务
com.atguigu.gulimall.thirdparty
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.1.png" alt="image-20220505173619537" tabindex="0" loading="lazy"><figcaption>image-20220505173619537</figcaption></figure><h5 id="_2、选择web下的spring-web" tabindex="-1"><a class="header-anchor" href="#_2、选择web下的spring-web" aria-hidden="true">#</a> 2、选择Web下的Spring Web</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.2.png" alt="image-20220505173727336" tabindex="0" loading="lazy"><figcaption>image-20220505173727336</figcaption></figure><h5 id="_3、选择spring-cloud-routing里的openfeign" tabindex="-1"><a class="header-anchor" href="#_3、选择spring-cloud-routing里的openfeign" aria-hidden="true">#</a> 3、选择Spring Cloud Routing里的OpenFeign</h5><p>右边可以查看选择的依赖</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.3.png" alt="image-20220505173733736" tabindex="0" loading="lazy"><figcaption>image-20220505173733736</figcaption></figure><h5 id="_4、修改pom文件" tabindex="-1"><a class="header-anchor" href="#_4、修改pom文件" aria-hidden="true">#</a> 4、修改pom文件</h5><p>为了和老师使用的配置一样，我使用了老师的pom文件(这样可以少很多错误)</p><p><a href="code/4.2.4.1.4.pom.xml">点击查看完整pom文件</a></p><h5 id="_5、2-2-1-release没有找到" tabindex="-1"><a class="header-anchor" href="#_5、2-2-1-release没有找到" aria-hidden="true">#</a> 5、2.2.1.RELEASE没有找到</h5>`,37),ta={href:"https://repo1.maven.org/maven2/org/springframework/boot/spring-boot-parent/2.2.1.RELEASE/",target:"_blank",rel:"noopener noreferrer"},ea=e(`<p>刷新后报错，说<code>org.springframework.boot:spring-boot-starter-parent:2.2.1.RELEASE</code>没有发现</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Project &#39;org.springframework.boot:spring-boot-starter-parent:2.2.1.RELEASE&#39; not found
Project &#39;org.springframework.boot:spring-boot-starter-parent:2.2.1.RELEASE&#39; not found
Dependency &#39;org.springframework.cloud:spring-cloud-dependencies:Hoxton.RC1&#39; not found
Plugin &#39;org.springframework.boot:spring-boot-maven-plugin:&#39; not found
Plugin &#39;org.springframework.boot:spring-boot-maven-plugin:&#39; not found
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.5.1.png" alt="image-20220505204534787" tabindex="0" loading="lazy"><figcaption>image-20220505204534787</figcaption></figure><p>可以看到<code>2.2.1.RELEASE</code>和<code>2.1.8.RELEASE</code>的目录结构一样，所以应该不是maven的问题，应该是IDEA的问题</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.5.2.png" alt="image-20220505212548886" tabindex="0" loading="lazy"><figcaption>image-20220505212548886</figcaption></figure><p>可以点击File--&gt;Invalidate Caches / Restar 删除原来的缓存和索引，等待Idea重新构建缓存和索引</p><p>现在<code>2.2.1.RELEASE</code>已经不报错了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.5.3.png" alt="image-20220505214331561" tabindex="0" loading="lazy"><figcaption>image-20220505214331561</figcaption></figure><p><code>spring-boot-maven-plugin</code>这里报错</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.5.4.png" alt="image-20220505214448720" tabindex="0" loading="lazy"><figcaption>image-20220505214448720</figcaption></figure><p>可以发现其实已经下载了，应该又是IDEA的问题，但我重新Invalidate Caches / Restar 还是报错😥</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.5.5.png" alt="image-20220505220808846" tabindex="0" loading="lazy"><figcaption>image-20220505220808846</figcaption></figure><p>最后我删掉这个<code>spring-boot-maven-plugin</code>插件就好了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.5.6.png" alt="image-20220505221657720" tabindex="0" loading="lazy"><figcaption>image-20220505221657720</figcaption></figure><h5 id="_6、修改测试类" tabindex="-1"><a class="header-anchor" href="#_6、修改测试类" aria-hidden="true">#</a> 6、修改测试类</h5><p>由于不同<code>spring-boot-starter-parent</code>版本的测试类不一样，所以修改一下测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>thirdparty</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">GulimallThirdPartyApplicationTests</span> <span class="token punctuation">{</span>

   <span class="token annotation punctuation">@Test</span>
   <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>


   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试成功</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.6.1.png" alt="image-20220505222624423" tabindex="0" loading="lazy"><figcaption>image-20220505222624423</figcaption></figure><p>如果测试类ossClent报错，说没定义&quot;<strong>ossClent</strong>&quot;类路径资源</p><p>是因为没删<code>gulimall-common</code>模块 pom.xml里面的spring-cloud-starter-alicloud-oss依赖，删掉就行了或者先排除掉（后面还是要删的)</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alicloud-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.1.6.2.png" alt="image-20220505223841319" tabindex="0" loading="lazy"><figcaption>image-20220505223841319</figcaption></figure><p>同理，如果renren-fast报这个错也可以删掉这个依赖(后面还是要删的)</p><p>如果还不行可以使用相同的<code>spring-boot-starter-parent</code>版本</p><p>还是不行的话，可以先备份项目，删掉备份的<code>.deal</code>文件,重新导入备份的看看报不报错(这个操作比较微危险，一定要备份)</p><h4 id="_2、导入依赖" tabindex="-1"><a class="header-anchor" href="#_2、导入依赖" aria-hidden="true">#</a> 2、导入依赖</h4><p><code>gulimall-third-party</code>模块依赖<code>gulimall-common</code>模块，<a href="code/4.2.4.2.pom.xml">点击查看完整配置</a></p><p>需要排除<code>mybatis-plus</code>依赖，该模块不操作数据库，用不到</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.gulimall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>gulimall-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dependencyManagement</code>标签里添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>gulimall-third-party</code>模块用来处理第三方服务，不用放在<code>gulimall-common</code>公共模块里</p><p>在<code>gulimall-third-party</code>模块添加依赖，删掉<code>gulimall-common</code>的这个依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alicloud-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、注册到注册中心" tabindex="-1"><a class="header-anchor" href="#_3、注册到注册中心" aria-hidden="true">#</a> 3、注册到注册中心</h4><h5 id="_1、新建命名空间" tabindex="-1"><a class="header-anchor" href="#_1、新建命名空间" aria-hidden="true">#</a> 1、新建命名空间</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.1.png" alt="image-20220505225655873" tabindex="0" loading="lazy"><figcaption>image-20220505225655873</figcaption></figure><h5 id="_2、添加配置" tabindex="-1"><a class="header-anchor" href="#_2、添加配置" aria-hidden="true">#</a> 2、添加配置</h5><p>点击“配置管理”下的&quot;配置列表&quot;，点击&quot;third-party&quot;，然后点击**+**</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.2.1.png" alt="image-20220505230915820" tabindex="0" loading="lazy"><figcaption>image-20220505230915820</figcaption></figure><p>新建配置</p><p><code>access-key</code>和<code>secret-key</code>以及<code>endpoint</code>和<code>bucket</code>输入自己的</p><p><code>spring.cloud.alicloud.oss.bucket</code>为自己写的配置，不是官方有的配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">alicloud</span><span class="token punctuation">:</span>
      <span class="token key atrule">access-key</span><span class="token punctuation">:</span> LTAl4FwfjSycd1APnuG9bjj
      <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> O6xaxyiWfSlitcOkSuK27ju4hXT5HI
      <span class="token key atrule">oss</span><span class="token punctuation">:</span>
        <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>beijing.aliyuncs.com
        <span class="token key atrule">bucket</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>anonymous
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.2.2.png" alt="image-20220505231655295" tabindex="0" loading="lazy"><figcaption>image-20220505231655295</figcaption></figure><h5 id="_3、配置配置文件" tabindex="-1"><a class="header-anchor" href="#_3、配置配置文件" aria-hidden="true">#</a> 3、配置配置文件</h5><h6 id="_1、复制唯一标识" tabindex="-1"><a class="header-anchor" href="#_1、复制唯一标识" aria-hidden="true">#</a> 1、复制唯一标识</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.3.1.png" alt="image-20220505233148868" tabindex="0" loading="lazy"><figcaption>image-20220505233148868</figcaption></figure><h6 id="_2、配置配置中心" tabindex="-1"><a class="header-anchor" href="#_2、配置配置中心" aria-hidden="true">#</a> 2、配置配置中心</h6><p>新建&quot;bootstrap.properties&quot;文件，添加配置</p><p>namespace填刚刚复制的</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>spring.application.name=gulimall<span class="token punctuation">-</span>third<span class="token punctuation">-</span>party
spring.cloud.nacos.config.server<span class="token punctuation">-</span>addr=127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
spring.cloud.nacos.config.namespace=dd540e1b<span class="token punctuation">-</span>ffd6<span class="token punctuation">-</span>43e2<span class="token punctuation">-</span>b9af<span class="token punctuation">-</span>065130d391ec

<span class="token comment">#配置多配置文件</span>
<span class="token comment">#数据集id</span>
spring.cloud.nacos.config.ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.data<span class="token punctuation">-</span>id=oss.yml
<span class="token comment">#数据分组</span>
spring.cloud.nacos.config.ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.group=DEFAULT_GROUP
<span class="token comment">#动态刷新</span>
spring.cloud.nacos.config.ext<span class="token punctuation">-</span>config<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.refresh=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.3.2.png" alt="image-20220505233837829" tabindex="0" loading="lazy"><figcaption>image-20220505233837829</figcaption></figure><h6 id="_3、配置注册中心" tabindex="-1"><a class="header-anchor" href="#_3、配置注册中心" aria-hidden="true">#</a> 3、配置注册中心</h6><p>在&quot;application.yml&quot;中添加配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>third<span class="token punctuation">-</span>party
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">30000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.3.3.png" alt="image-20220505234015676" tabindex="0" loading="lazy"><figcaption>image-20220505234015676</figcaption></figure><h5 id="_4、添加-enablediscoveryclient注解" tabindex="-1"><a class="header-anchor" href="#_4、添加-enablediscoveryclient注解" aria-hidden="true">#</a> 4、添加<code>@EnableDiscoveryClient</code>注解</h5><p><code>gulimall-third-party</code>模块的启动类上添加<code>@EnableDiscoveryClient</code>注解</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.4.png" alt="image-20220505232327742" tabindex="0" loading="lazy"><figcaption>image-20220505232327742</figcaption></figure><h5 id="_5、添加测试方法" tabindex="-1"><a class="header-anchor" href="#_5、添加测试方法" aria-hidden="true">#</a> 5、添加测试方法</h5><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>@Autowired
OSSClient ossClient;

@Test
public void testUpload2() throws FileNotFoundException <span class="token punctuation">{</span>

   // 上传文件流。
   InputStream inputStream = new FileInputStream(&quot;C<span class="token punctuation">:</span>\\\\2.png&quot;);

   ossClient.putObject(&quot;gulimall<span class="token punctuation">-</span>anonymous&quot;<span class="token punctuation">,</span> <span class="token string">&quot;2222.png&quot;</span><span class="token punctuation">,</span> inputStream);

   // 关闭OSSClient。
   ossClient.shutdown();
   System.out.println(&quot;上传成功。。。&quot;);
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6、测试是否能上传" tabindex="-1"><a class="header-anchor" href="#_6、测试是否能上传" aria-hidden="true">#</a> 6、测试是否能上传</h5><p>可以看到运行成功了</p><p>代码报红不用管，那是IDEA没有检测到，其实可以注入进去的</p><p>使用<code>@Resource</code>注解不报红，<code>@Resource</code>注解写在字段上按名称注入,<code>@Autowired</code>注解写在字段上按类型注入</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.6.1.png" alt="image-20220505235720081" tabindex="0" loading="lazy"><figcaption>image-20220505235720081</figcaption></figure><p>已经上传成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.3.6.2.png" alt="image-20220506081810670" tabindex="0" loading="lazy"><figcaption>image-20220506081810670</figcaption></figure><h5 id="_7、修改配置" tabindex="-1"><a class="header-anchor" href="#_7、修改配置" aria-hidden="true">#</a> 7、修改配置</h5><p><code>access-key</code>和<code>secret-key</code>以及<code>endpoint</code>和<code>bucket</code>输入自己的</p><p>在开发阶段，可以在&quot;application.yml&quot;中修改配置以方便调试，项目完成后，再上传到配置中心</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
    <span class="token key atrule">alicloud</span><span class="token punctuation">:</span>
      <span class="token key atrule">access-key</span><span class="token punctuation">:</span> LTAl4FwfjSycd1APnuG9bjj
      <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> O6xaxyiWfSlitcOkSuK27ju4hXT5HI
      <span class="token key atrule">oss</span><span class="token punctuation">:</span>
        <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>beijing.aliyuncs.com
        <span class="token key atrule">bucket</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>anonymous

  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>third<span class="token punctuation">-</span>party

<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">30000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、编写方法-1" tabindex="-1"><a class="header-anchor" href="#_4、编写方法-1" aria-hidden="true">#</a> 4、编写方法</h4><h5 id="_1、添加接口" tabindex="-1"><a class="header-anchor" href="#_1、添加接口" aria-hidden="true">#</a> 1、添加接口</h5><p>在<code>com.atguigu.gulimall.thirdparty.controller</code>目录下新建<code>OssController</code>类,编写获取密钥的工具方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>thirdparty<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">BinaryUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">MatchMode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PolicyConditions</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/6
 * @Description:
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token comment">//@RefreshScope 自动刷新配置(使用最新的配置中心配置)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssController</span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.cloud.alicloud.oss.endpoint}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.cloud.alicloud.oss.bucket}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> bucket<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.cloud.alicloud.access-key}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> accessId<span class="token punctuation">;</span>

    <span class="token comment">//@Autowired(required = false)</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">OSSClient</span> ossClient<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/oss/policy&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//https://gulimall-anonymous.oss-cn-beijing.aliyuncs.com/1.png</span>
        <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token string">&quot;https://&quot;</span> <span class="token operator">+</span> bucket <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>endpoint<span class="token punctuation">;</span> <span class="token comment">// host的格式为 bucketname.endpoint</span>
        <span class="token comment">// callbackUrl为 上传回调服务器的URL，请将下面的IP和Port配置为您自己的真实信息。</span>
<span class="token comment">//        String callbackUrl = &quot;http://88.88.88.88:8888&quot;;</span>
        <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> dir <span class="token operator">=</span> format <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 用户上传文件时指定的前缀。</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> respMap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> expireTime <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> expireEndTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expireTime <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
            <span class="token class-name">Date</span> expiration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expireEndTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">PolicyConditions</span> policyConds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PolicyConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            policyConds<span class="token punctuation">.</span><span class="token function">addConditionItem</span><span class="token punctuation">(</span><span class="token class-name">PolicyConditions</span><span class="token punctuation">.</span><span class="token constant">COND_CONTENT_LENGTH_RANGE</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1048576000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            policyConds<span class="token punctuation">.</span><span class="token function">addConditionItem</span><span class="token punctuation">(</span><span class="token class-name">MatchMode<span class="token punctuation">.</span>StartWith</span><span class="token punctuation">,</span> <span class="token class-name">PolicyConditions</span><span class="token punctuation">.</span><span class="token constant">COND_KEY</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">String</span> postPolicy <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">generatePostPolicy</span><span class="token punctuation">(</span>expiration<span class="token punctuation">,</span> policyConds<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> binaryData <span class="token operator">=</span> postPolicy<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> encodedPolicy <span class="token operator">=</span> <span class="token class-name">BinaryUtil</span><span class="token punctuation">.</span><span class="token function">toBase64String</span><span class="token punctuation">(</span>binaryData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> postSignature <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">calculatePostSignature</span><span class="token punctuation">(</span>postPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>

            respMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            respMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;accessid&quot;</span><span class="token punctuation">,</span> accessId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            respMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;policy&quot;</span><span class="token punctuation">,</span> encodedPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            respMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;signature&quot;</span><span class="token punctuation">,</span> postSignature<span class="token punctuation">)</span><span class="token punctuation">;</span>
            respMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;dir&quot;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
            respMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;host&quot;</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>
            respMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;expire&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>expireEndTime <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// respMap.put(&quot;expire&quot;, formatISO8601Date(expiration));</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Assert.fail(e.getMessage());</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> respMap<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.4.1.png" alt="image-20220506102103657" tabindex="0" loading="lazy"><figcaption>image-20220506102103657</figcaption></figure><h5 id="_2、浏览器测试接口" tabindex="-1"><a class="header-anchor" href="#_2、浏览器测试接口" aria-hidden="true">#</a> 2、浏览器测试接口</h5><p>浏览器输入 http://localhost:30000/oss/policy</p><p>已经正确访问了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.4.2.png" alt="image-20220506102230145" tabindex="0" loading="lazy"><figcaption>image-20220506102230145</figcaption></figure><h5 id="_3、添加配置" tabindex="-1"><a class="header-anchor" href="#_3、添加配置" aria-hidden="true">#</a> 3、添加配置</h5><p>在<code>gulimall-gateway</code>模块添加配置(一定要写在<code>admin_route</code>前面)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- id: third_party_route
  uri: lb://gulimall-third-party
  predicates:
    - Path=/api/product/**
  filters:
    #http://localhost:88/api/thirdparty/oss/policy 变为 http://localhost:30000/oss/policy
    - RewritePath=/api/thirdparty/(?&lt;segment&gt;/?.*),/$\\{segment}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.4.3.png" alt="image-20220506104808034" tabindex="0" loading="lazy"><figcaption>image-20220506104808034</figcaption></figure><h5 id="_4、测试是否可以通过网关访问" tabindex="-1"><a class="header-anchor" href="#_4、测试是否可以通过网关访问" aria-hidden="true">#</a> 4、测试是否可以通过网关访问</h5><h6 id="_1、访问失败了" tabindex="-1"><a class="header-anchor" href="#_1、访问失败了" aria-hidden="true">#</a> 1、访问失败了</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.4.4.1.png" alt="image-20220506105012117" tabindex="0" loading="lazy"><figcaption>image-20220506105012117</figcaption></figure><h6 id="_2、查看日志" tabindex="-1"><a class="header-anchor" href="#_2、查看日志" aria-hidden="true">#</a> 2、查看日志</h6><p>没有这个日志的是因为日志级别没有调成<code>debug</code>，调整日志级别就行了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>logging:
  level:
    root: debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现匹配到<code>admin_route</code></p><p>这是因为我<code>- Path=/api/product/**</code>这里写错了，应该写成<code>- Path=/api/thirdparty/**</code></p><p>因为写错了，所以没匹配的,使用了默认的<code>admin_route</code>(所有前面没匹配到的，只要是path是以/api/开头的都会匹配到<code>admin_route</code>)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.4.4.2.png" alt="image-20220506104658815" tabindex="0" loading="lazy"><figcaption>image-20220506104658815</figcaption></figure><h6 id="_3、修改配置" tabindex="-1"><a class="header-anchor" href="#_3、修改配置" aria-hidden="true">#</a> 3、修改配置</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- id: third_party_route
  uri: lb://gulimall-third-party
  predicates:
    - Path=/api/thirdparty/**
  filters:
    #http://localhost:88/api/thirdparty/oss/policy 变为 http://localhost:30000/oss/policy
    - RewritePath=/api/thirdparty/(?&lt;segment&gt;/?.*),/$\\{segment}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.4.4.3.png" alt="image-20220506110148531" tabindex="0" loading="lazy"><figcaption>image-20220506110148531</figcaption></figure><h6 id="_4、重新测试" tabindex="-1"><a class="header-anchor" href="#_4、重新测试" aria-hidden="true">#</a> 4、重新测试</h6><p>已经访问成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.4.4.4.4.png" alt="image-20220506110317459" tabindex="0" loading="lazy"><figcaption>image-20220506110317459</figcaption></figure><h3 id="_4-2-5、编写图片上传前端代码" tabindex="-1"><a class="header-anchor" href="#_4-2-5、编写图片上传前端代码" aria-hidden="true">#</a> 4.2.5、编写图片上传前端代码</h3><h4 id="_1、复制文件" tabindex="-1"><a class="header-anchor" href="#_1、复制文件" aria-hidden="true">#</a> 1、复制文件</h4><p>复制<code>1.分布式基础（全栈开发篇）\\资料源码.zip\\docs\\代码\\前端</code>目录下<code>upload</code>文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.1.png" alt="image-20220506111426347" tabindex="0" loading="lazy"><figcaption>image-20220506111426347</figcaption></figure><h4 id="_2、修改bucket域名" tabindex="-1"><a class="header-anchor" href="#_2、修改bucket域名" aria-hidden="true">#</a> 2、修改Bucket域名</h4><h5 id="_1、复制bucket外网访问域名" tabindex="-1"><a class="header-anchor" href="#_1、复制bucket外网访问域名" aria-hidden="true">#</a> 1、复制Bucket外网访问域名</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.2.1.png" alt="image-20220506201245636" tabindex="0" loading="lazy"><figcaption>image-20220506201245636</figcaption></figure><h5 id="_2、粘贴到singleupload-vue" tabindex="-1"><a class="header-anchor" href="#_2、粘贴到singleupload-vue" aria-hidden="true">#</a> 2、粘贴到<code>singleUpload.vue</code></h5><p>粘贴到<code>src\\components\\upload\\singleUpload.vue</code>里的<code>el-upload</code>标签，<code>action</code>属性里面</p><p>注意：前面有&quot;<strong>http://</strong>&quot;</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.2.2.png" alt="image-20220506201710959" tabindex="0" loading="lazy"><figcaption>image-20220506201710959</figcaption></figure><h5 id="_3、粘贴到multiupload-vue" tabindex="-1"><a class="header-anchor" href="#_3、粘贴到multiupload-vue" aria-hidden="true">#</a> 3、粘贴到<code>multiUpload.vue</code></h5><p>粘贴到<code>src\\components\\upload\\multiUpload.vue</code>里的<code>el-upload</code>标签，<code>action</code>属性里面</p><p>注意：前面有&quot;<strong>http://</strong>&quot;</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.2.3.png" alt="image-20220506201943305" tabindex="0" loading="lazy"><figcaption>image-20220506201943305</figcaption></figure><h5 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h5><h6 id="_1、multiupload-vue文件" tabindex="-1"><a class="header-anchor" href="#_1、multiupload-vue文件" aria-hidden="true">#</a> 1、<code>multiUpload.vue</code>文件</h6><p><a href="code/4.2.5.2.4.1.multiUpload.vue">点击查看完整代码</a></p><h6 id="_2、policy-js文件" tabindex="-1"><a class="header-anchor" href="#_2、policy-js文件" aria-hidden="true">#</a> 2、<code>policy.js</code>文件</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;@/utils/httpRequest.js&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/thirdparty/oss/policy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">params</span><span class="token operator">:</span> http<span class="token punctuation">.</span><span class="token function">adornParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、singleupload-vue文件" tabindex="-1"><a class="header-anchor" href="#_3、singleupload-vue文件" aria-hidden="true">#</a> 3、<code>singleUpload.vue</code>文件</h6><p><a href="code/4.2.5.2.4.3.singleUpload.vue">点击查看完整代码</a></p><h4 id="_3、使用upload上传组件" tabindex="-1"><a class="header-anchor" href="#_3、使用upload上传组件" aria-hidden="true">#</a> 3、使用Upload上传组件</h4>`,126),pa=a("code",null,"element-ui",-1),oa=a("strong",null,"Upload 上传",-1),ca={href:"https://element.eleme.io/#/zh-CN/component/upload",target:"_blank",rel:"noopener noreferrer"},ia=e(`<p>上传组件已经封装在刚刚复制到upload里面了</p><h4 id="_4、上传图片报错" tabindex="-1"><a class="header-anchor" href="#_4、上传图片报错" aria-hidden="true">#</a> 4、上传图片报错</h4><h5 id="_1、查看请求" tabindex="-1"><a class="header-anchor" href="#_1、查看请求" aria-hidden="true">#</a> 1、查看请求</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.4.1.png" alt="image-20220506203350269" tabindex="0" loading="lazy"><figcaption>image-20220506203350269</figcaption></figure><h5 id="_2、查看匹配到的路由" tabindex="-1"><a class="header-anchor" href="#_2、查看匹配到的路由" aria-hidden="true">#</a> 2、查看匹配到的路由</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.4.2.png" alt="image-20220506203432683" tabindex="0" loading="lazy"><figcaption>image-20220506203432683</figcaption></figure><h5 id="_3、查看对应路由" tabindex="-1"><a class="header-anchor" href="#_3、查看对应路由" aria-hidden="true">#</a> 3、查看对应路由</h5><p>发现我<code>gulimall-third-party</code>没启动😰</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.4.3.png" alt="image-20220506203844785" tabindex="0" loading="lazy"><figcaption>image-20220506203844785</figcaption></figure><h5 id="_4、启动gulimall-third-party" tabindex="-1"><a class="header-anchor" href="#_4、启动gulimall-third-party" aria-hidden="true">#</a> 4、启动<code>gulimall-third-party</code></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.4.4.png" alt="image-20220506204230648" tabindex="0" loading="lazy"><figcaption>image-20220506204230648</figcaption></figure><h5 id="_5、已经上传成功了" tabindex="-1"><a class="header-anchor" href="#_5、已经上传成功了" aria-hidden="true">#</a> 5、已经上传成功了</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.4.5.png" alt="image-20220506204119458" tabindex="0" loading="lazy"><figcaption>image-20220506204119458</figcaption></figure><h5 id="_6、跨域问题" tabindex="-1"><a class="header-anchor" href="#_6、跨域问题" aria-hidden="true">#</a> 6、跨域问题</h5><p>如果还是上传不了，可以看看是不是报<strong>403</strong>或<strong>CROS</strong></p><p>如果是报<strong>403</strong>或<strong>CROS</strong>可以在阿里云OSS里面配置跨域规则</p><h6 id="_1、点击跨域设置" tabindex="-1"><a class="header-anchor" href="#_1、点击跨域设置" aria-hidden="true">#</a> 1、点击跨域设置</h6><p>进入你的Bucket的控制台，点击**&quot;权限管理**&quot;--&gt;&quot;跨域设置&quot;</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.4.6.1.png" alt="image-20220506205320072" tabindex="0" loading="lazy"><figcaption>image-20220506205320072</figcaption></figure><h6 id="_2、点击跨域设置里的设置" tabindex="-1"><a class="header-anchor" href="#_2、点击跨域设置里的设置" aria-hidden="true">#</a> 2、点击<strong>跨域设置</strong>里的<strong>设置</strong></h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.4.6.2.png" alt="image-20220506205451008" tabindex="0" loading="lazy"><figcaption>image-20220506205451008</figcaption></figure><h6 id="_3、创建规则" tabindex="-1"><a class="header-anchor" href="#_3、创建规则" aria-hidden="true">#</a> 3、创建规则</h6><p>点击创建规则，输入规则就可以了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.4.6.3.png" alt="image-20220506211944153" tabindex="0" loading="lazy"><figcaption>image-20220506211944153</figcaption></figure><h4 id="_5、修改签名方法" tabindex="-1"><a class="header-anchor" href="#_5、修改签名方法" aria-hidden="true">#</a> 5、修改签名方法</h4><h5 id="_1、获取数据的路径" tabindex="-1"><a class="header-anchor" href="#_1、获取数据的路径" aria-hidden="true">#</a> 1、获取数据的路径</h5><p>可以看到路径为响应里的<code>data</code>字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.1.png" alt="image-20220506210529130" tabindex="0" loading="lazy"><figcaption>image-20220506210529130</figcaption></figure><h5 id="_2、查看请求响应的数据" tabindex="-1"><a class="header-anchor" href="#_2、查看请求响应的数据" aria-hidden="true">#</a> 2、查看请求响应的数据</h5><p>可以看到响应的数据直接返回了，没有封装在data中</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.2.png" alt="image-20220506210632683" tabindex="0" loading="lazy"><figcaption>image-20220506210632683</figcaption></figure><h5 id="_3、修改返回类型" tabindex="-1"><a class="header-anchor" href="#_3、修改返回类型" aria-hidden="true">#</a> 3、修改返回类型</h5><p>修改<code>com.atguigu.gulimall.thirdparty.controller</code>下的<code>OssController</code>类的<code>policy</code>方法返回类型</p><p>然后重启项目</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.3.png" alt="image-20220506211124975" tabindex="0" loading="lazy"><figcaption>image-20220506211124975</figcaption></figure><h5 id="_4、跨域错误" tabindex="-1"><a class="header-anchor" href="#_4、跨域错误" aria-hidden="true">#</a> 4、跨域错误</h5><h6 id="_1、查看控制台" tabindex="-1"><a class="header-anchor" href="#_1、查看控制台" aria-hidden="true">#</a> 1、查看控制台</h6><p>发现有跨域错误</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.4.1.png" alt="image-20220506211741596" tabindex="0" loading="lazy"><figcaption>image-20220506211741596</figcaption></figure><h6 id="_2、点击概要" tabindex="-1"><a class="header-anchor" href="#_2、点击概要" aria-hidden="true">#</a> 2、点击概要</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.4.2.png" alt="image-20220506212310759" tabindex="0" loading="lazy"><figcaption>image-20220506212310759</figcaption></figure><h6 id="_3、跨域访问" tabindex="-1"><a class="header-anchor" href="#_3、跨域访问" aria-hidden="true">#</a> 3、跨域访问</h6><p>往下滑，找到跨域访问</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.4.3.png" alt="image-20220506212332731" tabindex="0" loading="lazy"><figcaption>image-20220506212332731</figcaption></figure><h6 id="_4、创建规则" tabindex="-1"><a class="header-anchor" href="#_4、创建规则" aria-hidden="true">#</a> 4、创建规则</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.4.4.png" alt="image-20220506212515400" tabindex="0" loading="lazy"><figcaption>image-20220506212515400</figcaption></figure><h6 id="_5、再次上传" tabindex="-1"><a class="header-anchor" href="#_5、再次上传" aria-hidden="true">#</a> 5、再次上传</h6><p>再次上传，图片已经回显出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.4.5.png" alt="image-20220506212726224" tabindex="0" loading="lazy"><figcaption>image-20220506212726224</figcaption></figure><h5 id="_5、修改路径" tabindex="-1"><a class="header-anchor" href="#_5、修改路径" aria-hidden="true">#</a> 5、修改路径</h5><h6 id="_1、拼路径的时候多了一条杠" tabindex="-1"><a class="header-anchor" href="#_1、拼路径的时候多了一条杠" aria-hidden="true">#</a> 1、拼路径的时候多了一条杠</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.5.1.png" alt="image-20220506213014421" tabindex="0" loading="lazy"><figcaption>image-20220506213014421</figcaption></figure><h6 id="_2、删除" tabindex="-1"><a class="header-anchor" href="#_2、删除" aria-hidden="true">#</a> 2、删除&quot;/&quot;</h6><p>把这个删掉就行了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.5.2.png" alt="image-20220506213238514" tabindex="0" loading="lazy"><figcaption>image-20220506213238514</figcaption></figure><h6 id="_3、重新上传" tabindex="-1"><a class="header-anchor" href="#_3、重新上传" aria-hidden="true">#</a> 3、重新上传</h6><p>图片已经在日期对应的文件夹下了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.5.5.5.3.png" alt="image-20220506213419593" tabindex="0" loading="lazy"><figcaption>image-20220506213419593</figcaption></figure><h3 id="_4-2-6、前端表单校验" tabindex="-1"><a class="header-anchor" href="#_4-2-6、前端表单校验" aria-hidden="true">#</a> 4.2.6、前端表单校验</h3><h4 id="_1、修改按钮激活值" tabindex="-1"><a class="header-anchor" href="#_1、修改按钮激活值" aria-hidden="true">#</a> 1、修改按钮激活值</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-switch</span>
    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataForm.showStatus<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#13ce66<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">inactive-color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#ff4949<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:active-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:inactive-value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-switch</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.1.png" alt="image-20220506214954428" tabindex="0" loading="lazy"><figcaption>image-20220506214954428</figcaption></figure><h4 id="_2、新增商品" tabindex="-1"><a class="header-anchor" href="#_2、新增商品" aria-hidden="true">#</a> 2、新增商品</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.2.png" alt="image-20220506215355124" tabindex="0" loading="lazy"><figcaption>image-20220506215355124</figcaption></figure><h4 id="_3、修改品牌logo地址" tabindex="-1"><a class="header-anchor" href="#_3、修改品牌logo地址" aria-hidden="true">#</a> 3、修改品牌logo地址</h4><h5 id="_1、品牌logo地址为文字" tabindex="-1"><a class="header-anchor" href="#_1、品牌logo地址为文字" aria-hidden="true">#</a> 1、品牌logo地址为文字</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.1.png" alt="image-20220506215446629" tabindex="0" loading="lazy"><figcaption>image-20220506215446629</figcaption></figure><h5 id="_2、自定义列模板" tabindex="-1"><a class="header-anchor" href="#_2、自定义列模板" aria-hidden="true">#</a> 2、自定义列模板</h5>`,68),la=a("strong",null,"Table表格",-1),ua={href:"https://element.eleme.io/#/zh-CN/component/table",target:"_blank",rel:"noopener noreferrer"},ra=e(`<p>通过 <code>Scoped slot</code> 可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-icon-time<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">margin-left</span><span class="token punctuation">:</span> 10px</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>{{ scope.row.date }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),da=a("strong",null,"Image图片",-1),ka={href:"https://element.eleme.io/#/zh-CN/component/image",target:"_blank",rel:"noopener noreferrer"},ma=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-image</span>
  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px</span><span class="token punctuation">&quot;</span></span></span>
  <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:fit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contain<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-image</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此修改<code>src\\views\\modules\\product\\brand.vue</code>文件里的<code>品牌logo地址</code>列为</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
  <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logo<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">header-align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>品牌logo地址<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-image</span>
      <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 80px</span><span class="token punctuation">&quot;</span></span></span>
      <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope.row.logo<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:fit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>contain<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-image</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、查看页面" tabindex="-1"><a class="header-anchor" href="#_3、查看页面" aria-hidden="true">#</a> 3、查看页面</h5><h6 id="_1、图片显示不出来" tabindex="-1"><a class="header-anchor" href="#_1、图片显示不出来" aria-hidden="true">#</a> 1、图片显示不出来</h6><p>查看报错可以看到，<code>&lt;el-image&gt;</code>组件没有正确注入进来</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;el-image&gt; - did you register the component correctly：您是否正确注册了&lt;el-image&gt;组件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.1.png" alt="image-20220506223735304" tabindex="0" loading="lazy"><figcaption>image-20220506223735304</figcaption></figure><h6 id="_2、查看引入的element-ui依赖" tabindex="-1"><a class="header-anchor" href="#_2、查看引入的element-ui依赖" aria-hidden="true">#</a> 2、查看引入的<code>element-ui</code>依赖</h6><p>在<code>src\\main.js</code>文件中可以看到，<code>element-ui</code>引入在<code>src/element-ui</code></p><p><code>@</code>符号位自定义的，指向src目录</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.2.1.png" alt="image-20220506225556450" tabindex="0" loading="lazy"><figcaption>image-20220506225556450</figcaption></figure><p>在<code>src\\element-ui\\index.js</code>文件中搜索&quot;<strong>Image</strong>&quot;,可以看到没有这个组件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.2.2.png" alt="image-20220506225431970" tabindex="0" loading="lazy"><figcaption>image-20220506225431970</figcaption></figure><h6 id="_3、添加组件" tabindex="-1"><a class="header-anchor" href="#_3、添加组件" aria-hidden="true">#</a> 3、添加组件</h6><p>修改<code>import</code>和<code>Vue.use</code>里面的内容</p>`,16),ga=a("code",null,"element-ui",-1),va={href:"https://element.eleme.io/#/zh-CN/component/quickstart",target:"_blank",rel:"noopener noreferrer"},ba=e(`<p><a href="code/4.2.6.3.3.3.js">点击查看默认配置</a></p><h6 id="_4、没有发现这些依赖" tabindex="-1"><a class="header-anchor" href="#_4、没有发现这些依赖" aria-hidden="true">#</a> 4、没有发现这些依赖</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>These dependencies were not found: 未找到这些依赖项
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删掉这些依赖就行了</p><p><a href="code/4.2.6.3.3.4.index.js">点击查看<code>src\\element-ui\\index.js</code>完整代码</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.3.png" alt="image-20220506223507564" tabindex="0" loading="lazy"><figcaption>image-20220506223507564</figcaption></figure><h6 id="_5、fit未定义" tabindex="-1"><a class="header-anchor" href="#_5、fit未定义" aria-hidden="true">#</a> 5、<code>fit</code>未定义</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> Property or method &quot;fit&quot; is not defined on the instance but referenced during render
 属性或方法“fit”未在实例上定义，但在渲染期间引用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.5.1.png" alt="image-20220506230513442" tabindex="0" loading="lazy"><figcaption>image-20220506230513442</figcaption></figure><p>实例用的&quot;<code>:</code>&quot;为动态绑定，由于<code>data</code>中没设<code>content</code>，所以删掉这个&quot;<code>:</code>&quot;就行了，不使用动态绑定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.5.2.png" alt="image-20220506231648179" tabindex="0" loading="lazy"><figcaption>image-20220506231648179</figcaption></figure><h6 id="_6、查看图片" tabindex="-1"><a class="header-anchor" href="#_6、查看图片" aria-hidden="true">#</a> 6、查看图片</h6><p>可以看到图片已经出来了，不过是显示的问题</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.6.1.png" alt="image-20220506231408833" tabindex="0" loading="lazy"><figcaption>image-20220506231408833</figcaption></figure><p>查看显示位置</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.6.2.png" alt="image-20220506232005751" tabindex="0" loading="lazy"><figcaption>image-20220506232005751</figcaption></figure><p>最后还是用了原生的img标签</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.6.3.png" alt="image-20220506233108057" tabindex="0" loading="lazy"><figcaption>image-20220506233108057</figcaption></figure><p>图片成功显示</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.3.3.6.4.png" alt="image-20220506233245174" tabindex="0" loading="lazy"><figcaption>image-20220506233245174</figcaption></figure><h4 id="_4、自定义校验规则" tabindex="-1"><a class="header-anchor" href="#_4、自定义校验规则" aria-hidden="true">#</a> 4、自定义校验规则</h4>`,21),ha=a("code",null,"Form 表单",-1),fa={href:"https://element.eleme.io/#/zh-CN/component/form",target:"_blank",rel:"noopener noreferrer"},ya=e(`<h5 id="_1、修改校验规则" tabindex="-1"><a class="header-anchor" href="#_1、修改校验规则" aria-hidden="true">#</a> 1、修改校验规则</h5><p>修改<code>firstLetter</code>和<code>sort</code>的校验规则</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">firstLetter</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span> value <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;首字母必须填写&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;首字母必须为单个的英文大写或小写&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">&quot;blur&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span> value<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;排序字段必须填写&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;排序字段必须为一个大于0的整数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">&quot;blur&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.4.1.png" alt="image-20220506235834283" tabindex="0" loading="lazy"><figcaption>image-20220506235834283</figcaption></figure><h5 id="_2、修改数据字段" tabindex="-1"><a class="header-anchor" href="#_2、修改数据字段" aria-hidden="true">#</a> 2、修改数据字段</h5><p>修改showStatus字段默认为1(显示)</p><p>修改<code>sort</code>字段默认为0</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.4.2.png" alt="image-20220506235221089" tabindex="0" loading="lazy"><figcaption>image-20220506235221089</figcaption></figure><h5 id="_3、sort标识为数组" tabindex="-1"><a class="header-anchor" href="#_3、sort标识为数组" aria-hidden="true">#</a> 3、<code>sort</code>标识为数组</h5><p><code>v-moudel</code>添加<code>.number</code>标识该数据为数字</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.6.4.3.png" alt="image-20220506235509229" tabindex="0" loading="lazy"><figcaption>image-20220506235509229</figcaption></figure><h3 id="_4-2-7、后端校验" tabindex="-1"><a class="header-anchor" href="#_4-2-7、后端校验" aria-hidden="true">#</a> 4.2.7、后端校验</h3><h4 id="_1、添加依赖-1" tabindex="-1"><a class="header-anchor" href="#_1、添加依赖-1" aria-hidden="true">#</a> 1、添加依赖</h4><p>新版本需要在<code>pom.xml</code>文件里添加依赖(老版本不需要)</p><p>引入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、添加校验规则注解" tabindex="-1"><a class="header-anchor" href="#_2、添加校验规则注解" aria-hidden="true">#</a> 2、添加校验规则注解</h4><p>在实体类里需要校验的字段上添加校验注解</p><p>需要导入<code>javax.validation.constraints</code>包下的校验规则，在<code>constraints</code>上按ctrl键并点击即可查看所有校验注解</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.2.png" alt="image-20220507091854747" tabindex="0" loading="lazy"><figcaption>image-20220507091854747</figcaption></figure><h4 id="_3、标识需要校验" tabindex="-1"><a class="header-anchor" href="#_3、标识需要校验" aria-hidden="true">#</a> 3、标识需要校验</h4><p>在controller层需要校验的参数对象的左边添加<code>@Valid</code>注解</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.3.png" alt="image-20220507092700948" tabindex="0" loading="lazy"><figcaption>image-20220507092700948</figcaption></figure><h4 id="_4、测试-1" tabindex="-1"><a class="header-anchor" href="#_4、测试-1" aria-hidden="true">#</a> 4、测试</h4><p>重启<code>gulimall-product</code>项目后进行测试</p><p>url: http://localhost:10000/product/brand/save</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.4.1.png" alt="image-20220507093733971" tabindex="0" loading="lazy"><figcaption>image-20220507093733971</figcaption></figure><p>状态为<strong>400</strong>，消息为<strong>不能为空</strong>，校验失败的对象为<code>brandEntity</code>,字段为<code>name</code>，失败的原因是<code>name</code>的值为空串</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.4.2.png" alt="image-20220507094322011" tabindex="0" loading="lazy"><figcaption>image-20220507094322011</figcaption></figure><h4 id="_5、自定义显示格式" tabindex="-1"><a class="header-anchor" href="#_5、自定义显示格式" aria-hidden="true">#</a> 5、自定义显示格式</h4><h5 id="_1、添加错误消息提示" tabindex="-1"><a class="header-anchor" href="#_1、添加错误消息提示" aria-hidden="true">#</a> 1、添加错误消息提示</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.5.1.png" alt="image-20220507095020241" tabindex="0" loading="lazy"><figcaption>image-20220507095020241</figcaption></figure><h5 id="_2、修改返回样式" tabindex="-1"><a class="header-anchor" href="#_2、修改返回样式" aria-hidden="true">#</a> 2、修改返回样式</h5><p>给校验的bean后紧跟一个<code>org.springframework.validation</code>包下的<code>BindingResult</code>,就可以获取到校验的结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BrandEntity</span> brand<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          result<span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
              <span class="token comment">//错误消息</span>
              <span class="token class-name">String</span> message <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">//bean的字段名</span>
              <span class="token class-name">String</span> name <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">&quot;提交的数据不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
	  brandService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.5.2.png" alt="image-20220507100430365" tabindex="0" loading="lazy"><figcaption>image-20220507100430365</figcaption></figure><h4 id="_6、重新测试" tabindex="-1"><a class="header-anchor" href="#_6、重新测试" aria-hidden="true">#</a> 6、重新测试</h4><p>重启<code>gulimall-product</code>项目后重新进行测试</p><p>可以看到已经按照想要的格式显示了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.6.png" alt="image-20220507102736630" tabindex="0" loading="lazy"><figcaption>image-20220507102736630</figcaption></figure><h4 id="_7、添加其他校验规则" tabindex="-1"><a class="header-anchor" href="#_7、添加其他校验规则" aria-hidden="true">#</a> 7、添加其他校验规则</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableName</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 品牌
 *
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@email</span> 2185180175@qq.com
 * <span class="token keyword">@date</span> 2022-04-17 18:19:58
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;pms_brand&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 品牌id
    */</span>
   <span class="token annotation punctuation">@TableId</span>
   <span class="token keyword">private</span> <span class="token class-name">Long</span> brandId<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 品牌名
    * @NotBlank: 不能为空，必须包含一个非空白字符
    */</span>
   <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;品牌名不能为空&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 品牌logo地址
    * @NotEmpty ：The annotated element must not be <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> nor empty
    *              可以接收 CharSequence、Collection、Map、Array 类型
    * @URL ：必须为一个合法的url地址
    */</span>
   <span class="token annotation punctuation">@NotEmpty</span>
   <span class="token annotation punctuation">@URL</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;Logo必须为一个合法的url地址&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> logo<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 介绍
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> descript<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 显示状态[0-不显示；1-显示]
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">Integer</span> showStatus<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 检索首字母
    */</span>
   <span class="token annotation punctuation">@NotEmpty</span>
   <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;^[a-zA-Z]$&quot;</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;首字母必须为单个的大写或小写英文字母&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> firstLetter<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 排序
    * @NotNull : The annotated element must not be <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>.
    *        * Accepts any type.
    */</span>
   <span class="token annotation punctuation">@NotNull</span>
   <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;排序字段必须为一个大于0的整数&quot;</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">Integer</span> sort<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8、再次测试" tabindex="-1"><a class="header-anchor" href="#_8、再次测试" aria-hidden="true">#</a> 8、再次测试</h4><p>重启<code>gulimall-product</code>项目后重新进行测试</p><h5 id="_1、提交错误请求" tabindex="-1"><a class="header-anchor" href="#_1、提交错误请求" aria-hidden="true">#</a> 1、提交错误请求</h5><h6 id="_1、为空判断" tabindex="-1"><a class="header-anchor" href="#_1、为空判断" aria-hidden="true">#</a> 1、为空判断</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.1.1.png" alt="image-20220507103142585" tabindex="0" loading="lazy"><figcaption>image-20220507103142585</figcaption></figure><h6 id="_2、错误值判断" tabindex="-1"><a class="header-anchor" href="#_2、错误值判断" aria-hidden="true">#</a> 2、错误值判断</h6><p>name值为一个空格可以判断，但sort为浮点型判断不出来</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;logo&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://www.example.org/1.jpg&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;firstLetter&quot;</span><span class="token operator">:</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;sort&quot;</span><span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.1.2.png" alt="image-20220507104541200" tabindex="0" loading="lazy"><figcaption>image-20220507104541200</figcaption></figure><h6 id="_3、测试sort为浮点型" tabindex="-1"><a class="header-anchor" href="#_3、测试sort为浮点型" aria-hidden="true">#</a> 3、测试sort为浮点型</h6><p>当其他值合法，只有sort不为int类型时，尽然校验通过了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.1.3.1.png" alt="image-20220507105030110" tabindex="0" loading="lazy"><figcaption>image-20220507105030110</figcaption></figure><p><code>sort</code>直接被转成int了😰</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.1.3.2.png" alt="image-20220507105222663" tabindex="0" loading="lazy"><figcaption>image-20220507105222663</figcaption></figure><h6 id="_4、读取请求体信息" tabindex="-1"><a class="header-anchor" href="#_4、读取请求体信息" aria-hidden="true">#</a> 4、读取请求体信息</h6><p>sort确实为1.1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;sort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    brandService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.1.4.1.png" alt="image-20220507120100556" tabindex="0" loading="lazy"><figcaption>image-20220507120100556</figcaption></figure><p>不要加上<code>@RequestBody BrandEntity brand</code>，如果加上这些参数spring会读取request输入流</p><p>而request的输入流只允许被读取一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BrandEntity</span> brand<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;111&quot;</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//错误消息</span>
            <span class="token class-name">String</span> message <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//bean的字段名</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&quot;提交的数据不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    brandService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.1.4.2.png" alt="image-20220507122011532" tabindex="0" loading="lazy"><figcaption>image-20220507122011532</figcaption></figure><h6 id="_5、不允许强转" tabindex="-1"><a class="header-anchor" href="#_5、不允许强转" aria-hidden="true">#</a> 5、不允许强转</h6><p>设置json反序列化不允许<code>float</code>强转成<code>int</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">deserialization</span><span class="token punctuation">:</span>
      <span class="token key atrule">ACCEPT_FLOAT_AS_INT</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.1.5.1.png" alt="image-20220507144358777" tabindex="0" loading="lazy"><figcaption>image-20220507144358777</figcaption></figure><p>可以看到已经不允许强转了</p><p>Cannot coerce a floating-point value (&#39;1.1&#39;) into Integer：无法将浮点值 (&#39;1.1&#39;) 强制转换为整数</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.1.5.2.png" alt="image-20220507144324665" tabindex="0" loading="lazy"><figcaption>image-20220507144324665</figcaption></figure><h5 id="_2、提交正确请求" tabindex="-1"><a class="header-anchor" href="#_2、提交正确请求" aria-hidden="true">#</a> 2、提交正确请求</h5><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;logo&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://www.example.org/1.jpg&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;firstLetter&quot;</span><span class="token operator">:</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;sort&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.2.1.png" alt="image-20220507103754722" tabindex="0" loading="lazy"><figcaption>image-20220507103754722</figcaption></figure><p>已经显示出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.8.2.2.png" alt="image-20220507103937140" tabindex="0" loading="lazy"><figcaption>image-20220507103937140</figcaption></figure><h4 id="_9、批量捕获异常" tabindex="-1"><a class="header-anchor" href="#_9、批量捕获异常" aria-hidden="true">#</a> 9、批量捕获异常</h4><h5 id="_1、编写异常捕获类" tabindex="-1"><a class="header-anchor" href="#_1、编写异常捕获类" aria-hidden="true">#</a> 1、编写异常捕获类</h5><p>在<code>com.atguigu.gulimall.product</code>下新建<code>exception</code>文件夹</p><p>在<code>com.atguigu.gulimall.product.exception</code>下新建<code> GulimallExceptionControllerAdvice</code>类自定义捕获异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">R</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestControllerAdvice</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/7
 * @Description: 自定义异常捕获类
 *
 * @RestControllerAdvice =  @ControllerAdvice + @ResponseBody
 */</span>

<span class="token annotation punctuation">@Slf4j</span>  <span class="token comment">//lombok日志</span>
<span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.atguigu.gulimall.product.controller&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GulimallExceptionControllerAdvice</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 捕获异常
     * @ExceptionHandler: 捕获异常的类型
     * <span class="token keyword">@param</span> <span class="token parameter">e</span> 该异常类
     * <span class="token keyword">@return</span>  返回前端的结果
     */</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">handleValidException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;数据校验出现问题:{},异常类型:{}&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.9.1.png" alt="image-20220507153231608" tabindex="0" loading="lazy"><figcaption>image-20220507153231608</figcaption></figure><h5 id="_2、测试upload方法" tabindex="-1"><a class="header-anchor" href="#_2、测试upload方法" aria-hidden="true">#</a> 2、测试<code>upload</code>方法</h5><p>重启<code>gulimall-product</code>项目后测试</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:10000/product/brand/update

{&quot;id&quot;:1,&quot;name&quot;: &quot; &quot;,&quot;logo&quot;:&quot;www.example.org/1.jpg&quot;,&quot;firstLetter&quot;:&quot;qq&quot;,&quot;sort&quot;:-1}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1、未知错误" tabindex="-1"><a class="header-anchor" href="#_1、未知错误" aria-hidden="true">#</a> 1、未知错误</h6><p>可以看到显示的是未知错误</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.9.2.1.png" alt="image-20220507151321841" tabindex="0" loading="lazy"><figcaption>image-20220507151321841</figcaption></figure><h6 id="_2、控制台查看异常类" tabindex="-1"><a class="header-anchor" href="#_2、控制台查看异常类" aria-hidden="true">#</a> 2、控制台查看异常类</h6><p>异常类为：<code>org.springframework.web.bind.MethodArgumentNotValidException</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.9.2.2.png" alt="image-20220507153339775" tabindex="0" loading="lazy"><figcaption>image-20220507153339775</figcaption></figure><h5 id="_3、修改捕获异常类型" tabindex="-1"><a class="header-anchor" href="#_3、修改捕获异常类型" aria-hidden="true">#</a> 3、修改捕获异常类型</h5><p>修改<code> GulimallExceptionControllerAdvice</code>类的<code>handleValidException</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">handleValidException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;数据校验出现问题:{},异常类型:{}&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">//实体类的字段名和对应的错误消息</span>
        errMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>item<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">&quot;数据校验失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span>errMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.9.3.png" alt="image-20220507152807842" tabindex="0" loading="lazy"><figcaption>image-20220507152807842</figcaption></figure><p>4、测试<code>upload</code>方法</p><p>测试<code>upload</code>方法，可以看到按想要的格式显示出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.9.4.png" alt="image-20220507152532267" tabindex="0" loading="lazy"><figcaption>image-20220507152532267</figcaption></figure><h4 id="_10、捕获所有类型异常" tabindex="-1"><a class="header-anchor" href="#_10、捕获所有类型异常" aria-hidden="true">#</a> 10、捕获所有类型异常</h4><p>在<code> GulimallExceptionControllerAdvice</code>类中添加方法</p><p>所有前面没有被匹配的异常都会执行这个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.10.png" alt="image-20220507154355873" tabindex="0" loading="lazy"><figcaption>image-20220507154355873</figcaption></figure><h4 id="_11、错误类型枚举" tabindex="-1"><a class="header-anchor" href="#_11、错误类型枚举" aria-hidden="true">#</a> 11、错误类型枚举</h4><h5 id="_1、新建枚举类" tabindex="-1"><a class="header-anchor" href="#_1、新建枚举类" aria-hidden="true">#</a> 1、新建枚举类</h5><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.exception</code>文件夹下新建<code>BizCodeException</code>枚举类</p><p>定义可能的错误信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/7
 * @Description:
 * 错误码和错误信息定义类
 * 1. 错误码定义规则为 5 为数字
 * 2. 前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常
 * 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式
 * 错误码列表：
 * 10: 通用
 * 001：参数格式校验
 * 11: 商品
 * 12: 订单
 * 13: 购物车
 * 14: 物流
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">BizCodeException</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 系统未知异常
     */</span>
    <span class="token function">UNKNOW_EXCEPTION</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">&quot;系统未知异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 参数格式校验失败
     */</span>
    <span class="token function">VALID_EXCEPTION</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">&quot;参数格式校验失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>

    <span class="token class-name">BizCodeException</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.11.1.png" alt="image-20220507155929408" tabindex="0" loading="lazy"><figcaption>image-20220507155929408</figcaption></figure><h5 id="_2、r类添加方法" tabindex="-1"><a class="header-anchor" href="#_2、r类添加方法" aria-hidden="true">#</a> 2、<code>R</code>类添加方法</h5><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.utils</code>文件夹下的<code>R</code>类里添加方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">R</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">BizCodeException</span> bizCodeException<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span>bizCodeException<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bizCodeException<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.11.2.png" alt="image-20220507161305656" tabindex="0" loading="lazy"><figcaption>image-20220507161305656</figcaption></figure><h5 id="_3、修改返回参数" tabindex="-1"><a class="header-anchor" href="#_3、修改返回参数" aria-hidden="true">#</a> 3、修改返回参数</h5><p>修改<code>gulimall-product</code>模块<code>com.atguigu.gulimall.product.exception</code>包下的</p><p><code> GulimallExceptionControllerAdvice</code>类的方法返回参数</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.11.3.png" alt="image-20220507161815782" tabindex="0" loading="lazy"><figcaption>image-20220507161815782</figcaption></figure><h4 id="_12、分组校验" tabindex="-1"><a class="header-anchor" href="#_12、分组校验" aria-hidden="true">#</a> 12、分组校验</h4><blockquote><p>默认没有指定分组的校验注解@NotBlank，在分组校验情况@Validated({AddGroup.class})下不生效，只会在@Validated生效；</p><p>默认指定分组的校验注解@NotBlank(groups = AddGroup.class)，在@Validated下不生效，只会在分组校验@Validated({AddGroup.class})下生效</p></blockquote><p>可以看到groups的参数为接口数组</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.12.0.png" alt="image-20220507175045352" tabindex="0" loading="lazy"><figcaption>image-20220507175045352</figcaption></figure><h5 id="_1、新建接口" tabindex="-1"><a class="header-anchor" href="#_1、新建接口" aria-hidden="true">#</a> 1、新建接口</h5><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common</code>包下新建<code>valid</code>文件夹</p><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.valid</code>包下创建<code>AddGroup</code>和<code>UpdateGroup</code>接口</p><p>这些接口只做标识，不用书写任何方法和字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.12.1.1.png" alt="image-20220507175647905" tabindex="0" loading="lazy"><figcaption>image-20220507175647905</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.12.1.2.png" alt="image-20220507175702832" tabindex="0" loading="lazy"><figcaption>image-20220507175702832</figcaption></figure><h5 id="_2、添加分组" tabindex="-1"><a class="header-anchor" href="#_2、添加分组" aria-hidden="true">#</a> 2、添加分组</h5><p>id添加校验注解，使用<code>groups</code>属性进行分组,传入的类只做一个标识</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Null</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;添加不能指定品牌id&quot;</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;修改必须指定品牌id&quot;</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.12.2.png" alt="image-20220507182831588" tabindex="0" loading="lazy"><figcaption>image-20220507182831588</figcaption></figure><h5 id="_3、按组校验" tabindex="-1"><a class="header-anchor" href="#_3、按组校验" aria-hidden="true">#</a> 3、按组校验</h5><p>使用<code>org.springframework.validation.annotation</code>包下的<code>Validated</code>注解，指定分组的类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.12.3.png" alt="image-20220507183447890" tabindex="0" loading="lazy"><figcaption>image-20220507183447890</figcaption></figure><h5 id="_4、测试-2" tabindex="-1"><a class="header-anchor" href="#_4、测试-2" aria-hidden="true">#</a> 4、测试</h5><p>重启<code>gulimall-product</code>模块</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;brandId&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span><span class="token property">&quot;logo&quot;</span><span class="token operator">:</span><span class="token string">&quot;www.example.org/1.jpg&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;firstLetter&quot;</span><span class="token operator">:</span><span class="token string">&quot;qq&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;sort&quot;</span><span class="token operator">:</span><span class="token number">-1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到<code>brandId</code>字段已经分组校验了，其他没有分组的字段在使用<code>Validated</code>注解进行分组校验的情况下不生效</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.12.4.1.png" alt="image-20220507193841877" tabindex="0" loading="lazy"><figcaption>image-20220507193841877</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.12.4.2.png" alt="image-20220507193934405" tabindex="0" loading="lazy"><figcaption>image-20220507193934405</figcaption></figure><h5 id="_5、其他字段添加分组校验" tabindex="-1"><a class="header-anchor" href="#_5、其他字段添加分组校验" aria-hidden="true">#</a> 5、其他字段添加分组校验</h5><p>修改<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.entity.BrandEntity</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">.</span></span><span class="token class-name">AddGroup</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid<span class="token punctuation">.</span></span><span class="token class-name">UpdateGroup</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableName</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 品牌
 *
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@email</span> 2185180175@qq.com
 * <span class="token keyword">@date</span> 2022-04-17 18:19:58
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;pms_brand&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 品牌id
    * UpdateGroup不能指定品牌
    * AddGroup必须指定品牌id
    */</span>
   <span class="token annotation punctuation">@Null</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;添加不能指定品牌id&quot;</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;修改必须指定品牌id&quot;</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@TableId</span>
   <span class="token keyword">private</span> <span class="token class-name">Long</span> brandId<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 品牌名
    * @NotBlank: 不能为空，必须包含一个非空白字符
    */</span>
   <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;品牌名不能为空&quot;</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 品牌logo地址
    * @NotEmpty ：The annotated element must not be <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> nor empty
    *              可以接收 CharSequence、Collection、Map、Array 类型
    * @URL ：必须为一个合法的url地址
    *
    * 添加品牌时logo不能为空，并且需要是一个URL
    * 修改可以为空，但如果不为空则必须为一个URL
    */</span>
   <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@URL</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;Logo必须为一个合法的url地址&quot;</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> logo<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 介绍
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> descript<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 显示状态[0-不显示；1-显示]
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">Integer</span> showStatus<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 检索首字母
    */</span>
   <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;^[a-zA-Z]$&quot;</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;首字母必须为单个的大写或小写英文字母&quot;</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> firstLetter<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 排序
    * @NotNull : The annotated element must not be <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span>.
    *        * Accepts any type.
    */</span>
   <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;排序字段必须为一个大于0的整数&quot;</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">Integer</span> sort<span class="token punctuation">;</span>



<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13、自定义校验注解" tabindex="-1"><a class="header-anchor" href="#_13、自定义校验注解" aria-hidden="true">#</a> 13、自定义校验注解</h4><p>需求：<code>showStatus</code>只能为0或1</p><p>Integer和Long类型不能使用正则</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
 * 显示状态[0-不显示；1-显示]
 * @Pattern不能用在Integer和Long上
 * No validator could be found for constraint &#39;javax.validation.constraints.Pattern&#39; validating type &#39;java.lang.Integer&#39;
 * @Pattern 注解可以标注在 CharSequence 和 null 上
 */
//@Pattern(regexp = &quot;^[01]$&quot;,message = &quot;显示状态异常&quot;,groups = AddGroup.class) 不能使用该注解来校验
private Integer showStatus;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过可以使用以下三个注解来完成功能</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@NotNull(groups = AddGroup.class)
@Max(value = 1,groups = {AddGroup.class,UpdateGroup.class})
@Min(value = 0,groups = {AddGroup.class,UpdateGroup.class})
private Integer showStatus;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有更复杂的需求,比方说只能为[1,4,7]中的一个，这些注解就不能实现这个需求了</p><p>因此可以自定义注解</p><h5 id="_1、编写自定义注解" tabindex="-1"><a class="header-anchor" href="#_1、编写自定义注解" aria-hidden="true">#</a> 1、编写自定义注解</h5><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.valid</code>包下创建<code>ListValue</code>注解</p><p>在<code>jsr303</code>规范中，校验注解必须添加这三个属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Documented</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token static">TYPE_USE</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token static">RUNTIME</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/7
 * @Description: 只能为列表内的值
 */</span>
<span class="token comment">//生成文档</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token comment">//使用哪个校验器进行校验(如果不指定，需要在初始化的时候指定)</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//注解可以标注在哪个位置</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">TYPE_USE</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//校验时机，在运行时获取</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ListValue</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 校验出错以后，错误信息去哪取
     * 默认使用com.atguigu.common.valid.ListValue.message属性去
     * org/hibernate/validator/ValidationMessages.properties配置文件中去取
     *
     * 一般为 (注解全类名 + .message)
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;{com.atguigu.common.valid.ListValue.message}&quot;</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 支持分组校验
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 自定义负载信息
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 可以为哪些值
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.1.png" alt="image-20220507212345254" tabindex="0" loading="lazy"><figcaption>image-20220507212345254</figcaption></figure><h5 id="_2、添加坐标" tabindex="-1"><a class="header-anchor" href="#_2、添加坐标" aria-hidden="true">#</a> 2、添加坐标</h5><p>在<code>gulimall-common</code>模块的<code>pom.xml</code>文件中添加validation坐标，点击刷新，然后在<code>ListValue</code>注解类中导包就不报错</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.2.png" alt="image-20220507215105090" tabindex="0" loading="lazy"><figcaption>image-20220507215105090</figcaption></figure><h5 id="_3、创建配置文件" tabindex="-1"><a class="header-anchor" href="#_3、创建配置文件" aria-hidden="true">#</a> 3、创建配置文件</h5><p>在<code>jsr303</code>规范中，在<code>ValidationMessages.properties</code>文件中获取<code>message</code>中键对应的值作为消息</p><h6 id="_1、搜索validationmessages-properties" tabindex="-1"><a class="header-anchor" href="#_1、搜索validationmessages-properties" aria-hidden="true">#</a> 1、搜索<code>ValidationMessages.properties</code></h6><p>双击<strong>shift</strong>键,在弹出的框中搜索<code>ValidationMessages.properties</code>即可看到</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.3.1.png" alt="image-20220507212629762" tabindex="0" loading="lazy"><figcaption>image-20220507212629762</figcaption></figure><h6 id="_2、新建配置文件" tabindex="-1"><a class="header-anchor" href="#_2、新建配置文件" aria-hidden="true">#</a> 2、新建配置文件</h6><p>在<code>gulimall-common</code>模块的<code>resources</code>目录下新建<code>ValidationMessages.properties</code>配置文件</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">com.atguigu.common.valid.ListValue.message</span> <span class="token punctuation">=</span> <span class="token value attr-value">&quot;必须提交指定的值&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里写错了，测试的时候发现它把两个双引号也显示出来了(别人写的也没有双引号),其实为</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">com.atguigu.common.valid.ListValue.message</span> <span class="token punctuation">=</span> <span class="token value attr-value">必须提交指定的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意编码为&quot;<strong>UTF-8</strong>&quot;</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.3.2.png" alt="image-20220507213536293" tabindex="0" loading="lazy"><figcaption>image-20220507213536293</figcaption></figure><h6 id="_3、设置字符编码" tabindex="-1"><a class="header-anchor" href="#_3、设置字符编码" aria-hidden="true">#</a> 3、设置字符编码</h6><p>如果编码不为&quot;<strong>UTF-8</strong>&quot;可以<strong>设置字符编码</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.3.3.png" alt="image-20220507214152772" tabindex="0" loading="lazy"><figcaption>image-20220507214152772</figcaption></figure><h5 id="_4、自定义校验规则-1" tabindex="-1"><a class="header-anchor" href="#_4、自定义校验规则-1" aria-hidden="true">#</a> 4、自定义校验规则</h5><p>校验类必须实现<code>ConstraintValidator</code>接口</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.4.1.png" alt="image-20220507215413611" tabindex="0" loading="lazy"><figcaption>image-20220507215413611</figcaption></figure><p><code>ConstraintValidator</code>接口有两个泛型,第一个泛型用来<strong>指定注解</strong>，第二个泛型用来指定<strong>需要校验的数据类型</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.4.2.png" alt="image-20220507215539055" tabindex="0" loading="lazy"><figcaption>image-20220507215539055</figcaption></figure><p>在<code>com.atguigu.common.valid</code>包下新建<code>ListValueConstraintValidator</code>类，实现<code>ConstraintValidator</code>接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>valid</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintValidator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">ConstraintValidatorContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/7
 * @Description:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListValueConstraintValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListValue</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 初始化信息
     * 可以获取注解的详细信息
     * <span class="token keyword">@param</span> <span class="token parameter">constraintAnnotation</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">ListValue</span> constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//@ListValue注解中 vals 属性的值</span>
        <span class="token comment">//值必须为这几个中的一个</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vals <span class="token operator">=</span> constraintAnnotation<span class="token punctuation">.</span><span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">:</span> vals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 判断是否校验成功
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>
     * <span class="token keyword">@param</span> <span class="token parameter">context</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">,</span> <span class="token class-name">ConstraintValidatorContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.4.3.png" alt="image-20220507222417417" tabindex="0" loading="lazy"><figcaption>image-20220507222417417</figcaption></figure><h5 id="_5、指定校验器" tabindex="-1"><a class="header-anchor" href="#_5、指定校验器" aria-hidden="true">#</a> 5、指定校验器</h5><p>可以指定多个校验器，能够根据泛型自动匹配正确的校验器</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.5.png" alt="image-20220507222719730" tabindex="0" loading="lazy"><figcaption>image-20220507222719730</figcaption></figure><h5 id="_6、使用该注解" tabindex="-1"><a class="header-anchor" href="#_6、使用该注解" aria-hidden="true">#</a> 6、使用该注解</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.BrandEntity</code>类的<code>showStatus</code>字段上使用自定义注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>groups <span class="token operator">=</span> <span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ListValue</span><span class="token punctuation">(</span>vals <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AddGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.6.png" alt="image-20220507225522195" tabindex="0" loading="lazy"><figcaption>image-20220507225522195</figcaption></figure><h5 id="_7、测试-3" tabindex="-1"><a class="header-anchor" href="#_7、测试-3" aria-hidden="true">#</a> 7、测试</h5><p>重启<code>gulimall-product</code>模块</p><h6 id="_1、多了两个双引号" tabindex="-1"><a class="header-anchor" href="#_1、多了两个双引号" aria-hidden="true">#</a> 1、多了两个双引号</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.7.1.png" alt="image-20220507223836326" tabindex="0" loading="lazy"><figcaption>image-20220507223836326</figcaption></figure><h6 id="_2、去掉双引号" tabindex="-1"><a class="header-anchor" href="#_2、去掉双引号" aria-hidden="true">#</a> 2、去掉双引号</h6><p>去掉双引号后重启<code>gulimall-product</code>模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.7.2.png" alt="image-20220507223924267" tabindex="0" loading="lazy"><figcaption>image-20220507223924267</figcaption></figure><h6 id="_3、重新测试-1" tabindex="-1"><a class="header-anchor" href="#_3、重新测试-1" aria-hidden="true">#</a> 3、重新测试</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.2.7.13.7.3.png" alt="image-20220507224020853" tabindex="0" loading="lazy"><figcaption>image-20220507224020853</figcaption></figure><h3 id="_4-2-8、校验注解总结" tabindex="-1"><a class="header-anchor" href="#_4-2-8、校验注解总结" aria-hidden="true">#</a> 4.2.8、校验注解总结</h3><h4 id="_1-maven依赖" tabindex="-1"><a class="header-anchor" href="#_1-maven依赖" aria-hidden="true">#</a> 1 Maven依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--第一种方式导入校验依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--第二种方式导入校验依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-值校验" tabindex="-1"><a class="header-anchor" href="#_2-值校验" aria-hidden="true">#</a> 2 值校验</h4><h5 id="_2-1-null注解" tabindex="-1"><a class="header-anchor" href="#_2-1-null注解" aria-hidden="true">#</a> 2.1 @Null注解</h5><p>被注解的元素必须为null</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Null</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须为null&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-notnull注解" tabindex="-1"><a class="header-anchor" href="#_2-2-notnull注解" aria-hidden="true">#</a> 2.2 @NotNull注解</h5><p>被注解的元素必须不为null</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须不为null&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-notblank注解" tabindex="-1"><a class="header-anchor" href="#_2-3-notblank注解" aria-hidden="true">#</a> 2.3 @NotBlank注解</h5><p>验证注解的元素值不为空（不为null、去除首位空格后长度为0） ，并且类型为String。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须不为空&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-4-notempty注解" tabindex="-1"><a class="header-anchor" href="#_2-4-notempty注解" aria-hidden="true">#</a> 2.4 @NotEmpty注解</h5><p>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0） ，并且类型为String。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须不为null且不为空&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-5-asserttrue注解" tabindex="-1"><a class="header-anchor" href="#_2-5-asserttrue注解" aria-hidden="true">#</a> 2.5 @AssertTrue注解</h5><p>被注解的元素必须为true，并且类型为boolean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AssertTrue</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须为true&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> status<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-6-assertfalse注解" tabindex="-1"><a class="header-anchor" href="#_2-6-assertfalse注解" aria-hidden="true">#</a> 2.6 @AssertFalse注解</h5><p>被注解的元素必须为false，并且类型为boolean。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AssertFalse</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须为false&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> status<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-范围校验" tabindex="-1"><a class="header-anchor" href="#_3-范围校验" aria-hidden="true">#</a> 3 范围校验</h4><h5 id="_3-1-min注解" tabindex="-1"><a class="header-anchor" href="#_3-1-min注解" aria-hidden="true">#</a> 3.1 @Min注解</h5><p>被注解的元素其值必须大于等于最小值，并且类型为int，long，float，double。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须大于等于18&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-max注解" tabindex="-1"><a class="header-anchor" href="#_3-2-max注解" aria-hidden="true">#</a> 3.2 @Max注解</h5><p>被注解的元素其值必须小于等于最小值，并且类型为int，long，float，double。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须小于等于18&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-decimalmin注解" tabindex="-1"><a class="header-anchor" href="#_3-3-decimalmin注解" aria-hidden="true">#</a> 3.3 @DecimalMin注解</h5><p>验证注解的元素值大于等于@DecimalMin指定的value值，并且类型为BigDecimal。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;150&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须大于等于150&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-4-decimalmax注解" tabindex="-1"><a class="header-anchor" href="#_3-4-decimalmax注解" aria-hidden="true">#</a> 3.4 @DecimalMax注解</h5><p>验证注解的元素值小于等于@DecimalMax指定的value值 ，并且类型为BigDecimal。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DecimalMax</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;300&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须大于等于300&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-5-range注解" tabindex="-1"><a class="header-anchor" href="#_3-5-range注解" aria-hidden="true">#</a> 3.5 @Range注解</h5><p>验证注解的元素值在最小值和最大值之间，并且类型为BigDecimal，BigInteger，CharSequence，byte，short，int，long。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须大于等于18且小于等于80&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-6-past注解" tabindex="-1"><a class="header-anchor" href="#_3-6-past注解" aria-hidden="true">#</a> 3.6 @Past注解</h5><p>被注解的元素必须为过去的一个时间，并且类型为java.util.Date。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Past</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须为过去的时间&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Date</span> createDate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-7-future注解" tabindex="-1"><a class="header-anchor" href="#_3-7-future注解" aria-hidden="true">#</a> 3.7 @Future注解</h5><p>被注解的元素必须为未来的一个时间，并且类型为java.util.Date。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Future</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须为未来的时间&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Date</span> createDate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-长度校验" tabindex="-1"><a class="header-anchor" href="#_4-长度校验" aria-hidden="true">#</a> 4 长度校验</h4><h5 id="_4-1-size注解" tabindex="-1"><a class="header-anchor" href="#_4-1-size注解" aria-hidden="true">#</a> 4.1 @Size注解</h5><p>被注解的元素的长度必须在指定范围内，并且类型为String，Array，List，Map。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;长度必须大于等于7或小于等于11&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-2-length注解" tabindex="-1"><a class="header-anchor" href="#_4-2-length注解" aria-hidden="true">#</a> 4.2 @Length注解</h5><p>验证注解的元素值长度在min和max区间内 ，并且类型为String。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;长度必须大于等于7或小于等于11&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-格式校验" tabindex="-1"><a class="header-anchor" href="#_5-格式校验" aria-hidden="true">#</a> 5 格式校验</h4><h5 id="_5-1-digits注解" tabindex="-1"><a class="header-anchor" href="#_5-1-digits注解" aria-hidden="true">#</a> 5.1 @Digits注解</h5><p>验证注解的元素值的整数位数和小数位数上限 ，并且类型为float，double，BigDecimal。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Digits</span><span class="token punctuation">(</span>integer<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>fraction <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;整数位上限为3位，小数位上限为2位&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> height<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-pattern注解" tabindex="-1"><a class="header-anchor" href="#_5-2-pattern注解" aria-hidden="true">#</a> 5.2 @Pattern注解</h5><p>被注解的元素必须符合指定的正则表达式，并且类型为String。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;\\\\d{11}&quot;</span><span class="token punctuation">,</span>message <span class="token operator">=</span> <span class="token string">&quot;必须为数字，并且长度为11&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> mobile<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-email注解" tabindex="-1"><a class="header-anchor" href="#_5-3-email注解" aria-hidden="true">#</a> 5.3 @Email注解</h5><p>验证注解的元素值是Email，也可以通过regexp和flag指定自定义的email格式，类型为String。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;必须是邮箱&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3、商品服务-api-属性分组" tabindex="-1"><a class="header-anchor" href="#_4-3、商品服务-api-属性分组" aria-hidden="true">#</a> 4.3、商品服务-API-属性分组</h2><h3 id="_4-3-1、前端组件导入" tabindex="-1"><a class="header-anchor" href="#_4-3-1、前端组件导入" aria-hidden="true">#</a> 4.3.1、前端组件导入</h3><h4 id="_1、导入数据" tabindex="-1"><a class="header-anchor" href="#_1、导入数据" aria-hidden="true">#</a> 1、导入数据</h4><h5 id="_1、执行sql语句" tabindex="-1"><a class="header-anchor" href="#_1、执行sql语句" aria-hidden="true">#</a> 1、执行sql语句</h5><p>打开<code>1.分布式基础（全栈开发篇）\\资料源码.zip\\docs\\代码\\sql</code>文件夹下的<code>sys_menus.sql</code>，全选复制</p><p>点击<code>gulimall_admin</code>然后右键选择<code>命令行界面</code> ，粘贴到里面，回车执行sql语句</p><p>(不要点击<code>运行SQL文件</code>,这样会有中文乱码问题)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.1.1.png" alt="image-20220508090404565" tabindex="0" loading="lazy"><figcaption>image-20220508090404565</figcaption></figure><h5 id="_2、查看结果" tabindex="-1"><a class="header-anchor" href="#_2、查看结果" aria-hidden="true">#</a> 2、查看结果</h5><p>url: http://localhost:8001/#/product-brand</p><p>刷新前端项目，可以看到这些系统已经显示出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.1.2.png" alt="image-20220508091348831" tabindex="0" loading="lazy"><figcaption>image-20220508091348831</figcaption></figure><h4 id="_2、新建文件" tabindex="-1"><a class="header-anchor" href="#_2、新建文件" aria-hidden="true">#</a> 2、新建文件</h4><h5 id="_1、新建category-vue文件" tabindex="-1"><a class="header-anchor" href="#_1、新建category-vue文件" aria-hidden="true">#</a> 1、新建<code>category.vue</code>文件</h5><p>在<code>src\\views\\modules</code>文件夹里新建<code>common</code>文件夹，用来存储公共组件</p><p>在<code>src\\views\\modules</code>文件夹下的<code>common</code>文件夹里新建<code>category.vue</code>文件,输入vue生成模板</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.2.1.png" alt="image-20220508092805251" tabindex="0" loading="lazy"><figcaption>image-20220508092805251</figcaption></figure><h5 id="_2、新建attrgroup-vue文件" tabindex="-1"><a class="header-anchor" href="#_2、新建attrgroup-vue文件" aria-hidden="true">#</a> 2、新建<code>attrgroup.vue</code>文件</h5><h6 id="_1、查看位置" tabindex="-1"><a class="header-anchor" href="#_1、查看位置" aria-hidden="true">#</a> 1、查看位置</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.2.2.1.png" alt="image-20220508092955297" tabindex="0" loading="lazy"><figcaption>image-20220508092955297</figcaption></figure><h6 id="_2、新建attrgroup-vue文件-1" tabindex="-1"><a class="header-anchor" href="#_2、新建attrgroup-vue文件-1" aria-hidden="true">#</a> 2、新建<code>attrgroup.vue</code>文件</h6><p>在<code>src\\views\\modules</code>文件夹下的<code>product</code>文件夹里新建<code>attrgroup.vue</code>文件,输入vue生成模板</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.2.2.2.png" alt="image-20220508095359481" tabindex="0" loading="lazy"><figcaption>image-20220508095359481</figcaption></figure><h4 id="_3、添加代码" tabindex="-1"><a class="header-anchor" href="#_3、添加代码" aria-hidden="true">#</a> 3、添加代码</h4><h5 id="_1、添加category-vue代码" tabindex="-1"><a class="header-anchor" href="#_1、添加category-vue代码" aria-hidden="true">#</a> 1、添加<code>category.vue</code>代码</h5><p>修改<code>src\\views\\modules\\common\\category.vue</code>文件，<a href="code/4.3.1.3.1.category.vue">点击查看<code>category.vue</code>完整代码</a></p><h5 id="_2、添加attrgroup-vue代码" tabindex="-1"><a class="header-anchor" href="#_2、添加attrgroup-vue代码" aria-hidden="true">#</a> 2、添加<code>attrgroup.vue</code>代码</h5>`,289),wa=a("code",null,"element-ui",-1),xa=a("strong",null,"Layout 布局",-1),_a=a("strong",null,"分栏间隔",-1),za={href:"https://element.eleme.io/#/zh-CN/component/layout",target:"_blank",rel:"noopener noreferrer"},qa=e('<p>引入组件步骤：</p><ol><li>import Category from &quot;../common/category.vue&quot;; 把组件导进来</li><li>components: { Category:Category }, 指明需要的组件</li><li><code>&lt;category&gt;&lt;/category&gt;</code> 使用该标签</li></ol><p>修改<code>src\\views\\modules\\product\\attrgroup.vue</code>文件，<a href="code/4.3.1.3.2.attrgroup.vue">点击查看<code>attrgroup.vue</code>完整内容</a></p><h5 id="_3、结构已经出来了" tabindex="-1"><a class="header-anchor" href="#_3、结构已经出来了" aria-hidden="true">#</a> 3、结构已经出来了</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.3.3.png" alt="image-20220508100902403" tabindex="0" loading="lazy"><figcaption>image-20220508100902403</figcaption></figure><h5 id="_4、添加表格" tabindex="-1"><a class="header-anchor" href="#_4、添加表格" aria-hidden="true">#</a> 4、添加表格</h5><p>将<code>&lt;div&gt;</code>标签里面的内容替换掉&quot;表格&quot;</p><p>然后把其他除<code>&lt;template&gt;</code>标签里的内容与<code>attrgroup.vue</code>里面的内容合并</p><p><a href="code/4.3.1.3.4.attrgroup.vue">点击查看<code>attrgroup.vue</code>完整代码</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.3.4.png" alt="image-20220508101443870" tabindex="0" loading="lazy"><figcaption>image-20220508101443870</figcaption></figure><h5 id="_5、引入attrgroup-add-or-update-vue文件" tabindex="-1"><a class="header-anchor" href="#_5、引入attrgroup-add-or-update-vue文件" aria-hidden="true">#</a> 5、引入<code>attrgroup-add-or-update.vue</code>文件</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.3.5.png" alt="image-20220508103547839" tabindex="0" loading="lazy"><figcaption>image-20220508103547839</figcaption></figure><h5 id="_6、效果" tabindex="-1"><a class="header-anchor" href="#_6、效果" aria-hidden="true">#</a> 6、效果</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.1.3.6.png" alt="image-20220508104040518" tabindex="0" loading="lazy"><figcaption>image-20220508104040518</figcaption></figure><h4 id="_4、完整代码" tabindex="-1"><a class="header-anchor" href="#_4、完整代码" aria-hidden="true">#</a> 4、完整代码</h4><h5 id="_1、category-vue" tabindex="-1"><a class="header-anchor" href="#_1、category-vue" aria-hidden="true">#</a> 1、<code>category.vue</code></h5><p><a href="code/4.3.1.4.1.category.vue">点击查看<code>category.vue</code>完整代码</a></p><h5 id="_2、attrgroup-vue" tabindex="-1"><a class="header-anchor" href="#_2、attrgroup-vue" aria-hidden="true">#</a> 2、<code>attrgroup.vue</code></h5><p><a href="code/4.3.1.4.2.attrgroup.vue">点击查看<code>attrgroup.vue</code>完整代码</a></p><h3 id="_4-3-2、父子组件交互" tabindex="-1"><a class="header-anchor" href="#_4-3-2、父子组件交互" aria-hidden="true">#</a> 4.3.2、父子组件交互</h3><h4 id="_1、发送消息" tabindex="-1"><a class="header-anchor" href="#_1、发送消息" aria-hidden="true">#</a> 1、发送消息</h4><h5 id="_1、绑定事件" tabindex="-1"><a class="header-anchor" href="#_1、绑定事件" aria-hidden="true">#</a> 1、绑定事件</h5>',22),Sa=a("strong",null,"Tree树形控件",-1),Ia=a("strong",null,"Events",-1),Ea={href:"https://element.eleme.io/#/zh-CN/component/tree",target:"_blank",rel:"noopener noreferrer"},ja=e(`<table><thead><tr><th style="text-align:left;">事件名称</th><th style="text-align:left;">说明</th><th style="text-align:left;">回调参数</th></tr></thead><tbody><tr><td style="text-align:left;">node-click</td><td style="text-align:left;">节点被点击时的回调</td><td style="text-align:left;">共三个参数，依次为：传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。</td></tr></tbody></table><p>在<code>src\\views\\modules\\common\\category.vue</code>文件的<code>el-tree</code>标签内添加属性</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>@node-click=&quot;nodeClick&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、添加方法" tabindex="-1"><a class="header-anchor" href="#_2、添加方法" aria-hidden="true">#</a> 2、添加方法</h5><p>在<code>src\\views\\modules\\common\\category.vue</code>文件的<code>methods</code>里面添加方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">nodeClick</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>node<span class="token punctuation">,</span>component</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;子组件的category里的节点被点击：&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span>node<span class="token punctuation">,</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//向父组件发送事件</span>
  <span class="token comment">//第一个参数为事件的名称,后面的都为发送的数据</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;tree-node-click&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span>node<span class="token punctuation">,</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、接收事件" tabindex="-1"><a class="header-anchor" href="#_2、接收事件" aria-hidden="true">#</a> 2、接收事件</h4><h5 id="_1、添加事件" tabindex="-1"><a class="header-anchor" href="#_1、添加事件" aria-hidden="true">#</a> 1、添加事件</h5><p>在<code>src\\views\\modules\\product\\attrgroup.vue</code>文件中的<code>category</code>标签里添加属性</p><p>格式： @事件名称=”父组件方法“</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@tree-node-click=&quot;treeNodeClick&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.2.2.1.png" alt="image-20220508111126728" tabindex="0" loading="lazy"><figcaption>image-20220508111126728</figcaption></figure><h5 id="_2、添加方法-1" tabindex="-1"><a class="header-anchor" href="#_2、添加方法-1" aria-hidden="true">#</a> 2、添加方法</h5><p>在<code>src\\views\\modules\\product\\attrgroup.vue</code>文件中的<code>methods</code>里面添加方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//参数为子组件传递的参数</span>
<span class="token function">treeNodeClick</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>node<span class="token punctuation">,</span>component</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;父组件attrgroup感知到子组件category的节点被点击：&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span>node<span class="token punctuation">,</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;被点击的节点名：&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、查看效果" tabindex="-1"><a class="header-anchor" href="#_3、查看效果" aria-hidden="true">#</a> 3、查看效果</h4><p>点击&quot;数码相机&quot;,可以看到父组件attrgroup已经感知到子组件category的节点被点击了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.2.3.png" alt="image-20220508112504211" tabindex="0" loading="lazy"><figcaption>image-20220508112504211</figcaption></figure><h3 id="_4-3-3、获取分类属性分组" tabindex="-1"><a class="header-anchor" href="#_4-3-3、获取分类属性分组" aria-hidden="true">#</a> 4.3.3、获取分类属性分组</h3><h4 id="_1、后端" tabindex="-1"><a class="header-anchor" href="#_1、后端" aria-hidden="true">#</a> 1、后端</h4><h5 id="_1、更改list方法" tabindex="-1"><a class="header-anchor" href="#_1、更改list方法" aria-hidden="true">#</a> 1、更改<code>list</code>方法</h5><p>修改<code>gulimall-product</code>模块下<code>com.atguigu.gulimall.product.service.impl.AttrGroupServiceImpl</code>类的<code>list</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list/{catelogId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;catelogId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> catelogId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//PageUtils page = attrGroupService.queryPage(params);</span>
    <span class="token class-name">PageUtils</span> page <span class="token operator">=</span> attrGroupService<span class="token punctuation">.</span><span class="token function">queryPage</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>alt+enter</code>在提示里面选第二个<code>Create method</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.3.1.1.png" alt="image-20220508165717823" tabindex="0" loading="lazy"><figcaption>image-20220508165717823</figcaption></figure><h5 id="_2、添加抽象方法" tabindex="-1"><a class="header-anchor" href="#_2、添加抽象方法" aria-hidden="true">#</a> 2、添加抽象方法</h5><p><code>com.atguigu.gulimall.product.service</code>包下的<code>AttrGroupService</code>接口添加抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、添加实现类" tabindex="-1"><a class="header-anchor" href="#_3、添加实现类" aria-hidden="true">#</a> 3、添加实现类</h5><p><code>com.atguigu.gulimall.product.service.impl</code>包下的<code>AttrGroupServiceImpl</code>类添加实现方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> catelogId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>catelogId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//select * from attr_group where catelogId = ? and ( attr_group_id = key or attr_group_name like %key%)</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            queryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                obj<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupId</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupName</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、测试-3" tabindex="-1"><a class="header-anchor" href="#_4、测试-3" aria-hidden="true">#</a> 4、测试</h5><p>使用Postman测试</p><p>url: http://localhost:88/api/product/attrgroup/list/1?page=1&amp;key=aa</p><p>选择<strong>get</strong>方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.3.1.4.1.png" alt="image-20220508165944731" tabindex="0" loading="lazy"><figcaption>image-20220508165944731</figcaption></figure><p>可以看到已正确打印sql语句</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.3.1.4.2.png" alt="image-20220508165149621" tabindex="0" loading="lazy"><figcaption>image-20220508165149621</figcaption></figure><h4 id="_2、前端" tabindex="-1"><a class="header-anchor" href="#_2、前端" aria-hidden="true">#</a> 2、前端</h4><h5 id="_1、修改treenodeclick方法" tabindex="-1"><a class="header-anchor" href="#_1、修改treenodeclick方法" aria-hidden="true">#</a> 1、修改<code>treeNodeClick</code>方法</h5><p>修改<code>src\\views\\modules\\product\\attrgroup.vue</code>的<code>treeNodeClic</code>方法，为第三级时查询该catelogId的信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//参数为子组件传递的参数</span>
<span class="token function">treeNodeClick</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>node<span class="token punctuation">,</span>component</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;父组件attrgroup感知到子组件category的节点被点击：&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span>node<span class="token punctuation">,</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;被点击的节点名：&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token comment">//为第三级时查询该catelogId的信息</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>level<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>catelogId <span class="token operator">=</span> data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、添加catelogid字段" tabindex="-1"><a class="header-anchor" href="#_2、添加catelogid字段" aria-hidden="true">#</a> 2、添加<code>catelogId</code>字段</h5><p>在<code>data</code>里的<code>return</code>里添加<code>catelogId</code>数据字段</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>catelogId : 0,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、修改url" tabindex="-1"><a class="header-anchor" href="#_3、修改url" aria-hidden="true">#</a> 3、修改url</h5><p>修改<code>getDataList</code>方法里面传递的url</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>url: this.$http.adornUrl(\`/product/attrgroup/list/\${this.catelogId}\`),
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、测试-1" tabindex="-1"><a class="header-anchor" href="#_3、测试-1" aria-hidden="true">#</a> 3、测试</h4><h5 id="_1、查询全部" tabindex="-1"><a class="header-anchor" href="#_1、查询全部" aria-hidden="true">#</a> 1、查询全部</h5><p>点击 手机--&gt;手机通讯--&gt;手机 ,所有数据都查询出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.3.3.1.png" alt="image-20220508173023284" tabindex="0" loading="lazy"><figcaption>image-20220508173023284</figcaption></figure><h5 id="_2、根据id查" tabindex="-1"><a class="header-anchor" href="#_2、根据id查" aria-hidden="true">#</a> 2、根据id查</h5><p>输入<code>1</code>点击查询</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.3.3.2.png" alt="image-20220508173218019" tabindex="0" loading="lazy"><figcaption>image-20220508173218019</figcaption></figure><h5 id="_3、根据组名查" tabindex="-1"><a class="header-anchor" href="#_3、根据组名查" aria-hidden="true">#</a> 3、根据组名查</h5><p>输入<code>基本</code>点击查询</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.3.3.3.png" alt="image-20220508173329517" tabindex="0" loading="lazy"><figcaption>image-20220508173329517</figcaption></figure><h3 id="_4-3-4、属性分组新增功能" tabindex="-1"><a class="header-anchor" href="#_4-3-4、属性分组新增功能" aria-hidden="true">#</a> 4.3.4、属性分组新增功能</h3><h4 id="_1、添加级联选择器" tabindex="-1"><a class="header-anchor" href="#_1、添加级联选择器" aria-hidden="true">#</a> 1、添加级联选择器</h4><p>切换到<code>src\\views\\modules\\product\\attrgroup-add-or-update.vue</code>文件</p><p>在<code>label=&quot;所属分类id&quot;</code>的<code>el-form-item </code>标签内，删除<code>el-input</code>标签</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataForm.catelogId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>所属分类id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加<code>Cascader级联选择器</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-cascader</span>
  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataForm.catelogId<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>categorys<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>props<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-cascader</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、添加属性" tabindex="-1"><a class="header-anchor" href="#_2、添加属性" aria-hidden="true">#</a> 2、添加属性</h4><p>在<code>data</code>里面的<code>return</code>里添加属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;catId&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;children&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">categorys</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、添加方法" tabindex="-1"><a class="header-anchor" href="#_3、添加方法" aria-hidden="true">#</a> 3、添加方法</h4><p>添加<code>getCategorys</code>方法，获取分类数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getCategorys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/product/category/list/tree&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>categorys <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、调用方法" tabindex="-1"><a class="header-anchor" href="#_4、调用方法" aria-hidden="true">#</a> 4、调用方法</h4><p>在创建完成（可以访问当前 this 实例）的时候调用<code>getCategorys</code>方法，获取分类数据</p><p><code>created</code>方法写在与“<strong>data</strong>&quot;和”<strong>methods</strong>“同级的位置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCategorys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.4.png" alt="image-20220508200114324" tabindex="0" loading="lazy"><figcaption>image-20220508200114324</figcaption></figure><h4 id="_5、测试-1" tabindex="-1"><a class="header-anchor" href="#_5、测试-1" aria-hidden="true">#</a> 5、测试</h4><h5 id="_1、控制台报错" tabindex="-1"><a class="header-anchor" href="#_1、控制台报错" aria-hidden="true">#</a> 1、控制台报错</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Invalid prop: type check failed for prop &quot;value&quot;. Expected Array, got String
无效的属性：属性“value”的类型检查失败。 预期数组，得到字符串。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.1.1.png" alt="image-20220508201217559" tabindex="0" loading="lazy"><figcaption>image-20220508201217559</figcaption></figure><p>把<code>src\\views\\modules\\product</code>下的<code>attrgroup-add-or-update.vue</code>里的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>catelogId: &quot;&quot;,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>catelogId: [],
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就行了，现在已经不报错了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.1.2.png" alt="image-20220509210341350" tabindex="0" loading="lazy"><figcaption>image-20220509210341350</figcaption></figure><h5 id="_2、查看数据-但多出一级" tabindex="-1"><a class="header-anchor" href="#_2、查看数据-但多出一级" aria-hidden="true">#</a> 2、查看数据，但多出一级</h5><p>数据已经显示出来了，但是在点击第三级分类时，又出来了一级</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.2.1.png" alt="image-20220508200249772" tabindex="0" loading="lazy"><figcaption>image-20220508200249772</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.2.2.png" alt="image-20220508202500776" tabindex="0" loading="lazy"><figcaption>image-20220508202500776</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.2.3.png" alt="image-20220508202714332" tabindex="0" loading="lazy"><figcaption>image-20220508202714332</figcaption></figure><h5 id="_3、后端添加注解" tabindex="-1"><a class="header-anchor" href="#_3、后端添加注解" aria-hidden="true">#</a> 3、后端添加注解</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.CategoryEntity</code>文件里的<code>children</code>字段上添加注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span><span class="token constant">NON_EMPTY</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.3.png" alt="image-20220508203003106" tabindex="0" loading="lazy"><figcaption>image-20220508203003106</figcaption></figure><h5 id="_4、重新测试-1" tabindex="-1"><a class="header-anchor" href="#_4、重新测试-1" aria-hidden="true">#</a> 4、重新测试</h5><p>显示已经成功了，</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.4.1.png" alt="image-20220509211116839" tabindex="0" loading="lazy"><figcaption>image-20220509211116839</figcaption></figure><p>也没有<code>children</code>为空的字段了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.4.2.png" alt="image-20220509211356536" tabindex="0" loading="lazy"><figcaption>image-20220509211356536</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.4.3.png" alt="image-20220509211717999" tabindex="0" loading="lazy"><figcaption>image-20220509211717999</figcaption></figure><h5 id="_5、提交的catelogid为数组" tabindex="-1"><a class="header-anchor" href="#_5、提交的catelogid为数组" aria-hidden="true">#</a> 5、提交的<code>catelogId</code>为数组</h5><p>提交的<code>catelogId</code>为数组，而想要的<code>catelogId</code>只是最后一级(不一定是第三级)分类的id</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.4.png" alt="image-20220508204402893" tabindex="0" loading="lazy"><figcaption>image-20220508204402893</figcaption></figure><h5 id="_6、修改提交的数据" tabindex="-1"><a class="header-anchor" href="#_6、修改提交的数据" aria-hidden="true">#</a> 6、修改提交的数据</h5><p>把<code>src\\views\\modules\\product</code>下的<code>attrgroup-add-or-update.vue</code>里的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>catelogId: [],
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>catelogIds: [],
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并添加<code>catelogId</code>字段，此时的<code>catelogId</code>为要提交的最后一级(不一定是第三级)分类的id</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>catelogId: 0,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>把<code>el-cascader</code>标签内的属性</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>v-model=&quot;dataForm.catelogId&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>v-model=&quot;dataForm.catelogIds&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使其继续绑定以前的<code>catelogId</code></p><hr><p>把<code>dataFormSubmit</code>方法里<code>data</code>字段里的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>catelogId: this.dataForm.catelogId,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>catelogId: this.dataForm.catelogIds[this.dataForm.catelogIds.length-1],
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使其绑定最后一级(不一定是第三级)分类的id</p><h5 id="_7、继续测试" tabindex="-1"><a class="header-anchor" href="#_7、继续测试" aria-hidden="true">#</a> 7、继续测试</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.7.1.png" alt="image-20220509213100721" tabindex="0" loading="lazy"><figcaption>image-20220509213100721</figcaption></figure><p>提交后，页面自动刷新，获取最新数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.7.2.png" alt="image-20220509213118005" tabindex="0" loading="lazy"><figcaption>image-20220509213118005</figcaption></figure><p>📌这个刷新的功能就是通过刚才父子组件交换实现的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.7.3.png" alt="image-20220509213451960" tabindex="0" loading="lazy"><figcaption>image-20220509213451960</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.7.4.png" alt="image-20220509213506714" tabindex="0" loading="lazy"><figcaption>image-20220509213506714</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.7.5.png" alt="image-20220509213521855" tabindex="0" loading="lazy"><figcaption>image-20220509213521855</figcaption></figure><h5 id="_8、所属分类id不在一行显示" tabindex="-1"><a class="header-anchor" href="#_8、所属分类id不在一行显示" aria-hidden="true">#</a> 8、<code>所属分类id</code>不在一行显示</h5><p><code>src\\views\\modules\\product\\attrgroup-add-or-update.vue</code>文件里的<code>el-form</code>标签里修改属性</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>label-width=<span class="token string">&quot;100px&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.8.1.png" alt="image-20220509214406434" tabindex="0" loading="lazy"><figcaption>image-20220509214406434</figcaption></figure><p>这样所属分类id就显示在一行了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.4.5.8.2.png" alt="image-20220509214549516" tabindex="0" loading="lazy"><figcaption>image-20220509214549516</figcaption></figure><h4 id="_6、完整代码-1" tabindex="-1"><a class="header-anchor" href="#_6、完整代码-1" aria-hidden="true">#</a> 6、完整代码</h4><h5 id="_1、common下的category-vue文件" tabindex="-1"><a class="header-anchor" href="#_1、common下的category-vue文件" aria-hidden="true">#</a> 1、<code>common</code>下的<code>category.vue</code>文件</h5><p><a href="code/4.3.4.6.1.category.vue">点击查看<code>src\\views\\modules\\common\\category.vue</code>文件完整代码</a></p><h5 id="_2、attrgroup-vue文件" tabindex="-1"><a class="header-anchor" href="#_2、attrgroup-vue文件" aria-hidden="true">#</a> 2、<code>attrgroup.vue</code>文件</h5><p><a href="code/4.3.4.6.2.attrgroup.vue">点击查看<code>src\\views\\modules\\product\\attrgroup.vue</code>文件完整代码</a></p><h5 id="_3、attrgroup-add-or-update-vue文件" tabindex="-1"><a class="header-anchor" href="#_3、attrgroup-add-or-update-vue文件" aria-hidden="true">#</a> 3、<code>attrgroup-add-or-update.vue</code>文件</h5><p><a href="code/4.3.4.6.3.attrgroup-add-or-update.vue">点击查看<code>src\\views\\modules\\product\\attrgroup-add-or-update.vue</code>文件完整代码</a></p><h3 id="_4-3-5、回显所属分类id" tabindex="-1"><a class="header-anchor" href="#_4-3-5、回显所属分类id" aria-hidden="true">#</a> 4.3.5、回显<code>所属分类id</code></h3><p>当点击修改按钮后</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.0.1.png" alt="image-20220509222434388" tabindex="0" loading="lazy"><figcaption>image-20220509222434388</figcaption></figure><p><code>所属分类id</code>没有回显</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.0.2.png" alt="image-20220509222509610" tabindex="0" loading="lazy"><figcaption>image-20220509222509610</figcaption></figure><h4 id="_1、查看点击修改按钮调用的方法" tabindex="-1"><a class="header-anchor" href="#_1、查看点击修改按钮调用的方法" aria-hidden="true">#</a> 1、查看点击修改按钮调用的方法</h4><p>查看<code>src\\views\\modules\\product\\attrgroup.vue</code>文件的<code>addOrUpdateHandle</code>方法，分析点击修改按钮后<code>所属分类id</code>没有回显的原因</p><hr><p><code> this.$nextTick()</code>：当要显示的组件(上面这个对话框)完全渲染后，再调用里面的lambda表达式</p><p><code>this.$refs</code>会获取当前vue文件所有组件</p><p><code>this.$refs.addOrUpdate</code>获取当前vue文件所有标签中<code>ref</code>属性为<code>addOrUpdate</code>或<code>components{}</code>里面为<code>addOrUpdate</code>的组件</p><p>然后再调用该组件的方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 新增 / 修改</span>
<span class="token function">addOrUpdateHandle</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//打开对话框</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>addOrUpdateVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token comment">//当要显示的组件(上面这个对话框)完全渲染后，再调用一个方法</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>addOrUpdate<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到调用了<code>addOrUpdate</code>组件的<code>init</code>方法</p><p>当前vue文件引了同文件夹下的<code>attrgroup-add-or-update.vue</code>文件</p><p>并把它命名为<code>addOrUpdate</code>，并使用这个名字添加到该vue文件的组件里</p><p>因此其调用了<code>attrgroup-add-or-update.vue</code>文件的<code>init</code>方法，并传入了<code>attrGroup</code>的<code>Id</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.1.png" alt="image-20220509223330783" tabindex="0" loading="lazy"><figcaption>image-20220509223330783</figcaption></figure><h4 id="_2、查看init方法" tabindex="-1"><a class="header-anchor" href="#_2、查看init方法" aria-hidden="true">#</a> 2、查看<code>init</code>方法</h4><p><code>src\\views\\modules\\product\\attrgroup-add-or-update.vue</code>文件<code>init</code>方法得到的<code>catelogId</code>只是一个值(最后一级分类的id)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.2.png" alt="image-20220509224447118" tabindex="0" loading="lazy"><figcaption>image-20220509224447118</figcaption></figure><p>而<code>所属分类id</code>需要的参数是<strong>完整分类id</strong>(最后一级分类的所有父分类id+最后一级分类的id)</p><p>因此可以添加返回的数据</p><h4 id="_3、修改前端代码" tabindex="-1"><a class="header-anchor" href="#_3、修改前端代码" aria-hidden="true">#</a> 3、修改前端代码</h4><p>在<code>src\\views\\modules\\product\\attrgroup-add-or-update.vue</code>的<code>init</code>方法里添加这一行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//最后一级分类的所有父分类id+最后一级分类id</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>dataForm<span class="token punctuation">.</span>catelogPath <span class="token operator">=</span> data<span class="token punctuation">.</span>attrGroup<span class="token punctuation">.</span>catelogPath<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>按&quot;ctrl+H&quot;快捷键调出替换,把&quot;catelogIds&quot;替换成&quot;catelogPath&quot;,点击替换所有</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.3.png" alt="image-20220509225211670" tabindex="0" loading="lazy"><figcaption>image-20220509225211670</figcaption></figure><h4 id="_4、修改后端代码" tabindex="-1"><a class="header-anchor" href="#_4、修改后端代码" aria-hidden="true">#</a> 4、修改后端代码</h4><h5 id="_1、修改attrgroupcontroller的info方法" tabindex="-1"><a class="header-anchor" href="#_1、修改attrgroupcontroller的info方法" aria-hidden="true">#</a> 1、修改<code>AttrGroupController</code>的<code>info</code>方法</h5><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrGroupController</code>类的<code>info</code>方法</p><p>注入<code>categoryService</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">CategoryService</span> categoryService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用其<code>getCatelogPath</code>方法,根据<strong>最后一级分类的id</strong>查出<strong>完整分类id</strong>(最后一级分类的所有父分类id+最后一级分类id)</p><p>并将查处的结果赋给<code>AttrGroupEntity</code>的<code>catelogPath</code>字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/info/{attrGroupId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;attrGroupId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> attrGroupId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrGroupEntity</span> attrGroup <span class="token operator">=</span> attrGroupService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>attrGroupId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Long</span> catelogId <span class="token operator">=</span> attrGroup<span class="token punctuation">.</span><span class="token function">getCatelogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据最后一级分类的id查出完整分类id(最后一级分类的所有父分类id+最后一级分类id)</span>
    <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> catelogPath <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">findCatelogPath</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//赋给AttrGroupEntity的catelogPath字段</span>
    attrGroup<span class="token punctuation">.</span><span class="token function">setCatelogPath</span><span class="token punctuation">(</span>catelogPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;attrGroup&quot;</span><span class="token punctuation">,</span> attrGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.1.png" alt="image-20220509233808743" tabindex="0" loading="lazy"><figcaption>image-20220509233808743</figcaption></figure><h5 id="_2、attrgroupentity类添加catelogpath字段" tabindex="-1"><a class="header-anchor" href="#_2、attrgroupentity类添加catelogpath字段" aria-hidden="true">#</a> 2、<code>AttrGroupEntity</code>类添加<code>catelogPath</code>字段</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 此字段在数据库中不存在
 */</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> catelogPath<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.2.png" alt="image-20220509231524255" tabindex="0" loading="lazy"><figcaption>image-20220509231524255</figcaption></figure><h5 id="_3、添加getcatelogpath抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、添加getcatelogpath抽象方法" aria-hidden="true">#</a> 3、添加<code>getCatelogPath</code>抽象方法</h5><p>由于使用了<code>lombok</code>插件，添加了<code>lombok</code>依赖，并添加了<code>@Data</code>注解，所以会在编译时给字段自动添加<code>get</code>和<code>set</code>方法，</p><p>因此<code>attrGroup.setCatelogPath(catelogPath);</code>不报错了</p><p>鼠标悬停在<code>getCatelogPath</code>上(或者使用<code>alt+enter</code>快捷键)，点击<code>Create method</code>，创建方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.3.1.png" alt="image-20220509233935848" tabindex="0" loading="lazy"><figcaption>image-20220509233935848</figcaption></figure><p>添加抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据最后一级分类的id查出完整分类id(最后一级分类的所有父分类id+最后一级分类id)
 * <span class="token keyword">@return</span>
 */</span>
<span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findCatelogPath</span><span class="token punctuation">(</span><span class="token class-name">Long</span> catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后点击<code>1 related problem</code>或接口类左边的<code>I和向下箭头</code>的那个按钮或使用<code>ctrl+alt+B</code>快捷键转到其实现类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.3.2.png" alt="image-20220509234029398" tabindex="0" loading="lazy"><figcaption>image-20220509234029398</figcaption></figure><p>使用<code>alt+enter</code>快捷键，点击&quot;<strong>Implement methods</strong>&quot;,实现未实现的方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.3.3.png" alt="image-20220509234117877" tabindex="0" loading="lazy"><figcaption>image-20220509234117877</figcaption></figure><h5 id="_4、实现getcatelogpath抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、实现getcatelogpath抽象方法" aria-hidden="true">#</a> 4、实现<code>getCatelogPath</code>抽象方法</h5><p>在<code>com.atguigu.gulimall.product.service.impl.CategoryServiceImpl</code>类里添加方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findCatelogPath</span><span class="token punctuation">(</span><span class="token class-name">Long</span> catelogId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> parentPath <span class="token operator">=</span> <span class="token function">findParentPath</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">,</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//先加入节点id后再递归求解其父分类，所有求出的完整路径是反的，需要转置一下</span>
    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> parentPath<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 例如：[413,50,5]
 * 根据最后一级分类的id递归求解完整分类id(最后一级分类的所有父分类id+最后一级分类id)
 * <span class="token keyword">@param</span> <span class="token parameter">catelogId</span> 当前分类id
 * <span class="token keyword">@param</span> <span class="token parameter">paths</span> 分类id数组
 * <span class="token keyword">@return</span>  完整分类id
 */</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">findParentPath</span><span class="token punctuation">(</span><span class="token class-name">Long</span> catelogId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    paths<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CategoryEntity</span> categoryEntity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> parentCid <span class="token operator">=</span> categoryEntity<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentCid<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">findParentPath</span><span class="token punctuation">(</span>parentCid<span class="token punctuation">,</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> paths<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5、单元测试" tabindex="-1"><a class="header-anchor" href="#_5、单元测试" aria-hidden="true">#</a> 5、单元测试</h5><p>在<code>test\\java</code>的<code>com.atguigu.gulimall.product.GulimallProductApplicationTests</code>类里添加方法，点击方法左侧的运行按钮</p><p>📌如果报空指针，说明你<code>gulimall_pms</code>数据库的<code>pms_category</code>表里面不存在<code>cat_id</code>为你写的那个id</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">CategoryService</span> categoryService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> catelogPath <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">findCatelogPath</span><span class="token punctuation">(</span><span class="token number">413L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>catelogPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[Ljava.lang.Object; cannot be cast to [Ljava.lang.Long;
Object[]类型不能强转成Long[]类型
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.5.1.png" alt="image-20220510113030426" tabindex="0" loading="lazy"><figcaption>image-20220510113030426</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.5.2.png" alt="image-20220510114911801" tabindex="0" loading="lazy"><figcaption>image-20220510114911801</figcaption></figure><h5 id="_6、修改findcatelogpath方法" tabindex="-1"><a class="header-anchor" href="#_6、修改findcatelogpath方法" aria-hidden="true">#</a> 6、修改<code>findCatelogPath</code>方法</h5><p>修改<code>com.atguigu.gulimall.product.service.impl.CategoryServiceImpl</code>类的<code>findCatelogPath</code>方法</p><p>把</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> parentPath<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">return</span> parentPath<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span>parentPath<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试成功，但又提示<code>Call to &#39;toArray()&#39; with pre-sized array argument &#39;new Long[parentPath.size()]&#39; </code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.6.1.png" alt="image-20220510115355135" tabindex="0" loading="lazy"><figcaption>image-20220510115355135</figcaption></figure><p>可以改成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>return parentPath.toArray(new Long[0]);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样写测试也没有问题</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.4.6.2.png" alt="image-20220510115533565" tabindex="0" loading="lazy"><figcaption>image-20220510115533565</figcaption></figure><p>📌其实<code>findParentPath</code>方法的返回值有点多余</p><p>📌<code>findCatelogPath</code>方法也可以直接返回<code>List&lt;Long&gt;</code>类型，返回到前端的内容<code>Long[]</code>和<code>List&lt;Long&gt;</code>都是一样的</p><h4 id="_5、测试-2" tabindex="-1"><a class="header-anchor" href="#_5、测试-2" aria-hidden="true">#</a> 5、测试</h4><p>重启<code>gulimall-product</code>项目后测试</p><h5 id="_1、点击修改按钮" tabindex="-1"><a class="header-anchor" href="#_1、点击修改按钮" aria-hidden="true">#</a> 1、点击<code>修改</code>按钮</h5><p>点击<code>测试数据</code>的<code>修改</code>按钮，可以看到<code>所属分类id</code>已正确回显</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.5.1.png" alt="image-20220510123323627" tabindex="0" loading="lazy"><figcaption>image-20220510123323627</figcaption></figure><h5 id="_2、点击新增按钮" tabindex="-1"><a class="header-anchor" href="#_2、点击新增按钮" aria-hidden="true">#</a> 2、点击<code>新增</code>按钮</h5><p>点击<code>新增</code>按钮，发现<code>所属分类id</code>没有删除</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.5.2.png" alt="image-20220510123145766" tabindex="0" loading="lazy"><figcaption>image-20220510123145766</figcaption></figure><h5 id="_3、添加closed回调" tabindex="-1"><a class="header-anchor" href="#_3、添加closed回调" aria-hidden="true">#</a> 3、添加<code>closed</code>回调</h5>`,228),Aa=a("code",null,"element-ui",-1),Pa=a("code",null,"Dialog对话框",-1),Ra={href:"https://element.eleme.io/#/zh-CN/component/dialog",target:"_blank",rel:"noopener noreferrer"},Ca=e(`<table><thead><tr><th style="text-align:left;">事件名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">closed</td><td style="text-align:left;">Dialog 关闭动画结束时的回调</td></tr></tbody></table><p><code>src\\views\\modules\\product\\attrgroup-add-or-update.vue</code>中<code>el-dialog</code>标签添加属性</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name"> @closed</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;dialogClose&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并再<code>method</code>里面添加方法，清空<code>catelogPath</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">dialogClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dataForm<span class="token punctuation">.</span>catelogPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、查看是否清除" tabindex="-1"><a class="header-anchor" href="#_4、查看是否清除" aria-hidden="true">#</a> 4、查看是否清除</h5><p>刷新页面，先点击<code>修改</code>，再点击<code>新增</code>可以看到已经没有上次<code>修改</code>回显执行后留下的<code>所属分类id</code>的信息了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.5.4.png" alt="image-20220510125315522" tabindex="0" loading="lazy"><figcaption>image-20220510125315522</figcaption></figure><h5 id="_5、可搜索级联选择器" tabindex="-1"><a class="header-anchor" href="#_5、可搜索级联选择器" aria-hidden="true">#</a> 5、可搜索级联选择器</h5><p>修改<code>src\\views\\modules\\product\\attrgroup-add-or-update.vue</code>里的<code>el-cascader</code>标签</p>`,10),Da=a("code",null,"elememt-ui",-1),Ba=a("code",null,"Cascader 级联选择器",-1),Ta=a("code",null,"可搜索",-1),La={href:"https://element.eleme.io/#/zh-CN/component/cascader",target:"_blank",rel:"noopener noreferrer"},Ga=e(`<p>添加<code>filterable</code>就变成可搜索的了，添加<code>placeholder</code>属性可以给予提示</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-cascader</span>
  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataForm.catelogPath<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>categorys<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:props</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>props<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>试试搜索：手机<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">filterable</span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-cascader</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入手机后，下面可以提供选择</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.3.5.5.5.png" alt="image-20220510130049823" tabindex="0" loading="lazy"><figcaption>image-20220510130049823</figcaption></figure><h2 id="_4-4、商品服务-api-品牌管理" tabindex="-1"><a class="header-anchor" href="#_4-4、商品服务-api-品牌管理" aria-hidden="true">#</a> 4.4、商品服务-API-品牌管理</h2><h3 id="_4-4-1、完善品牌管理" tabindex="-1"><a class="header-anchor" href="#_4-4-1、完善品牌管理" aria-hidden="true">#</a> 4.4.1、完善品牌管理</h3><h4 id="_1、重新执行sql" tabindex="-1"><a class="header-anchor" href="#_1、重新执行sql" aria-hidden="true">#</a> 1、重新执行sql</h4><p>重新打开<code>1.分布式基础（全栈开发篇）\\资料源码.zip\\docs\\代码\\sql</code>下的<code>pms_catelog.sql</code>文件，复制内容</p><p>点击<code>gulimall_pms</code>数据库，右键选择<code>命令行界面</code>，粘贴刚刚复制的内容，点击回车，执行sql语句</p><p>(不要点击<code>运行SQL文件</code>,这样会有中文乱码问题)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.1.png" alt="image-20220510145629313" tabindex="0" loading="lazy"><figcaption>image-20220510145629313</figcaption></figure><h4 id="_2、添加分页插件" tabindex="-1"><a class="header-anchor" href="#_2、添加分页插件" aria-hidden="true">#</a> 2、添加分页插件</h4><h5 id="_1、总条数错误" tabindex="-1"><a class="header-anchor" href="#_1、总条数错误" aria-hidden="true">#</a> 1、总条数错误</h5><p>url：http://localhost:8001/#/product-brand</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.2.1.png" alt="image-20220510150440811" tabindex="0" loading="lazy"><figcaption>image-20220510150440811</figcaption></figure><h5 id="_2、添加分页插件-1" tabindex="-1"><a class="header-anchor" href="#_2、添加分页插件-1" aria-hidden="true">#</a> 2、添加分页插件</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product</code>文件夹下新建<code>config</code>文件夹</p><p>在<code>config</code>文件夹下新建<code>MyBatisConfig</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">PaginationInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableTransactionManagement</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/10
 * @Description:
 * @EnableTransactionManagement ：开启事务功能
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.gulimall.product.dao&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 引入分页插件
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">PaginationInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">PaginationInterceptor</span> paginationInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置请求的页面大于最大页后操作，true调回到首页，false 继续请求 默认false</span>
        paginationInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置最大单页限制数量，默认500条，-1 不受限制</span>
        paginationInterceptor<span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> paginationInterceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.2.2.png" alt="image-20220510151731315" tabindex="0" loading="lazy"><figcaption>image-20220510151731315</figcaption></figure><h5 id="_3、查看条数" tabindex="-1"><a class="header-anchor" href="#_3、查看条数" aria-hidden="true">#</a> 3、查看条数</h5><p>重启<code>gulimall-product</code>模块，刷新前端页面，可以看到总条数显示正确</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.2.3.png" alt="image-20220510151901745" tabindex="0" loading="lazy"><figcaption>image-20220510151901745</figcaption></figure><h4 id="_3、修改查询逻辑" tabindex="-1"><a class="header-anchor" href="#_3、修改查询逻辑" aria-hidden="true">#</a> 3、修改查询逻辑</h4><h5 id="_1、模糊查询失败" tabindex="-1"><a class="header-anchor" href="#_1、模糊查询失败" aria-hidden="true">#</a> 1、模糊查询失败</h5><p>根据<code>品牌id</code>查询</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.3.1.1.png" alt="image-20220510154018496" tabindex="0" loading="lazy"><figcaption>image-20220510154018496</figcaption></figure><p>根据<code>品牌名</code>模糊查询</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.3.1.2.png" alt="image-20220510154130509" tabindex="0" loading="lazy"><figcaption>image-20220510154130509</figcaption></figure><h5 id="_2、根据品牌id和品牌名查询" tabindex="-1"><a class="header-anchor" href="#_2、根据品牌id和品牌名查询" aria-hidden="true">#</a> 2、根据<code>品牌id</code>和<code>品牌名</code>查询</h5><p>修改<code>gulimall-product</code>模块里<code>com.atguigu.gulimall.product.service.impl.BrandServiceImpl</code>类下的<code>queryPage</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">BrandEntity</span><span class="token operator">::</span><span class="token function">getBrandId</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">BrandEntity</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
           lambdaQueryWrapper
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.3.2.png" alt="image-20220510154241194" tabindex="0" loading="lazy"><figcaption>image-20220510154241194</figcaption></figure><h5 id="_3、测试-2" tabindex="-1"><a class="header-anchor" href="#_3、测试-2" aria-hidden="true">#</a> 3、测试</h5><p>重新运行<code>gulimall-product</code>模块，进行测试</p><p>根据<code>品牌id</code>查询</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.3.3.1.png" alt="image-20220510153551322" tabindex="0" loading="lazy"><figcaption>image-20220510153551322</figcaption></figure><p>根据<code>品牌名</code>模糊查询</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.3.3.2.png" alt="image-20220510153617854" tabindex="0" loading="lazy"><figcaption>image-20220510153617854</figcaption></figure><p>都没有什么问题</p><h4 id="_4、添加数据" tabindex="-1"><a class="header-anchor" href="#_4、添加数据" aria-hidden="true">#</a> 4、添加数据</h4><h5 id="_1、删除品牌管理数据" tabindex="-1"><a class="header-anchor" href="#_1、删除品牌管理数据" aria-hidden="true">#</a> 1、删除<code>品牌管理</code>数据</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.1.1.png" alt="image-20220510201428448" tabindex="0" loading="lazy"><figcaption>image-20220510201428448</figcaption></figure><p>可以在数据库执行以下命令，清空<code>gulimall_pms.pms_brand</code>表数据，并让主键重新从1开始</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">truncate</span> gulimall_pms<span class="token punctuation">.</span>pms_brand<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以选中表--&gt;右键--&gt;截断表</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.1.2.png" alt="image-20220511151930445" tabindex="0" loading="lazy"><figcaption>image-20220511151930445</figcaption></figure><h5 id="_2、添加有用数据" tabindex="-1"><a class="header-anchor" href="#_2、添加有用数据" aria-hidden="true">#</a> 2、添加有用数据</h5><p>图片在<code>1.分布式基础（全栈开发篇）\\资料源码.zip\\docs\\pics</code>文件夹里面</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.2.1.png" alt="image-20220510223618376" tabindex="0" loading="lazy"><figcaption>image-20220510223618376</figcaption></figure><p>添加华为品牌</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.2.2.png" alt="image-20220510223418633" tabindex="0" loading="lazy"><figcaption>image-20220510223418633</figcaption></figure><p>添加小米品牌</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.2.3.png" alt="image-20220510223456458" tabindex="0" loading="lazy"><figcaption>image-20220510223456458</figcaption></figure><p>添加oppo品牌</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.2.4.png" alt="image-20220510223906193" tabindex="0" loading="lazy"><figcaption>image-20220510223906193</figcaption></figure><p>添加Apple品牌</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.2.5.png" alt="image-20220510224046126" tabindex="0" loading="lazy"><figcaption>image-20220510224046126</figcaption></figure><p>所有品牌</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.2.6.png" alt="image-20220510224352810" tabindex="0" loading="lazy"><figcaption>image-20220510224352810</figcaption></figure><h5 id="_3、复制文件" tabindex="-1"><a class="header-anchor" href="#_3、复制文件" aria-hidden="true">#</a> 3、复制文件</h5><p>📌最好先<strong>提交到远程仓库</strong>并<strong>复制前端项目</strong>再操作,最少也要复制<code>renren-fast-vue\\src\\views\\modules</code>下的<code>common</code>和<code>product</code>文件夹</p><ol><li>复制<code>1.分布式基础（全栈开发篇）\\资料源码.zip\\docs\\代码\\前端\\modules</code>里的<code>common</code>和<code>product</code>文件夹</li><li>点击<code>src</code>下的&quot;views&quot;，然后右键</li><li>选择<code>在文件资源管理器中显示</code></li><li>进入到<code>view</code>下的<code>modules</code>里面</li><li>右键，选择粘贴</li><li>选择<code>替换目标中的文件</code></li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.1.4.3.png" alt="image-20220510201443183" tabindex="0" loading="lazy"><figcaption>image-20220510201443183</figcaption></figure><h3 id="_4-4-2、根据品牌id查询品牌和三级分类的关联关系" tabindex="-1"><a class="header-anchor" href="#_4-4-2、根据品牌id查询品牌和三级分类的关联关系" aria-hidden="true">#</a> 4.4.2、根据<code>品牌id</code>查询<code>品牌和三级分类的关联关系</code></h3><p>【属性分组-规格参数-销售属性-三级分类】关联关系</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.2.0.1.png" alt="image-20220721202638445" style="zoom:50%;"><p>SPU-SKU-属性</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.2.0.2.png" alt="image-20220721202802806" style="zoom:67%;"><p>SPU-SKU-属性表</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.2.0.3.png" alt="image-20220721202830773" style="zoom:67%;"><h4 id="_1、添加cateloglist方法" tabindex="-1"><a class="header-anchor" href="#_1、添加cateloglist方法" aria-hidden="true">#</a> 1、添加<code>catelogList</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.CategoryBrandRelationController</code>类里添加方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 列表
 * @GetMapping = @RequestMapping(method = RequestMethod.GET)
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/catelog/list&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">catelogList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;brandId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> brandId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> categoryBrandRelationService<span class="token punctuation">.</span><span class="token function">listByBrandId</span><span class="token punctuation">(</span>brandId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.2.1.png" alt="image-20220510213324100" tabindex="0" loading="lazy"><figcaption>image-20220510213324100</figcaption></figure><h4 id="_2、添加listbybrandid抽象方法" tabindex="-1"><a class="header-anchor" href="#_2、添加listbybrandid抽象方法" aria-hidden="true">#</a> 2、添加<code>listByBrandId</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.CategoryBrandRelationService</code>接口里添加<code>listByBrandId</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">listByBrandId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> brandId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.2.2.png" alt="image-20220510213901065" tabindex="0" loading="lazy"><figcaption>image-20220510213901065</figcaption></figure><h4 id="_3、实现listbybrandid抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、实现listbybrandid抽象方法" aria-hidden="true">#</a> 3、实现<code>listByBrandId</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.impl.CategoryBrandRelationServiceImpl</code>类里</p><p>实现<code>CategoryBrandRelationService</code>接口未实现的<code>listByBrandId</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">listByBrandId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> brandId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token operator">::</span><span class="token function">getBrandId</span><span class="token punctuation">,</span> brandId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.2.3.png" alt="image-20220510214006492" tabindex="0" loading="lazy"><figcaption>image-20220510214006492</figcaption></figure><h3 id="_4-4-3、保存品牌和分类完整信息" tabindex="-1"><a class="header-anchor" href="#_4-4-3、保存品牌和分类完整信息" aria-hidden="true">#</a> 4.4.3、保存品牌和分类完整信息</h3><h4 id="_1、修改save方法" tabindex="-1"><a class="header-anchor" href="#_1、修改save方法" aria-hidden="true">#</a> 1、修改<code>save</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.CategoryBrandRelationController</code>类里</p><p>修改<code>save</code>方法，保存其<code>brand_id、catelog_id、brand_name、catelog_name</code></p><p>传来的数据只有<code>brand_id、catelog_id</code>，调用<code>categoryBrandRelationService</code>的<code>saveDetail</code>查出<code>brand_name</code>和<code>catelog_name</code></p><p>并将完整的<code>brand_id、catelog_id、brand_name、catelog_name</code>保存到数据库</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CategoryBrandRelationEntity</span> categoryBrandRelation<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 保存 brand_id、catelog_id、brand_name、catelog_name</span>
    categoryBrandRelationService<span class="token punctuation">.</span><span class="token function">saveDetail</span><span class="token punctuation">(</span>categoryBrandRelation<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.1.png" alt="image-20220510215925645" tabindex="0" loading="lazy"><figcaption>image-20220510215925645</figcaption></figure><h4 id="_2、添加savedetail抽象方法" tabindex="-1"><a class="header-anchor" href="#_2、添加savedetail抽象方法" aria-hidden="true">#</a> 2、添加<code>saveDetail</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.CategoryBrandRelationService</code>接口里添加<code>saveDetail</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveDetail</span><span class="token punctuation">(</span><span class="token class-name">CategoryBrandRelationEntity</span> categoryBrandRelation<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.2.png" alt="image-20220510215959515" tabindex="0" loading="lazy"><figcaption>image-20220510215959515</figcaption></figure><h4 id="_3、实现savedetail抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、实现savedetail抽象方法" aria-hidden="true">#</a> 3、实现<code>saveDetail</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.impl.CategoryBrandRelationServiceImpl</code>类里</p><p>实现<code>CategoryBrandRelationService</code>接口未实现的<code>saveDetail</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">BrandDao</span> brandDao<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">CategoryDao</span> categoryDao<span class="token punctuation">;</span>
    
<span class="token doc-comment comment">/**
 *原本的save方法只能保存 brand_id 和 catelog_id 的关联关系,不能保存 brand_name 和 catelog_name
 * 保存 brand_id、catelog_id、brand_name、catelog_name
 * <span class="token keyword">@param</span> <span class="token parameter">categoryBrandRelation</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveDetail</span><span class="token punctuation">(</span><span class="token class-name">CategoryBrandRelationEntity</span> categoryBrandRelation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Long</span> brandId <span class="token operator">=</span> categoryBrandRelation<span class="token punctuation">.</span><span class="token function">getBrandId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> catelogId <span class="token operator">=</span> categoryBrandRelation<span class="token punctuation">.</span><span class="token function">getCatelogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//根据brandId 查询 brandName</span>
    <span class="token class-name">BrandEntity</span> brandEntity <span class="token operator">=</span> brandDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>brandId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据 categoryId 查询 categoryName</span>
    <span class="token class-name">CategoryEntity</span> categoryEntity <span class="token operator">=</span> categoryDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    categoryBrandRelation<span class="token punctuation">.</span><span class="token function">setBrandName</span><span class="token punctuation">(</span>brandEntity<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    categoryBrandRelation<span class="token punctuation">.</span><span class="token function">setCatelogName</span><span class="token punctuation">(</span>categoryEntity<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>categoryBrandRelation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里报红不用管,使用MyBatis时dao接口没有实现类，接口是没有办法创建实例的，因此也就无法注入到ioc容器</p><p>IDEA检测到没有注入到ioc容器，所有就报红了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.3.png" alt="image-20220510220108353" tabindex="0" loading="lazy"><figcaption>image-20220510220108353</figcaption></figure><h4 id="_4、解决idea报红" tabindex="-1"><a class="header-anchor" href="#_4、解决idea报红" aria-hidden="true">#</a> 4、解决IDEA报红</h4><p>按住<code>ctrl</code>键，点击<code>BrandDao</code>进入<code>BrandDao</code>类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.4.1.png" alt="image-20220510222434101" tabindex="0" loading="lazy"><figcaption>image-20220510222434101</figcaption></figure><p>添加<code>@Repository</code>注解，显式的把<code>BrandDao</code>添加到ioc容器</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.4.2.png" alt="image-20220510222612590" tabindex="0" loading="lazy"><figcaption>image-20220510222612590</figcaption></figure><p>添加<code>@Repository</code>注解，显式的把<code>CategoryDao</code>添加到ioc容器</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.4.3.png" alt="image-20220510222727987" tabindex="0" loading="lazy"><figcaption>image-20220510222727987</figcaption></figure><p>已经不报红了(其实不修改也行)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.4.4.png" alt="image-20220510223032990" tabindex="0" loading="lazy"><figcaption>image-20220510223032990</figcaption></figure><h4 id="_5、测试-3" tabindex="-1"><a class="header-anchor" href="#_5、测试-3" aria-hidden="true">#</a> 5、测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><h5 id="_1、添加关联分类" tabindex="-1"><a class="header-anchor" href="#_1、添加关联分类" aria-hidden="true">#</a> 1、添加关联分类</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.5.1.gif" alt="3" tabindex="0" loading="lazy"><figcaption>3</figcaption></figure><h5 id="_2、查看回显数据" tabindex="-1"><a class="header-anchor" href="#_2、查看回显数据" aria-hidden="true">#</a> 2、查看回显数据</h5><p>URL: http://localhost:88/api/product/categorybrandrelation/catelog/list?t=1652197270780&amp;brandId=1</p><p>回显正常，证明<code>catelogList</code>方法和<code>save</code>方法正确</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.5.2.png" alt="image-20220510234520024" tabindex="0" loading="lazy"><figcaption>image-20220510234520024</figcaption></figure><h5 id="_3、查看数据库" tabindex="-1"><a class="header-anchor" href="#_3、查看数据库" aria-hidden="true">#</a> 3、查看数据库</h5><p>可以看到已经<code>brand_id、catelog_id、brand_name、catelog_name</code>全部添加到数据库了，所有<code>save</code>方法正确</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.3.5.3.png" alt="image-20220510233840276" tabindex="0" loading="lazy"><figcaption>image-20220510233840276</figcaption></figure><h3 id="_4-4-4、保证数据一致性" tabindex="-1"><a class="header-anchor" href="#_4-4-4、保证数据一致性" aria-hidden="true">#</a> 4.4.4、保证数据一致性</h3><p>当修改<code>brand_name</code>或<code>catelog_name</code>时,不仅要更新<code>pms_category</code>或<code>pms_brand</code>表</p><p>同时也要更新<code>pms_category_brand_relation</code>表，用来保证冗余字段的一致性</p><h4 id="_1、修改update方法" tabindex="-1"><a class="header-anchor" href="#_1、修改update方法" aria-hidden="true">#</a> 1、修改<code>update</code>方法</h4><p>修改<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.controller.BrandController</code>类的<code>update</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span><span class="token class-name">UpdateGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">BrandEntity</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    brandService<span class="token punctuation">.</span><span class="token function">updateDetail</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.1.png" alt="image-20220510235115019" tabindex="0" loading="lazy"><figcaption>image-20220510235115019</figcaption></figure><h4 id="_2、添加updatedetail抽象方法" tabindex="-1"><a class="header-anchor" href="#_2、添加updatedetail抽象方法" aria-hidden="true">#</a> 2、添加<code>updateDetail</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.BrandService</code>接口里添加<code>updateDetail</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">updateDetail</span><span class="token punctuation">(</span><span class="token class-name">BrandEntity</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.2.png" alt="image-20220510235219096" tabindex="0" loading="lazy"><figcaption>image-20220510235219096</figcaption></figure><h4 id="_3、实现updatedetail抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、实现updatedetail抽象方法" aria-hidden="true">#</a> 3、实现<code>updateDetail</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.impl.BrandServiceImpl</code>类里实现<code>updateDetail</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">CategoryBrandRelationService</span> categoryBrandRelationService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDetail</span><span class="token punctuation">(</span><span class="token class-name">BrandEntity</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//保证冗余字段的数据一致</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//同步更新其他关联表中的数据</span>
        categoryBrandRelationService<span class="token punctuation">.</span><span class="token function">updateBrand</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//TODO 更新其他关联</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.3.png" alt="image-20220511000527982" tabindex="0" loading="lazy"><figcaption>image-20220511000527982</figcaption></figure><h4 id="_4、添加updatebrand抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加updatebrand抽象方法" aria-hidden="true">#</a> 4、添加<code>updateBrand</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.CategoryBrandRelationService</code>接口里添加<code>updateBrand</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">updateBrand</span><span class="token punctuation">(</span><span class="token class-name">BrandEntity</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.4.png" alt="image-20220511000607317" tabindex="0" loading="lazy"><figcaption>image-20220511000607317</figcaption></figure><h4 id="_5、实现updatebrand抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现updatebrand抽象方法" aria-hidden="true">#</a> 5、实现<code>updateBrand</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.impl.CategoryBrandRelationServiceImpl</code>类里实现<code>updateBrand</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBrand</span><span class="token punctuation">(</span><span class="token class-name">BrandEntity</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CategoryBrandRelationEntity</span> categoryBrandRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CategoryBrandRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    categoryBrandRelationEntity<span class="token punctuation">.</span><span class="token function">setBrandId</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">getBrandId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    categoryBrandRelationEntity<span class="token punctuation">.</span><span class="token function">setBrandName</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token punctuation">&gt;</span></span> lambdaUpdateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaUpdateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token operator">::</span><span class="token function">getBrandId</span><span class="token punctuation">,</span>brand<span class="token punctuation">.</span><span class="token function">getBrandId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>categoryBrandRelationEntity<span class="token punctuation">,</span>lambdaUpdateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.5.png" alt="image-20220511001114986" tabindex="0" loading="lazy"><figcaption>image-20220511001114986</figcaption></figure><h4 id="_6、测试" tabindex="-1"><a class="header-anchor" href="#_6、测试" aria-hidden="true">#</a> 6、测试</h4><h5 id="_1、重启项目前" tabindex="-1"><a class="header-anchor" href="#_1、重启项目前" aria-hidden="true">#</a> 1、重启项目前</h5><p>可以看到当修改品牌名后，关联关系表并没有更新，因此没有正确回显</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.6.1.1.gif" alt="GIF 2022-5-11 0-14-16" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-11 0-14-16</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.6.1.2.png" alt="image-20220511001742563" tabindex="0" loading="lazy"><figcaption>image-20220511001742563</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.6.1.3.png" alt="image-20220511001759165" tabindex="0" loading="lazy"><figcaption>image-20220511001759165</figcaption></figure><h5 id="_2、重启项目后" tabindex="-1"><a class="header-anchor" href="#_2、重启项目后" aria-hidden="true">#</a> 2、重启项目后</h5><p>将<code>华为1</code>改为<code>华为</code>,重启<code>gulimall-product</code>项目后，再次测试</p><p>可以看到当修改品牌名后，关联关系表已经更新，并且正确回显</p><p>（成功后要恢复为原始数据）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.6.2.1.gif" alt="GIF 2022-5-11 0-20-17" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-11 0-20-17</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.6.2.2.png" alt="image-20220511002213445" tabindex="0" loading="lazy"><figcaption>image-20220511002213445</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.4.6.2.3.png" alt="image-20220511002226070" tabindex="0" loading="lazy"><figcaption>image-20220511002226070</figcaption></figure><h3 id="_4-4-5、保证category数据一致性" tabindex="-1"><a class="header-anchor" href="#_4-4-5、保证category数据一致性" aria-hidden="true">#</a> 4.4.5、保证<code>Category</code>数据一致性</h3><h4 id="_1、修改category的update方法" tabindex="-1"><a class="header-anchor" href="#_1、修改category的update方法" aria-hidden="true">#</a> 1、修改<code>Category</code>的<code>update</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.CategoryController</code>类里修改<code>update</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CategoryEntity</span> category<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//级联更新</span>
    categoryService<span class="token punctuation">.</span><span class="token function">updateCascade</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.1.png" alt="image-20220511002457753" tabindex="0" loading="lazy"><figcaption>image-20220511002457753</figcaption></figure><h4 id="_2、添加updatecascade抽象方法" tabindex="-1"><a class="header-anchor" href="#_2、添加updatecascade抽象方法" aria-hidden="true">#</a> 2、添加<code>updateCascade</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.CategoryService</code>类里添加<code>updateCascade</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">updateCascade</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span> category<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.2.png" alt="image-20220511002632061" tabindex="0" loading="lazy"><figcaption>image-20220511002632061</figcaption></figure><h4 id="_3、实现updatecascade抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、实现updatecascade抽象方法" aria-hidden="true">#</a> 3、实现<code>updateCascade</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.impl.CategoryServiceImpl</code>类里实现<code>updateCascade</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">CategoryBrandRelationService</span> categoryBrandRelationService<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 级联更新所有的数据
 * <span class="token keyword">@param</span> <span class="token parameter">category</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateCascade</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
    categoryBrandRelationService<span class="token punctuation">.</span><span class="token function">updateCategory</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.3.png" alt="image-20220511003343110" tabindex="0" loading="lazy"><figcaption>image-20220511003343110</figcaption></figure><h4 id="_4、添加updatecategory抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加updatecategory抽象方法" aria-hidden="true">#</a> 4、添加<code>updateCategory</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.CategoryBrandRelationService</code>接口里添加<code>updateCategory</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">updateCategory</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span> category<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.4.png" alt="image-20220511003421670" tabindex="0" loading="lazy"><figcaption>image-20220511003421670</figcaption></figure><h4 id="_5、实现updatecategory抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现updatecategory抽象方法" aria-hidden="true">#</a> 5、实现<code>updateCategory</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.service.impl.CategoryBrandRelationServiceImpl</code>类里实现<code>updateCategory</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateCategory</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span> category<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">updateCategory</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.5..png" alt="image-20220511113803364" tabindex="0" loading="lazy"><figcaption>image-20220511113803364</figcaption></figure><h4 id="_6、添加updatecategory抽象方法" tabindex="-1"><a class="header-anchor" href="#_6、添加updatecategory抽象方法" aria-hidden="true">#</a> 6、添加<code>updateCategory</code>抽象方法</h4><p>在<code>com.atguigu.gulimall.product.dao.CategoryBrandRelationDao</code>类添加<code>updateCategory</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">updateCategory</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span> category<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>鼠标悬浮在<code>updateCategory</code>上或使用<code>alt+enter</code>快捷键点击<code>Generater statement</code>，如果没有这个选项说明没有安装<strong>MyBatis插件</strong></p><p>没有小鸟图标也可以证明没有安装<strong>MyBatis插件</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.6.1.png" alt="image-20220511123714784" tabindex="0" loading="lazy"><figcaption>image-20220511123714784</figcaption></figure><h5 id="mybatis传递多个参数的4种方式" tabindex="-1"><a class="header-anchor" href="#mybatis传递多个参数的4种方式" aria-hidden="true">#</a> 🚀Mybatis传递多个参数的4种方式</h5><h6 id="方法1-顺序传参法" tabindex="-1"><a class="header-anchor" href="#方法1-顺序传参法" aria-hidden="true">#</a> 方法1：顺序传参法</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>public User selectUser<span class="token punctuation">(</span>String name, int deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>select <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> <span class="token assign-left variable">resultMap</span><span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
    <span class="token keyword">select</span> * from user
    where user_name <span class="token operator">=</span> <span class="token comment">#{0} and dept_id = #{1}</span>
<span class="token operator">&lt;</span>/select<span class="token operator">&gt;</span>
<span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#{}里面的数字代表你传入参数的顺序。</p><p>这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。</p><h6 id="方法2-param注解传参法" tabindex="-1"><a class="header-anchor" href="#方法2-param注解传参法" aria-hidden="true">#</a> 方法2：@Param注解传参法</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>public User selectUser<span class="token punctuation">(</span>@Param<span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">)</span> String name, int @Param<span class="token punctuation">(</span><span class="token string">&quot;deptId&quot;</span><span class="token punctuation">)</span> deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>select <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> <span class="token assign-left variable">resultMap</span><span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
    <span class="token keyword">select</span> * from user
    where user_name <span class="token operator">=</span> <span class="token comment">#{userName} and dept_id = #{deptId}</span>
<span class="token operator">&lt;</span>/select<span class="token operator">&gt;</span>
<span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#{}里面的名称对应的是注解 @Param括号里面修饰的名称。 这种方法在参数不多的情况还是比较直观的，推荐使用。</p><h6 id="方法3-map传参法" tabindex="-1"><a class="header-anchor" href="#方法3-map传参法" aria-hidden="true">#</a> 方法3：Map传参法</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>public User selectUser<span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>select <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> <span class="token assign-left variable">parameterType</span><span class="token operator">=</span><span class="token string">&quot;java.util.Map&quot;</span> <span class="token assign-left variable">resultMap</span><span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
    <span class="token keyword">select</span> * from user
    where user_name <span class="token operator">=</span> <span class="token comment">#{userName} and dept_id = #{deptId}</span>
<span class="token operator">&lt;</span>/select<span class="token operator">&gt;</span>
<span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#{}里面的名称对应的是 Map里面的key名称。</p><p>这种方法适合传递多个参数，且参数易变能灵活传递的情况。</p><h6 id="方法4-java-bean传参法" tabindex="-1"><a class="header-anchor" href="#方法4-java-bean传参法" aria-hidden="true">#</a> 方法4：Java Bean传参法</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>public User selectUser<span class="token punctuation">(</span>User params<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>select <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">&quot;selectUser&quot;</span> <span class="token assign-left variable">parameterType</span><span class="token operator">=</span><span class="token string">&quot;com.test.User&quot;</span> <span class="token assign-left variable">resultMap</span><span class="token operator">=</span><span class="token string">&quot;UserResultMap&quot;</span><span class="token operator">&gt;</span>
    <span class="token keyword">select</span> * from user
    where user_name <span class="token operator">=</span> <span class="token comment">#{userName} and dept_id = #{deptId}</span>
<span class="token operator">&lt;</span>/select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>#{}里面的名称对应的是 User类里面的成员属性。</p><p>这种方法很直观，但需要建一个实体类，扩展不容易，需要加属性，看情况使用。</p><h5 id="添加mybatis插件" tabindex="-1"><a class="header-anchor" href="#添加mybatis插件" aria-hidden="true">#</a> 🚀添加MyBatis插件</h5><p>点击<code>File</code>--&gt;<code>Settings...</code>--&gt;<code>Plugins</code>--&gt;搜索<code>MyBatisX</code>--&gt;点击<code>install</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.6.2.png" alt="image-20220511145711068" tabindex="0" loading="lazy"><figcaption>image-20220511145711068</figcaption></figure><h4 id="_7、添加updatecategory的sql语句" tabindex="-1"><a class="header-anchor" href="#_7、添加updatecategory的sql语句" aria-hidden="true">#</a> 7、添加<code>updateCategory</code>的sql语句</h4><p>在<code>src/main/resources/mapper/product/CategoryBrandRelationDao.xml</code>中添加<code>updateCategory</code>的sql语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>update <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">&quot;updateCategory&quot;</span> <span class="token assign-left variable">parameterType</span><span class="token operator">=</span><span class="token string">&quot;categoryEntity&quot;</span><span class="token operator">&gt;</span>
    update gulimall_pms.pms_category_brand_relation
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">catelog_name</span><span class="token operator">=</span><span class="token comment">#{name}</span>
    where <span class="token assign-left variable">catelog_id</span><span class="token operator">=</span><span class="token comment">#{catId}</span>
<span class="token operator">&lt;</span>/update<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.7.png" alt="image-20220511124930457" tabindex="0" loading="lazy"><figcaption>image-20220511124930457</figcaption></figure><h4 id="_8、为实体类起别名" tabindex="-1"><a class="header-anchor" href="#_8、为实体类起别名" aria-hidden="true">#</a> 8、为实体类起别名</h4><p>在<code>src/main/resources/application.yml</code>里添加配置，为<code>com.atguigu.gulimall.product.entity</code>包下的实体类起别名</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token comment">#起别名</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.gulimall.product.entity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.8.png" alt="image-20220511125048450" tabindex="0" loading="lazy"><figcaption>image-20220511125048450</figcaption></figure><h4 id="_9、单元测试" tabindex="-1"><a class="header-anchor" href="#_9、单元测试" aria-hidden="true">#</a> 9、单元测试</h4><p>在<code>src/test/java/com/atguigu/gulimall/product/GulimallProductApplicationTests.java</code>里添加测试方法</p><p>使用MyBatis时dao接口没有实现类，接口是没有办法创建实例的，因此也就无法注入到ioc容器</p><p>IDEA检测到没有注入到ioc容器，所有就报红了</p><p>可以按<code>ctrl</code>键并点击<code>CategoryBrandRelationDao</code>,在该类上添加<code>@Repository</code>注解，显式的把<code>BrandDao</code>添加到ioc容器，就不报红了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">CategoryBrandRelationDao</span> categoryBrandRelationDao<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCategoryBrandRelationDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">CategoryEntity</span> categoryEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CategoryEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   categoryEntity<span class="token punctuation">.</span><span class="token function">setCatId</span><span class="token punctuation">(</span><span class="token number">225L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   categoryEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;手机2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   categoryBrandRelationDao<span class="token punctuation">.</span><span class="token function">updateCategory</span><span class="token punctuation">(</span>categoryEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.9.1.png" alt="image-20220511151116797" tabindex="0" loading="lazy"><figcaption>image-20220511151116797</figcaption></figure><p>数据库已经更新</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.9.2.png" alt="image-20220511125255539" tabindex="0" loading="lazy"><figcaption>image-20220511125255539</figcaption></figure><h4 id="_10、前端测试" tabindex="-1"><a class="header-anchor" href="#_10、前端测试" aria-hidden="true">#</a> 10、前端测试</h4><p>把数据在改回来(把<code>brand_name</code>为<code>华为1</code>的修改为<code>华为</code>、把<code>catelog_name</code>为<code>手机2</code>的修改为<code>手机</code>)</p><p>然后重启<code>gulimall-product</code>项目，刷新前端页面进行测试，可以看到冗余字段已经更新了</p><p>（成功后要恢复为原始数据）</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.5.10.gif" alt="GIF 2022-5-11 15-30-12" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-11 15-30-12</figcaption></figure><h3 id="_4-4-6、开启事务功能" tabindex="-1"><a class="header-anchor" href="#_4-4-6、开启事务功能" aria-hidden="true">#</a> 4.4.6、开启事务功能</h3><h4 id="_1、开启事务功能" tabindex="-1"><a class="header-anchor" href="#_1、开启事务功能" aria-hidden="true">#</a> 1、开启事务功能</h4><p>在<code>com.atguigu.gulimall.product.config.MyBatisConfig</code>配置类里开启事务功能(已经开启过了)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableTransactionManagement</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.6.1.png" alt="image-20220511004119519" tabindex="0" loading="lazy"><figcaption>image-20220511004119519</figcaption></figure><h4 id="_2、updatecascade方法上添加事务注解" tabindex="-1"><a class="header-anchor" href="#_2、updatecascade方法上添加事务注解" aria-hidden="true">#</a> 2、<code>updateCascade</code>方法上添加事务注解</h4><p>在<code>com.atguigu.gulimall.product.service.impl.CategoryServiceImpl</code>类的<code>updateCascade</code>方法上添加<code>@Transactional</code>注解</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.6.2.png" alt="image-20220511004035837" tabindex="0" loading="lazy"><figcaption>image-20220511004035837</figcaption></figure><h4 id="_3、updatedetail方法上添加事务注解" tabindex="-1"><a class="header-anchor" href="#_3、updatedetail方法上添加事务注解" aria-hidden="true">#</a> 3、<code>updateDetail</code>方法上添加事务注解</h4><p>在<code>com.atguigu.gulimall.product.service.impl.BrandServiceImpl</code>类的<code>updateDetail</code>方法上添加<code>@Transactional</code>注解</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.4.6.3.png" alt="image-20220511004000692" tabindex="0" loading="lazy"><figcaption>image-20220511004000692</figcaption></figure><h2 id="_4-5、商品服务-api-平台属性" tabindex="-1"><a class="header-anchor" href="#_4-5、商品服务-api-平台属性" aria-hidden="true">#</a> 4.5、商品服务-API-平台属性</h2><h3 id="_4-5-1、规格参数新增与vo" tabindex="-1"><a class="header-anchor" href="#_4-5-1、规格参数新增与vo" aria-hidden="true">#</a> 4.5.1、规格参数新增与VO</h3><h4 id="_1、修改querypage方法" tabindex="-1"><a class="header-anchor" href="#_1、修改querypage方法" aria-hidden="true">#</a> 1、修改<code>queryPage</code>方法</h4><h5 id="_1、查询全部时有查询条件" tabindex="-1"><a class="header-anchor" href="#_1、查询全部时有查询条件" aria-hidden="true">#</a> 1、查询全部时有查询条件</h5><p>url: http://localhost:88/api/product/attrgroup/list/0?t=1652341878270&amp;page=1&amp;limit=10&amp;key=%E4%B8%BB</p><p>以前写的只有<code>catelogId != 0</code>时才带查询条件,因此输入查询条件，然后点击<code>查询全部</code>，并没有根据条件查询全部</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.1.1.png" alt="image-20220512160738015" tabindex="0" loading="lazy"><figcaption>image-20220512160738015</figcaption></figure><h5 id="_2、以前写的只有catelogid-0时才带查询条件" tabindex="-1"><a class="header-anchor" href="#_2、以前写的只有catelogid-0时才带查询条件" aria-hidden="true">#</a> 2、以前写的只有<code>catelogId != 0</code>时才带查询条件</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> catelogId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>catelogId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//select * from attr_group where catelogId = ? and ( attr_group_id = key or attr_group_name like %key%)</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            queryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
                obj<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupId</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupName</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.1.2.png" alt="image-20220512155755111" tabindex="0" loading="lazy"><figcaption>image-20220512155755111</figcaption></figure><h5 id="_3、修改querypage方法" tabindex="-1"><a class="header-anchor" href="#_3、修改querypage方法" aria-hidden="true">#</a> 3、修改<code>queryPage</code>方法</h5><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrGroupServiceImpl</code>里的<code>queryPage</code>方法，</p><p>使得不管<code>catelogId</code>是否等于0，都带上查询条件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> catelogId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            obj<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupId</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupName</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">if</span> <span class="token punctuation">(</span>catelogId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//select * from attr_group where ( attr_group_id = key or attr_group_name like %key%)</span>
        <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//select * from attr_group where ( attr_group_id = key or attr_group_name like %key%) and catelogId = ?</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span> catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT attr_group_id,icon,catelog_id,sort,descript,attr_group_name FROM pms_attr_group 
WHERE (( (attr_group_id = ? OR attr_group_name LIKE ?) ) AND catelog_id = ?) LIMIT ?,? 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.1.3.png" alt="image-20220512000235143" tabindex="0" loading="lazy"><figcaption>image-20220512000235143</figcaption></figure><h5 id="_4、错误写法" tabindex="-1"><a class="header-anchor" href="#_4、错误写法" aria-hidden="true">#</a> 4、错误写法</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> catelogId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupId</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupName</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">if</span> <span class="token punctuation">(</span>catelogId <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//select * from attr_group where ( attr_group_id = key or attr_group_name like %key%)</span>
        <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//select * from attr_group where ( attr_group_id = key or attr_group_name like %key%) and catelogId = ?</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>obj<span class="token operator">-&gt;</span>obj<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span> catelogId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样写的<code>queryWrapper.and(obj-&gt;obj.eq(AttrGroupEntity::getCatelogId, catelogId));</code>使用<code>and</code>就没意义了</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT attr_group_id,icon,catelog_id,sort,descript,attr_group_name FROM pms_attr_group WHERE (attr_group_id = ? OR attr_group_name LIKE ? AND ( (catelog_id = ?) )) LIMIT ?,? 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.1.4.png" alt="image-20220512000844124" tabindex="0" loading="lazy"><figcaption>image-20220512000844124</figcaption></figure><h5 id="_5、测试-4" tabindex="-1"><a class="header-anchor" href="#_5、测试-4" aria-hidden="true">#</a> 5、测试</h5><p>重启<code>gulimall-product</code>模块，然后刷新前端页面</p><p>重新输入查询条件，然后点击<code>查询全部</code>，已经根据条件查询全部了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.1.5.png" alt="image-20220512161159756" tabindex="0" loading="lazy"><figcaption>image-20220512161159756</figcaption></figure><h4 id="_2、测试新增属性" tabindex="-1"><a class="header-anchor" href="#_2、测试新增属性" aria-hidden="true">#</a> 2、测试新增属性</h4><h5 id="_1、基础属性" tabindex="-1"><a class="header-anchor" href="#_1、基础属性" aria-hidden="true">#</a> 1、基础属性</h5><p>当点击<code>商品系统</code>下的<code>平台属性</code>下的<code>规格参数</code>时，会获取<code>基础属性</code>(规格参数，如机身颜色等)的列表</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.2.1.png" alt="image-20220512161328451" tabindex="0" loading="lazy"><figcaption>image-20220512161328451</figcaption></figure><h5 id="_2、新建属性-规格参数" tabindex="-1"><a class="header-anchor" href="#_2、新建属性-规格参数" aria-hidden="true">#</a> 2、新建属性(规格参数)</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.2.2.png" alt="image-20220512162502623" tabindex="0" loading="lazy"><figcaption>image-20220512162502623</figcaption></figure><h5 id="_3、保存成功了" tabindex="-1"><a class="header-anchor" href="#_3、保存成功了" aria-hidden="true">#</a> 3、保存成功了</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.2.3.png" alt="image-20220512162518487" tabindex="0" loading="lazy"><figcaption>image-20220512162518487</figcaption></figure><h5 id="_4、但是只是基本保存" tabindex="-1"><a class="header-anchor" href="#_4、但是只是基本保存" aria-hidden="true">#</a> 4、但是只是基本保存</h5><p>只是基本保存，只是保存了是哪个分类的，并没有保存是哪个分组</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.2.4.1.png" alt="image-20220512162814832" tabindex="0" loading="lazy"><figcaption>image-20220512162814832</figcaption></figure><p>分类属性保存进来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.2.4.2.png" alt="image-20220512163039683" tabindex="0" loading="lazy"><figcaption>image-20220512163039683</figcaption></figure><p>但是关联关系没保存</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.2.4.3.png" alt="image-20220512163053494" tabindex="0" loading="lazy"><figcaption>image-20220512163053494</figcaption></figure><h4 id="_3、修改方法" tabindex="-1"><a class="header-anchor" href="#_3、修改方法" aria-hidden="true">#</a> 3、修改方法</h4><h5 id="_1、添加attrvo类" tabindex="-1"><a class="header-anchor" href="#_1、添加attrvo类" aria-hidden="true">#</a> 1、添加<code>AttrVo</code>类</h5><p>由于在实体类里添加字段，然后再标注<code>@TableField(exist = false)</code>注解，告诉<code>MyBatis</code>该字段不存在是很不规范的，</p><p>所以可以使用Vo对象，Vo是用来封装请求和响应数据的，不建议继承实体类，因遵循多实现，少继承的原则</p><p><code>AttrVo</code>类里面跟数据库相关的注解就不需要了</p><p>在\`\`gulimall-product<code>模块的</code>com.atguigu.gulimall.product<code>包下新建</code>vo\`文件夹</p><p>在<code>com.atguigu.gulimall.product.vo</code>包下新建<code>AttrVo</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/12
 * @Description:
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttrVo</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 属性id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> attrId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 属性名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> attrName<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 是否需要检索[0-不需要，1-需要]
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> searchType<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 属性图标
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> icon<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 可选值列表[用逗号分隔]
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> valueSelect<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 属性类型[0-销售属性，1-基本属性，2-既是销售属性又是基本属性]
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> attrType<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 启用状态[0 - 禁用，1 - 启用]
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> enable<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属分类
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> catelogId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 快速展示【是否展示在介绍上；0-否 1-是】，在sku中仍然可以调整
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> showDesc<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> attrGroupId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.3.1.png" alt="image-20220512164302169" tabindex="0" loading="lazy"><figcaption>image-20220512164302169</figcaption></figure><p><strong>扩展：</strong></p><p><strong>Object 划分</strong></p><h6 id="_1-po-persistant-object-持久对象" tabindex="-1"><a class="header-anchor" href="#_1-po-persistant-object-持久对象" aria-hidden="true">#</a> 1.PO(persistant object) 持久对象</h6><p>PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。</p><h6 id="_2-do-domain-object-领域对象" tabindex="-1"><a class="header-anchor" href="#_2-do-domain-object-领域对象" aria-hidden="true">#</a> 2.DO（Domain Object）领域对象</h6><p>就是从现实世界中抽象出来的有形或无形的业务实体。</p><h6 id="_3-to-transfer-object-数据传输对象" tabindex="-1"><a class="header-anchor" href="#_3-to-transfer-object-数据传输对象" aria-hidden="true">#</a> 3.TO(Transfer Object) ，数据传输对象</h6><p>不同的应用程序之间传输的对象</p><h6 id="_4-dto-data-transfer-object-数据传输对象" tabindex="-1"><a class="header-anchor" href="#_4-dto-data-transfer-object-数据传输对象" aria-hidden="true">#</a> 4.DTO（Data Transfer Object）数据传输对象</h6><p>这个概念来源于 J2EE 的设计模式，原来的目的是为了 EJB 的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，</p><p>从而提高分布式调用的性能和降低网络负载，但在这里，泛指用于展示层与服务层之间的数据传输对象。</p><h6 id="_5-vo-value-object-值对象" tabindex="-1"><a class="header-anchor" href="#_5-vo-value-object-值对象" aria-hidden="true">#</a> 5.VO(value object) 值对象</h6><p>通常用于业务层之间的数据传递，和 PO 一样也是仅仅包含数据而已。但应是抽象出的业务对象 , 可以和表对应 , 也可以不 ,</p><p>这根据业务的需要 。用 new 关键字创建，由GC 回收的。 View object：视图对象； 接受页面传递来的数据，封装对象 将业务处理完成的对象，封装成页面要用的数据</p><h6 id="_6-bo-business-object-业务对象" tabindex="-1"><a class="header-anchor" href="#_6-bo-business-object-业务对象" aria-hidden="true">#</a> 6.BO(business object) 业务对象</h6><p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 ,</p><p>结合 PO,VO 进行业务操作。business object: 业务对象 主要作用是把业务逻辑封装为一个对象。</p><p>这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。</p><p>我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。</p><p>建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p><h6 id="_7-pojo-plain-ordinary-java-object-简单无规则-java-对象" tabindex="-1"><a class="header-anchor" href="#_7-pojo-plain-ordinary-java-object-简单无规则-java-对象" aria-hidden="true">#</a> 7.POJO(plain ordinary java object) 简单无规则 java 对象</h6><p>传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 java Bean ，只有属性字段及 setter 和 getter方法！ POJO 是 DO/DTO/BO/VO 的统称。</p><h6 id="_8-dao-data-access-object-数据访问对象" tabindex="-1"><a class="header-anchor" href="#_8-dao-data-access-object-数据访问对象" aria-hidden="true">#</a> 8.DAO(data access object) 数据访问对象</h6><p>是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。</p><p>此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 ,</p><p>结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作</p><h5 id="_2、修改save方法" tabindex="-1"><a class="header-anchor" href="#_2、修改save方法" aria-hidden="true">#</a> 2、修改<code>save</code>方法</h5><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrController</code>类的<code>save</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    attrService<span class="token punctuation">.</span><span class="token function">saveAttr</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.3.2.png" alt="image-20220512165118105" tabindex="0" loading="lazy"><figcaption>image-20220512165118105</figcaption></figure><h5 id="_3、添加saveattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、添加saveattr抽象方法" aria-hidden="true">#</a> 3、添加<code>saveAttr</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.AttrService</code>接口里添加<code>saveAttr</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.3.3.png" alt="image-20220512165526385" tabindex="0" loading="lazy"><figcaption>image-20220512165526385</figcaption></figure><h5 id="_4、实现saveattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、实现saveattr抽象方法" aria-hidden="true">#</a> 4、实现<code>saveAttr</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里实现<code>saveAttr</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将attr中的数据复制到attrEntity对应的字段里</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//1、保存基本数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2、保存关联关系</span>
    <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用this.save(attrEntity);方法后，会将数据库生成的attrId封装到AttrEntity里面</span>
    attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrId</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.3.4.png" alt="image-20220512171158059" tabindex="0" loading="lazy"><figcaption>image-20220512171158059</figcaption></figure><h5 id="_5、测试-5" tabindex="-1"><a class="header-anchor" href="#_5、测试-5" aria-hidden="true">#</a> 5、测试</h5><p>重启<code>gulimall-product</code>模块，重新添加规格参数</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.3.5.1.png" alt="image-20220512171458466" tabindex="0" loading="lazy"><figcaption>image-20220512171458466</figcaption></figure><p>关联关系已经成功保存了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.1.3.5.2.png" alt="image-20220512171744173" tabindex="0" loading="lazy"><figcaption>image-20220512171744173</figcaption></figure><h3 id="_4-5-2、规格参数列表显示" tabindex="-1"><a class="header-anchor" href="#_4-5-2、规格参数列表显示" aria-hidden="true">#</a> 4.5.2、规格参数列表显示</h3><h4 id="_1、添加查询规格参数列表功能" tabindex="-1"><a class="header-anchor" href="#_1、添加查询规格参数列表功能" aria-hidden="true">#</a> 1、添加查询规格参数列表功能</h4><h5 id="_1、查看请求-1" tabindex="-1"><a class="header-anchor" href="#_1、查看请求-1" aria-hidden="true">#</a> 1、查看请求</h5><p>当点击<code>规格参数</code>里的<code>手机\\手机通讯\\手机</code>后，会发送这个请求</p><p>http://localhost:88/api/product/attr/base/list/225?t=1652347219117&amp;page=1&amp;limit=10&amp;key=</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.1.1.1.png" alt="image-20220512172045858" tabindex="0" loading="lazy"><figcaption>image-20220512172045858</figcaption></figure>`,336),Ma={href:"https://easydoc.net/s/78237135/ZUqEdvA4/Ld1Vfkcd",target:"_blank",rel:"noopener noreferrer"},Oa=e(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.1.1.2.png" alt="image-20220518194247523" tabindex="0" loading="lazy"><figcaption>image-20220518194247523</figcaption></figure><h5 id="_2、添加baseattrlist方法" tabindex="-1"><a class="header-anchor" href="#_2、添加baseattrlist方法" aria-hidden="true">#</a> 2、添加<code>baseAttrList</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrController</code>类里添加<code>baseAttrList</code>方法</p><p>这里的代码有问题，应该为<code>@GetMapping(&quot;/base/list/{categoryId}&quot;)</code>，多写了个<code>$</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/base/list/\${categoryId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">baseAttrList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;categoryId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">PageUtils</span> page <span class="token operator">=</span> attrService<span class="token punctuation">.</span><span class="token function">queryBaseAttrPage</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span>categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.1.2.png" alt="image-20220512173043820" tabindex="0" loading="lazy"><figcaption>image-20220512173043820</figcaption></figure><h5 id="_3、添加querybaseattrpage抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、添加querybaseattrpage抽象方法" aria-hidden="true">#</a> 3、添加<code>queryBaseAttrPage</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.AttrService</code>接口里添加<code>queryBaseAttrPage</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageUtils</span> <span class="token function">queryBaseAttrPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.1.3.png" alt="image-20220512173145318" tabindex="0" loading="lazy"><figcaption>image-20220512173145318</figcaption></figure><h5 id="_4、实现querybaseattrpage抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、实现querybaseattrpage抽象方法" aria-hidden="true">#</a> 4、实现<code>queryBaseAttrPage</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里实现<code>queryBaseAttrPage</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryBaseAttrPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>categoryId <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span> categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
           obj<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrName</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.1.4.png" alt="image-20220512174710768" tabindex="0" loading="lazy"><figcaption>image-20220512174710768</figcaption></figure><h5 id="_5、测试-6" tabindex="-1"><a class="header-anchor" href="#_5、测试-6" aria-hidden="true">#</a> 5、测试</h5><p>重启<code>gulimall-product</code>模块，刷新前端界面</p><p>报错了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Could not resolve placeholder &#39;categoryId&#39; in value &quot;/base/list/\${categoryId}&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.1.5.1.png" alt="image-20220512175657245" tabindex="0" loading="lazy"><figcaption>image-20220512175657245</figcaption></figure><p>修改代码，删掉<code>@GetMapping(&quot;/base/list/{categoryId}&quot;)</code>里面多写的<code>$</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/base/list/{categoryId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">baseAttrList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;categoryId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">PageUtils</span> page <span class="token operator">=</span> attrService<span class="token punctuation">.</span><span class="token function">queryBaseAttrPage</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span>categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.1.5.2.png" alt="image-20220512231037337" tabindex="0" loading="lazy"><figcaption>image-20220512231037337</figcaption></figure><p>重新启动<code>gulimall-product</code>模块，刷新前端界面</p><p>已经显示出来了，但是<strong>所属分类</strong>和<strong>所属分组</strong>没有显示</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.1.5.3.png" alt="image-20220512231242187" tabindex="0" loading="lazy"><figcaption>image-20220512231242187</figcaption></figure><h4 id="_2、显示所属分类和所属分组" tabindex="-1"><a class="header-anchor" href="#_2、显示所属分类和所属分组" aria-hidden="true">#</a> 2、显示所属分类和所属分组</h4><h5 id="_1、新建attrrespvo类" tabindex="-1"><a class="header-anchor" href="#_1、新建attrrespvo类" aria-hidden="true">#</a> 1、新建<code>AttrRespVo</code>类</h5><p>在<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.vo</code>包内新建<code>AttrRespVo</code>类，继承<code>AttrVo</code>类</p><p><strong>这里的<code>categoryName</code>是错的，应该为<code>catelogName</code></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/12
 * @Description:
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttrRespVo</span> <span class="token keyword">extends</span> <span class="token class-name">AttrVo</span><span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 所属分类名   /手机/数码/手机
     */</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属分组名  主机
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> groupName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.2.1.png" alt="image-20220513000203162" tabindex="0" loading="lazy"><figcaption>image-20220513000203162</figcaption></figure><h5 id="_2、修改querybaseattrpage方法" tabindex="-1"><a class="header-anchor" href="#_2、修改querybaseattrpage方法" aria-hidden="true">#</a> 2、修改<code>queryBaseAttrPage</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里修改<code>queryBaseAttrPage</code>方法</p><p>在大型项目中，连表查询很危险，做<strong>笛卡儿积</strong>会使数据量非常大，因此也不推荐使用<strong>外键</strong>，使用<code>service</code>来处理表之间的关系</p><p>在<code>streat</code>的<code>map</code>那，IDEA提示建议使用<code>peek</code>来代替<code>map</code>；<code>java.util.Stream.peek()</code>主要用于支持调试。如果流管道不包含终端操作，则不会使用任何元素，并且根本不会调用peek()操作。所以最好不要使用<code>peek</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">CategoryDao</span> categoryDao<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">AttrGroupDao</span> attrGroupDao<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryBaseAttrPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>categoryId <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果有categoryId，则查该categoryId的数据</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span> categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果有查询条件，则判断该条件是否 与attrId相等 或 名字包含该条件</span>
            obj<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrName</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//查询categoryName字段和groupName字段</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrRespVo</span><span class="token punctuation">&gt;</span></span> respVos <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>attrEntity <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">AttrRespVo</span> attrRespVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrRespVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">,</span> attrRespVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据attrId到attr和attrgroup的中间表查询 attrgroupId</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> attrAttrgroupRelationQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> attrEntity<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据attrgroupId查询中间表的该行数据，并封装到对象</span>
        <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>attrAttrgroupRelationQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attrAttrgroupRelationEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果查到attrgroupId，则根据attrgroupId查询attrgroupName，并添加到attrRespVo中</span>
            <span class="token class-name">AttrGroupEntity</span> attrGroupEntity <span class="token operator">=</span> attrGroupDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            attrRespVo<span class="token punctuation">.</span><span class="token function">setGroupName</span><span class="token punctuation">(</span>attrGroupEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> categoryQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        categoryQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span><span class="token operator">::</span><span class="token function">getCatId</span><span class="token punctuation">,</span> attrEntity<span class="token punctuation">.</span><span class="token function">getCatelogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据catelogId查询该行数据，并封装到对象</span>
        <span class="token class-name">CategoryEntity</span> categoryEntity <span class="token operator">=</span> categoryDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>categoryQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>categoryEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            attrRespVo<span class="token punctuation">.</span><span class="token function">setCategoryName</span><span class="token punctuation">(</span>categoryEntity<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> attrRespVo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">PageUtils</span> pageUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//重新给数据</span>
    pageUtils<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>respVos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pageUtils<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、测试-3" tabindex="-1"><a class="header-anchor" href="#_3、测试-3" aria-hidden="true">#</a> 3、测试</h5><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><h6 id="_1、所属分类没有数据-所属分组有数据" tabindex="-1"><a class="header-anchor" href="#_1、所属分类没有数据-所属分组有数据" aria-hidden="true">#</a> 1、所属分类没有数据，所属分组有数据</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.2.3.1.png" alt="image-20220513102104224" tabindex="0" loading="lazy"><figcaption>image-20220513102104224</figcaption></figure><h6 id="_2、查看所属分类绑定的名字" tabindex="-1"><a class="header-anchor" href="#_2、查看所属分类绑定的名字" aria-hidden="true">#</a> 2、查看所属分类绑定的名字</h6><p>可以看到绑定的名字为<code>catelogName</code>，而后端传过来的为<code>categoryName</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.2.3.2.1.png" alt="image-20220513102522427" tabindex="0" loading="lazy"><figcaption>image-20220513102522427</figcaption></figure><p>为什么是这个文件呢?</p><p>可以查看就是这个方法发送的请求</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.2.3.2.2.png" alt="image-20220513102715896" tabindex="0" loading="lazy"><figcaption>image-20220513102715896</figcaption></figure><h6 id="_3、修改字段名称" tabindex="-1"><a class="header-anchor" href="#_3、修改字段名称" aria-hidden="true">#</a> 3、修改字段名称</h6><p>修改<code>gulimall-product</code>模块<code>com.atguigu.gulimall.product.vo.AttrRespVo</code>类的字段</p><p>将<code>categoryName</code>改为<code>catelogName</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.2.3.3.1.png" alt="image-20220513102854084" tabindex="0" loading="lazy"><figcaption>image-20220513102854084</figcaption></figure><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类的<code>queryBaseAttrPage</code>方法</p><p>将</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>attrRespVo<span class="token punctuation">.</span><span class="token function">setCategoryName</span><span class="token punctuation">(</span>categoryEntity<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>attrRespVo<span class="token punctuation">.</span><span class="token function">setCatelogName</span><span class="token punctuation">(</span>categoryEntity<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.2.3.3.2.png" alt="image-20220513102940156" tabindex="0" loading="lazy"><figcaption>image-20220513102940156</figcaption></figure><h5 id="_4、重新测试-2" tabindex="-1"><a class="header-anchor" href="#_4、重新测试-2" aria-hidden="true">#</a> 4、重新测试</h5><p>重启<code>gulimall-product</code>模块，刷新前端页面，已成功显示所属分类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.2.2.4.png" alt="image-20220513103829286" tabindex="0" loading="lazy"><figcaption>image-20220513103829286</figcaption></figure><h3 id="_4-5-3、规格参数修改回显" tabindex="-1"><a class="header-anchor" href="#_4-5-3、规格参数修改回显" aria-hidden="true">#</a> 4.5.3、规格参数修改回显</h3><h4 id="_1、查看需要回显的数据" tabindex="-1"><a class="header-anchor" href="#_1、查看需要回显的数据" aria-hidden="true">#</a> 1、查看需要回显的数据</h4><p>点击<code>修改</code>按钮，可以看到还需要会先拿<code>属性分类</code>和<code>所属分组</code>,而且我点的是<code>修改</code>，这个表单却显示的是修改</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.3.1.png" alt="image-20220513104507146" tabindex="0" loading="lazy"><figcaption>image-20220513104507146</figcaption></figure><h4 id="_2、填加catelogpath字段" tabindex="-1"><a class="header-anchor" href="#_2、填加catelogpath字段" aria-hidden="true">#</a> 2、填加<code>catelogPath</code>字段</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo.AttrRespVo</code>类里添加<code>catelogPath</code>字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> catelogPath<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.3.2.png" alt="image-20220513104838259" tabindex="0" loading="lazy"><figcaption>image-20220513104838259</figcaption></figure><h4 id="_3、修改info方法" tabindex="-1"><a class="header-anchor" href="#_3、修改info方法" aria-hidden="true">#</a> 3、修改<code>info</code>方法</h4><p>在<code>gulimall-product</code>模块里，修改<code>com.atguigu.gulimall.product.controller.AttrController</code>类的<code>info</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/info/{attrId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;attrId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> attrId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//AttrEntity attr = attrService.getById(attrId);</span>
    <span class="token class-name">AttrRespVo</span> respVo <span class="token operator">=</span> attrService<span class="token punctuation">.</span><span class="token function">getAttrInfo</span><span class="token punctuation">(</span>attrId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;attr&quot;</span><span class="token punctuation">,</span> respVo
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.3.3.png" alt="image-20220513105158303" tabindex="0" loading="lazy"><figcaption>image-20220513105158303</figcaption></figure><h4 id="_4、添加getattrinfo抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加getattrinfo抽象方法" aria-hidden="true">#</a> 4、添加<code>getAttrInfo</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.AttrService</code>接口里添加<code>getAttrInfo</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AttrRespVo</span> <span class="token function">getAttrInfo</span><span class="token punctuation">(</span><span class="token class-name">Long</span> attrId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.3.4.png" alt="image-20220513105520512" tabindex="0" loading="lazy"><figcaption>image-20220513105520512</figcaption></figure><h4 id="_5、实现getattrinfo抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现getattrinfo抽象方法" aria-hidden="true">#</a> 5、实现<code>getAttrInfo</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里实现<code>getAttrInfo</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">AttrRespVo</span> <span class="token function">getAttrInfo</span><span class="token punctuation">(</span><span class="token class-name">Long</span> attrId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrRespVo</span> attrRespVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrRespVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据attrId到attr表中查该行数据</span>
    <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>attrId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">,</span> attrRespVo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> attrAttrgroupRelationQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    attrAttrgroupRelationQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> attrId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据attrId到attrAttrgroupRelation关联关系表里查attrGroupId</span>
    <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>attrAttrgroupRelationQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attrAttrgroupRelationEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        attrRespVo<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据attrGroupId到attrGroup表里查groupName</span>
        <span class="token class-name">AttrGroupEntity</span> attrGroupEntity <span class="token operator">=</span> attrGroupDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attrGroupEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            attrRespVo<span class="token punctuation">.</span><span class="token function">setGroupName</span><span class="token punctuation">(</span>attrGroupEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//根据最后一级分类id到categoryService中查询完整三级分类id</span>
    <span class="token class-name">Long</span> catelogId <span class="token operator">=</span> attrEntity<span class="token punctuation">.</span><span class="token function">getCatelogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> catelogPath <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">findCatelogPath</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>catelogPath<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        attrRespVo<span class="token punctuation">.</span><span class="token function">setCatelogPath</span><span class="token punctuation">(</span>catelogPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> attrRespVo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.3.5.png" alt="image-20220513111825693" tabindex="0" loading="lazy"><figcaption>image-20220513111825693</figcaption></figure><h4 id="_6、测试-1" tabindex="-1"><a class="header-anchor" href="#_6、测试-1" aria-hidden="true">#</a> 6、测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面，已成功显示<code>属性分类</code>和<code>所属分组</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.3.6.1.png" alt="image-20220513112029811" tabindex="0" loading="lazy"><figcaption>image-20220513112029811</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.3.6.2.png" alt="image-20220513112042807" tabindex="0" loading="lazy"><figcaption>image-20220513112042807</figcaption></figure><h3 id="_4-5-4、规格参数修改发送请求" tabindex="-1"><a class="header-anchor" href="#_4-5-4、规格参数修改发送请求" aria-hidden="true">#</a> 4.5.4、规格参数修改发送请求</h3><h4 id="_1、前端提交时规则校验失败" tabindex="-1"><a class="header-anchor" href="#_1、前端提交时规则校验失败" aria-hidden="true">#</a> 1、前端提交时规则校验失败</h4><h5 id="_1、值类型不能为空" tabindex="-1"><a class="header-anchor" href="#_1、值类型不能为空" aria-hidden="true">#</a> 1、值类型不能为空</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.1.png" alt="image-20220513114101205" tabindex="0" loading="lazy"><figcaption>image-20220513114101205</figcaption></figure><h5 id="_2、查看数据" tabindex="-1"><a class="header-anchor" href="#_2、查看数据" aria-hidden="true">#</a> 2、查看数据</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.2.png" alt="image-20220513114127890" tabindex="0" loading="lazy"><figcaption>image-20220513114127890</figcaption></figure><h5 id="_3、寻找原因" tabindex="-1"><a class="header-anchor" href="#_3、寻找原因" aria-hidden="true">#</a> 3、寻找原因</h5><h6 id="_1、绑定valuetype" tabindex="-1"><a class="header-anchor" href="#_1、绑定valuetype" aria-hidden="true">#</a> 1、绑定<code>valueType</code></h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.3.1.png" alt="image-20220513114746867" tabindex="0" loading="lazy"><figcaption>image-20220513114746867</figcaption></figure><h6 id="_2、valuetype数据字段" tabindex="-1"><a class="header-anchor" href="#_2、valuetype数据字段" aria-hidden="true">#</a> 2、<code>valueType</code>数据字段</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.3.2.png" alt="image-20220513115002459" tabindex="0" loading="lazy"><figcaption>image-20220513115002459</figcaption></figure><h6 id="_3、valuetype校验字段" tabindex="-1"><a class="header-anchor" href="#_3、valuetype校验字段" aria-hidden="true">#</a> 3、<code>valueType</code>校验字段</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.3.3.png" alt="image-20220513115126361" tabindex="0" loading="lazy"><figcaption>image-20220513115126361</figcaption></figure><h6 id="_4、初始化方法重新给valuetype赋值" tabindex="-1"><a class="header-anchor" href="#_4、初始化方法重新给valuetype赋值" aria-hidden="true">#</a> 4、初始化方法重新给<code>valueType</code>赋值</h6><p>初始化的时候重新给&quot;valueType&quot;赋值了 很有可能是在这个时候没有获取到&quot;valueType&quot;</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.3.4.png" alt="image-20220513115444277" tabindex="0" loading="lazy"><figcaption>image-20220513115444277</figcaption></figure><h6 id="_5、表单提交后重新给valuetype赋值" tabindex="-1"><a class="header-anchor" href="#_5、表单提交后重新给valuetype赋值" aria-hidden="true">#</a> 5、表单提交后重新给<code>valueType</code>赋值</h6><p>表单提交的时候也重新赋值了 但现在表单还没提交，应该不是这里</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.3.5.png" alt="image-20220513115757511" tabindex="0" loading="lazy"><figcaption>image-20220513115757511</figcaption></figure><h6 id="_6、查看初始化请求返回的数据" tabindex="-1"><a class="header-anchor" href="#_6、查看初始化请求返回的数据" aria-hidden="true">#</a> 6、查看初始化请求返回的数据</h6><p>可以看到没有<code>valueType</code>字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.3.6.png" alt="image-20220513120136532" tabindex="0" loading="lazy"><figcaption>image-20220513120136532</figcaption></figure><h6 id="_7、返回对象没有valuetype字段" tabindex="-1"><a class="header-anchor" href="#_7、返回对象没有valuetype字段" aria-hidden="true">#</a> 7、返回对象没有<code>valueType</code>字段</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.3.7.png" alt="image-20220513120635878" tabindex="0" loading="lazy"><figcaption>image-20220513120635878</figcaption></figure><h6 id="_8、数据库也没有valuetype字段" tabindex="-1"><a class="header-anchor" href="#_8、数据库也没有valuetype字段" aria-hidden="true">#</a> 8、数据库也没有<code>valueType</code>字段</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.3.8.png" alt="image-20220513120831498" tabindex="0" loading="lazy"><figcaption>image-20220513120831498</figcaption></figure><h5 id="_4、数据库添加valuetype字段" tabindex="-1"><a class="header-anchor" href="#_4、数据库添加valuetype字段" aria-hidden="true">#</a> 4、数据库添加<code>valueType</code>字段</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.4.png" alt="image-20220513121750821" tabindex="0" loading="lazy"><figcaption>image-20220513121750821</figcaption></figure><h5 id="_5、pojo对象添加字段" tabindex="-1"><a class="header-anchor" href="#_5、pojo对象添加字段" aria-hidden="true">#</a> 5、<code>pojo</code>对象添加字段</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.AttrEntity</code>类里添加字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 值类型【0-只能单个值，1-允许多个值】
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> valueType<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.5.1.png" alt="image-20220513122050410" tabindex="0" loading="lazy"><figcaption>image-20220513122050410</figcaption></figure><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo.AttrVo</code>类里添加字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.5.2.png" alt="image-20220513122208202" tabindex="0" loading="lazy"><figcaption>image-20220513122208202</figcaption></figure><p>由于<code>attrRespVo</code>继承了<code>attrVo</code>,所以也有<code>valueType</code>字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.5.3.png" alt="image-20220513122301927" tabindex="0" loading="lazy"><figcaption>image-20220513122301927</figcaption></figure><p>由于使用的是MyBatisPuls，所以<strong>增删查改</strong>会自动将<code>entity</code>类的所有需要的字段都带上，因此不需要修改业务代码</p><h5 id="_6、重新测试-1" tabindex="-1"><a class="header-anchor" href="#_6、重新测试-1" aria-hidden="true">#</a> 6、重新测试</h5><p>现在提交已经校验成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.1.6.png" alt="image-20220513122505664" tabindex="0" loading="lazy"><figcaption>image-20220513122505664</figcaption></figure><h4 id="_2、查看请求的url" tabindex="-1"><a class="header-anchor" href="#_2、查看请求的url" aria-hidden="true">#</a> 2、查看请求的URL</h4><p>请求的URL为：http://localhost:88/api/product/attr/update</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.2.png" alt="image-20220513222311216" tabindex="0" loading="lazy"><figcaption>image-20220513222311216</figcaption></figure><h4 id="_3、修改" tabindex="-1"><a class="header-anchor" href="#_3、修改" aria-hidden="true">#</a> 3、修改</h4><p>在<code>gulimall-product</code>模块里修改<code>com.atguigu.gulimall.product.controller.AttrController</code>类的<code>update</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    attrService<span class="token punctuation">.</span><span class="token function">updateAttr</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.3.png" alt="image-20220513222402532" tabindex="0" loading="lazy"><figcaption>image-20220513222402532</figcaption></figure><h4 id="_4、添加updateattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加updateattr抽象方法" aria-hidden="true">#</a> 4、添加<code>updateAttr</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.AttrService</code>接口里添加<code>updateAttr</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">updateAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.4.png" alt="image-20220513222606908" tabindex="0" loading="lazy"><figcaption>image-20220513222606908</figcaption></figure><h4 id="_5、实现updateattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现updateattr抽象方法" aria-hidden="true">#</a> 5、实现<code>updateAttr</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里实现<code>updateAttr</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.5.png" alt="image-20220513224031536" tabindex="0" loading="lazy"><figcaption>image-20220513224031536</figcaption></figure><h4 id="_6、测试-2" tabindex="-1"><a class="header-anchor" href="#_6、测试-2" aria-hidden="true">#</a> 6、测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><p>可以看到当没有设置所属分组时，修改失败了，原因就是没有查到<code>attrId</code>为该值的数据，因此当查不到数据时应该增加该数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.6.1.gif" alt="GIF 2022-5-13 22-45-38" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-13 22-45-38</figcaption></figure><p>当设置了所属分组后，修改正常</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.6.2.gif" alt="GIF 2022-5-13 22-53-56" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-13 22-53-56</figcaption></figure><h4 id="_7、修改updateattr方法" tabindex="-1"><a class="header-anchor" href="#_7、修改updateattr方法" aria-hidden="true">#</a> 7、修改<code>updateAttr</code>方法</h4><p>在<code>gulimall-product</code>模块里修改<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类的<code>updateAttr</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> count <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果有attr和attrgroup的关联关系就修改该，没有就新增</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//根据attr_id修改 pms_attr_attrgroup_relation 里的attr_group_id 字段</span>
        attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">,</span> lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//添加attr和attrgroup的关联关系</span>
        attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.7.png" alt="image-20220513230716943" tabindex="0" loading="lazy"><figcaption>image-20220513230716943</figcaption></figure><h4 id="_8、重新测试" tabindex="-1"><a class="header-anchor" href="#_8、重新测试" aria-hidden="true">#</a> 8、重新测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.4.8.gif" alt="GIF 2022-5-13 23-02-23" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-13 23-02-23</figcaption></figure><h3 id="_4-5-5、销售属性维护" tabindex="-1"><a class="header-anchor" href="#_4-5-5、销售属性维护" aria-hidden="true">#</a> 4.5.5、销售属性维护</h3><h4 id="_1、查看url" tabindex="-1"><a class="header-anchor" href="#_1、查看url" aria-hidden="true">#</a> 1、查看<code>url</code></h4><p>点击<code>商品系统</code>下的<code>平台属性</code>下的<code>销售属性</code>，会发送一个请求，查看销售属性列表</p><p>url：http://localhost:88/api/product/attr/sale/list/0?t=1652454755415&amp;page=1&amp;limit=10&amp;key=</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.1.1.png" alt="image-20220513231338361" tabindex="0" loading="lazy"><figcaption>image-20220513231338361</figcaption></figure><p>当<code>pms_attr</code>表的<code>attr_type</code>字段为<code>0</code>,则表示的是销售属性</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.1.2.png" alt="image-20220513232155146" tabindex="0" loading="lazy"><figcaption>image-20220513232155146</figcaption></figure>`,157),Na={href:"https://easydoc.net/s/78237135/ZUqEdvA4/FTx6LRbR",target:"_blank",rel:"noopener noreferrer"},Va=e(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.1.3.png" alt="image-20220518194022173" tabindex="0" loading="lazy"><figcaption>image-20220518194022173</figcaption></figure><h4 id="_2、修改baseattrlist方法" tabindex="-1"><a class="header-anchor" href="#_2、修改baseattrlist方法" aria-hidden="true">#</a> 2、修改<code>baseAttrList</code>方法</h4><p>在<code>gulimall-product</code>模块里修改<code>com.atguigu.gulimall.product.controller.AttrController</code>类的<code>baseAttrList</code>方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.2.1.png" alt="image-20220513233818883" tabindex="0" loading="lazy"><figcaption>image-20220513233818883</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.2.2.png" alt="image-20220513233835501" tabindex="0" loading="lazy"><figcaption>image-20220513233835501</figcaption></figure><h4 id="_3、转到接口方法" tabindex="-1"><a class="header-anchor" href="#_3、转到接口方法" aria-hidden="true">#</a> 3、转到接口方法</h4><p>按住<code>ctrl</code>键，然后点击<code>queryBaseAttrPage</code>，跳转到<code>com.atguigu.gulimall.product.service.AttrService</code>类的<code>queryBaseAttrPage</code>方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.3.1.png" alt="image-20220513233933096" tabindex="0" loading="lazy"><figcaption>image-20220513233933096</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.3.2.png" alt="image-20220513233956714" tabindex="0" loading="lazy"><figcaption>image-20220513233956714</figcaption></figure><h4 id="_4、修改querybaseattrpage方法" tabindex="-1"><a class="header-anchor" href="#_4、修改querybaseattrpage方法" aria-hidden="true">#</a> 4、修改<code>queryBaseAttrPage</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类的<code>queryBaseAttrPage</code>方法里添加比较条件</p><p><a href="code/4.5.5.4.queryBaseAttrPage.java">点击查看<code>queryBaseAttrPage</code>方法完整代码</a></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrType</span><span class="token punctuation">,</span><span class="token string">&quot;base&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>attrType<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.4.png" alt="image-20220513234038547" tabindex="0" loading="lazy"><figcaption>image-20220513234038547</figcaption></figure><h4 id="_5、测试-7" tabindex="-1"><a class="header-anchor" href="#_5、测试-7" aria-hidden="true">#</a> 5、测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><h5 id="_1、新增销售属性" tabindex="-1"><a class="header-anchor" href="#_1、新增销售属性" aria-hidden="true">#</a> 1、新增<code>销售属性</code></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.5.1.png" alt="image-20220513234339081" tabindex="0" loading="lazy"><figcaption>image-20220513234339081</figcaption></figure><h5 id="_2、点击查询全部" tabindex="-1"><a class="header-anchor" href="#_2、点击查询全部" aria-hidden="true">#</a> 2、点击<code>查询全部</code></h5><p>点击查询全部，可以看到请求的url</p><p>url: http://localhost:88/api/product/attr/sale/list/0?t=1652456634834&amp;page=1&amp;limit=10&amp;key=</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.5.2.png" alt="image-20220513234412544" tabindex="0" loading="lazy"><figcaption>image-20220513234412544</figcaption></figure><h5 id="_3、报空指针" tabindex="-1"><a class="header-anchor" href="#_3、报空指针" aria-hidden="true">#</a> 3、报空指针</h5><p><code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类的<code>queryBaseAttrPage</code>方法里的这一行报空指针</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.5.3.png" alt="image-20220513234555986" tabindex="0" loading="lazy"><figcaption>image-20220513234555986</figcaption></figure><h5 id="_4、加个判断" tabindex="-1"><a class="header-anchor" href="#_4、加个判断" aria-hidden="true">#</a> 4、加个判断</h5><p>在<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类的<code>queryBaseAttrPage</code>方法里这个位置加个判断</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.5.4.png" alt="image-20220513234720363" tabindex="0" loading="lazy"><figcaption>image-20220513234720363</figcaption></figure><h5 id="_5、重新测试" tabindex="-1"><a class="header-anchor" href="#_5、重新测试" aria-hidden="true">#</a> 5、重新测试</h5><p>重启<code>gulimall-product</code>项目，已经正常显示了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.5.5.png" alt="image-20220513234805564" tabindex="0" loading="lazy"><figcaption>image-20220513234805564</figcaption></figure><h4 id="_6、修改销售属性报错" tabindex="-1"><a class="header-anchor" href="#_6、修改销售属性报错" aria-hidden="true">#</a> 6、修改<code>销售属性</code>报错</h4><h5 id="_1、修改销售属性" tabindex="-1"><a class="header-anchor" href="#_1、修改销售属性" aria-hidden="true">#</a> 1、修改<code>销售属性</code></h5><p>可选值里添加<code>蓝色</code>,然后点击确定，成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.1.1.png" alt="image-20220516230532173" tabindex="0" loading="lazy"><figcaption>image-20220516230532173</figcaption></figure><p>再次提示，系统未知异常</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.1.2.png" alt="image-20220516215335766" tabindex="0" loading="lazy"><figcaption>image-20220516215335766</figcaption></figure><h5 id="_2、查看报错" tabindex="-1"><a class="header-anchor" href="#_2、查看报错" aria-hidden="true">#</a> 2、查看报错</h5><p>在<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类的<code>updateAttr</code>方法里的<code>172</code>行有一个sql语法错误</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>UPDATE pms_attr_attrgroup_relation WHERE (attr_id = ?) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.2.png" alt="image-20220516215659753" tabindex="0" loading="lazy"><figcaption>image-20220516215659753</figcaption></figure><h5 id="_3、attrgroup没有获取到" tabindex="-1"><a class="header-anchor" href="#_3、attrgroup没有获取到" aria-hidden="true">#</a> 3、<code>attrGroup</code>没有获取到</h5><p>可以看到传过来的<code>attr</code>里面没有封装<code>attrGroup</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.3.1.png" alt="image-20220516220802079" tabindex="0" loading="lazy"><figcaption>image-20220516220802079</figcaption></figure><p>查看前端请求，发现修改，没有涉及到<code>所属分组</code>，因此没有<code>attrGroup</code>属性</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.3.2.png" alt="image-20220516221537247" tabindex="0" loading="lazy"><figcaption>image-20220516221537247</figcaption></figure><h5 id="_4、查看调用关系" tabindex="-1"><a class="header-anchor" href="#_4、查看调用关系" aria-hidden="true">#</a> 4、查看调用关系</h5><p>使用以下方法查看调用关系(或按<code>alt+F7</code>)</p><ol><li>双击<code>updateAttr</code>方法</li><li>右键，选择<code>Find Usages</code></li><li>查看调用</li></ol><p>可以看到，只有<code>AttrController</code>的<code>update</code>方法调用了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.4.1.png" alt="image-20220516223003550" tabindex="0" loading="lazy"><figcaption>image-20220516223003550</figcaption></figure><p>使用以下方法查看调用关系链(或按快捷键<code>ctrl+alt+H</code>)</p><ol><li>双击<code>updateAttr</code>方法</li><li>点击<code>Navigate</code></li><li>选择<code>Call Hierarchy</code></li><li>查看被调用关系链</li></ol><p>可以看到，只有<code>AttrController</code>的<code>update</code>方法调用了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.4.2.png" alt="image-20220516223538909" tabindex="0" loading="lazy"><figcaption>image-20220516223538909</figcaption></figure><h5 id="_5、分析" tabindex="-1"><a class="header-anchor" href="#_5、分析" aria-hidden="true">#</a> 5、分析</h5><h6 id="_1、查看数据库" tabindex="-1"><a class="header-anchor" href="#_1、查看数据库" aria-hidden="true">#</a> 1、查看数据库</h6><p>查看数据库发现，<s>已经新增了一条记录</s>，但是<code>attr_group_id</code>为null</p><p>(其实这条数据不是在调用修改方法新增的数据，而是调用<code>save</code>方法新增的数据，调用<code>save</code>方法可以看到会执行</p><p><code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类的<code>saveAttr</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将attr中的数据复制到attrEntity对应的字段里</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1、保存基本数据</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2、保存关联关系</span>
        <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用this.save(attrEntity);方法后，会将数据库生成的attrId封装到AttrEntity里面</span>
        attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrId</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会在<code>attr_attrgroup_relation</code>表里添加数据，此时也只有<code>attr_id</code>有值，<code>attr_group_id</code>也为<code>null</code>)</p><p><strong>先删除这条数据，再进行调试</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.5.1.png" alt="image-20220516231712740" tabindex="0" loading="lazy"><figcaption>image-20220516231712740</figcaption></figure><h6 id="_2、执行了insert方法" tabindex="-1"><a class="header-anchor" href="#_2、执行了insert方法" aria-hidden="true">#</a> 2、执行了<code>insert</code>方法</h6><p>第一次请求时，在<code>attr_attrgroup_relation</code>查不到数据(最初写修改<code>规格参数</code>时，代表的是新增<code>规格参数</code>没有设置<code>所属分组</code>的情况)</p><p>，所以就插入了一条数据，但是由于是修改<code>销售属性</code>，没有<code>所属分组</code>选项，自然就没有<code>attrGroupId</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.5.2.png" alt="image-20220516230926422" tabindex="0" loading="lazy"><figcaption>image-20220516230926422</figcaption></figure><h6 id="_3、查看insert的sql语句" tabindex="-1"><a class="header-anchor" href="#_3、查看insert的sql语句" aria-hidden="true">#</a> 3、查看<code>insert</code>的sql语句</h6><p>可以看到只插入了<code>attr_id</code>字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.5.3.png" alt="image-20220516231035665" tabindex="0" loading="lazy"><figcaption>image-20220516231035665</figcaption></figure><h6 id="_4、查看数据库" tabindex="-1"><a class="header-anchor" href="#_4、查看数据库" aria-hidden="true">#</a> 4、查看数据库</h6><p>可以看到<code>attr_group_id</code>字段为空</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.5.4.png" alt="image-20220516231851424" tabindex="0" loading="lazy"><figcaption>image-20220516231851424</figcaption></figure><h6 id="_5、再次发送修改销售属性请求" tabindex="-1"><a class="header-anchor" href="#_5、再次发送修改销售属性请求" aria-hidden="true">#</a> 5、再次发送修改<code>销售属性</code>请求</h6><p>再次发送修改<code>销售属性</code>请求,可以看到已经查到了一条数据，走到了<code>update</code>方法里面去了</p><p>此时同样没有<code>attrGroupId</code>字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.5.5.png" alt="image-20220516231421001" tabindex="0" loading="lazy"><figcaption>image-20220516231421001</figcaption></figure><h6 id="_6、此时出现了sql语句异常" tabindex="-1"><a class="header-anchor" href="#_6、此时出现了sql语句异常" aria-hidden="true">#</a> 6、此时出现了sql语句异常</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.5.6.png" alt="image-20220516231604459" tabindex="0" loading="lazy"><figcaption>image-20220516231604459</figcaption></figure><h5 id="_6、解决问题" tabindex="-1"><a class="header-anchor" href="#_6、解决问题" aria-hidden="true">#</a> 6、解决问题</h5><h6 id="_1、规格参数和销售属性的请求参数一样" tabindex="-1"><a class="header-anchor" href="#_1、规格参数和销售属性的请求参数一样" aria-hidden="true">#</a> 1、<code>规格参数</code>和<code>销售属性</code>的请求参数一样</h6><p>点击<code>规格参数</code>里的<code>修改</code>按钮，可以看到url为: http://localhost:88/api/product/attr/update</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.1.1.png" alt="image-20220516233308432" tabindex="0" loading="lazy"><figcaption>image-20220516233308432</figcaption></figure><p>此时有<code>所属分组</code>，因此有<code>attrGroup</code>属性</p><p>此时的<code>attrType</code>为<code>1</code>，表示的是<code>规格参数</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.1.2.png" alt="image-20220516233334265" tabindex="0" loading="lazy"><figcaption>image-20220516233334265</figcaption></figure><p>点击<code>销售属性</code>里的<code>修改</code>按钮，可以看到url为: http://localhost:88/api/product/attr/update</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.1.3.png" alt="image-20220516233824438" tabindex="0" loading="lazy"><figcaption>image-20220516233824438</figcaption></figure><p>此时没有有<code>所属分组</code>，因此没有<code>attrGroup</code>属性</p><p>此时的<code>attrType</code>为<code>0</code>，表示的是<code>销售属性</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.1.4.png" alt="image-20220516233859672" tabindex="0" loading="lazy"><figcaption>image-20220516233859672</figcaption></figure><h6 id="_2、updateattr方法添加关联关系前加一个判断" tabindex="-1"><a class="header-anchor" href="#_2、updateattr方法添加关联关系前加一个判断" aria-hidden="true">#</a> 2、<code>updateAttr</code>方法添加关联关系前加一个判断</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> count <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果有attr和attrgroup的关联关系就修改该，没有就新增</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//根据attr_id修改 pms_attr_attrgroup_relation 里的attr_group_id 字段</span>
        attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">,</span> lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//添加attr和attrgroup的关联关系</span>
            attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.2.1.png" alt="image-20220517000120934" tabindex="0" loading="lazy"><figcaption>image-20220517000120934</figcaption></figure><p>此时的<code>attrType</code>为<code>0</code>，表示的是<code>销售属性</code>，没有<code>attr</code>和<code>attrGroup</code>的<code>关联关系</code>,不需要添加</p><p>因此也可以这样判断，如果是<strong>基本属性</strong>才添加<code>attr</code>和<code>attrGroup</code>的<code>关联关系</code></p><p>这样想其实不规范，如果是<strong>销售属性</strong>，应该直接不查<code>attr</code>和<code>attrGroup</code>的<code>关联关系</code>，因为<strong>销售属性</strong>没有分组，自然没有它们的关联关系</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.2.2.png" alt="image-20220518125355814" tabindex="0" loading="lazy"><figcaption>image-20220518125355814</figcaption></figure><h6 id="_3、使用枚举" tabindex="-1"><a class="header-anchor" href="#_3、使用枚举" aria-hidden="true">#</a> 3、使用枚举</h6><p>在<code>gulimall-common</code>模块的<code>src/main/java/com/atguigu/common</code>文件下新建<code>constant</code>文件夹</p><p>在<code>com.atguigu.common.constant</code>包下新建<code>ProductConstant</code>枚举类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constant</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/17
 * @Description:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ProductConstant</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 基本属性
     */</span>
    <span class="token function">ATTR_TYPE_BASE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;基本属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 销售属性
     */</span>
    <span class="token function">ATTR_TYPES_SALE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;销售属性&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>

    <span class="token class-name">ProductConstant</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.3.png" alt="image-20220518115507158" tabindex="0" loading="lazy"><figcaption>image-20220518115507158</figcaption></figure><h6 id="_4、修改updateattr方法" tabindex="-1"><a class="header-anchor" href="#_4、修改updateattr方法" aria-hidden="true">#</a> 4、修改<code>updateAttr</code>方法</h6><p>修改<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>updateAttr</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> count <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果有attr和attrgroup的关联关系就修改该，没有就新增</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//根据attr_id修改 pms_attr_attrgroup_relation 里的attr_group_id 字段</span>
        attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">,</span> lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//基本属性</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token class-name">ProductConstant</span><span class="token punctuation">.</span><span class="token constant">ATTR_TYPE_BASE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//添加attr和attrgroup的关联关系</span>
            attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.4.1.png" alt="image-20220518124449446" tabindex="0" loading="lazy"><figcaption>image-20220518124449446</figcaption></figure><p>最好这样写</p><p>如果是基本属性，才<code>更新</code>或<code>添加</code>关联关系</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//如果是基本属性，就更新或添加关联关系</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ProductConstant</span><span class="token punctuation">.</span><span class="token constant">ATTR_TYPE_BASE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> count <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果有attr和attrgroup的关联关系就修改该，没有就新增</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//根据attr_id修改 pms_attr_attrgroup_relation 里的attr_group_id 字段</span>
            attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">,</span> lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">//添加attr和attrgroup的关联关系</span>
            attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.4.2.png" alt="image-20220518130019768" tabindex="0" loading="lazy"><figcaption>image-20220518130019768</figcaption></figure><h6 id="_5、修改saveattr方法" tabindex="-1"><a class="header-anchor" href="#_5、修改saveattr方法" aria-hidden="true">#</a> 5、修改<code>saveAttr</code>方法</h6><p>修改<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>saveAttr</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAttr</span><span class="token punctuation">(</span><span class="token class-name">AttrVo</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将attr中的数据复制到attrEntity对应的字段里</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//1、保存基本数据</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2、如果是基本属性,则还要保存关联关系</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ProductConstant</span><span class="token punctuation">.</span><span class="token constant">ATTR_TYPE_BASE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用this.save(attrEntity);方法后，会将数据库生成的attrId封装到AttrEntity里面</span>
        attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">setAttrId</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.5.png" alt="image-20220518123217004" tabindex="0" loading="lazy"><figcaption>image-20220518123217004</figcaption></figure><h6 id="_6、修改querybaseattrpage方法" tabindex="-1"><a class="header-anchor" href="#_6、修改querybaseattrpage方法" aria-hidden="true">#</a> 6、修改<code>queryBaseAttrPage</code>方法</h6><p>修改<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>queryBaseAttrPage</code>方法，也使用<strong>枚举</strong>来代表<code>0</code>，或者<code>1</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryBaseAttrPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">,</span> <span class="token class-name">String</span> attrType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判断是&quot;基本属性&quot;还是&quot;销售属性&quot;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrType</span><span class="token punctuation">,</span>
            <span class="token string">&quot;base&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>attrType<span class="token punctuation">)</span><span class="token operator">?</span>
                    <span class="token class-name">ProductConstant</span><span class="token punctuation">.</span><span class="token constant">ATTR_TYPE_BASE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
                    <span class="token class-name">ProductConstant</span><span class="token punctuation">.</span><span class="token constant">ATTR_TYPES_SALE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>categoryId <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果有categoryId，则查该categoryId的数据</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span> categoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果有查询条件，则判断该条件是否 与attrId相等 或 名字包含该条件</span>
            obj<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrName</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//查询categoryName字段和groupName字段</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrRespVo</span><span class="token punctuation">&gt;</span></span> respVos <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>attrEntity <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">AttrRespVo</span> attrRespVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrRespVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">,</span> attrRespVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据attrId到attr和attrgroup的中间表查询 attrgroupId</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> attrAttrgroupRelationQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> attrEntity<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据attrgroupId查询中间表的该行数据，并封装到对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;base&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>attrType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>attrAttrgroupRelationQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attrAttrgroupRelationEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//如果查到attrgroupId，则根据attrgroupId查询attrgroupName，并添加到attrRespVo中</span>
                <span class="token class-name">AttrGroupEntity</span> attrGroupEntity <span class="token operator">=</span> attrGroupDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                attrRespVo<span class="token punctuation">.</span><span class="token function">setGroupName</span><span class="token punctuation">(</span>attrGroupEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> categoryQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        categoryQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span><span class="token operator">::</span><span class="token function">getCatId</span><span class="token punctuation">,</span> attrEntity<span class="token punctuation">.</span><span class="token function">getCatelogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据catelogId查询该行数据，并封装到对象</span>
        <span class="token class-name">CategoryEntity</span> categoryEntity <span class="token operator">=</span> categoryDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>categoryQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>categoryEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            attrRespVo<span class="token punctuation">.</span><span class="token function">setCatelogName</span><span class="token punctuation">(</span>categoryEntity<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> attrRespVo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">PageUtils</span> pageUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//重新给数据</span>
    pageUtils<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>respVos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pageUtils<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.6.png" alt="image-20220518121753838" tabindex="0" loading="lazy"><figcaption>image-20220518121753838</figcaption></figure><h6 id="_7、修改getattrinfo方法" tabindex="-1"><a class="header-anchor" href="#_7、修改getattrinfo方法" aria-hidden="true">#</a> 7、修改<code>getAttrInfo</code>方法</h6><p>修改<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>getAttrInfo</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">AttrRespVo</span> <span class="token function">getAttrInfo</span><span class="token punctuation">(</span><span class="token class-name">Long</span> attrId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AttrRespVo</span> attrRespVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrRespVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据attrId到attr表中查该行数据</span>
    <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>attrId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">,</span> attrRespVo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//如果是基本属性，需要设置分组信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attrEntity<span class="token punctuation">.</span><span class="token function">getAttrType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token class-name">ProductConstant</span><span class="token punctuation">.</span><span class="token constant">ATTR_TYPE_BASE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> attrAttrgroupRelationQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> attrId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据attrId到attrAttrgroupRelation关联关系表里查attrGroupId</span>
        <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>attrAttrgroupRelationQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attrAttrgroupRelationEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            attrRespVo<span class="token punctuation">.</span><span class="token function">setAttrGroupId</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//根据attrGroupId到attrGroup表里查groupName</span>
            <span class="token class-name">AttrGroupEntity</span> attrGroupEntity <span class="token operator">=</span> attrGroupDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>attrAttrgroupRelationEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attrGroupEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                attrRespVo<span class="token punctuation">.</span><span class="token function">setGroupName</span><span class="token punctuation">(</span>attrGroupEntity<span class="token punctuation">.</span><span class="token function">getAttrGroupName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//根据最后一级分类id到categoryService中查询完整三级分类id</span>
    <span class="token class-name">Long</span> catelogId <span class="token operator">=</span> attrEntity<span class="token punctuation">.</span><span class="token function">getCatelogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> catelogPath <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">findCatelogPath</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>catelogPath<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        attrRespVo<span class="token punctuation">.</span><span class="token function">setCatelogPath</span><span class="token punctuation">(</span>catelogPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> attrRespVo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.6.6.7.png" alt="image-20220518122837889" tabindex="0" loading="lazy"><figcaption>image-20220518122837889</figcaption></figure><h4 id="_7、测试-4" tabindex="-1"><a class="header-anchor" href="#_7、测试-4" aria-hidden="true">#</a> 7、测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面，点击<code>销售属性</code>里的新增</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.7.1.png" alt="image-20220518130652375" tabindex="0" loading="lazy"><figcaption>image-20220518130652375</figcaption></figure><p>已经新增成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.7.2.png" alt="image-20220518130752310" tabindex="0" loading="lazy"><figcaption>image-20220518130752310</figcaption></figure><p>查看新增的属性的<code>attrId</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.7.3.png" alt="image-20220518150614220" tabindex="0" loading="lazy"><figcaption>image-20220518150614220</figcaption></figure><p>可以看到已经不再<code>pms_attr_attrgroup_relation</code>表里添加关联关系了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.5.7.4.png" alt="image-20220518150726876" tabindex="0" loading="lazy"><figcaption>image-20220518150726876</figcaption></figure><h3 id="_4-5-6、属性分组查询-删除分组关联" tabindex="-1"><a class="header-anchor" href="#_4-5-6、属性分组查询-删除分组关联" aria-hidden="true">#</a> 4.5.6、<code>属性分组</code>查询&amp;删除分组关联</h3><h4 id="_1、属性分组查询分组关联" tabindex="-1"><a class="header-anchor" href="#_1、属性分组查询分组关联" aria-hidden="true">#</a> 1、<code>属性分组</code>查询分组关联</h4><h5 id="_1、查看请求-2" tabindex="-1"><a class="header-anchor" href="#_1、查看请求-2" aria-hidden="true">#</a> 1、查看请求</h5><p>点击<code>商品系统</code>下的<code>平台属性</code>下的<code>属性分组</code>,点击操作下的<code>关联</code>,会发送一个请求,来查询<code>属性分组</code>关联的<code>销售属性(基本属性)</code></p><p>url: http://localhost:88/api/product/attrgroup/1/attr/relation?t=1652858166118</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.1.1.1.png" alt="image-20220518151725272" tabindex="0" loading="lazy"><figcaption>image-20220518151725272</figcaption></figure>`,139),Fa={href:"https://easydoc.net/s/78237135/ZUqEdvA4/LnjzZHPj",target:"_blank",rel:"noopener noreferrer"},Ua=e(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.1.1.2.png" alt="image-20220518193749778" tabindex="0" loading="lazy"><figcaption>image-20220518193749778</figcaption></figure><h5 id="_2、添加attrrelation方法" tabindex="-1"><a class="header-anchor" href="#_2、添加attrrelation方法" aria-hidden="true">#</a> 2、添加<code>attrRelation</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrGroupController</code>类里添加<code>attrRelation</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">AttrService</span> attrService<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 *  localhost:88/api/product/attrgroup/1/attr/relation?t=1652858166118
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{attrgroupId}/attr/relation&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">attrRelation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;attrgroupId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> attrgroupId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> attrService<span class="token punctuation">.</span><span class="token function">getRelationAttr</span><span class="token punctuation">(</span>attrgroupId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.1.2.png" alt="image-20220518154325812" tabindex="0" loading="lazy"><figcaption>image-20220518154325812</figcaption></figure><h5 id="_3、添加getrelationattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、添加getrelationattr抽象方法" aria-hidden="true">#</a> 3、添加<code>getRelationAttr</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.AttrService</code>接口里添加<code>getRelationAttr</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.1.3.png" alt="image-20220518154451842" tabindex="0" loading="lazy"><figcaption>image-20220518154451842</figcaption></figure><h5 id="_4、实现getrelationattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、实现getrelationattr抽象方法" aria-hidden="true">#</a> 4、实现<code>getRelationAttr</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里添加方法</p><p>实现未实现的<code>getRelationAttr</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.1.4.png" alt="image-20220518154507704" tabindex="0" loading="lazy"><figcaption>image-20220518154507704</figcaption></figure><h5 id="_5、测试-8" tabindex="-1"><a class="header-anchor" href="#_5、测试-8" aria-hidden="true">#</a> 5、测试</h5><p>重启<code>gulimall-product</code>模块，刷新前端页面，重新点击<code>关联</code>,可以看到已经显示出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.1.5.png" alt="image-20220518154635843" tabindex="0" loading="lazy"><figcaption>image-20220518154635843</figcaption></figure><h4 id="_2、属性分组删除分组关联" tabindex="-1"><a class="header-anchor" href="#_2、属性分组删除分组关联" aria-hidden="true">#</a> 2、<code>属性分组</code>删除分组关联</h4><h5 id="_1、查看请求-3" tabindex="-1"><a class="header-anchor" href="#_1、查看请求-3" aria-hidden="true">#</a> 1、查看请求</h5><p>点击移除按钮，查看请求的url</p><p>url: http://localhost:88/api/product/attrgroup/attr/relation/delete</p><p>传递的参数为: <code>attrId</code>和<code>attrGroupId</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.1.1.png" alt="image-20220518155321920" tabindex="0" loading="lazy"><figcaption>image-20220518155321920</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.1.2.png" alt="image-20220518155457971" tabindex="0" loading="lazy"><figcaption>image-20220518155457971</figcaption></figure>`,22),Wa={href:"https://easydoc.net/s/78237135/ZUqEdvA4/qn7A2Fht",target:"_blank",rel:"noopener noreferrer"},Qa=e(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.1.3.png" alt="image-20220518194431585" tabindex="0" loading="lazy"><figcaption>image-20220518194431585</figcaption></figure><h5 id="_2、新建attrgrouprelationvo类" tabindex="-1"><a class="header-anchor" href="#_2、新建attrgrouprelationvo类" aria-hidden="true">#</a> 2、新建<code>AttrGroupRelationVo</code>类</h5><p>在<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.vo</code>包下新建<code>AttrGroupRelationVo</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/18
 * @Description:
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttrGroupRelationVo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> attrId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> attrGroupId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.2.png" alt="image-20220518194549006" tabindex="0" loading="lazy"><figcaption>image-20220518194549006</figcaption></figure><h5 id="_3、添加deleterelation方法" tabindex="-1"><a class="header-anchor" href="#_3、添加deleterelation方法" aria-hidden="true">#</a> 3、添加<code>deleteRelation</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrGroupController</code>类里添加<code>deleteRelation</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * localhost:88/api/product/attrgroup/attr/relation/delete
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/attr/relation/delete&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">deleteRelation</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupRelationVo</span><span class="token punctuation">[</span><span class="token punctuation">]</span> attrGroupRelationVos<span class="token punctuation">)</span><span class="token punctuation">{</span>
    attrService<span class="token punctuation">.</span><span class="token function">deleteRelation</span><span class="token punctuation">(</span>attrGroupRelationVos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.3.png" alt="image-20220518194834132" tabindex="0" loading="lazy"><figcaption>image-20220518194834132</figcaption></figure><h5 id="_4、添加deleterelation抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加deleterelation抽象方法" aria-hidden="true">#</a> 4、添加<code>deleteRelation</code>抽象方法</h5><p>在<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.service.AttrService</code>类里添加<code>deleteRelation</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">deleteRelation</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupRelationVo</span><span class="token punctuation">[</span><span class="token punctuation">]</span> attrGroupRelationVos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.4.png" alt="image-20220518195422431" tabindex="0" loading="lazy"><figcaption>image-20220518195422431</figcaption></figure><h5 id="_5、实现deleterelation抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现deleterelation抽象方法" aria-hidden="true">#</a> 5、实现<code>deleteRelation</code>抽象方法</h5><p>在<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里实现未实现的<code>deleteRelation</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * delete from gulimall_pms.pms_attr_attrgroup_relation
 * where (attr_id = 1 and attr_group_id=1)
 * or (attr_id = 2 and attr_group_id=2)
 * or (attr_id = 3 and attr_group_id=3);
 * <span class="token keyword">@param</span> <span class="token parameter">attrGroupRelationVos</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteRelation</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupRelationVo</span><span class="token punctuation">[</span><span class="token punctuation">]</span> attrGroupRelationVos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> attrAttrgroupRelationEntities <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>attrGroupRelationVos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>attrGroupRelationVo <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>attrGroupRelationVo<span class="token punctuation">,</span> attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> attrAttrgroupRelationEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">deleteBatchRelation</span><span class="token punctuation">(</span>attrAttrgroupRelationEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.5.png" alt="image-20220518200544137" tabindex="0" loading="lazy"><figcaption>image-20220518200544137</figcaption></figure><h5 id="_6、添加deletebatchrelation抽象方法" tabindex="-1"><a class="header-anchor" href="#_6、添加deletebatchrelation抽象方法" aria-hidden="true">#</a> 6、添加<code>deleteBatchRelation</code>抽象方法</h5><p>在<code>gulimall-product</code>模块里的<code>com.atguigu.gulimall.product.dao.AttrAttrgroupRelationDao</code>类里</p><p>添加<code>deleteBatchRelation</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">deleteBatchRelation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;entities&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> attrAttrgroupRelationEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.6.png" alt="image-20220518201025915" tabindex="0" loading="lazy"><figcaption>image-20220518201025915</figcaption></figure><h5 id="_7、添加deletebatchrelation抽象方法的sql语句" tabindex="-1"><a class="header-anchor" href="#_7、添加deletebatchrelation抽象方法的sql语句" aria-hidden="true">#</a> 7、添加<code>deleteBatchRelation</code>抽象方法的sql语句</h5><p>在<code>gulimall-product</code>模块的<code>src/main/resources/mapper/product/AttrAttrgroupRelationDao.xml</code>文件里添加sql语句</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--批量删除attr_attrgroup_relation--&gt;</span>
<span class="token comment">&lt;!--
    delete from gulimall_pms.pms_attr_attrgroup_relation
    where (attr_id = 1 and attr_group_id=1)
    or (attr_id = 2 and attr_group_id=2)
    or (attr_id = 3 and attr_group_id=3);
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deleteBatchRelation<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    delete from gulimall_pms.pms_attr_attrgroup_relation where
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>entities<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span> or <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        (attr_id = #{item.attrId} and attr_group_id=#{item.attrGroupId})
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.7.png" alt="image-20220518201815102" tabindex="0" loading="lazy"><figcaption>image-20220518201815102</figcaption></figure><h5 id="_8、测试" tabindex="-1"><a class="header-anchor" href="#_8、测试" aria-hidden="true">#</a> 8、测试</h5><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><p>点击<code>属性分组</code>下<code>操作</code>下里的<code>关联</code>,点击<code>删除</code>，显示<code>系统未知异常</code></p><h6 id="_1、系统未知异常" tabindex="-1"><a class="header-anchor" href="#_1、系统未知异常" aria-hidden="true">#</a> 1、系统未知异常</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.8.1.png" alt="image-20220518202518600" tabindex="0" loading="lazy"><figcaption>image-20220518202518600</figcaption></figure><h6 id="_2、查看报错信息" tabindex="-1"><a class="header-anchor" href="#_2、查看报错信息" aria-hidden="true">#</a> 2、查看报错信息</h6><p>查看<code>gulimall-product</code>模块的控制台的报错信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>No primary or default constructor found for class [Lcom.atguigu.gulimall.product.vo.AttrGroupRelationVo;
没有找到类 [Lcom.atguigu.gulimall.product.vo.AttrGroupRelationVo; 的主要或默认构造函数；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.8.2.png" alt="image-20220518202535851" tabindex="0" loading="lazy"><figcaption>image-20220518202535851</figcaption></figure><h6 id="_3、加-requestbody注解" tabindex="-1"><a class="header-anchor" href="#_3、加-requestbody注解" aria-hidden="true">#</a> 3、加<code>@RequestBody</code>注解</h6><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrGroupController</code>类里修改<code>deleteRelation</code>方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.8.3.png" alt="image-20220518202629893" tabindex="0" loading="lazy"><figcaption>image-20220518202629893</figcaption></figure><h6 id="_4、重新测试-3" tabindex="-1"><a class="header-anchor" href="#_4、重新测试-3" aria-hidden="true">#</a> 4、重新测试</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.6.2.8.4.png" alt="image-20220518202749246" tabindex="0" loading="lazy"><figcaption>image-20220518202749246</figcaption></figure><h3 id="_4-5-7、属性分组查询分组未关联的属性" tabindex="-1"><a class="header-anchor" href="#_4-5-7、属性分组查询分组未关联的属性" aria-hidden="true">#</a> 4.5.7、<code>属性分组</code>查询分组未关联的属性</h3><h4 id="_1、查看请求-4" tabindex="-1"><a class="header-anchor" href="#_1、查看请求-4" aria-hidden="true">#</a> 1、查看请求</h4><p>点击<code>新建关联</code>会发送一个请求，查询<strong>本分类下，没有被其他分组关联的属性</strong></p><p>(比方说<code>主机</code><strong>属性分组</strong>查询 <code>手机/手机通讯/手机</code>下的未被其他<strong>属性分组</strong>关联的<strong>基本属性</strong>)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.1.1.png" alt="image-20220518204930720" tabindex="0" loading="lazy"><figcaption>image-20220518204930720</figcaption></figure>`,45),Ha={href:"https://easydoc.net/s/78237135/ZUqEdvA4/d3EezLdO",target:"_blank",rel:"noopener noreferrer"},$a=e(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.1.2.png" alt="image-20220520093458443" tabindex="0" loading="lazy"><figcaption>image-20220520093458443</figcaption></figure><h4 id="_2、添加attrnorelation方法" tabindex="-1"><a class="header-anchor" href="#_2、添加attrnorelation方法" aria-hidden="true">#</a> 2、添加<code>attrNoRelation</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrGroupController</code>类里添加<code>attrNoRelation</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 查询本分类下，没有被其他分组关联的属性
 * (比方说&quot;主机&quot;属性分组查询 &quot;手机/手机通讯/手机&quot;下的未被其他属性分组关联的基本属性)
 * localhost:88/api/product/attrgroup/1/noattr/relation?t=1652878342763&amp;page=1&amp;limit=10&amp;key=
 * <span class="token keyword">@param</span> <span class="token parameter">attrgroupId</span> 属性分组id
 * <span class="token keyword">@param</span> <span class="token parameter">params</span>      分页参数
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{attrgroupId}/noattr/relation&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">attrNoRelation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;attrgroupId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> attrgroupId<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">PageUtils</span> page <span class="token operator">=</span> attrService<span class="token punctuation">.</span><span class="token function">getNoRelationAttr</span><span class="token punctuation">(</span>attrgroupId<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">,</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.2.png" alt="image-20220518210857053" tabindex="0" loading="lazy"><figcaption>image-20220518210857053</figcaption></figure><h4 id="_3、添加getnorelationattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、添加getnorelationattr抽象方法" aria-hidden="true">#</a> 3、添加<code>getNoRelationAttr</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.AttrService</code>类里添加<code>getNoRelationAttr</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageUtils</span> <span class="token function">getNoRelationAttr</span><span class="token punctuation">(</span><span class="token class-name">Long</span> attrgroupId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.3.png" alt="image-20220518210924259" tabindex="0" loading="lazy"><figcaption>image-20220518210924259</figcaption></figure><h4 id="_4、实现getnorelationattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、实现getnorelationattr抽象方法" aria-hidden="true">#</a> 4、实现<code>getNoRelationAttr</code>抽象方法</h4><p>在<code>gulimall-product</code>模块下的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里添加未实现的<code>getNoRelationAttr</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 查询本分类下，没有被其他分组关联的属性
 * (比方说&quot;主机&quot;属性分组查询 &quot;手机/手机通讯/手机&quot;下的未被其他属性分组关联的基本属性)
 * localhost:88/api/product/attrgroup/1/noattr/relation?t=1652878342763&amp;page=1&amp;limit=10&amp;key=
 * <span class="token keyword">@param</span> <span class="token parameter">attrgroupId</span> 属性分组id
 * <span class="token keyword">@param</span> <span class="token parameter">params</span>      分页参数
 * <span class="token keyword">@return</span>            分页对象
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">getNoRelationAttr</span><span class="token punctuation">(</span><span class="token class-name">Long</span> attrgroupId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、查询该attrgroupId的catelogId(当前分组只能关联自己所属的分类里面的所有属性)</span>
    <span class="token class-name">AttrGroupEntity</span> attrGroupEntity <span class="token operator">=</span> attrGroupDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>attrgroupId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> catelogId <span class="token operator">=</span> attrGroupEntity<span class="token punctuation">.</span><span class="token function">getCatelogId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2、当前分组只能关联本分类下的其他分组没有引用的属性</span>
    <span class="token comment">//2.1)、当前分类下的其他分组</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> attrGroupQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//ne：not equal</span>
    attrGroupQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupId</span><span class="token punctuation">,</span>attrgroupId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupEntity</span><span class="token punctuation">&gt;</span></span> otherGroups <span class="token operator">=</span> attrGroupDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>attrGroupQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> otherAttrGroupIds <span class="token operator">=</span> otherGroups<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">AttrGroupEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> attrQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    attrQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span> catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//2.2)、如果有其他分组，则查询这些分组关联的属性</span>
    <span class="token comment">//otherAttrGroupIds!=null &amp;&amp; 有些多余</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>otherAttrGroupIds<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> otherAttrGroupIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> attrAttrgroupRelationQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        attrAttrgroupRelationQueryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrGroupId</span><span class="token punctuation">,</span> otherAttrGroupIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> otherAttrAttrgroupRelations <span class="token operator">=</span> attrAttrgroupRelationDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>attrAttrgroupRelationQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> otherAttrIds <span class="token operator">=</span> otherAttrAttrgroupRelations<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2.3)、如果有已被关联的属性，则从当前分类的所有属性中移除这些已被关联的属性;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>otherAttrIds<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> otherAttrIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            attrQueryWrapper<span class="token punctuation">.</span><span class="token function">notIn</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span> otherAttrIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果有查询条件，则添加查询条件</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        attrQueryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>item<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            item<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrId</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrName</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> attrQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.4.png" alt="image-20220518225631000" tabindex="0" loading="lazy"><figcaption>image-20220518225631000</figcaption></figure><h4 id="_5、测试-9" tabindex="-1"><a class="header-anchor" href="#_5、测试-9" aria-hidden="true">#</a> 5、测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><h5 id="_1、已经显示出来了" tabindex="-1"><a class="header-anchor" href="#_1、已经显示出来了" aria-hidden="true">#</a> 1、已经显示出来了</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.5.1.png" alt="image-20220518225512338" tabindex="0" loading="lazy"><figcaption>image-20220518225512338</figcaption></figure><h5 id="_2、还显示了销售属性" tabindex="-1"><a class="header-anchor" href="#_2、还显示了销售属性" aria-hidden="true">#</a> 2、还显示了销售属性</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.5.2.1.png" alt="image-20220518230754485" tabindex="0" loading="lazy"><figcaption>image-20220518230754485</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.5.2.2.png" alt="image-20220518230708756" tabindex="0" loading="lazy"><figcaption>image-20220518230708756</figcaption></figure><h5 id="_3、修改实现类的getnorelationattr方法" tabindex="-1"><a class="header-anchor" href="#_3、修改实现类的getnorelationattr方法" aria-hidden="true">#</a> 3、修改实现类的<code>getNoRelationAttr</code>方法</h5><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>getNoRelationAttr</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>attrQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrEntity</span><span class="token operator">::</span><span class="token function">getAttrType</span><span class="token punctuation">,</span><span class="token class-name">ProductConstant</span><span class="token punctuation">.</span><span class="token constant">ATTR_TYPE_BASE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.5.3.png" alt="image-20220518230935342" tabindex="0" loading="lazy"><figcaption>image-20220518230935342</figcaption></figure><h5 id="_4、重新测试-4" tabindex="-1"><a class="header-anchor" href="#_4、重新测试-4" aria-hidden="true">#</a> 4、重新测试</h5><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><p>已经不显示销售属性了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.5.4.png" alt="image-20220518231201080" tabindex="0" loading="lazy"><figcaption>image-20220518231201080</figcaption></figure><h4 id="_6、修改关联关系" tabindex="-1"><a class="header-anchor" href="#_6、修改关联关系" aria-hidden="true">#</a> 6、修改关联关系</h4><h5 id="_1、重新查询" tabindex="-1"><a class="header-anchor" href="#_1、重新查询" aria-hidden="true">#</a> 1、重新查询</h5><p>删除<strong>该分类下</strong>其他<code>属性分组</code>与<code>基本属性</code>的<strong>关联关系</strong>后，再重新查询，发现可以查询出来</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.6.1.1.png" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><h5 id="_2、添加关系" tabindex="-1"><a class="header-anchor" href="#_2、添加关系" aria-hidden="true">#</a> 2、添加关系</h5><p>在<code>gulimall_pms</code>数据库下的<code>pms_attr_attrgroup_relation</code>表里添加一行数据</p><p>使<code>主机</code>组关联<code>入网型号</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.6.2.1.png" alt="image-20220518232418576" tabindex="0" loading="lazy"><figcaption>image-20220518232418576</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.6.2.2.png" alt="image-20220518233043776" tabindex="0" loading="lazy"><figcaption>image-20220518233043776</figcaption></figure><h5 id="_3、还可以再次关联入网型号" tabindex="-1"><a class="header-anchor" href="#_3、还可以再次关联入网型号" aria-hidden="true">#</a> 3、还可以再次关联<code>入网型号</code></h5><p>可以看到关联<code>入网型号</code>后，还可以再次关联<code>入网型号</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.6.3.png" alt="image-20220518233117780" tabindex="0" loading="lazy"><figcaption>image-20220518233117780</figcaption></figure><h5 id="_4、修改getnorelationattr方法" tabindex="-1"><a class="header-anchor" href="#_4、修改getnorelationattr方法" aria-hidden="true">#</a> 4、修改<code>getNoRelationAttr</code>方法</h5><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>getNoRelationAttr</code>方法</p><p>删除<code>.ne(AttrGroupEntity::getAttrGroupId,attrgroupId)</code>，取消排除本分组</p><p>查询所有分组(包括本分组，因为本分组已经关联的属性，不能再次关联)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.6.4.png" alt="image-20220518233615200" tabindex="0" loading="lazy"><figcaption>image-20220518233615200</figcaption></figure><h5 id="_5、重新测试-1" tabindex="-1"><a class="header-anchor" href="#_5、重新测试-1" aria-hidden="true">#</a> 5、重新测试</h5><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><p>可以看到关联<code>入网型号</code>后，不可以再次关联<code>入网型号</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.6.5.png" alt="image-20220518234041402" tabindex="0" loading="lazy"><figcaption>image-20220518234041402</figcaption></figure><h4 id="_7、模糊查询" tabindex="-1"><a class="header-anchor" href="#_7、模糊查询" aria-hidden="true">#</a> 7、模糊查询</h4><h5 id="_1、根据属性id" tabindex="-1"><a class="header-anchor" href="#_1、根据属性id" aria-hidden="true">#</a> 1、根据<code>属性id</code></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.7.1.1.png" alt="image-20220518234459174" tabindex="0" loading="lazy"><figcaption>image-20220518234459174</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.7.1.2.png" alt="image-20220518234430923" tabindex="0" loading="lazy"><figcaption>image-20220518234430923</figcaption></figure><h5 id="_2、根据属性名" tabindex="-1"><a class="header-anchor" href="#_2、根据属性名" aria-hidden="true">#</a> 2、根据<code>属性名</code></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.7.2.1.png" alt="image-20220518234352730" tabindex="0" loading="lazy"><figcaption>image-20220518234352730</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.7.7.2.2.png" alt="image-20220518234413311" tabindex="0" loading="lazy"><figcaption>image-20220518234413311</figcaption></figure><p>可以看到，模糊查询没有什么问题</p><h3 id="_4-5-8、属性分组添加关联关系" tabindex="-1"><a class="header-anchor" href="#_4-5-8、属性分组添加关联关系" aria-hidden="true">#</a> 4.5.8、<code>属性分组</code>添加关联关系</h3><h4 id="_1、查看请求-5" tabindex="-1"><a class="header-anchor" href="#_1、查看请求-5" aria-hidden="true">#</a> 1、查看请求</h4><p>先删除<code>主机</code>和<code>入网型号</code>的关联关系，再重新添加,查看url</p><p>url: http://localhost:88/api/product/attrgroup/attr/relation</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.1.1.png" alt="image-20220518235355704" tabindex="0" loading="lazy"><figcaption>image-20220518235355704</figcaption></figure><p>查询参数</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.1.2.png" alt="image-20220518235618863" tabindex="0" loading="lazy"><figcaption>image-20220518235618863</figcaption></figure>`,64),Ka={href:"https://easydoc.net/s/78237135/ZUqEdvA4/VhgnaedC",target:"_blank",rel:"noopener noreferrer"},Xa=e(`<figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.1.3.png" alt="image-20220518235700293" tabindex="0" loading="lazy"><figcaption>image-20220518235700293</figcaption></figure><h4 id="_2、添加addrelation方法" tabindex="-1"><a class="header-anchor" href="#_2、添加addrelation方法" aria-hidden="true">#</a> 2、添加<code>addRelation</code>方法</h4><p>在<code>gulimall-product</code>模块里的<code>com.atguigu.gulimall.product.controller.AttrGroupController</code>类里添加<code>addRelation</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">AttrAttrgroupRelationService</span> attrAttrgroupRelationService<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * localhost:88/api/product/attrgroup/attr/relation
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/attr/relation&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">addRelation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupRelationVo</span><span class="token punctuation">&gt;</span></span> attrGroupRelationVos<span class="token punctuation">)</span><span class="token punctuation">{</span>
    attrAttrgroupRelationService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>attrGroupRelationVos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.2.png" alt="image-20220519160608120" tabindex="0" loading="lazy"><figcaption>image-20220519160608120</figcaption></figure><h4 id="_3、添加savebatch抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、添加savebatch抽象方法" aria-hidden="true">#</a> 3、添加<code>saveBatch</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.AttrAttrgroupRelationService</code>接口里添加<code>saveBatch</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupRelationVo</span><span class="token punctuation">&gt;</span></span> attrGroupRelationVos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.3.png" alt="image-20220519160636605" tabindex="0" loading="lazy"><figcaption>image-20220519160636605</figcaption></figure><h4 id="_4、实现savebatch抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、实现savebatch抽象方法" aria-hidden="true">#</a> 4、实现<code>saveBatch</code>抽象方法</h4><p>在<code>gulimall-product</code>模块里的<code>com.atguigu.gulimall.product.service.impl.AttrAttrgroupRelationServiceImpl</code>类里实现<code>saveBatch</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrGroupRelationVo</span><span class="token punctuation">&gt;</span></span> attrGroupRelationVos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">&gt;</span></span> attrAttrgroupRelationEntities <span class="token operator">=</span> attrGroupRelationVos<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">AttrAttrgroupRelationEntity</span> attrAttrgroupRelationEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttrAttrgroupRelationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> attrAttrgroupRelationEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> attrAttrgroupRelationEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>attrAttrgroupRelationEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.4.png" alt="image-20220519161255770" tabindex="0" loading="lazy"><figcaption>image-20220519161255770</figcaption></figure><h4 id="_5、测试-10" tabindex="-1"><a class="header-anchor" href="#_5、测试-10" aria-hidden="true">#</a> 5、测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面，添加<code>属性分组</code>里的关联关系</p><h5 id="_1、添加关联关系" tabindex="-1"><a class="header-anchor" href="#_1、添加关联关系" aria-hidden="true">#</a> 1、添加关联关系</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.5.1.gif" alt="GIF 2022-5-19 16-11-17" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-19 16-11-17</figcaption></figure><h5 id="_2、新增规格参数" tabindex="-1"><a class="header-anchor" href="#_2、新增规格参数" aria-hidden="true">#</a> 2、新增<code>规格参数</code></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.5.2.png" alt="image-20220519162129172" tabindex="0" loading="lazy"><figcaption>image-20220519162129172</figcaption></figure><h5 id="_3、新增成功-但是没有显示出来" tabindex="-1"><a class="header-anchor" href="#_3、新增成功-但是没有显示出来" aria-hidden="true">#</a> 3、新增成功，但是没有显示出来</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.5.3.png" alt="image-20220519162615473" tabindex="0" loading="lazy"><figcaption>image-20220519162615473</figcaption></figure><h5 id="_4、报空指针异常" tabindex="-1"><a class="header-anchor" href="#_4、报空指针异常" aria-hidden="true">#</a> 4、报空指针异常</h5><p>在<code>gulimall-product</code>模块里的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>queryBaseAttrPage</code>方法的这一行报空指针</p><p>很明显，<code>attrRespVo</code>对象是<code>103</code>行<code>new</code>出来的，不会是空指针</p><p>只有<code>attrGroupEntity</code>是查出来，然后返回的对象，有可能在数据库中没找到</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.5.4.1.png" alt="image-20220519163106480" tabindex="0" loading="lazy"><figcaption>image-20220519163106480</figcaption></figure><p>传入的<code>attr_group_id</code>为<code>null</code>，数据库肯定查不到数据，所以返回<code>0</code>行数据，接收的\`\`attrGroupEntity<code>自然为</code>null\`</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.5.4.2.png" alt="image-20220519163207584" tabindex="0" loading="lazy"><figcaption>image-20220519163207584</figcaption></figure><h5 id="_5、多加一个判断" tabindex="-1"><a class="header-anchor" href="#_5、多加一个判断" aria-hidden="true">#</a> 5、多加一个判断</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>queryBaseAttrPage</code>方法里 将<code>if (attrAttrgroupRelationEntity != null)</code>改为</p><p><code>if (attrAttrgroupRelationEntity != null &amp;&amp; attrAttrgroupRelationEntity.getAttrGroupId()!=null) </code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.5.5.png" alt="image-20220519164444114" tabindex="0" loading="lazy"><figcaption>image-20220519164444114</figcaption></figure><p>同理，也应该修改其他类似代码</p><h5 id="_6、修改saveattr方法" tabindex="-1"><a class="header-anchor" href="#_6、修改saveattr方法" aria-hidden="true">#</a> 6、修改<code>saveAttr</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>saveAttr</code>方法里</p><p>将<code>if (attr.getAttrType() == ProductConstant.ATTR_TYPE_BASE.getCode())</code>改为</p><p><code>if (attr.getAttrType() == ProductConstant.ATTR_TYPE_BASE.getCode() &amp;&amp; attr.getAttrGroupId()!=null) </code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.5.6.png" alt="image-20220519165943509" tabindex="0" loading="lazy"><figcaption>image-20220519165943509</figcaption></figure><h5 id="_7、修改updateattr方法-1" tabindex="-1"><a class="header-anchor" href="#_7、修改updateattr方法-1" aria-hidden="true">#</a> 7、修改<code>updateAttr</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrServiceImpl</code>类里的<code>updateAttr</code>方法里</p><p>将<code>if (attr.getAttrType() == ProductConstant.ATTR_TYPE_BASE.getCode())</code>改为</p><p><code>if (attr.getAttrType() == ProductConstant.ATTR_TYPE_BASE.getCode() &amp;&amp; attr.getAttrGroupId()!=null) </code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.5.7.png" alt="image-20220519174303778" tabindex="0" loading="lazy"><figcaption>image-20220519174303778</figcaption></figure><h4 id="_6、重新测试-2" tabindex="-1"><a class="header-anchor" href="#_6、重新测试-2" aria-hidden="true">#</a> 6、重新测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><h5 id="_1、查询全部-1" tabindex="-1"><a class="header-anchor" href="#_1、查询全部-1" aria-hidden="true">#</a> 1、查询全部</h5><p>可以看到，刚刚添加的<code>机身颜色</code>已经显示出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.6.1.png" alt="image-20220519175025352" tabindex="0" loading="lazy"><figcaption>image-20220519175025352</figcaption></figure><h5 id="_2、建立关联关系" tabindex="-1"><a class="header-anchor" href="#_2、建立关联关系" aria-hidden="true">#</a> 2、建立关联关系</h5><p>在<code>商品系统/平台属性/属性分组</code>里建立关联关系也没有问题</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.6.2.gif" alt="GIF 2022-5-19 17-54-56" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-19 17-54-56</figcaption></figure><h5 id="_3、再次点击规格参数-查询不到数据" tabindex="-1"><a class="header-anchor" href="#_3、再次点击规格参数-查询不到数据" aria-hidden="true">#</a> 3、再次点击<code>规格参数</code>，查询不到数据</h5><p>再次点击<code>规格参数</code>，又查询不到数据了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.6.3.png" alt="image-20220519180029672" tabindex="0" loading="lazy"><figcaption>image-20220519180029672</figcaption></figure><h5 id="_4、查看控制台" tabindex="-1"><a class="header-anchor" href="#_4、查看控制台" aria-hidden="true">#</a> 4、查看控制台</h5><p>查看<code>gulimall-product</code>模块的控制台，可以看到查询到了两条数据，而需要的是<code>0</code>条或<code>1</code>条数据(<strong>查不到数据</strong>或<strong>只查询到一条数据</strong>)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result <span class="token punctuation">(</span>or null<span class="token punctuation">)</span> to be returned by selectOne<span class="token punctuation">(</span><span class="token punctuation">)</span>, but found: <span class="token number">2</span>
嵌套异常是 org.apache.ibatis.exceptions.TooManyResultsException：期望 selectOne<span class="token punctuation">(</span><span class="token punctuation">)</span> 返回一个结果（或 null），但发现：2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.6.4.png" alt="image-20220519180338886" tabindex="0" loading="lazy"><figcaption>image-20220519180338886</figcaption></figure><h5 id="_5、查看数据库" tabindex="-1"><a class="header-anchor" href="#_5、查看数据库" aria-hidden="true">#</a> 5、查看数据库</h5><p>在<code>gulimall_pms</code>数据库下的<code>pms_attr_attrgroup_relation</code>表里将<code>attr_id</code>=<code>6</code>并且<code>attr_group_id</code>为<code>null</code>的字段删掉</p><p>也把<code>attr_id</code>为<code>4</code>的也删除掉，<code>attr_id</code>为<code>4</code>的是销售属性，不需要关联关系(这是以前修改代码前，插入的错误数据)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.6.5.1.png" alt="image-20220519181010383" tabindex="0" loading="lazy"><figcaption>image-20220519181010383</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.6.5.2.png" alt="image-20220519213127175" tabindex="0" loading="lazy"><figcaption>image-20220519213127175</figcaption></figure><h5 id="_6、刷新前端页面" tabindex="-1"><a class="header-anchor" href="#_6、刷新前端页面" aria-hidden="true">#</a> 6、刷新前端页面</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.6.6.png" alt="image-20220519213334536" tabindex="0" loading="lazy"><figcaption>image-20220519213334536</figcaption></figure><h4 id="_7、规格参数测试" tabindex="-1"><a class="header-anchor" href="#_7、规格参数测试" aria-hidden="true">#</a> 7、<code>规格参数</code>测试</h4><p>在<code>规格参数</code>里修改<code>所属分组</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.5.8.7.gif" alt="GIF 2022-5-19 21-35-51" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-19 21-35-51</figcaption></figure><p>不过这样做并不规范，最好在添加关联关系的时候查询一下再添加，防止恶意攻击</p><h2 id="_4-6、商品服务-api-新增商品" tabindex="-1"><a class="header-anchor" href="#_4-6、商品服务-api-新增商品" aria-hidden="true">#</a> 4.6、商品服务-API-新增商品</h2><h3 id="_4-6-1、调试会员等级相关接口" tabindex="-1"><a class="header-anchor" href="#_4-6-1、调试会员等级相关接口" aria-hidden="true">#</a> 4.6.1、调试会员等级相关接口</h3><h4 id="_1、发送请求" tabindex="-1"><a class="header-anchor" href="#_1、发送请求" aria-hidden="true">#</a> 1、发送请求</h4><h5 id="_1、本应该发送的请求" tabindex="-1"><a class="header-anchor" href="#_1、本应该发送的请求" aria-hidden="true">#</a> 1、本应该发送的请求</h5><p>点击<code>/商品系统/商品维护/发送商品</code>,这是应该发送这个请求，</p><p>调用<code>gulimall-member</code>模块的<code>com.atguigu.gulimall.member.controller.MemberLevelController</code>类的<code>list</code>方法</p><p>url: http://localhost:88/api/member/memberlevel/list?t=1652972635593&amp;page=1&amp;limit=500</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.1.png" alt="dddd" tabindex="0" loading="lazy"><figcaption>dddd</figcaption></figure><h5 id="_2、我的发送的请求" tabindex="-1"><a class="header-anchor" href="#_2、我的发送的请求" aria-hidden="true">#</a> 2、我的发送的请求</h5><p>可以看到，我这里只发送了两给<code>tree</code>请求，并没有发送应该发送的请求</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.2.png" alt="image-20220519225349292" tabindex="0" loading="lazy"><figcaption>image-20220519225349292</figcaption></figure><h5 id="_3、方法一-非常不推荐" tabindex="-1"><a class="header-anchor" href="#_3、方法一-非常不推荐" aria-hidden="true">#</a> 3、方法一(非常不推荐)</h5><h6 id="_1、查看发送请求的方法" tabindex="-1"><a class="header-anchor" href="#_1、查看发送请求的方法" aria-hidden="true">#</a> 1、查看发送请求的方法</h6><p>这个请求是<code>src\\views\\modules\\product\\spuadd.vue</code>文件的<code>getMemberLevels</code>方法发送的</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.3.1.png" alt="image-20220519230722823" tabindex="0" loading="lazy"><figcaption>image-20220519230722823</figcaption></figure><h6 id="_2、在created阶段-调用该方法" tabindex="-1"><a class="header-anchor" href="#_2、在created阶段-调用该方法" aria-hidden="true">#</a> 2、在<code>created</code>阶段，调用该方法</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMemberLevels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其实在<code>mounted</code>中调用这个方法了，但是<code>mounted</code>里先用的<code>PubSub</code>报错了，所以没执行</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.3.2.png" alt="image-20220519230014448" tabindex="0" loading="lazy"><figcaption>image-20220519230014448</figcaption></figure><h6 id="_3、查看请求" tabindex="-1"><a class="header-anchor" href="#_3、查看请求" aria-hidden="true">#</a> 3、查看请求</h6><p>可以看到已经发送这个请求了</p><p>url: http://localhost:88/api/member/memberlevel/list?t=1652972635593&amp;page=1&amp;limit=500</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.3.3.png" alt="image-20220519225853391" tabindex="0" loading="lazy"><figcaption>image-20220519225853391</figcaption></figure><h5 id="_4、方法二-建议" tabindex="-1"><a class="header-anchor" href="#_4、方法二-建议" aria-hidden="true">#</a> 4、方法二(建议)</h5><h6 id="_1、控制台报错-1" tabindex="-1"><a class="header-anchor" href="#_1、控制台报错-1" aria-hidden="true">#</a> 1、控制台报错</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PubSub is not defined ：PubSub 未定义
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.1.png" alt="image-20220519233039674" tabindex="0" loading="lazy"><figcaption>image-20220519233039674</figcaption></figure><h6 id="_2、安装-pubsub-js" tabindex="-1"><a class="header-anchor" href="#_2、安装-pubsub-js" aria-hidden="true">#</a> 2、安装 pubsub-js</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save pubsub-js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.2.png" alt="image-20220520000459261" tabindex="0" loading="lazy"><figcaption>image-20220520000459261</figcaption></figure><h6 id="_3、提升权限" tabindex="-1"><a class="header-anchor" href="#_3、提升权限" aria-hidden="true">#</a> 3、提升权限</h6><p><strong>方法一：</strong></p><p>以管理员身份运行&quot;VS Code&quot;</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.3.1.png" alt="image-20220519234508600" style="zoom:50%;"><p><strong><s>方法二：(不是这个用户)</s></strong></p><ol><li>打开nodejs的安装目录</li><li>点击&quot;npm_cache&quot;,右键选择&quot;属性&quot;</li><li>选择&quot;SYSTEM&quot;</li><li>点击&quot;编辑&quot;</li><li>选择&quot;Authenticated Users&quot;</li><li>点击完全控制</li><li>点击确定</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.3.2.png" alt="image-20220519235446253" tabindex="0" loading="lazy"><figcaption>image-20220519235446253</figcaption></figure><ol><li>打开nodejs的安装目录</li><li>点击&quot;npm_gloa&quot;,右键选择&quot;属性&quot;</li><li>选择&quot;SYSTEM&quot;</li><li>点击&quot;编辑&quot;</li><li>选择&quot;Authenticated Users&quot;</li><li>点击完全控制</li><li>点击确定</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.3.3.png" alt="image-20220520000204114" tabindex="0" loading="lazy"><figcaption>image-20220520000204114</figcaption></figure><h6 id="_4、重新安装-pubsub-js" tabindex="-1"><a class="header-anchor" href="#_4、重新安装-pubsub-js" aria-hidden="true">#</a> 4、重新安装 pubsub-js</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.4.png" alt="image-20220519232622362" tabindex="0" loading="lazy"><figcaption>image-20220519232622362</figcaption></figure><h6 id="_5、导入pubsub-js" tabindex="-1"><a class="header-anchor" href="#_5、导入pubsub-js" aria-hidden="true">#</a> 5、导入<code>pubsub-js</code></h6><p>在<code>B:\\renren-fast-vue\\src\\views\\modules\\product\\spuadd.vue</code>文件里的<code>&lt;script&gt;</code>标签里导入<code>pubsub-js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">&quot;pubsub-js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.5.png" alt="image-20220519234016831" tabindex="0" loading="lazy"><figcaption>image-20220519234016831</figcaption></figure><h6 id="_6、查看发送的请求" tabindex="-1"><a class="header-anchor" href="#_6、查看发送的请求" aria-hidden="true">#</a> 6、查看发送的请求</h6><p>重启后，已经发送这个请求了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.6.png" alt="image-20220519232903557" tabindex="0" loading="lazy"><figcaption>image-20220519232903557</figcaption></figure><h6 id="_7、接口文档" tabindex="-1"><a class="header-anchor" href="#_7、接口文档" aria-hidden="true">#</a> 7、接口文档</h6><p>url： https://easydoc.net/s/78237135/ZUqEdvA4/jCFganpf</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.1.4.7.png" alt="image-20220520092904263" tabindex="0" loading="lazy"><figcaption>image-20220520092904263</figcaption></figure><h4 id="_2、加入注册中心" tabindex="-1"><a class="header-anchor" href="#_2、加入注册中心" aria-hidden="true">#</a> 2、加入注册中心</h4><p>在<code>gulimall-member</code>的<code>src\\main\\resources\\application.yml</code>配置文件中添加配置，加入到注册中心(已经配置过了)</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.2.png" alt="image-20220520085328741" tabindex="0" loading="lazy"><figcaption>image-20220520085328741</figcaption></figure><h4 id="_3、添加配置中心" tabindex="-1"><a class="header-anchor" href="#_3、添加配置中心" aria-hidden="true">#</a> 3、添加配置中心</h4><p>可以在<code>gulimall-member</code>模块的<code>src\\main\\resources</code>里新建<code>bootstrap.properties</code>文件，添加配置中心(在这里就先不做了)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.3.png" alt="image-20220520085535283" tabindex="0" loading="lazy"><figcaption>image-20220520085535283</figcaption></figure><h4 id="_4、开启服务注册与发现功能" tabindex="-1"><a class="header-anchor" href="#_4、开启服务注册与发现功能" aria-hidden="true">#</a> 4、开启服务注册与发现功能</h4><p>可以在<code>gulimall-member</code>模块的<code>com.atguigu.gulimall.member.GulimallMemberApplication</code>类里</p><p>添加<code>@EnableDiscoveryClient</code>注解，开启服务注册与发现功能(这个已经做了)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.4.png" alt="image-20220520085840532" tabindex="0" loading="lazy"><figcaption>image-20220520085840532</figcaption></figure><h4 id="_5、添加list方法" tabindex="-1"><a class="header-anchor" href="#_5、添加list方法" aria-hidden="true">#</a> 5、添加<code>list</code>方法</h4><p>在<code>gulimall-member</code>模块的<code>com.atguigu.gulimall.member.controller.MemberLevelController</code>类里添加<code>list</code>方法</p><p>其实这个方法已经写好了，没有访问成功的原因是<strong>没有启动<code>gulimall-member</code>模块</strong>，并且<strong>没有配置<code>gulimall-member</code>模块的网关</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.5.png" alt="image-20220520093657422" tabindex="0" loading="lazy"><figcaption>image-20220520093657422</figcaption></figure><h4 id="_6、添加路由规则" tabindex="-1"><a class="header-anchor" href="#_6、添加路由规则" aria-hidden="true">#</a> 6、添加路由规则</h4><p>在<code>gulimall-gateway</code>模块的<code>src/main/resources/application.yml</code>配置文件中添加路由规则，匹配<code>gulimall-member</code>模块</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> member_route
  <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimall<span class="token punctuation">-</span>member
  <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> Path=/api/member/<span class="token important">**</span>
  <span class="token key atrule">filters</span><span class="token punctuation">:</span>
    <span class="token comment">#http://localhost:88/api/member/memberlevel/list 变为 http://localhost:8000/member/memberlevel/list</span>
    <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">&gt;</span>/<span class="token punctuation">?</span>.<span class="token important">*)</span><span class="token punctuation">,</span>/$\\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.6.png" alt="image-20220520100339120" tabindex="0" loading="lazy"><figcaption>image-20220520100339120</figcaption></figure><h4 id="_7、访问接口" tabindex="-1"><a class="header-anchor" href="#_7、访问接口" aria-hidden="true">#</a> 7、访问接口</h4><h5 id="_1、直接访问成功" tabindex="-1"><a class="header-anchor" href="#_1、直接访问成功" aria-hidden="true">#</a> 1、直接访问成功</h5><p>直接访问没有问题 http://localhost:8000/member/memberlevel/list</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.7.1.png" alt="image-20220520100105298" tabindex="0" loading="lazy"><figcaption>image-20220520100105298</figcaption></figure><h5 id="_2、通过网关访问失败" tabindex="-1"><a class="header-anchor" href="#_2、通过网关访问失败" aria-hidden="true">#</a> 2、通过网关访问失败</h5><p>通过网关访问失败： http://localhost:88/api/member/memberlevel/list</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.7.2.png" alt="image-20220520100123403" tabindex="0" loading="lazy"><figcaption>image-20220520100123403</figcaption></figure><h4 id="_8、查找原因" tabindex="-1"><a class="header-anchor" href="#_8、查找原因" aria-hidden="true">#</a> 8、查找原因</h4><h5 id="_1、查看控制台-1" tabindex="-1"><a class="header-anchor" href="#_1、查看控制台-1" aria-hidden="true">#</a> 1、查看控制台</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nacos registry, gulimall-member 192.168.19.1:8000 register finished
nacos 注册，gulimall-member 192.168.19.1:8000 注册完成
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台显示已经注册成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.8.1.png" alt="image-20220520095821795" tabindex="0" loading="lazy"><figcaption>image-20220520095821795</figcaption></figure><h5 id="_2、查看报错-1" tabindex="-1"><a class="header-anchor" href="#_2、查看报错-1" aria-hidden="true">#</a> 2、查看报错</h5><p>这个是<code>NacosConfigProperties</code>的报错，不用管，现在还没有配置<code>配置中心</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.8.2.png" alt="image-20220520095757543" tabindex="0" loading="lazy"><figcaption>image-20220520095757543</figcaption></figure><h5 id="_3、查看服务列表" tabindex="-1"><a class="header-anchor" href="#_3、查看服务列表" aria-hidden="true">#</a> 3、查看<code>服务列表</code></h5><p>url：http://localhost:8848/nacos</p><p>用户名和密码都为 <code>nacos</code></p><p>可以看到没有发现<code>gulimall-member</code>这个服务</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.8.3.png" alt="image-20220520100857910" tabindex="0" loading="lazy"><figcaption>image-20220520100857910</figcaption></figure><h5 id="_4、查看网关控制台" tabindex="-1"><a class="header-anchor" href="#_4、查看网关控制台" aria-hidden="true">#</a> 4、查看网关控制台</h5><p>可以看到<code>gulimall-gateway</code>模块的控制台显示，已正确匹配到了<code>gulimall-member</code>模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.8.4.png" alt="image-20220520100931896" tabindex="0" loading="lazy"><figcaption>image-20220520100931896</figcaption></figure><h5 id="_5、关闭隐藏空服务" tabindex="-1"><a class="header-anchor" href="#_5、关闭隐藏空服务" aria-hidden="true">#</a> 5、关闭<code>隐藏空服务</code></h5><p>关闭<code>服务管理/服务列表</code>里的<code>隐藏空服务</code>,这时可以看到<code>gulimall-member</code>服务,不过是空服务，<code>实例数</code>和<code>健康实例数</code>都为<code>0</code></p><p>这个服务是用代码注册进去的，而不是点<code>创建服务</code>创建的，应该不会出现是空服务啊</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.8.5.png" alt="image-20220520102947342" tabindex="0" loading="lazy"><figcaption>image-20220520102947342</figcaption></figure><h5 id="_6、重启nacos" tabindex="-1"><a class="header-anchor" href="#_6、重启nacos" aria-hidden="true">#</a> 6、重启<code>nacos</code></h5><p>关闭<code>nacos</code>，再重新打开</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.8.6.png" alt="image-20220520104734701" tabindex="0" loading="lazy"><figcaption>image-20220520104734701</figcaption></figure><h5 id="_7、刷新nacos的页面" tabindex="-1"><a class="header-anchor" href="#_7、刷新nacos的页面" aria-hidden="true">#</a> 7、刷新<code>nacos</code>的页面</h5><p>打开<code>服务管理/服务列表</code>里的<code>隐藏空服务</code>,这时还可以看到<code>gulimall-member</code>服务,<code>实例数</code>和<code>健康实例数</code>也都为<code>1</code>了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.8.7.png" alt="image-20220520103649758" tabindex="0" loading="lazy"><figcaption>image-20220520103649758</figcaption></figure><h5 id="_8、重新通过网关访问" tabindex="-1"><a class="header-anchor" href="#_8、重新通过网关访问" aria-hidden="true">#</a> 8、重新通过网关访问</h5><p>url：http://localhost:88/api/member/memberlevel/list</p><p>重新刷新通过网关访问的页面，这时已经访问成功了，真是奇葩😡</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.8.8.png" alt="image-20220520103733124" tabindex="0" loading="lazy"><figcaption>image-20220520103733124</figcaption></figure><h4 id="_9、请求成功" tabindex="-1"><a class="header-anchor" href="#_9、请求成功" aria-hidden="true">#</a> 9、请求成功</h4><p>url：http://localhost:88/api/member/memberlevel/list?t=1652972635593&amp;page=1&amp;limit=500</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.9.png" alt="image-20220520105207935" tabindex="0" loading="lazy"><figcaption>image-20220520105207935</figcaption></figure><h4 id="_10、接口文档" tabindex="-1"><a class="header-anchor" href="#_10、接口文档" aria-hidden="true">#</a> 10、接口文档</h4><p>url： https://easydoc.net/s/78237135/ZUqEdvA4/jCFganpf</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.1.10.png" alt="4.6.1.10" tabindex="0" loading="lazy"><figcaption>4.6.1.10</figcaption></figure><h3 id="_4-6-2、查询包含本分类的所以品牌" tabindex="-1"><a class="header-anchor" href="#_4-6-2、查询包含本分类的所以品牌" aria-hidden="true">#</a> 4.6.2、查询包含本分类的所以品牌</h3><h4 id="_1、复制代码" tabindex="-1"><a class="header-anchor" href="#_1、复制代码" aria-hidden="true">#</a> 1、复制代码</h4><p><strong>复制之前建议先备份</strong></p><ol><li>打开&quot;1.分布式基础（全栈开发篇）\\资料源码.zip\\docs\\代码\\前端\\modules&quot;目录</li><li>选择这些文件(也可以全选)(<strong>建议全选复制，不然后面会有报错</strong>)</li><li>选择&quot;src/views&#39;目录下的&quot;moudules&quot;,然后右键</li><li>选择&quot;在文件资源管理器中显示&quot;</li><li>进入&quot;modules&quot;文件夹</li><li>右键，选择&quot;粘贴&quot;，粘贴到这里面</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.1.1.png" alt="image-20220520110715920" tabindex="0" loading="lazy"><figcaption>image-20220520110715920</figcaption></figure><p>然后点击<code>替换目标中的文件</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.1.2.png" alt="image-20220520110731311" tabindex="0" loading="lazy"><figcaption>image-20220520110731311</figcaption></figure><h4 id="_2、添加会员等级" tabindex="-1"><a class="header-anchor" href="#_2、添加会员等级" aria-hidden="true">#</a> 2、添加会员等级</h4><h5 id="_1、应该有个测试数据" tabindex="-1"><a class="header-anchor" href="#_1、应该有个测试数据" aria-hidden="true">#</a> 1、应该有个测试数据</h5><p>点击<code>用户系统/会员等级</code>,应该会有个测试数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.2.1.png" alt="image-20220520111518924" tabindex="0" loading="lazy"><figcaption>image-20220520111518924</figcaption></figure><h5 id="_2、不过我没有" tabindex="-1"><a class="header-anchor" href="#_2、不过我没有" aria-hidden="true">#</a> 2、不过我没有</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.2.2.png" alt="image-20220520111430051" tabindex="0" loading="lazy"><figcaption>image-20220520111430051</figcaption></figure><h5 id="_3、添加普通会员" tabindex="-1"><a class="header-anchor" href="#_3、添加普通会员" aria-hidden="true">#</a> 3、添加<code>普通会员</code></h5><p><code>普通会员</code>设置为<code>默认等级</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.2.3.png" alt="image-20220520111355788" tabindex="0" loading="lazy"><figcaption>image-20220520111355788</figcaption></figure><h5 id="_4、添加铜牌会员" tabindex="-1"><a class="header-anchor" href="#_4、添加铜牌会员" aria-hidden="true">#</a> 4、添加<code>铜牌会员</code></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.2.4.png" alt="image-20220520111821514" tabindex="0" loading="lazy"><figcaption>image-20220520111821514</figcaption></figure><h5 id="_5、添加银牌会员" tabindex="-1"><a class="header-anchor" href="#_5、添加银牌会员" aria-hidden="true">#</a> 5、添加<code>银牌会员</code></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.2.5.png" alt="image-20220520112008322" tabindex="0" loading="lazy"><figcaption>image-20220520112008322</figcaption></figure><h4 id="_3、又缺少了这个请求" tabindex="-1"><a class="header-anchor" href="#_3、又缺少了这个请求" aria-hidden="true">#</a> 3、又缺少了这个请求</h4><p>又少了这个请求: http://localhost:88/api/member/memberlevel/list?t=1652972635593&amp;page=1&amp;limit=500</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.3.1.png" alt="image-20220520113911427" tabindex="0" loading="lazy"><figcaption>image-20220520113911427</figcaption></figure><p>再把<code>pubsub-js</code>引进来就行了</p><p>在<code>B:\\renren-fast-vue\\src\\views\\modules\\product\\spuadd.vue</code>文件里的<code>&lt;script&gt;</code>标签里导入<code>pubsub-js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">&quot;pubsub-js&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.3.2.png" alt="image-20220520113858591" tabindex="0" loading="lazy"><figcaption>image-20220520113858591</figcaption></figure><p>请求已经出来了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.3.3.png" alt="image-20220520114016202" tabindex="0" loading="lazy"><figcaption>image-20220520114016202</figcaption></figure><h4 id="_4、选择分类后缺少了一个请求" tabindex="-1"><a class="header-anchor" href="#_4、选择分类后缺少了一个请求" aria-hidden="true">#</a> 4、<code>选择分类</code>后缺少了一个请求</h4><p>当选择完<code>选择分类</code>后，应该发送一个请求，但是我的没有发送，并且在选择完<code>选择分类</code>后控制台报了两个错</p><p>url： http://localhost:88/api/product/categorybrandrelation/brands/list?t=1653047129509&amp;catId=225</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.4.1.png" alt="image-20220520115525930" tabindex="0" loading="lazy"><figcaption>image-20220520115525930</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue.esm.js?efeb:591 [Vue warn]: Error in callback for watcher &quot;paths&quot;: &quot;TypeError: Cannot read properties of undefined (reading &#39;publish&#39;)&quot;
[Vue 警告]：观察者“路径”的回调错误：“TypeError：无法读取未定义的属性（正在读取&#39;publish&#39;）”
vue.esm.js?efeb:1741 TypeError: Cannot read properties of undefined (reading &#39;publish&#39;)
TypeError：无法读取未定义的属性（读取“publish”）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.4.2.png" alt="image-20220520115547934" tabindex="0" loading="lazy"><figcaption>image-20220520115547934</figcaption></figure><h4 id="_5、添加pubsub-js到全局" tabindex="-1"><a class="header-anchor" href="#_5、添加pubsub-js到全局" aria-hidden="true">#</a> 5、添加<code>pubsub-js</code>到全局</h4><p>删掉在<code>B:\\renren-fast-vue\\src\\views\\modules\\product\\spuadd.vue</code>文件里的<code>&lt;script&gt;</code>标签里导入的<code>pubsub-js</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.5.1.png" alt="image-20220520120720294" tabindex="0" loading="lazy"><figcaption>image-20220520120720294</figcaption></figure><p>在<code>src\\main.js</code>里导入并使用<code>pubsub-js</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token class-name">PubSub</span> from &#39;pubsub<span class="token operator">-</span>js&#39;
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>PubSub <span class="token operator">=</span> <span class="token class-name">PubSub</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.5.2.png" alt="image-20220520120813028" tabindex="0" loading="lazy"><figcaption>image-20220520120813028</figcaption></figure><p>在<code>.eslintrc.js</code>里全局使用<code>PubSub</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">,</span>
  <span class="token literal-property property">globals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">PubSub</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.5.3.png" alt="image-20220520120827362" tabindex="0" loading="lazy"><figcaption>image-20220520120827362</figcaption></figure><p>已经发送请求了：http://localhost:88/api/product/categorybrandrelation/brands/list?t=1653047129509&amp;catId=225</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.5.4.png" alt="image-20220520120954196" tabindex="0" loading="lazy"><figcaption>image-20220520120954196</figcaption></figure><p>接口文档: https://easydoc.net/s/78237135/ZUqEdvA4/HgVjlzWV</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.5.5.png" alt="image-20220520201548014" tabindex="0" loading="lazy"><figcaption>image-20220520201548014</figcaption></figure><h4 id="_6、新建brandvo类" tabindex="-1"><a class="header-anchor" href="#_6、新建brandvo类" aria-hidden="true">#</a> 6、新建<code>BrandVo</code>类</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包里新建<code>BrandVo</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/20
 * @Description:
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrandVo</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 品牌id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> brandId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 品牌名字
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> brandName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.6.png" alt="image-20220520203545414" tabindex="0" loading="lazy"><figcaption>image-20220520203545414</figcaption></figure><h4 id="_7、新建relationbrandslist方法" tabindex="-1"><a class="header-anchor" href="#_7、新建relationbrandslist方法" aria-hidden="true">#</a> 7、新建<code>relationBrandsList</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.CategoryBrandRelationController</code>类里</p><p>新建<code>relationBrandsList</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *  localhost:88/api/product/categorybrandrelation/brands/list?t=1653048395592&amp;catId=225
 *  获取分类关联的品牌
 *  1、Controller:处理请求，接受和校验数据
 *  2、Service接受controller传来的数据，进行业务处理
 *  3、Controller接受service处理完的数据，封装页面指定的vo
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/brands/list&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">relationBrandsList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;catId&quot;</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> catId<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span> brandEntities <span class="token operator">=</span> categoryBrandRelationService<span class="token punctuation">.</span><span class="token function">getBrandsByCatId</span><span class="token punctuation">(</span>catId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandVo</span><span class="token punctuation">&gt;</span></span> brandVos <span class="token operator">=</span> brandEntities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">BrandVo</span> brandVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrandVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        brandVo<span class="token punctuation">.</span><span class="token function">setBrandId</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getBrandId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        brandVo<span class="token punctuation">.</span><span class="token function">setBrandName</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> brandVo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span>brandVos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.7.png" alt="image-20220520214042927" tabindex="0" loading="lazy"><figcaption>image-20220520214042927</figcaption></figure><h4 id="_8、添加getbrandsbycatid抽象方法" tabindex="-1"><a class="header-anchor" href="#_8、添加getbrandsbycatid抽象方法" aria-hidden="true">#</a> 8、添加<code>getBrandsByCatId</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.CategoryBrandRelationService</code>接口里</p><p>添加<code>getBrandsByCatId</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBrandsByCatId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> catId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.8.png" alt="image-20220520203454859" tabindex="0" loading="lazy"><figcaption>image-20220520203454859</figcaption></figure><h4 id="_9、实现getbrandsbycatid抽象方法" tabindex="-1"><a class="header-anchor" href="#_9、实现getbrandsbycatid抽象方法" aria-hidden="true">#</a> 9、实现<code>getBrandsByCatId</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.CategoryBrandRelationServiceImpl</code>类里</p><p>实现<code>getBrandsByCatId</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBrandsByCatId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> catId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token punctuation">&gt;</span></span> categoryBrandRelationQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    categoryBrandRelationQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token operator">::</span><span class="token function">getCatelogId</span><span class="token punctuation">,</span>catId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token punctuation">&gt;</span></span> categoryBrandRelationEntities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>categoryBrandRelationQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> brandIds <span class="token operator">=</span> categoryBrandRelationEntities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
            <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">CategoryBrandRelationEntity</span><span class="token operator">::</span><span class="token function">getBrandId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrandEntity</span><span class="token punctuation">&gt;</span></span> brandEntities <span class="token operator">=</span> brandDao<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>brandIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> brandEntities<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.9.png" alt="image-20220520204754999" tabindex="0" loading="lazy"><figcaption>image-20220520204754999</figcaption></figure><h4 id="_10、测试" tabindex="-1"><a class="header-anchor" href="#_10、测试" aria-hidden="true">#</a> 10、测试</h4><p>重启<code>gulimall-product</code>模块，刷新前端页面，</p><h5 id="_1、已经发送请求了" tabindex="-1"><a class="header-anchor" href="#_1、已经发送请求了" aria-hidden="true">#</a> 1、已经发送请求了</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.10.1.png" alt="image-20220520204950145" tabindex="0" loading="lazy"><figcaption>image-20220520204950145</figcaption></figure><h5 id="_2、查看返回的数据" tabindex="-1"><a class="header-anchor" href="#_2、查看返回的数据" aria-hidden="true">#</a> 2、查看返回的数据</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.10.2.png" alt="image-20220520205355868" tabindex="0" loading="lazy"><figcaption>image-20220520205355868</figcaption></figure><h5 id="_3、将手机1改为手机" tabindex="-1"><a class="header-anchor" href="#_3、将手机1改为手机" aria-hidden="true">#</a> 3、将<code>手机1</code>改为<code>手机</code></h5><p>将<code>gulimall_pms</code>数据库中的<code>pms_category_brand_relation</code>表里的<code>name</code>为<code>手机1</code>的字段改为<code>手机</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.10.3.png" alt="image-20220520205434818" tabindex="0" loading="lazy"><figcaption>image-20220520205434818</figcaption></figure><h5 id="_4、添加别的品牌的关联分类" tabindex="-1"><a class="header-anchor" href="#_4、添加别的品牌的关联分类" aria-hidden="true">#</a> 4、添加别的品牌的<code>关联分类</code></h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.10.4.png" alt="GIF 2022-5-20 20-58-33" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-20 20-58-33</figcaption></figure><h5 id="_5、选择品牌" tabindex="-1"><a class="header-anchor" href="#_5、选择品牌" aria-hidden="true">#</a> 5、选择品牌</h5><p>选择好<code>选择分类</code>后，可以看到已返回分类包含<code>手机/手机通讯/手机</code>的所有品牌，点击<code>选择品牌</code>的选择框后，可以显示这些品牌</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.2.10.5.png" alt="image-20220520210139905" tabindex="0" loading="lazy"><figcaption>image-20220520210139905</figcaption></figure><h3 id="_4-6-3、获取分类下所有分组-关联属性" tabindex="-1"><a class="header-anchor" href="#_4-6-3、获取分类下所有分组-关联属性" aria-hidden="true">#</a> 4.6.3、获取分类下所有分组&amp;关联属性</h3><h4 id="_1、查看请求-6" tabindex="-1"><a class="header-anchor" href="#_1、查看请求-6" aria-hidden="true">#</a> 1、查看请求</h4><h5 id="_1、设置基本信息" tabindex="-1"><a class="header-anchor" href="#_1、设置基本信息" aria-hidden="true">#</a> 1、设置<code>基本信息</code></h5><p><code>基本信息</code>设置完成后，点击<code>下一步：设置基本参数</code>，这时会发送一个请求</p><p>url：http://localhost:88/api/product/attrgroup/225/withattr?t=1653056166646</p><p>(这里的数据随便填填就行了，现在也不会提交的数据库)</p><p>(图片上传失败是因为<code>gulimall-third-party</code>模块没启动)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.1.1.png" alt="image-20220520220205600" tabindex="0" loading="lazy"><figcaption>image-20220520220205600</figcaption></figure><h5 id="_2、查看请求" tabindex="-1"><a class="header-anchor" href="#_2、查看请求" aria-hidden="true">#</a> 2、查看请求</h5><p>url：http://localhost:88/api/product/attrgroup/225/withattr?t=1653056166646</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.1.2.png" alt="image-20220520215846566" tabindex="0" loading="lazy"><figcaption>image-20220520215846566</figcaption></figure><h5 id="_3、接口文档" tabindex="-1"><a class="header-anchor" href="#_3、接口文档" aria-hidden="true">#</a> 3、接口文档</h5><p>接口文档在<code>商品系统/17、获取分类下所有分组&amp;关联属性</code>里：https://easydoc.net/s/78237135/ZUqEdvA4/6JM6txHf</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.1.3.png" alt="image-20220520221908190" style="zoom:50%;"><h4 id="_2、新建attrgroupwithattrsvo类" tabindex="-1"><a class="header-anchor" href="#_2、新建attrgroupwithattrsvo类" aria-hidden="true">#</a> 2、新建<code>AttrGroupWithAttrsVo</code>类</h4><p>在<code>gulimall-product</code>的<code>com.atguigu.gulimall.product.vo</code>包下新建<code>AttrGroupWithAttrsVo</code>类</p><p>复制<code>com.atguigu.gulimall.product.entity.AttrGroupEntity</code>类的字段，并删掉数据库相关注解</p><p>调整<code>AttrGroupWithAttrsVo</code>类，修改成我们需要的<code>vo</code>对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">AttrEntity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/20
 * @Description:
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttrGroupWithAttrsVo</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 分组id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> attrGroupId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 组名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> attrGroupName<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 排序
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sort<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 描述
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> descript<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 组图标
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> icon<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 所属分类id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> catelogId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrEntity</span><span class="token punctuation">&gt;</span></span> attrs<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.2.png" alt="image-20220520233852985" tabindex="0" loading="lazy"><figcaption>image-20220520233852985</figcaption></figure><h4 id="_3、添加getattrgroupwithattrs方法" tabindex="-1"><a class="header-anchor" href="#_3、添加getattrgroupwithattrs方法" aria-hidden="true">#</a> 3、添加<code>getAttrGroupWithAttrs</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrGroupController</code>类里添加</p><p><code>getAttrGroupWithAttrs</code>方法，通过<code>catelogId</code>获取当前分类下<strong>所有分组</strong>&amp;<strong>关联属性</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.3.png" alt="image-20220520231533320" tabindex="0" loading="lazy"><figcaption>image-20220520231533320</figcaption></figure><h4 id="_4、添加getattrgroupwithattrsbycatelogid抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加getattrgroupwithattrsbycatelogid抽象方法" aria-hidden="true">#</a> 4、添加<code>getAttrGroupWithAttrsByCatelogId</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.AttrGroupService</code>类里添加<code>getAttrGroupWithAttrsByCatelogId</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.4.png" alt="image-20220520231548548" tabindex="0" loading="lazy"><figcaption>image-20220520231548548</figcaption></figure><h4 id="_5、实现getattrgroupwithattrsbycatelogid抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现getattrgroupwithattrsbycatelogid抽象方法" aria-hidden="true">#</a> 5、实现<code>getAttrGroupWithAttrsByCatelogId</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.AttrGroupServiceImpl</code>类里实现<code>getAttrGroupWithAttrsByCatelogId</code>抽象方法，通过<code>catelogId</code>获取当前分类下<strong>所有分组</strong>&amp;<strong>关联属性</strong></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.5.png" alt="image-20220520234608206" tabindex="0" loading="lazy"><figcaption>image-20220520234608206</figcaption></figure><h4 id="_6、查看回显" tabindex="-1"><a class="header-anchor" href="#_6、查看回显" aria-hidden="true">#</a> 6、查看回显</h4><p>已正确获得数据，但是没有回显到页面上，此时控制台也报了一个错</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.6.png" alt="image-20220520234852186" tabindex="0" loading="lazy"><figcaption>image-20220520234852186</figcaption></figure><h4 id="_7、spuadd-vue的第679行报错" tabindex="-1"><a class="header-anchor" href="#_7、spuadd-vue的第679行报错" aria-hidden="true">#</a> 7、<code>spuadd.vue</code>的第679行报错</h4><p>可以看到<code>spuadd.vue</code>的第679行的<code>foreach</code>报错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TypeError: Cannot read properties of null (reading &#39; forEach&#39;)
TypeError：无法读取 null 的属性（读取“forEach”）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.7.png" alt="image-20220520235236298" tabindex="0" loading="lazy"><figcaption>image-20220520235236298</figcaption></figure><h4 id="_8、showbaseattrs-方法里加一个判断" tabindex="-1"><a class="header-anchor" href="#_8、showbaseattrs-方法里加一个判断" aria-hidden="true">#</a> 8、<code>showBaseAttrs()</code>方法里加一个判断</h4><p>在<code>src\\views\\modules\\product\\spuadd.vue</code>的<code>showBaseAttrs()</code>方法里的<code>foreach</code>里面加一个判断，没有<code>attrs</code>就不遍历</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>attrs <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> attrArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">attr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      attrArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">attrId</span><span class="token operator">:</span> attr<span class="token punctuation">.</span>attrId<span class="token punctuation">,</span>
        <span class="token literal-property property">attrValues</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">showDesc</span><span class="token operator">:</span> attr<span class="token punctuation">.</span>showDesc
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataResp<span class="token punctuation">.</span>baseAttrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attrArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.8.png" alt="image-20220520235759910" tabindex="0" loading="lazy"><figcaption>image-20220520235759910</figcaption></figure><h4 id="_9、页面已成功显示" tabindex="-1"><a class="header-anchor" href="#_9、页面已成功显示" aria-hidden="true">#</a> 9、页面已成功显示</h4><p>重新测试，页面已成功显示数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.3.9.png" alt="image-20220520235924882" tabindex="0" loading="lazy"><figcaption>image-20220520235924882</figcaption></figure><h3 id="_4-6-4、新增商品-1" tabindex="-1"><a class="header-anchor" href="#_4-6-4、新增商品-1" aria-hidden="true">#</a> 4.6.4、新增商品(1)</h3><h4 id="_1、发送请求-1" tabindex="-1"><a class="header-anchor" href="#_1、发送请求-1" aria-hidden="true">#</a> 1、发送请求</h4><h5 id="_1、添加测试数据-2" tabindex="-1"><a class="header-anchor" href="#_1、添加测试数据-2" aria-hidden="true">#</a> 1、添加测试数据</h5><h6 id="_1、新增机身长度-mm" tabindex="-1"><a class="header-anchor" href="#_1、新增机身长度-mm" aria-hidden="true">#</a> 1、新增<code>机身长度(mm)</code></h6><p>在<code>商品系统/平台属性/规格参数</code>里新增<code>机身长度(mm)</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.1.png" alt="image-20220521200453301" tabindex="0" loading="lazy"><figcaption>image-20220521200453301</figcaption></figure><h6 id="_2、新增机身材质工艺" tabindex="-1"><a class="header-anchor" href="#_2、新增机身材质工艺" aria-hidden="true">#</a> 2、新增<code>机身材质工艺</code></h6><p>在<code>商品系统/平台属性/规格参数</code>里新增<code>机身材质工艺</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.2.png" alt="image-20220521200845851" tabindex="0" loading="lazy"><figcaption>image-20220521200845851</figcaption></figure><h6 id="_3、删除测试" tabindex="-1"><a class="header-anchor" href="#_3、删除测试" aria-hidden="true">#</a> 3、删除<code>测试</code></h6><p>删除<code>商品系统/平台属性/属性分组</code>里的<code>测试</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.3.png" alt="image-20220521201219156" tabindex="0" loading="lazy"><figcaption>image-20220521201219156</figcaption></figure><h6 id="_4、添加主芯片" tabindex="-1"><a class="header-anchor" href="#_4、添加主芯片" aria-hidden="true">#</a> 4、添加<code>主芯片</code></h6><p>在<code>商品系统/平台属性/属性分组</code>里添加<code>主芯片</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.4.png" alt="image-20220521201609609" tabindex="0" loading="lazy"><figcaption>image-20220521201609609</figcaption></figure><h6 id="_5、新增cpu品牌" tabindex="-1"><a class="header-anchor" href="#_5、新增cpu品牌" aria-hidden="true">#</a> 5、新增<code>CPU品牌</code></h6><p>在<code>商品系统/平台属性/规格参数</code>里新增<code>CPU品牌</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.5.png" alt="image-20220521202050971" tabindex="0" loading="lazy"><figcaption>image-20220521202050971</figcaption></figure><h6 id="_6、新增cpu型号" tabindex="-1"><a class="header-anchor" href="#_6、新增cpu型号" aria-hidden="true">#</a> 6、新增<code>CPU型号</code></h6><p>在<code>商品系统/平台属性/规格参数</code>里新增<code>CPU型号</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.6.png" alt="image-20220521202428453" tabindex="0" loading="lazy"><figcaption>image-20220521202428453</figcaption></figure><h6 id="_7、修改上市年份里的所属分组" tabindex="-1"><a class="header-anchor" href="#_7、修改上市年份里的所属分组" aria-hidden="true">#</a> 7、修改<code>上市年份</code>里的<code>所属分组</code></h6><p>在<code>商品系统/平台属性/规格参数</code>里修改<code>上市年份</code>里的<code>所属分组</code>为<code>主体</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.7.png" alt="image-20220521202603474" tabindex="0" loading="lazy"><figcaption>image-20220521202603474</figcaption></figure><h6 id="_8、修改机身颜色里的所属分组" tabindex="-1"><a class="header-anchor" href="#_8、修改机身颜色里的所属分组" aria-hidden="true">#</a> 8、修改<code>机身颜色</code>里的<code>所属分组</code></h6><p>在<code>商品系统/平台属性/规格参数</code>里修改<code>机身颜色</code>里的<code>所属分组</code>为<code>基本信息</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.8.png" alt="image-20220521202705771" tabindex="0" loading="lazy"><figcaption>image-20220521202705771</figcaption></figure><h6 id="_9、修改内存里的可选值" tabindex="-1"><a class="header-anchor" href="#_9、修改内存里的可选值" aria-hidden="true">#</a> 9、修改<code>内存</code>里的<code>可选值</code></h6><p>在<code>商品系统/平台属性/销售属性</code>里修改<code>内存</code>里的<code>可选值</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.9.png" alt="image-20220522110005717" tabindex="0" loading="lazy"><figcaption>image-20220522110005717</figcaption></figure><h6 id="_10、添加版本" tabindex="-1"><a class="header-anchor" href="#_10、添加版本" aria-hidden="true">#</a> 10、添加<code>版本</code></h6><p>在<code>商品系统/平台属性/销售属性</code>里添加<code>版本</code><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.1.10.png" alt="image-20220522110314425" loading="lazy"></p><h5 id="_2、录入商品信息" tabindex="-1"><a class="header-anchor" href="#_2、录入商品信息" aria-hidden="true">#</a> 2、录入商品信息</h5><h6 id="_1、录入基本属性" tabindex="-1"><a class="header-anchor" href="#_1、录入基本属性" aria-hidden="true">#</a> 1、录入<code>基本属性</code></h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.1.png" alt="image-20220521203305473" tabindex="0" loading="lazy"><figcaption>image-20220521203305473</figcaption></figure><h6 id="_2、录入规格参数里的主体" tabindex="-1"><a class="header-anchor" href="#_2、录入规格参数里的主体" aria-hidden="true">#</a> 2、录入<code>规格参数</code>里的<code>主体</code></h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.2.png" alt="image-20220521203509597" tabindex="0" loading="lazy"><figcaption>image-20220521203509597</figcaption></figure><h6 id="_3、录入规格参数里的基本信息" tabindex="-1"><a class="header-anchor" href="#_3、录入规格参数里的基本信息" aria-hidden="true">#</a> 3、录入<code>规格参数</code>里的<code>基本信息</code></h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.3.png" alt="image-20220521203913840" tabindex="0" loading="lazy"><figcaption>image-20220521203913840</figcaption></figure><h6 id="_4、录入规格参数里的主芯片" tabindex="-1"><a class="header-anchor" href="#_4、录入规格参数里的主芯片" aria-hidden="true">#</a> 4、录入<code>规格参数</code>里的<code>主芯片</code></h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.4.png" alt="image-20220521204015874" tabindex="0" loading="lazy"><figcaption>image-20220521204015874</figcaption></figure><h6 id="_5、录入销售属性" tabindex="-1"><a class="header-anchor" href="#_5、录入销售属性" aria-hidden="true">#</a> 5、录入<code>销售属性</code></h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.5.png" alt="image-20220521205929197" tabindex="0" loading="lazy"><figcaption>image-20220521205929197</figcaption></figure><h6 id="_6、修改sku信息" tabindex="-1"><a class="header-anchor" href="#_6、修改sku信息" aria-hidden="true">#</a> 6、修改<code>SKU信息</code></h6><table><thead><tr><th>颜色</th><th>版本</th><th>商品名称</th><th>标题</th><th>副标题</th><th>价格</th></tr></thead><tbody><tr><td>星河银</td><td>8GB+128GB</td><td>华为 HUAWEI Mate30Pro 星河银 8GB+128GB</td><td>华为 HUAWEI Mate30Pro 星河银 8GB+128GB 麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄 4G全网通手机</td><td>[现货抢购！享白条12期免息！]麒麟990， OLED环幕屏双4000万徕卡电影四摄：Mate30系列享12期免息》</td><td>5799</td></tr><tr><td>星河银</td><td>8GB+256GB</td><td>华为 HUAWEI Mate30Pro 星河银 8GB+256GB</td><td>华为 HUAWEI Mate30Pro 星河银 8GB+256GB 麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄 4G全网通手机</td><td>[现货抢购！享白条12期免息！]麒麟990， OLED环幕屏双4000万徕卡电影四摄：Mate30系列享12期免息》</td><td>6299</td></tr><tr><td>亮黑色</td><td>8GB+128GB</td><td>华为 HUAWEI Mate30Pro 亮黑色 8GB+128GB</td><td>华为 HUAWEI Mate30Pro 亮黑色 8GB+128GB 麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄 4G全网通手机</td><td>[现货抢购！享白条12期免息！]麒麟990， OLED环幕屏双4000万徕卡电影四摄：Mate30系列享12期免息》</td><td>5799</td></tr><tr><td>亮黑色</td><td>8GB+256GB</td><td>华为 HUAWEI Mate30Pro 亮黑色 8GB+256GB</td><td>华为 HUAWEI Mate30Pro 亮黑色 8GB+256GB 麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄 4G全网通手机</td><td>[现货抢购！享白条12期免息！]麒麟990， OLED环幕屏双4000万徕卡电影四摄：Mate30系列享12期免息》</td><td>6299</td></tr><tr><td>翡冷翠</td><td>8GB+128GB</td><td>华为 HUAWEI Mate30Pro 翡冷翠 8GB+128GB</td><td>华为 HUAWEI Mate30Pro 翡冷翠 8GB+128GB 麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄 4G全网通手机</td><td>[现货抢购！享白条12期免息！]麒麟990， OLED环幕屏双4000万徕卡电影四摄：Mate30系列享12期免息》</td><td>5799</td></tr><tr><td>翡冷翠</td><td>8GB+256GB</td><td>华为 HUAWEI Mate30Pro 翡冷翠 8GB+256GB</td><td>华为 HUAWEI Mate30Pro 翡冷翠 8GB+256GB 麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄 4G全网通手机</td><td>[现货抢购！享白条12期免息！]麒麟990， OLED环幕屏双4000万徕卡电影四摄：Mate30系列享12期免息》</td><td>6299</td></tr><tr><td>罗兰紫</td><td>8GB+128GB</td><td>华为 HUAWEI Mate30Pro 罗兰紫 8GB+128GB</td><td>华为 HUAWEI Mate30Pro 罗兰紫 8GB+128GB 麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄 4G全网通手机</td><td>[现货抢购！享白条12期免息！]麒麟990， OLED环幕屏双4000万徕卡电影四摄：Mate30系列享12期免息》</td><td>5799</td></tr><tr><td>罗兰紫</td><td>8GB+256GB</td><td>华为 HUAWEI Mate30Pro 罗兰紫 8GB+256GB</td><td>华为 HUAWEI Mate30Pro 罗兰紫 8GB+256GB 麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄 4G全网通手机</td><td>[现货抢购！享白条12期免息！]麒麟990， OLED环幕屏双4000万徕卡电影四摄：Mate30系列享12期免息》</td><td>6299</td></tr></tbody></table><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.6.png" alt="image-20220521213940120" tabindex="0" loading="lazy"><figcaption>image-20220521213940120</figcaption></figure><h6 id="_7、修改sku信息里的星河银-8gb-128gb信息" tabindex="-1"><a class="header-anchor" href="#_7、修改sku信息里的星河银-8gb-128gb信息" aria-hidden="true">#</a> 7、修改<code>SKU信息</code>里的<code>星河银 8GB+128GB</code>信息</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.7.png" alt="image-20220521214707364" tabindex="0" loading="lazy"><figcaption>image-20220521214707364</figcaption></figure><h6 id="_8、修改sku信息里的星河银8gb-256gb信息" tabindex="-1"><a class="header-anchor" href="#_8、修改sku信息里的星河银8gb-256gb信息" aria-hidden="true">#</a> 8、修改<code>SKU信息</code>里的<code>星河银8GB+256GB</code>信息</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.8.png" alt="image-20220521214923139" tabindex="0" loading="lazy"><figcaption>image-20220521214923139</figcaption></figure><h6 id="_9、修改sku信息里的亮黑色-8gb-128gb信息" tabindex="-1"><a class="header-anchor" href="#_9、修改sku信息里的亮黑色-8gb-128gb信息" aria-hidden="true">#</a> 9、修改<code>SKU信息</code>里的<code>亮黑色 8GB+128GB</code>信息</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.9.png" alt="image-20220521215050927" tabindex="0" loading="lazy"><figcaption>image-20220521215050927</figcaption></figure><h6 id="_10、修改sku信息里的亮黑色-8gb-256gb信息" tabindex="-1"><a class="header-anchor" href="#_10、修改sku信息里的亮黑色-8gb-256gb信息" aria-hidden="true">#</a> 10、修改<code>SKU信息</code>里的<code>亮黑色 8GB+256GB</code>信息</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.10.png" alt="image-20220521215354005" tabindex="0" loading="lazy"><figcaption>image-20220521215354005</figcaption></figure><h6 id="_11、修改sku信息里的翡冷翠-8gb-128gb信息" tabindex="-1"><a class="header-anchor" href="#_11、修改sku信息里的翡冷翠-8gb-128gb信息" aria-hidden="true">#</a> 11、修改<code>SKU信息</code>里的<code>翡冷翠 8GB+128GB</code>信息</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.11.png" alt="image-20220521215557469" tabindex="0" loading="lazy"><figcaption>image-20220521215557469</figcaption></figure><h6 id="_12、修改sku信息里的翡冷翠-8gb-256gb信息" tabindex="-1"><a class="header-anchor" href="#_12、修改sku信息里的翡冷翠-8gb-256gb信息" aria-hidden="true">#</a> 12、修改<code>SKU信息</code>里的<code>翡冷翠 8GB+256GB</code>信息</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.12.png" alt="image-20220521215911728" tabindex="0" loading="lazy"><figcaption>image-20220521215911728</figcaption></figure><h6 id="_13、修改sku信息里的罗兰紫-8gb-128gb信息" tabindex="-1"><a class="header-anchor" href="#_13、修改sku信息里的罗兰紫-8gb-128gb信息" aria-hidden="true">#</a> 13、修改<code>SKU信息</code>里的<code>罗兰紫 8GB+128GB</code>信息</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.13.png" alt="image-20220521220119171" tabindex="0" loading="lazy"><figcaption>image-20220521220119171</figcaption></figure><h6 id="_14、修改sku信息里的罗兰紫-8gb-256gb信息" tabindex="-1"><a class="header-anchor" href="#_14、修改sku信息里的罗兰紫-8gb-256gb信息" aria-hidden="true">#</a> 14、修改<code>SKU信息</code>里的<code>罗兰紫 8GB+256GB</code>信息</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.14.png" alt="image-20220521220313889" tabindex="0" loading="lazy"><figcaption>image-20220521220313889</figcaption></figure><h6 id="_15、查看发送的数据" tabindex="-1"><a class="header-anchor" href="#_15、查看发送的数据" aria-hidden="true">#</a> 15、查看发送的数据</h6><ol><li>打开控制台</li><li>点击<code>下一步：保存商品信息</code></li><li>点击<code>Copy</code></li><li><strong>先放到记事本里保存，免得后面操作多了，不小心丢了</strong>(后面写完后端代码后一定会用到，一定要存着，否者只能重新添加商品了)</li></ol><p><a href="code/4.6.4.1.2.15.json">点击查看刚刚复制的json</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.2.15.png" alt="image-20220521221004925" tabindex="0" loading="lazy"><figcaption>image-20220521221004925</figcaption></figure><h5 id="_3、接口文档-1" tabindex="-1"><a class="header-anchor" href="#_3、接口文档-1" aria-hidden="true">#</a> 3、接口文档</h5><p>接口文档 在<code>商品系统/19、新增商品</code>里： https://easydoc.net/s/78237135/ZUqEdvA4/5ULdV3dd</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.1.3.png" alt="image-20220521220653670" tabindex="0" loading="lazy"><figcaption>image-20220521220653670</figcaption></figure><h4 id="_2、json生成java实体类" tabindex="-1"><a class="header-anchor" href="#_2、json生成java实体类" aria-hidden="true">#</a> 2、JSON生成Java实体类</h4><h5 id="_1、格式化json" tabindex="-1"><a class="header-anchor" href="#_1、格式化json" aria-hidden="true">#</a> 1、格式化JSON</h5><p>将刚刚复制到JSON粘贴到输入框，点击<code>格式化校验</code>，检查JSON</p>`,379),Ja={href:"https://www.bejson.com/json/format/",target:"_blank",rel:"noopener noreferrer"},Za=e(`<p><a href="code/4.6.4.2.1.json">点击查看格式化后的Json</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.2.1.png" alt="image-20220521223643977" tabindex="0" loading="lazy"><figcaption>image-20220521223643977</figcaption></figure><h5 id="_2、复制vo包的路径" tabindex="-1"><a class="header-anchor" href="#_2、复制vo包的路径" aria-hidden="true">#</a> 2、复制<code>vo</code>包的路径</h5><p>复制<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包的路径</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.2.2.png" alt="image-20220521223237967" tabindex="0" loading="lazy"><figcaption>image-20220521223237967</figcaption></figure><h5 id="_3、生成java实体类" tabindex="-1"><a class="header-anchor" href="#_3、生成java实体类" aria-hidden="true">#</a> 3、生成Java实体类</h5><ol><li>粘贴JOSN</li><li>输入&quot;SpuSaveVo&quot;</li><li>粘贴刚刚复制的路径 &quot;com.atguigu.gulimall.product.vo&quot;</li><li>点击&quot;生成JavaBean&quot;</li><li>检查一下代码是否正确</li><li>点击&quot;下载代码&quot;</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.2.3.png" alt="image-20220521223304810" tabindex="0" loading="lazy"><figcaption>image-20220521223304810</figcaption></figure><h4 id="_3、添加vo对象" tabindex="-1"><a class="header-anchor" href="#_3、添加vo对象" aria-hidden="true">#</a> 3、添加<code>vo</code>对象</h4><h5 id="_1、使用生成的java实体类" tabindex="-1"><a class="header-anchor" href="#_1、使用生成的java实体类" aria-hidden="true">#</a> 1、使用生成的Java实体类</h5><p>解压刚刚生成的Java实体类，复制这些实体类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.1.1.png" alt="image-20220521223941902" tabindex="0" loading="lazy"><figcaption>image-20220521223941902</figcaption></figure><p>粘贴到<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.1.2.png" alt="image-20220521224052736" tabindex="0" loading="lazy"><figcaption>image-20220521224052736</figcaption></figure><h5 id="_2、修改粘贴的java实体类-不推荐" tabindex="-1"><a class="header-anchor" href="#_2、修改粘贴的java实体类-不推荐" aria-hidden="true">#</a> 2、修改粘贴的Java实体类(不推荐)</h5><h6 id="_1、修改spusavevo类" tabindex="-1"><a class="header-anchor" href="#_1、修改spusavevo类" aria-hidden="true">#</a> 1、修改<code>SpuSaveVo</code>类</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包下的<code>SpuSaveVo</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Copyright 2022 bejson.com 
  */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Auto-generated: 2022-05-21 22:37:36
 *
 * <span class="token keyword">@author</span> bejson.com (i@bejson.com)
 * <span class="token keyword">@website</span> http://www.bejson.com/java2pojo/
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpuSaveVo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> spuName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> spuDescription<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> catalogId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> brandId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> weight<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> publishStatus<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decript<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> images<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Bounds</span> bounds<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseAttrs</span><span class="token punctuation">&gt;</span></span> baseAttrs<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Skus</span><span class="token punctuation">&gt;</span></span> skus<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.2.1.png" alt="image-20220521225538198" tabindex="0" loading="lazy"><figcaption>image-20220521225538198</figcaption></figure><h6 id="_2、修改skus类" tabindex="-1"><a class="header-anchor" href="#_2、修改skus类" aria-hidden="true">#</a> 2、修改<code>Skus</code>类</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包下的<code>Skus</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Copyright 2022 bejson.com 
  */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Auto-generated: 2022-05-21 22:37:36
 *
 * <span class="token keyword">@author</span> bejson.com (i@bejson.com)
 * <span class="token keyword">@website</span> http://www.bejson.com/java2pojo/
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Skus</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Attr</span><span class="token punctuation">&gt;</span></span> attr<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> skuName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> skuTitle<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> skuSubtitle<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Images</span><span class="token punctuation">&gt;</span></span> images<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> descar<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> fullCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> discount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> countStatus<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> fullPrice<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> reducePrice<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> priceStatus<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberPrice</span><span class="token punctuation">&gt;</span></span> memberPrice<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.2.2.png" alt="image-20220521225626590" tabindex="0" loading="lazy"><figcaption>image-20220521225626590</figcaption></figure><h6 id="_3、修改bounds类" tabindex="-1"><a class="header-anchor" href="#_3、修改bounds类" aria-hidden="true">#</a> 3、修改<code>Bounds</code>类</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包下的<code>Bounds</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Copyright 2022 bejson.com 
  */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Auto-generated: 2022-05-21 22:37:36
 *
 * <span class="token keyword">@author</span> bejson.com (i@bejson.com)
 * <span class="token keyword">@website</span> http://www.bejson.com/java2pojo/
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bounds</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> buyBounds<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> growBounds<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.2.3.png" alt="image-20220521225730419" tabindex="0" loading="lazy"><figcaption>image-20220521225730419</figcaption></figure><h6 id="_4、修改attr类" tabindex="-1"><a class="header-anchor" href="#_4、修改attr类" aria-hidden="true">#</a> 4、修改<code>Attr</code>类</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包下的<code>Attr</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Copyright 2022 bejson.com 
  */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Auto-generated: 2022-05-21 22:37:36
 *
 * <span class="token keyword">@author</span> bejson.com (i@bejson.com)
 * <span class="token keyword">@website</span> http://www.bejson.com/java2pojo/
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attr</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> attrId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> attrName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> attrValue<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.2.4.png" alt="image-20220521225822709" tabindex="0" loading="lazy"><figcaption>image-20220521225822709</figcaption></figure><h6 id="_5、修改memberprice类" tabindex="-1"><a class="header-anchor" href="#_5、修改memberprice类" aria-hidden="true">#</a> 5、修改<code>MemberPrice</code>类</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包下的<code>MemberPrice</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Copyright 2022 bejson.com 
  */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Auto-generated: 2022-05-21 22:37:36
 *
 * <span class="token keyword">@author</span> bejson.com (i@bejson.com)
 * <span class="token keyword">@website</span> http://www.bejson.com/java2pojo/
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberPrice</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.2.5.png" alt="image-20220521225934901" tabindex="0" loading="lazy"><figcaption>image-20220521225934901</figcaption></figure><h6 id="_6、修改images类" tabindex="-1"><a class="header-anchor" href="#_6、修改images类" aria-hidden="true">#</a> 6、修改<code>Images</code>类</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包下的<code>Images</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Copyright 2022 bejson.com 
  */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Auto-generated: 2022-05-21 22:37:36
 *
 * <span class="token keyword">@author</span> bejson.com (i@bejson.com)
 * <span class="token keyword">@website</span> http://www.bejson.com/java2pojo/
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Images</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> imgUrl<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> defaultImg<span class="token punctuation">;</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.2.6.png" alt="image-20220521230008068" tabindex="0" loading="lazy"><figcaption>image-20220521230008068</figcaption></figure><h6 id="_7、修改baseattrs类" tabindex="-1"><a class="header-anchor" href="#_7、修改baseattrs类" aria-hidden="true">#</a> 7、修改<code>BaseAttrs</code>类</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo</code>包下的<code>BaseAttrs</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Copyright 2022 bejson.com 
  */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Auto-generated: 2022-05-21 22:37:36
 *
 * <span class="token keyword">@author</span> bejson.com (i@bejson.com)
 * <span class="token keyword">@website</span> http://www.bejson.com/java2pojo/
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseAttrs</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> attrId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> attrValues<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> showDesc<span class="token punctuation">;</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.2.7.png" alt="image-20220521230035175" tabindex="0" loading="lazy"><figcaption>image-20220521230035175</figcaption></figure><h5 id="_3、使用内部类-推荐" tabindex="-1"><a class="header-anchor" href="#_3、使用内部类-推荐" aria-hidden="true">#</a> 3、使用内部类(推荐)</h5><h6 id="_1、修改成内部类报错" tabindex="-1"><a class="header-anchor" href="#_1、修改成内部类报错" aria-hidden="true">#</a> 1、修改成内部类报错</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpuSaveVo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> spuName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> spuDescription<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> catalogId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> brandId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> weight<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> publishStatus<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decript<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> images<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Bounds</span> bounds<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseAttrs</span><span class="token punctuation">&gt;</span></span> baseAttrs<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Skus</span><span class="token punctuation">&gt;</span></span> skus<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">BaseAttrs</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Long</span> attrId<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attrValues<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> showDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Skus</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Attr</span><span class="token punctuation">&gt;</span></span> attr<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> skuName<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> skuTitle<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> skuSubtitle<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Images</span><span class="token punctuation">&gt;</span></span> images<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> descar<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> fullCount<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> discount<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> countStatus<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> fullPrice<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> reducePrice<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> priceStatus<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberPrice</span><span class="token punctuation">&gt;</span></span> memberPrice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Attr</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Long</span> attrId<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attrName<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> attrValue<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Images</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> imgUrl<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> defaultImg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MemberPrice</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Bounds</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> buyBounds<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> growBounds<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.3.1.png" alt="image-20220522101000555" tabindex="0" loading="lazy"><figcaption>image-20220522101000555</figcaption></figure><p>重启<code>gulimall-product</code>模块，控制台报错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot construct instance of \`com.atguigu.gulimall.product.vo.SpuSaveVo$BaseAttrs\` (although at least one Creator exists): can only instantiate non-static inner class by using default, no-argument constructor; nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of \`com.atguigu.gulimall.product.vo.SpuSaveVo$BaseAttrs\` (although at least one Creator exists): can only instantiate non-static inner class by using default, no-argument constructor

org.springframework.http.converter.HttpMessageNotReadableException：JSON解析错误：无法构造\`com.atguigu.gulimall.product.vo.SpuSaveVo$BaseAttrs\`的实例（尽管至少存在一个Creator）：只能实例化非静态内部类 通过使用默认的无参数构造函数； 嵌套异常是 com.fasterxml.jackson.databind.exc.MismatchedInputException：无法构造 \`com.atguigu.gulimall.product.vo.SpuSaveVo$BaseAttrs\` 的实例（尽管至少存在一个 Creator）：只能实例化非静态内部 使用默认的无参数构造函数进行类
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、修改为静态内部类" tabindex="-1"><a class="header-anchor" href="#_2、修改为静态内部类" aria-hidden="true">#</a> 2、修改为静态内部类</h6><p>本类下的所有内部类添加<code>staitc</code>关键字，修改为静态内部类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.3.2.png" alt="image-20220522101630956" tabindex="0" loading="lazy"><figcaption>image-20220522101630956</figcaption></figure><h5 id="_4、测试-4" tabindex="-1"><a class="header-anchor" href="#_4、测试-4" aria-hidden="true">#</a> 4、测试</h5><h6 id="_1、打断点" tabindex="-1"><a class="header-anchor" href="#_1、打断点" aria-hidden="true">#</a> 1、打断点</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.SpuInfoController</code>类的<code>save</code>方法</p><p>并打断点，以测试<code>SpuSaveVo</code>是否可以正确封装数据</p><p>然后以<code>debug</code>方式启动<code>gulimall-product</code>模块</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 保存
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//spuInfoService.save(spuInfo);</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.4.1.png" alt="image-20220522120721302" tabindex="0" loading="lazy"><figcaption>image-20220522120721302</figcaption></figure><h6 id="_2、使用postman发送请求" tabindex="-1"><a class="header-anchor" href="#_2、使用postman发送请求" aria-hidden="true">#</a> 2、使用<code>Postman</code>发送请求</h6><ol><li>输入url：http://localhost:88/api/product/spuinfo/save</li><li>选择<code>Post</code></li><li>点击<code>Body</code></li><li>点击<code>raw</code></li><li>选择<code>JSON</code></li><li>粘贴控制台里复制的JSON</li><li>点击<code>Send</code></li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.4.2.png" alt="image-20220522120320199" tabindex="0" loading="lazy"><figcaption>image-20220522120320199</figcaption></figure><h6 id="_3、查看封装的数据" tabindex="-1"><a class="header-anchor" href="#_3、查看封装的数据" aria-hidden="true">#</a> 3、查看封装的数据</h6><p>可以看到<code>SpuSaveVo</code>类已正确封装了数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.3.4.3.png" alt="image-20220522101945488" tabindex="0" loading="lazy"><figcaption>image-20220522101945488</figcaption></figure><h4 id="_4、修改save方法" tabindex="-1"><a class="header-anchor" href="#_4、修改save方法" aria-hidden="true">#</a> 4、修改<code>save</code>方法</h4><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.SpuInfoController</code>类的<code>save</code>方法</p><p><strong>应该是<code>spuInfoService.saveSpuInfo(spuSaveVo);</code>，这里写错了</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 保存
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//spuInfoService.save(spuInfo);</span>
   spuInfoService<span class="token punctuation">.</span><span class="token function">saveSouInfo</span><span class="token punctuation">(</span>spuSaveVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.4.png" alt="image-20220522093324236" tabindex="0" loading="lazy"><figcaption>image-20220522093324236</figcaption></figure><h4 id="_5、添加savesouinfo抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、添加savesouinfo抽象方法" aria-hidden="true">#</a> 5、添加<code>saveSouInfo</code>抽象方法</h4><p><strong>(应该是添加<code>saveSouInfo</code>抽象方法，这里写错了)</strong></p><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.SpuInfoService</code>接口里添加<code>saveSouInfo</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.5.png" alt="image-20220522093446271" tabindex="0" loading="lazy"><figcaption>image-20220522093446271</figcaption></figure><h4 id="_6、实现savesouinfo抽象方法" tabindex="-1"><a class="header-anchor" href="#_6、实现savesouinfo抽象方法" aria-hidden="true">#</a> 6、实现<code>saveSouInfo</code>抽象方法</h4><p><strong>(应该是添加<code>saveSpuInfo</code>抽象方法，这里写错了)</strong></p><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里实现<code>saveSouInfo</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSouInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、保存spu基本信息 pms_spu_info</span>

    <span class="token comment">//2、保存Spu的描述图片 pms_spu_info_desc</span>

    <span class="token comment">//3、保存spu的图片集 pms_spu_images</span>

    <span class="token comment">//4、保存spu的规格参数；pms_product_attr_value</span>

    <span class="token comment">//5、保存spu的积分信息; gulimall_sms-&gt;sms_spu_bounds</span>

    <span class="token comment">//5、保存当前spu对应的所有sku信息;</span>
    <span class="token comment">//5.1)、sku的基本信息; pms_sku_info</span>
    <span class="token comment">//5.2)、sku的图片信息; pms_sku_images</span>
    <span class="token comment">//5.3)、sku的销售属性信息: pms_sku_sale_attr_value</span>
    <span class="token comment">//5.4)、sku的优惠、满减、打折等信息；gulimall_sms-&gt;sms_sku_ladder\\sms_sku_full_reduction\\sms_ member_price</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.4.6.png" alt="image-20220522141406494" tabindex="0" loading="lazy"><figcaption>image-20220522141406494</figcaption></figure><h3 id="_4-6-5、新增商品-2" tabindex="-1"><a class="header-anchor" href="#_4-6-5、新增商品-2" aria-hidden="true">#</a> 4.6.5、新增商品(2)</h3><h4 id="_4-6-5-1、保存spu基本信息pms-spu-info" tabindex="-1"><a class="header-anchor" href="#_4-6-5-1、保存spu基本信息pms-spu-info" aria-hidden="true">#</a> 4.6.5.1、保存spu基本信息<code>pms_spu_info</code></h4><h5 id="_1、调用savebasespuinfo方法" tabindex="-1"><a class="header-anchor" href="#_1、调用savebasespuinfo方法" aria-hidden="true">#</a> 1、调用<code>saveBaseSpuInfo</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里的<code>saveSouInfo</code>方法里编写部分代码，用于保存spu基本信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSouInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、保存spu基本信息 pms_spu_info</span>
    <span class="token class-name">SpuInfoEntity</span> spuInfoEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBaseSpuInfo</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.1.png" alt="image-20220522163949897" tabindex="0" loading="lazy"><figcaption>image-20220522163949897</figcaption></figure><h5 id="_2、创建savebasespuinfo方法" tabindex="-1"><a class="header-anchor" href="#_2、创建savebasespuinfo方法" aria-hidden="true">#</a> 2、创建<code>saveBaseSpuInfo</code>方法</h5><p>光标放在<code>SpuInfoServiceImpl</code>类的<code>saveSouInfo</code>里的<code>this.saveBaseSpuInfo(spuInfoEntity);</code>中的<code>;</code>前面</p><p>使用<code>alt+enter</code>快捷键，选择<code>Create method &#39;saveBaseSpuInfo&#39;</code>,然后选择<code>SpuInfoService</code></p><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.SpuInfoService</code>接口创建<code>saveBaseSpuInfo</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveBaseSpuInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuInfoEntity</span> spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>光标放在<code>SpuInfoService</code>接口的<code>void saveBaseSpuInfo(SpuInfoEntity spuInfoEntity);</code>中的<code>;</code>前面</p><p>使用<code>alt+enter</code>快捷键，选择<code>Implement method &#39;saveBaseSpuInfo&#39;</code><strong>(没有这个选项的随便在该抽象方法后面敲两个回车就有了)</strong></p><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里实现<code>saveBaseSpuInfo</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.2.png" alt="GIF 2022-5-22 16-37-11" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-22 16-37-11</figcaption></figure><h5 id="_3、编写savebasespuinfo方法" tabindex="-1"><a class="header-anchor" href="#_3、编写savebasespuinfo方法" aria-hidden="true">#</a> 3、编写<code>saveBaseSpuInfo</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里编写<code>saveBaseSpuInfo</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveBaseSpuInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuInfoEntity</span> spuInfoEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.3.png" alt="image-20220522171910439" tabindex="0" loading="lazy"><figcaption>image-20220522171910439</figcaption></figure><h5 id="_4、封装对象-方法一" tabindex="-1"><a class="header-anchor" href="#_4、封装对象-方法一" aria-hidden="true">#</a> 4、封装对象(方法一)</h5><h6 id="_1、查看spusavevo中缺少的字段" tabindex="-1"><a class="header-anchor" href="#_1、查看spusavevo中缺少的字段" aria-hidden="true">#</a> 1、查看<code>SpuSaveVo</code>中缺少的字段</h6><p>可以看到<code>SpuSaveVo</code>类里相较于<code>SpuInfoEntity</code>没有<code>createTime</code>字段和<code>SpuSaveVo</code>字段</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.4.1.png" alt="image-20220522172310652" tabindex="0" loading="lazy"><figcaption>image-20220522172310652</figcaption></figure><h6 id="_2、使用代码添加时间" tabindex="-1"><a class="header-anchor" href="#_2、使用代码添加时间" aria-hidden="true">#</a> 2、使用代码添加时间</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveBaseSpuInfo</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSouInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、保存spu基本信息 pms_spu_info</span>
    <span class="token class-name">SpuInfoEntity</span> spuInfoEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>spuSaveVo<span class="token punctuation">,</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    spuInfoEntity<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    spuInfoEntity<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBaseSpuInfo</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.4.2.png" alt="image-20220522172613649" tabindex="0" loading="lazy"><figcaption>image-20220522172613649</figcaption></figure><h5 id="_5、封装对象-方法二" tabindex="-1"><a class="header-anchor" href="#_5、封装对象-方法二" aria-hidden="true">#</a> 5、封装对象(方法二)</h5><h6 id="_1、修改savebasespuinfo方法" tabindex="-1"><a class="header-anchor" href="#_1、修改savebasespuinfo方法" aria-hidden="true">#</a> 1、修改<code>saveBaseSpuInfo</code>方法</h6><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveBaseSpuInfo</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSouInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、保存spu基本信息 pms_spu_info</span>
    <span class="token class-name">SpuInfoEntity</span> spuInfoEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>spuSaveVo<span class="token punctuation">,</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBaseSpuInfo</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.1.png" alt="image-20220522172710746" tabindex="0" loading="lazy"><figcaption>image-20220522172710746</figcaption></figure><h6 id="_2、添加metaobjecthandler配置" tabindex="-1"><a class="header-anchor" href="#_2、添加metaobjecthandler配置" aria-hidden="true">#</a> 2、添加<code>MetaObjectHandler</code>配置</h6><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.config</code>包里新建<code>MyBatisConfig</code>类，继承<code>MetaObjectHandler</code>类</p><p><strong>(应该把<code>LocalDateTime.class</code>改为<code>new Date()</code>)</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">MetaObjectHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span><span class="token class-name">MetaObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/22
 * @Description:
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;start insert fill...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//this.setFieldValByName(&quot;createTime&quot;, new Date(), metaObject);</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;updateTime&quot;</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;start update fill...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;updateTime&quot;</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.2.png" alt="image-20220522180735126" tabindex="0" loading="lazy"><figcaption>image-20220522180735126</figcaption></figure><h6 id="_3、实体类-tablefield添加注解" tabindex="-1"><a class="header-anchor" href="#_3、实体类-tablefield添加注解" aria-hidden="true">#</a> 3、实体类<code>@TableField</code>添加注解</h6><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.SpuInfoEntity</code>实体类的<code>createTime</code>和<code>updateTime</code>字段添加<code>@TableField</code>注解,测试时肯定会报错，这里想看一下会报什么错(如果使用的是<code>new Date()</code>就不会报错，并且还会得到正确的结果)</p><p>(如果是MetaObjectHandler配置类使用的是LocalDateTime类型 要加@DateTimeFormat不加这个注解查询的时候会报错)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 1、如果是MetaObjectHandler配置类使用的是LocalDateTime类型 要加@DateTimeFormat不加这个注解查询的时候会报错
 *    DateUtil使用的是org.springblade.core.tool.utils.DateUtil;
 *    @DateTimeFormat(pattern = DateUtil.PATTERN_DATETIME)
 *    @JsonFormat(pattern = DateUtil.PATTERN_DATETIME)
 *    @TableField(fill = FieldFill.INSERT)
 * 2、如果使用的是 new Date() ,则只需要使用 @TableField(fill = FieldFill.INSERT)
 *    @TableField(fill = FieldFill.INSERT)
 */</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 
 */</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT_UPDATE</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.3.png" alt="image-20220522182337080" tabindex="0" loading="lazy"><figcaption>image-20220522182337080</figcaption></figure><p>别人的<code>DateUtil</code>工具类，不过它使用的是<code>new Date()</code>方式，不需要设置<code>@DateTimeFormat</code>，这里想看一看会报什么错</p><p><a href="code/4.6.5.1.5.3.java">点击查看<code>DateUtil</code>类完整代码</a></p><h6 id="_4、使用postman发送请求" tabindex="-1"><a class="header-anchor" href="#_4、使用postman发送请求" aria-hidden="true">#</a> 4、使用<code>Postman</code>发送请求</h6><p>重启<code>gulimall-product</code>模块,使用<code>Postman</code>发送请求</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.4.png" alt="image-20220522181338567" tabindex="0" loading="lazy"><figcaption>image-20220522181338567</figcaption></figure><h6 id="_5、查看报错" tabindex="-1"><a class="header-anchor" href="#_5、查看报错" aria-hidden="true">#</a> 5、查看报错</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: Could not set property &#39;createTime&#39; of &#39;class com.atguigu.gulimall.product.entity.SpuInfoEntity&#39; with value &#39;class java.time.LocalDateTime&#39; Cause: java.lang.IllegalArgumentException: argument type mismatch

org.mybatis.spring.MyBatisSystemException：嵌套异常是 org.apache.ibatis.reflection.ReflectionException：无法将 &#39;class com.atguigu.gulimall.product.entity.SpuInfoEntity&#39; 的属性&#39;createTime&#39;设置为&#39;class java.time&#39; .LocalDateTime&#39; 原因：java.lang.IllegalArgumentException：参数类型不匹配
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.5.png" alt="image-20220522181444148" tabindex="0" loading="lazy"><figcaption>image-20220522181444148</figcaption></figure><h6 id="_6、google一下这个错" tabindex="-1"><a class="header-anchor" href="#_6、google一下这个错" aria-hidden="true">#</a> 6、<code>google</code>一下这个错</h6><p><code>stackoverflow</code>上说需要使用<code>DateTimeFormatter.ISO_LOCAL_DATE_TIME</code></p><p>https://stackoverflow.com/questions/57972766/java-lang-illegalargumentexception-platform-class-java-time-localdatetime-with</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.6.png" alt="image-20220522181635099" tabindex="0" loading="lazy"><figcaption>image-20220522181635099</figcaption></figure><h6 id="_7、属性值必须是常量" tabindex="-1"><a class="header-anchor" href="#_7、属性值必须是常量" aria-hidden="true">#</a> 7、属性值必须是常量</h6><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.SpuInfoEntity</code>类的<code>createTime</code>方法上添加注解<code>@DateTimeFormat(pattern = DateTimeFormatter.ISO_LOCAL_DATE_TIME)</code>提示<code>Attribute value must be constant</code></p><p>删掉这个注解，测试一下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.7.png" alt="image-20220522181946429" tabindex="0" loading="lazy"><figcaption>image-20220522181946429</figcaption></figure><h6 id="_8、测试日期格式" tabindex="-1"><a class="header-anchor" href="#_8、测试日期格式" aria-hidden="true">#</a> 8、测试日期格式</h6><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.GulimallProductApplicationTests</code>类添加<code>DateTimeFormatterTest</code>测试方法，进行测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">DateTimeFormatterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_LOCAL_DATE_TIME</span><span class="token punctuation">;</span>
   <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间</span>
   <span class="token class-name">String</span> str <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2022-01-24T11:06:34.473</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2022-05-22T18:30:59:498
2022-05-22T18:30:59:498
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.8.1.png" alt="image-20220522193641644" tabindex="0" loading="lazy"><figcaption>image-20220522193641644</figcaption></figure><p>参考链接： https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html</p><p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.8.2.png" alt="image-20220522193704482" loading="lazy">修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.GulimallProductApplicationTests</code>类的<code>DateTimeFormatterTest</code>测试方法，重新进行测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">DateTimeFormatterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">DateTimeFormatter</span> formatter1 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_LOCAL_DATE_TIME</span><span class="token punctuation">;</span>
   <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间</span>
   <span class="token class-name">String</span> str1 <span class="token operator">=</span> formatter1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2022-01-24T11:06:34.473</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==========================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">DateTimeFormatter</span> formatter2 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-ddTHH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间</span>
   <span class="token class-name">String</span> str2 <span class="token operator">=</span> formatter2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试失败了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java.lang.IllegalArgumentException: Unknown pattern letter: T
java.lang.IllegalArgumentException：未知模式字母：T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.8.3.png" alt="image-20220522194537130" tabindex="0" loading="lazy"><figcaption>image-20220522194537130</figcaption></figure><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.GulimallProductApplicationTests</code>类的<code>DateTimeFormatterTest</code>测试方法，重新进行测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">DateTimeFormatterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">DateTimeFormatter</span> formatter1 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_LOCAL_DATE_TIME</span><span class="token punctuation">;</span>
   <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间</span>
   <span class="token class-name">String</span> str1 <span class="token operator">=</span> formatter1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2022-01-24T11:06:34.473</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;==========================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">DateTimeFormatter</span> formatter2 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前时间</span>
   <span class="token class-name">String</span> str2 <span class="token operator">=</span> formatter2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的格式还是不对：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2022-05-22T19:46:24.884
2022-05-22T19:46:24.884
==========================
2022-05-22T19:46:24.886
2022-05-22T19:46:24
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.8.4.png" alt="image-20220522194710291" tabindex="0" loading="lazy"><figcaption>image-20220522194710291</figcaption></figure><p>查看<code>DateTimeFormatter.ISO_LOCAL_DATE_TIME</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.8.5.png" alt="image-20220522195349302" tabindex="0" loading="lazy"><figcaption>image-20220522195349302</figcaption></figure><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.SpuInfoEntity</code>实体类的<code>createTime</code>和<code>updateTime</code>字段上添加注解，重启<code>gulimall-product</code>模块，使用<code>Postman</code>发送请求后，还是报错</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 1、如果是MetaObjectHandler配置类使用的是LocalDateTime类型 要加@DateTimeFormat不加这个注解查询的时候会报错
 *       DateUtil使用的是org.springblade.core.tool.utils.DateUtil;
 *    @DateTimeFormat(pattern = DateUtil.PATTERN_DATETIME)
 *    @JsonFormat(pattern = DateUtil.PATTERN_DATETIME)
 *    @TableField(fill = FieldFill.INSERT)
 * 2、如果使用的是 new Date() ,则只需要使用 @TableField(fill = FieldFill.INSERT)
 *       @TableField(fill = FieldFill.INSERT)
 */</span>
<span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 
 */</span>
<span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT_UPDATE</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.8.6.png" alt="image-20220522195303101" tabindex="0" loading="lazy"><figcaption>image-20220522195303101</figcaption></figure><h6 id="_9、最终方案" tabindex="-1"><a class="header-anchor" href="#_9、最终方案" aria-hidden="true">#</a> 9、最终方案</h6><p>还是使用了最初应该使用的方法</p><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.config.MyMetaObjectHandler</code>类</p><p>将<code> LocalDateTime.class</code>全部修改为<code>new Date()</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">MetaObjectHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span><span class="token class-name">MetaObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/22
 * @Description:
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;start insert fill...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//this.setFieldValByName(&quot;createTime&quot;, new Date(), metaObject);</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;updateTime&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;start update fill...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;updateTime&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.9.1.png" alt="image-20220522201105155" tabindex="0" loading="lazy"><figcaption>image-20220522201105155</figcaption></figure><p>重启<code>gulimall-product</code>模块，使用<code>Postman</code>发送请求</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.9.2.png" alt="image-20220522201604822" tabindex="0" loading="lazy"><figcaption>image-20220522201604822</figcaption></figure><p><code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.SpuInfoEntity</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">FieldFill</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableField</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableName</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonFormat</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>format<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormat</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * spu信息
 * 
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@email</span> 2185180175@qq.com
 * <span class="token keyword">@date</span> 2022-04-17 18:19:58
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;pms_spu_info&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpuInfoEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

   <span class="token doc-comment comment">/**
    * 商品id
    */</span>
   <span class="token annotation punctuation">@TableId</span>
   <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 商品名称
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> spuName<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 商品描述
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> spuDescription<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 所属分类id
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">Long</span> catalogId<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 品牌id
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">Long</span> brandId<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> weight<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 上架状态[0 - 下架，1 - 上架]
    */</span>
   <span class="token keyword">private</span> <span class="token class-name">Integer</span> publishStatus<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 1、如果是MetaObjectHandler配置类使用的是LocalDateTime类型 要加@DateTimeFormat不加这个注解查询的时候会报错
    *       DateUtil使用的是org.springblade.core.tool.utils.DateUtil;
    *    @DateTimeFormat(pattern = DateUtil.PATTERN_DATETIME)
    *    @JsonFormat(pattern = DateUtil.PATTERN_DATETIME)
    *    @TableField(fill = FieldFill.INSERT)
    * 2、如果使用的是 new Date() ,则只需要使用 @TableField(fill = FieldFill.INSERT)
    *       @TableField(fill = FieldFill.INSERT)
    */</span>
   <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>
   <span class="token doc-comment comment">/**
    * 
    */</span>
   <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
   <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span><span class="token constant">INSERT_UPDATE</span><span class="token punctuation">)</span>
   <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到插入到时间精确到了<code>毫秒</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.9.3.png" alt="image-20220522201403809" tabindex="0" loading="lazy"><figcaption>image-20220522201403809</figcaption></figure><p>查看数据库,数据库的时间精确到了<code>秒</code>(四舍五入)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.9.4.png" alt="image-20220522201644762" tabindex="0" loading="lazy"><figcaption>image-20220522201644762</figcaption></figure><p>删掉<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.SpuInfoEntity</code>类<code>createTime</code>字段和<code>updateTime</code>字段上的<code>@DateTimeFormat</code>和<code>@JsonFormat</code>注解</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.9.5.png" alt="image-20220522201719091" tabindex="0" loading="lazy"><figcaption>image-20220522201719091</figcaption></figure><p>重启<code>gulimall-product</code>模块，重新使用<code>Postman</code>发送请求，控制台还是精确到<code>毫秒</code>,数据库还是精确到<code>秒</code>(四舍五入)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.9.7.png" alt="image-20220522201908544" tabindex="0" loading="lazy"><figcaption>image-20220522201908544</figcaption></figure><p>截断<code>gulimall_pms</code>模块的<code>pms_spu_info</code>，删除数据并使<code>id</code>重新从<code>1</code>开始</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.5.9.8.png" alt="image-20220522212108872" tabindex="0" loading="lazy"><figcaption>image-20220522212108872</figcaption></figure><h5 id="_6、修改savesouinfo为savespuinfo" tabindex="-1"><a class="header-anchor" href="#_6、修改savesouinfo为savespuinfo" aria-hidden="true">#</a> 6、修改<code>saveSouInfo</code>为<code>saveSpuInfo</code></h5><p>修改<code>saveSouInfo</code>为<code>saveSpuInfo</code>，之前这个方法名写错了</p><p>双击选中<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法</p><p>右键选择<code>Find Usages</code>，查看哪些类调用了该方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.6.1.png" alt="image-20220522225959312" tabindex="0" loading="lazy"><figcaption>image-20220522225959312</figcaption></figure><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.SpuInfoController</code>类的<code>save</code>方法里，</p><p>把<code>saveSouInfo</code>修改为<code>saveSpuInfo</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.6.2.png" alt="image-20220522221105775" tabindex="0" loading="lazy"><figcaption>image-20220522221105775</figcaption></figure><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.SpuInfoService</code>接口里，把<code>saveSouInfo</code>抽象方法修改为<code>saveSpuInfo</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.6.3.png" alt="image-20220522221206062" tabindex="0" loading="lazy"><figcaption>image-20220522221206062</figcaption></figure><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里把<code>saveSpuInfo</code>方法改为<code>saveSpuInfo</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.1.6.4.png" alt="image-20220522230202137" tabindex="0" loading="lazy"><figcaption>image-20220522230202137</figcaption></figure><h4 id="_4-6-5-2、保存spu的描述信息pms-spu-info-desc" tabindex="-1"><a class="header-anchor" href="#_4-6-5-2、保存spu的描述信息pms-spu-info-desc" aria-hidden="true">#</a> 4.6.5.2、保存Spu的描述信息<code>pms_spu_info_desc</code></h4><h5 id="_1、调用savespuinfodesc方法" tabindex="-1"><a class="header-anchor" href="#_1、调用savespuinfodesc方法" aria-hidden="true">#</a> 1、调用<code>saveSpuInfoDesc</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里的<code>saveSouInfo</code>方法里编写部分代码，用于保存Spu的描述图片</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">SpuInfoDescService</span> spuInfoDescService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSpuInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、保存spu基本信息 pms_spu_info</span>
    <span class="token class-name">SpuInfoEntity</span> spuInfoEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>spuSaveVo<span class="token punctuation">,</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBaseSpuInfo</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2、保存Spu的描述信息 pms_spu_info_desc</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decript <span class="token operator">=</span> spuSaveVo<span class="token punctuation">.</span><span class="token function">getDecript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>decript<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> decript<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpuInfoDescEntity</span> spuInfoDescEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoDescEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//this.saveBaseSpuInfo(spuInfoEntity);执行后，会将生成的id赋值到puInfoDescEntity的spuId里</span>
        spuInfoDescEntity<span class="token punctuation">.</span><span class="token function">setSpuId</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将List&lt;String&gt;转为String，用逗号分隔</span>
        spuInfoDescEntity<span class="token punctuation">.</span><span class="token function">setDecript</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> decript<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuInfoDescService<span class="token punctuation">.</span><span class="token function">saveSpuInfoDesc</span><span class="token punctuation">(</span>spuInfoDescEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.2.1.png" alt="image-20220523001135275" tabindex="0" loading="lazy"><figcaption>image-20220523001135275</figcaption></figure><h5 id="_2、创建savespuinfodesc抽象方法" tabindex="-1"><a class="header-anchor" href="#_2、创建savespuinfodesc抽象方法" aria-hidden="true">#</a> 2、创建<code>saveSpuInfoDesc</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.SpuInfoDescService</code>接口里添加<code>saveSpuInfoDesc</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveSpuInfoDesc</span><span class="token punctuation">(</span><span class="token class-name">SpuInfoDescEntity</span> spuInfoDescEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoDescServiceImpl</code>类里实现<code>saveSpuInfoDesc</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.2.2.gif" alt="GIF 2022-5-23 0-13-40" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-23 0-13-40</figcaption></figure><h5 id="_3、修改savespuinfodesc方法" tabindex="-1"><a class="header-anchor" href="#_3、修改savespuinfodesc方法" aria-hidden="true">#</a> 3、修改<code>saveSpuInfoDesc</code>方法</h5><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoDescServiceImpl</code>类里的<code>saveSpuInfoDesc</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSpuInfoDesc</span><span class="token punctuation">(</span><span class="token class-name">SpuInfoDescEntity</span> spuInfoDescEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>spuInfoDescEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.2.3.png" alt="image-20220522224957138" tabindex="0" loading="lazy"><figcaption>image-20220522224957138</figcaption></figure><h4 id="_4-6-5-3、保存spu的图片集pms-spu-images" tabindex="-1"><a class="header-anchor" href="#_4-6-5-3、保存spu的图片集pms-spu-images" aria-hidden="true">#</a> 4.6.5.3、保存spu的图片集<code>pms_spu_images</code></h4><h5 id="_1、调用saveimages方法" tabindex="-1"><a class="header-anchor" href="#_1、调用saveimages方法" aria-hidden="true">#</a> 1、调用<code>saveImages</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里的<code>saveSouInfo</code>方法里编写部分代码，用于保存Spu的图片集</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">SpuInfoDescService</span> spuInfoDescService<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">SpuImagesService</span> spuImagesService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSpuInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、保存spu基本信息 pms_spu_info</span>
    <span class="token class-name">SpuInfoEntity</span> spuInfoEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>spuSaveVo<span class="token punctuation">,</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBaseSpuInfo</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2、保存Spu的描述图片 pms_spu_info_desc</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decript <span class="token operator">=</span> spuSaveVo<span class="token punctuation">.</span><span class="token function">getDecript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>decript<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> decript<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpuInfoDescEntity</span> spuInfoDescEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoDescEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuInfoDescEntity<span class="token punctuation">.</span><span class="token function">setSpuId</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuInfoDescEntity<span class="token punctuation">.</span><span class="token function">setDecript</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> decript<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuInfoDescService<span class="token punctuation">.</span><span class="token function">saveSpuInfoDesc</span><span class="token punctuation">(</span>spuInfoDescEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//3、保存spu的图片集 pms_spu_images</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> images <span class="token operator">=</span> spuSaveVo<span class="token punctuation">.</span><span class="token function">getImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>images<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> images<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        spuImagesService<span class="token punctuation">.</span><span class="token function">saveImages</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> images<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.3.1.png" alt="image-20220523201222020" tabindex="0" loading="lazy"><figcaption>image-20220523201222020</figcaption></figure><h5 id="_2、添加saveimages抽象方法" tabindex="-1"><a class="header-anchor" href="#_2、添加saveimages抽象方法" aria-hidden="true">#</a> 2、添加<code>saveImages</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.SpuImagesService</code>类里添加<code>saveImages</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveImages</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> images<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuImagesServiceImpl</code>类实现<code>saveImages</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.3.2.gif" alt="GIF 2022-5-23 20-13-04" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-23 20-13-04</figcaption></figure><h5 id="_3、实现saveimages方法" tabindex="-1"><a class="header-anchor" href="#_3、实现saveimages方法" aria-hidden="true">#</a> 3、实现<code>saveImages</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuImagesServiceImpl</code>类里的<code>saveImages</code>方法添加具体实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 批量保存图片
 * <span class="token keyword">@param</span> <span class="token parameter">id</span>        spuId
 * <span class="token keyword">@param</span> <span class="token parameter">images</span>    图片集的url
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveImages</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> images<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>images<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpuImagesEntity</span><span class="token punctuation">&gt;</span></span> spuImagesEntities <span class="token operator">=</span> images<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>image <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpuImagesEntity</span> spuImagesEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuImagesEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuImagesEntity<span class="token punctuation">.</span><span class="token function">setSpuId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuImagesEntity<span class="token punctuation">.</span><span class="token function">setImgUrl</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> spuImagesEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>spuImagesEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.3.3.png" alt="image-20220523202313469" tabindex="0" loading="lazy"><figcaption>image-20220523202313469</figcaption></figure><h4 id="_4-6-5-4、保存spu的规格参数pms-product-attr-value" tabindex="-1"><a class="header-anchor" href="#_4-6-5-4、保存spu的规格参数pms-product-attr-value" aria-hidden="true">#</a> 4.6.5.4、保存spu的规格参数<code>pms_product_attr_value</code></h4><h5 id="_1、私有访问权限无法访问" tabindex="-1"><a class="header-anchor" href="#_1、私有访问权限无法访问" aria-hidden="true">#</a> 1、私有访问权限无法访问</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&#39;com.atguigu.gulimall.product.vo.SpuSaveVo.BaseAttrs&#39;</span> has private access <span class="token keyword">in</span> <span class="token string">&#39;com.atguigu.gulimall.product.vo.SpuSaveVo&#39;</span>

<span class="token string">&#39;com.atguigu.gulimall.product.vo.SpuSaveVo.BaseAttrs&#39;</span> 在 <span class="token string">&#39;com.atguigu.gulimall.product.vo.SpuSaveVo&#39;</span> 中具有私有访问权限
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.4.1.png" alt="image-20220523204943855" tabindex="0" loading="lazy"><figcaption>image-20220523204943855</figcaption></figure><h5 id="_2、将spusavevo的内部类都改为公有" tabindex="-1"><a class="header-anchor" href="#_2、将spusavevo的内部类都改为公有" aria-hidden="true">#</a> 2、将<code>SpuSaveVo</code>的内部类都改为公有</h5><p>将<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo.SpuSaveVo</code>类的所有内部类的访问权限都改为<code>public</code></p><p><a href="code/4.6.5.4.2.SpuSaveVo.java">点击查看<code>SpuSaveVo</code>类完整代码</a></p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.4.2.png" alt="image-20220523204847342" style="zoom:33%;"><h5 id="_3、调用saveproductattr方法" tabindex="-1"><a class="header-anchor" href="#_3、调用saveproductattr方法" aria-hidden="true">#</a> 3、调用<code>saveProductAttr</code>方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里的<code>saveSouInfo</code>方法里编写部分代码，保存spu的规格参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">SpuInfoDescService</span> spuInfoDescService<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">SpuImagesService</span> spuImagesService<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">AttrService</span> attrService<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">ProductAttrValueService</span> productAttrValueService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSpuInfo</span><span class="token punctuation">(</span><span class="token class-name">SpuSaveVo</span> spuSaveVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、保存spu基本信息 pms_spu_info</span>
    <span class="token class-name">SpuInfoEntity</span> spuInfoEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>spuSaveVo<span class="token punctuation">,</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBaseSpuInfo</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2、保存Spu的描述图片 pms_spu_info_desc</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> decript <span class="token operator">=</span> spuSaveVo<span class="token punctuation">.</span><span class="token function">getDecript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>decript<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> decript<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpuInfoDescEntity</span> spuInfoDescEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuInfoDescEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuInfoDescEntity<span class="token punctuation">.</span><span class="token function">setSpuId</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuInfoDescEntity<span class="token punctuation">.</span><span class="token function">setDecript</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> decript<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        spuInfoDescService<span class="token punctuation">.</span><span class="token function">saveSpuInfoDesc</span><span class="token punctuation">(</span>spuInfoDescEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//3、保存spu的图片集 pms_spu_images</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> images <span class="token operator">=</span> spuSaveVo<span class="token punctuation">.</span><span class="token function">getImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>images<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> images<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        spuImagesService<span class="token punctuation">.</span><span class="token function">saveImages</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> images<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//4、保存spu的规格参数；pms_product_attr_value</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpuSaveVo<span class="token punctuation">.</span>BaseAttrs</span><span class="token punctuation">&gt;</span></span> baseAttrs <span class="token operator">=</span> spuSaveVo<span class="token punctuation">.</span><span class="token function">getBaseAttrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>baseAttrs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> productAttrValueEntities <span class="token operator">=</span> baseAttrs<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>attr <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">ProductAttrValueEntity</span> productAttrValueEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productAttrValueEntity<span class="token punctuation">.</span><span class="token function">setSpuId</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                productAttrValueEntity<span class="token punctuation">.</span><span class="token function">setAttrId</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                productAttrValueEntity<span class="token punctuation">.</span><span class="token function">setAttrValue</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                productAttrValueEntity<span class="token punctuation">.</span><span class="token function">setQuickShow</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getShowDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">AttrEntity</span> attrEntity <span class="token operator">=</span> attrService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getAttrId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>attrEntity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    productAttrValueEntity<span class="token punctuation">.</span><span class="token function">setAttrName</span><span class="token punctuation">(</span>attrEntity<span class="token punctuation">.</span><span class="token function">getAttrName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> productAttrValueEntity<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        productAttrValueService<span class="token punctuation">.</span><span class="token function">saveProductAttr</span><span class="token punctuation">(</span>productAttrValueEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.4.3.png" alt="image-20220523211034830" tabindex="0" loading="lazy"><figcaption>image-20220523211034830</figcaption></figure><h5 id="_4、添加saveproductattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加saveproductattr抽象方法" aria-hidden="true">#</a> 4、添加<code>saveProductAttr</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.ProductAttrValueService</code>类里添加<code>saveProductAttr</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveProductAttr</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> productAttrValueEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里实现<code>saveProductAttr</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.4.4.gif" alt="GIF 2022-5-23 21-11-06" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-23 21-11-06</figcaption></figure><h5 id="_5、实现saveproductattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现saveproductattr抽象方法" aria-hidden="true">#</a> 5、实现<code>saveProductAttr</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里的<code>saveProductAttr</code>方法里添加具体实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveProductAttr</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> productAttrValueEntities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>productAttrValueEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.4.5.png" alt="image-20220523211149789" tabindex="0" loading="lazy"><figcaption>image-20220523211149789</figcaption></figure><h4 id="_4-6-5-5、保存当前spu对应的所有sku信息" tabindex="-1"><a class="header-anchor" href="#_4-6-5-5、保存当前spu对应的所有sku信息" aria-hidden="true">#</a> 4.6.5.5、保存当前spu对应的所有sku信息</h4><h5 id="_1、复制sku的信息到skuinfoentity" tabindex="-1"><a class="header-anchor" href="#_1、复制sku的信息到skuinfoentity" aria-hidden="true">#</a> 1、复制<code>sku</code>的信息到<code>skuInfoEntity</code></h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里的<code>saveProductAttr</code>方法里复制<code>sku</code>的信息到<code>skuInfoEntity</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.5.1.png" alt="image-20220523213603802" tabindex="0" loading="lazy"><figcaption>image-20220523213603802</figcaption></figure><h5 id="_2、查看可以复制的字段" tabindex="-1"><a class="header-anchor" href="#_2、查看可以复制的字段" aria-hidden="true">#</a> 2、查看可以复制的字段</h5><p>比对<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo.SpuSaveVo.Skus</code>类</p><p>和<code>com.atguigu.gulimall.product.entity.SkuInfoEntity</code>类</p><p>可以看到<code>skuName</code>、<code>price</code>、<code>skuTitle</code>、<code>skuSubtitle</code>这些字段可以拷贝</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.5.2.png" alt="image-20220523213242536" tabindex="0" loading="lazy"><figcaption>image-20220523213242536</figcaption></figure><h5 id="_3、保存sku的基本信息" tabindex="-1"><a class="header-anchor" href="#_3、保存sku的基本信息" aria-hidden="true">#</a> 3、保存sku的基本信息</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里的<code>saveProductAttr</code>方法里保存sku的基本信息,调用<code>skuImagesService</code>类的<code>saveBatch</code>方法</p><p><a href="code/4.6.5.5.3.SpuInfoServiceImpl.java">点击查看<code>SpuInfoServiceImpl</code>类完整代码</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.5.3.png" alt="image-20220523221527652" tabindex="0" loading="lazy"><figcaption>image-20220523221527652</figcaption></figure><h5 id="_4、添加saveskuinfo抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加saveskuinfo抽象方法" aria-hidden="true">#</a> 4、添加<code>saveSkuInfo</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.SkuInfoService</code>接口添加<code>saveSkuInfo</code>抽象方法</p><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SkuInfoServiceImpl</code>类里实现<code>saveSkuInfo</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.5.4.gif" alt="GIF 2022-5-23 22-17-54" tabindex="0" loading="lazy"><figcaption>GIF 2022-5-23 22-17-54</figcaption></figure><h5 id="_5、实现saveskuinfo抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现saveskuinfo抽象方法" aria-hidden="true">#</a> 5、实现<code>saveSkuInfo</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SkuInfoServiceImpl</code>类里的<code>saveSkuInfo</code>方法里添加具体实现</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.5.5.png" alt="image-20220523221930967" tabindex="0" loading="lazy"><figcaption>image-20220523221930967</figcaption></figure><h5 id="_6、批量保存sku的图片信息" tabindex="-1"><a class="header-anchor" href="#_6、批量保存sku的图片信息" aria-hidden="true">#</a> 6、批量保存sku的图片信息</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里的<code>saveProductAttr</code>方法里调用<code>skuImagesService</code>对象的<code>saveBatch</code>方法，批量保存sku的图片信息</p><p><a href="code/4.6.5.5.6.SpuInfoServiceImpl.java">点击查看<code>SpuInfoServiceImpl</code>类完整代码</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.5.6.png" alt="image-20220523223744919" tabindex="0" loading="lazy"><figcaption>image-20220523223744919</figcaption></figure><h5 id="_7、批量保存sku的销售属性信息" tabindex="-1"><a class="header-anchor" href="#_7、批量保存sku的销售属性信息" aria-hidden="true">#</a> 7、批量保存sku的销售属性信息</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里的<code>saveProductAttr</code>方法里调用<code>skuSaleAttrValueService</code>对象的<code>saveBatch</code>方法，批量保存sku的销售属性信息</p><p><a href="code/4.6.5.5.7.SpuInfoServiceImpl.java">点击查看<code>SpuInfoServiceImpl</code>类完整代码</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.5.5.7.png" alt="image-20220523230155354" tabindex="0" loading="lazy"><figcaption>image-20220523230155354</figcaption></figure><h3 id="_4-6-6、调用远程服务" tabindex="-1"><a class="header-anchor" href="#_4-6-6、调用远程服务" aria-hidden="true">#</a> 4.6.6、调用远程服务</h3><h4 id="_1、调用远程服务步骤" tabindex="-1"><a class="header-anchor" href="#_1、调用远程服务步骤" aria-hidden="true">#</a> 1、调用远程服务步骤</h4><ol><li>服务双方上线，并且放到注册中心中</li><li>服务双方开启服务注册和发现功能(<code>@EnableDiscoveryClient</code>)</li><li>服务消费方编写<code>feign</code>接口，在接口声明调用<code>哪个服务</code>(<code>@FeignClient</code>)的<code>哪个接口</code>(<code>@RequestMapping</code>)</li><li>服务消费方开启远程调用功能(<code>@EnableFeignClients</code>)</li></ol><h4 id="_2、保存spu的积分信息" tabindex="-1"><a class="header-anchor" href="#_2、保存spu的积分信息" aria-hidden="true">#</a> 2、保存spu的积分信息</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法，想要保存spu的积分信息，即修改<code>gulimall_sms</code>数据库的<code>sms_spu_bounds</code>表</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.2.0.1.png" alt="image-20220601114158761" tabindex="0" loading="lazy"><figcaption>image-20220601114158761</figcaption></figure><p>此时需要远程调用<code>gulimall-coupon</code>模块的<code>com.atguigu.gulimall.coupon.controller.SpuBoundsController</code>类的<code>save</code>方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.2.0.2.png" alt="image-20220601114238502" tabindex="0" loading="lazy"><figcaption>image-20220601114238502</figcaption></figure><h5 id="_1、新建couponfeignservice类" tabindex="-1"><a class="header-anchor" href="#_1、新建couponfeignservice类" aria-hidden="true">#</a> 1、新建<code>CouponFeignService</code>类</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product</code>包下新建<code>feign</code>文件夹</p><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.feign</code>包里新建<code>CouponFeignService</code>类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.2.1.png" alt="image-20220601121222193" tabindex="0" loading="lazy"><figcaption>image-20220601121222193</figcaption></figure><h5 id="_2、开启远程调用" tabindex="-1"><a class="header-anchor" href="#_2、开启远程调用" aria-hidden="true">#</a> 2、开启远程调用</h5><p>在<code>gulimall-product</code>模块的启动类<code>GulimallProductApplication</code>上添加注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.atguigu.gulimall.product.feign&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.2.2.png" alt="image-20220601121502104" tabindex="0" loading="lazy"><figcaption>image-20220601121502104</figcaption></figure><h5 id="_3、新建spuboundto类" tabindex="-1"><a class="header-anchor" href="#_3、新建spuboundto类" aria-hidden="true">#</a> 3、新建<code>SpuBoundTo</code>类</h5><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common</code>包下新建<code>to</code>文件夹</p><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.to</code>包下新建<code>SpuBoundTo</code>类用于远程调用<code>gulimall-coupon</code>模块的<code>com.atguigu.gulimall.coupon.controller.SpuBoundsController</code>类的<code>save</code>方法时传输对象数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.2.3.png" alt="image-20220601121411961" tabindex="0" loading="lazy"><figcaption>image-20220601121411961</figcaption></figure><h5 id="_4、修改请求方式" tabindex="-1"><a class="header-anchor" href="#_4、修改请求方式" aria-hidden="true">#</a> 4、修改请求方式</h5><p>在<code>gulimall-coupon</code>模块里修改<code>com.atguigu.gulimall.coupon.controller.SpuBoundsController</code>类的<code>save</code>的请求方式为<code>@PostMapping</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
      <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SpuBoundsEntity</span> spuBounds<span class="token punctuation">)</span><span class="token punctuation">{</span>
spuBoundsService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>spuBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.2.4.png" alt="image-20220601122053306" tabindex="0" loading="lazy"><figcaption>image-20220601122053306</figcaption></figure><h5 id="_5、添加savespubounds抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、添加savespubounds抽象方法" aria-hidden="true">#</a> 5、添加<code>saveSpuBounds</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.feign.CouponFeignService</code>接口来里添加<code>saveSpuBounds</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>feign</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>to<span class="token punctuation">.</span></span><span class="token class-name">SpuBoundTo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">R</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestBody</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/6/1
 * @Description:
 */</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;gulimall-coupon&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CouponFeignService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 1、CouponFeignService . saveSpuBounds(spuBoundTo);
     *   1)、@RequestBody将这个对象转为json。
     *   2)、找到gul imall-coupon服务， 给/coupon/spubounds/save发送请求。
     *       将上一步转的json放在请求体位置，发送请求;
     *   3)、对方服务收到请求。请求体里有json数据。
     *       (@RequestBody SpuBoundsEntity spuBounds );将请求体的json转为SpuBoundsEntity;
     * 只要ison数据模型是兼容的。双方服务无需使用同一个to
     * <span class="token keyword">@param</span> <span class="token parameter">spuBoundTo</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/coupon/spubounds/save&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">R</span> <span class="token function">saveSpuBounds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SpuBoundTo</span> spuBoundTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.5.png" alt="image-20220601122610199" tabindex="0" loading="lazy"><figcaption>image-20220601122610199</figcaption></figure><h5 id="_6、保存spu的积分信息" tabindex="-1"><a class="header-anchor" href="#_6、保存spu的积分信息" aria-hidden="true">#</a> 6、保存spu的积分信息</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里的<code>saveProductAttr</code>方法里调用<code>couponFeignService</code>对象的<code>saveSpuBounds</code>方法，用于保存spu的积分信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">CouponFeignService</span> couponFeignService<span class="token punctuation">;</span>

<span class="token comment">//5、保存spu的积分信息; gulimall_sms-&gt;sms_spu_bounds</span>
<span class="token class-name">SpuSaveVo<span class="token punctuation">.</span>Bounds</span> bounds <span class="token operator">=</span> spuSaveVo<span class="token punctuation">.</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SpuBoundTo</span> spuBoundTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuBoundTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>bounds<span class="token punctuation">,</span>spuBoundTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
spuBoundTo<span class="token punctuation">.</span><span class="token function">setSpuId</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
couponFeignService<span class="token punctuation">.</span><span class="token function">saveSpuBounds</span><span class="token punctuation">(</span>spuBoundTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.2.6.png" alt="image-20220601122753256" tabindex="0" loading="lazy"><figcaption>image-20220601122753256</figcaption></figure><h4 id="_3、保存sku的优惠、满减、打折等信息" tabindex="-1"><a class="header-anchor" href="#_3、保存sku的优惠、满减、打折等信息" aria-hidden="true">#</a> 3、保存sku的优惠、满减、打折等信息</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.0.png" alt="image-20220601123339903" tabindex="0" loading="lazy"><figcaption>image-20220601123339903</figcaption></figure><h5 id="_1、新建skureductionto类" tabindex="-1"><a class="header-anchor" href="#_1、新建skureductionto类" aria-hidden="true">#</a> 1、新建<code>SkuReductionTo</code>类</h5><p>复制<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.vo.SpuSaveVo</code>类的这些属性和<code>MemberPrice</code>内部类</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.1.1.png" alt="image-20220601123703015" tabindex="0" loading="lazy"><figcaption>image-20220601123703015</figcaption></figure><p>在<code>gulimall-common</code>模块新建<code>com.atguigu.common.to</code>包下新建<code>SkuReductionTo</code>类，粘贴刚刚复制的<code>SpuSaveVo</code>类的属性和<code>MemberPrice</code>内部类,再添加<code>skuId</code>字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>to</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/6/1
 * @Description:
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkuReductionTo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> skuId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 满几件打几折
     * countStatus: 是否可以叠加优惠
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> fullCount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> discount<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> countStatus<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 满多少减多少
     * priceStatus：是否可以叠加优惠
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> fullPrice<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> reducePrice<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> priceStatus<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 会员价格
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberPrice</span><span class="token punctuation">&gt;</span></span> memberPrice<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberPrice</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.1.2.png" alt="image-20220601124110777" tabindex="0" loading="lazy"><figcaption>image-20220601124110777</figcaption></figure><h5 id="_2、调用gulimall-coupon服务" tabindex="-1"><a class="header-anchor" href="#_2、调用gulimall-coupon服务" aria-hidden="true">#</a> 2、调用<code>gulimall-coupon</code>服务</h5><p>再<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法里添加代码，调用<code>gulimall-coupon</code>服务，用于保存<code>sku的优惠、满减、打折等信息</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//5.4)、sku的优惠、满减、打折等信息；gulimall_sms-&gt;sms_sku_ladder\\sms_sku_full_reduction\\sms_ member_price</span>
<span class="token class-name">SkuReductionTo</span> skuReductionTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuReductionTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>sku<span class="token punctuation">,</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
skuReductionTo<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">R</span> r1 <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">saveSkuReduction</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.2.png" alt="image-20220601124401637" tabindex="0" loading="lazy"><figcaption>image-20220601124401637</figcaption></figure><h5 id="_3、添加saveskureduction抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、添加saveskureduction抽象方法" aria-hidden="true">#</a> 3、添加<code>saveSkuReduction</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.feign.CouponFeignService</code>接口里添加<code>saveSkuReduction</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveSkuReduction</span><span class="token punctuation">(</span><span class="token class-name">SkuReductionTo</span> skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.3.png" alt="image-20220601150651848" tabindex="0" loading="lazy"><figcaption>image-20220601150651848</figcaption></figure><h5 id="_4、添加saveinfo方法" tabindex="-1"><a class="header-anchor" href="#_4、添加saveinfo方法" aria-hidden="true">#</a> 4、添加<code>saveInfo</code>方法</h5><p>在<code>gulimall-coupon</code>模块的<code>com.atguigu.gulimall.coupon.service.SkuFullReductionService</code>类里添加<code>saveInfo</code>方法，用于保存满减和折扣信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 保存满减和折扣信息
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/saveinfo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">saveInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SkuReductionTo</span> reductionTo<span class="token punctuation">)</span><span class="token punctuation">{</span>
    skuFullReductionService<span class="token punctuation">.</span><span class="token function">saveSkuReduction</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.4.png" alt="image-20220601151040320" tabindex="0" loading="lazy"><figcaption>image-20220601151040320</figcaption></figure><h5 id="_5、修改saveskureduction抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、修改saveskureduction抽象方法" aria-hidden="true">#</a> 5、修改<code>saveSkuReduction</code>抽象方法</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.feign.CouponFeignService</code>接口里修改<code>saveSkuReduction</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/coupon/skufullreduction/saveinfo&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">R</span> <span class="token function">saveSkuReduction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SkuReductionTo</span> skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.5.png" alt="image-20220601150926019" tabindex="0" loading="lazy"><figcaption>image-20220601150926019</figcaption></figure><h5 id="_6、添加saveskureduction抽象方法" tabindex="-1"><a class="header-anchor" href="#_6、添加saveskureduction抽象方法" aria-hidden="true">#</a> 6、添加<code>saveSkuReduction</code>抽象方法</h5><p>在<code>gulimall-coupon</code>模块的<code>com.atguigu.gulimall.coupon.service.SkuFullReductionService</code>接口里添加<code>saveSkuReduction</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">saveSkuReduction</span><span class="token punctuation">(</span><span class="token class-name">SkuReductionTo</span> reductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.6.1.png" alt="image-20220601151118002" tabindex="0" loading="lazy"><figcaption>image-20220601151118002</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.6.2.png" alt="image-20220601151149222" tabindex="0" loading="lazy"><figcaption>image-20220601151149222</figcaption></figure><h5 id="_7、实现saveskureduction抽象方法" tabindex="-1"><a class="header-anchor" href="#_7、实现saveskureduction抽象方法" aria-hidden="true">#</a> 7、实现<code>saveSkuReduction</code>抽象方法</h5><p>在<code>gulimall-coupon</code>模块的<code>com.atguigu.gulimall.coupon.service.impl.SkuFullReductionServiceImpl</code>类里实现<code>saveSkuReduction</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveSkuReduction</span><span class="token punctuation">(</span><span class="token class-name">SkuReductionTo</span> reductionTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、sku的 优惠(满几件打几折) 信息；gulimall_sms-&gt;sms_sku_ladder</span>
    <span class="token class-name">SkuLadderEntity</span> skuLadderEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuLadderEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuLadderEntity<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuLadderEntity<span class="token punctuation">.</span><span class="token function">setFullCount</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getFullCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuLadderEntity<span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//是否可以叠加优惠</span>
    skuLadderEntity<span class="token punctuation">.</span><span class="token function">setAddOther</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getCountStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuLadderService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>skuLadderEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2、sku的 满减(满多少减多少) 信息；sms_sku_full_reduction</span>
    <span class="token class-name">SkuFullReductionEntity</span> skuFullReductionEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuFullReductionEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">,</span> skuFullReductionEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuFullReductionEntity<span class="token punctuation">.</span><span class="token function">setAddOther</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getPriceStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>skuFullReductionEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3、sku的 打折 信息；sms_ member_price</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuReductionTo<span class="token punctuation">.</span>MemberPrice</span><span class="token punctuation">&gt;</span></span> memberPrice <span class="token operator">=</span> reductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberPriceEntity</span><span class="token punctuation">&gt;</span></span> memberPriceEntities <span class="token operator">=</span> memberPrice<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>member <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">MemberPriceEntity</span> memberPriceEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberPriceEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setMemberLevelId</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setMemberLevelName</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setMemberPrice</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setAddOther</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> memberPriceEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    memberPriceService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>memberPriceEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.7.png" alt="image-20220601153731834" tabindex="0" loading="lazy"><figcaption>image-20220601153731834</figcaption></figure><h5 id="_8、添加getcode方法" tabindex="-1"><a class="header-anchor" href="#_8、添加getcode方法" aria-hidden="true">#</a> 8、添加<code>getCode</code>方法</h5><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.utils.R</code>类里添加<code>getCode</code>方法,用于获取状态码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.8.png" alt="image-20220601154315951" tabindex="0" loading="lazy"><figcaption>image-20220601154315951</figcaption></figure><h5 id="_9、获取远程访问的状态码-在失败后记录日志" tabindex="-1"><a class="header-anchor" href="#_9、获取远程访问的状态码-在失败后记录日志" aria-hidden="true">#</a> 9、获取远程访问的状态码，在失败后记录日志</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法里面添加部分代码,用于获取远程访问<code>gulimall-coupon</code>模块时返回的状态码，并在失败后记录日志</p><p>在<code>保存spu的积分信息</code>的<code>couponFeignService.saveSpuBounds(spuBoundTo);</code>方法里接收返回值，如果远程访问失败则记录日志</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//5、保存spu的积分信息; gulimall_sms-&gt;sms_spu_bounds</span>
<span class="token class-name">SpuSaveVo<span class="token punctuation">.</span>Bounds</span> bounds <span class="token operator">=</span> spuSaveVo<span class="token punctuation">.</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SpuBoundTo</span> spuBoundTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpuBoundTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>bounds<span class="token punctuation">,</span>spuBoundTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
spuBoundTo<span class="token punctuation">.</span><span class="token function">setSpuId</span><span class="token punctuation">(</span>spuInfoEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">R</span> r <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">saveSpuBounds</span><span class="token punctuation">(</span>spuBoundTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;远程保存spu积分信息失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.9.1.png" alt="image-20220601155006225" tabindex="0" loading="lazy"><figcaption>image-20220601155006225</figcaption></figure><p>在<code>保存sku的优惠、满减、打折等信息</code>的<code>couponFeignService.saveSkuReduction(skuReductionTo);</code>方法里接收返回值，如果远程访问失败则记录日志</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//5.4)、sku的优惠、满减、打折等信息；gulimall_sms-&gt;sms_sku_ladder\\sms_sku_full_reduction\\sms_ member_price</span>
<span class="token class-name">SkuReductionTo</span> skuReductionTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuReductionTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>sku<span class="token punctuation">,</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
skuReductionTo<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">R</span> r1 <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">saveSkuReduction</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;远程保存sku优惠信息失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.6.3.9.2.png" alt="image-20220601154858415" tabindex="0" loading="lazy"><figcaption>image-20220601154858415</figcaption></figure><p><code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的完整代码</p><p><a href="code/4.6.6.3.9.SpuInfoServiceImpl.java">点击查看<code>SpuInfoServiceImpl</code>类完整代码</a></p><h3 id="_4-6-7、测试" tabindex="-1"><a class="header-anchor" href="#_4-6-7、测试" aria-hidden="true">#</a> 4.6.7、测试</h3><p>测试之前最好把<code>gulimall_pms</code>数据库备份一下，免得后面调试发现代码写错了，不知道这次添加了哪些数据，从而导致删错数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.0.png" alt="image-20220612161346948" tabindex="0" loading="lazy"><figcaption>image-20220612161346948</figcaption></figure><h4 id="_1、修改配置" tabindex="-1"><a class="header-anchor" href="#_1、修改配置" aria-hidden="true">#</a> 1、修改配置</h4><h5 id="_1、点击edit-configurations" tabindex="-1"><a class="header-anchor" href="#_1、点击edit-configurations" aria-hidden="true">#</a> 1、点击<code>Edit Configurations...</code></h5><p>点击功能区内运行类的右边、运行按钮左边的下三角，选择<code>Edit Configurations...</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.1.png" alt="image-20220601155532934" tabindex="0" loading="lazy"><figcaption>image-20220601155532934</figcaption></figure><h5 id="_2、新建compound" tabindex="-1"><a class="header-anchor" href="#_2、新建compound" aria-hidden="true">#</a> 2、新建<code>Compound</code></h5><p>点击弹出的<code>Run/Debug Configurations</code>框里左上角的<code>+</code>号，在下方的框里选择<code>Compound</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.2.png" alt="image-20220601155708909" tabindex="0" loading="lazy"><figcaption>image-20220601155708909</figcaption></figure><h5 id="_3、在compound里添加各个模块" tabindex="-1"><a class="header-anchor" href="#_3、在compound里添加各个模块" aria-hidden="true">#</a> 3、在<code>Compound</code>里添加各个模块</h5><p>在新建的<code>Compound</code>里面的右边的框的左上角点击<code>+</code>号，把下面这些服务添加进来</p><ol><li>GulimallCouponApplication</li><li>GulimallGatewayApplication</li><li>GulimallMemberApplication</li><li>GulimallProductApplication</li><li>GulimallThirdPartyApplication</li><li>RenrenApplication</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.3.png" alt="image-20220601155949929" tabindex="0" loading="lazy"><figcaption>image-20220601155949929</figcaption></figure><h5 id="_4、修改模块最大内存占用" tabindex="-1"><a class="header-anchor" href="#_4、修改模块最大内存占用" aria-hidden="true">#</a> 4、修改模块最大内存占用</h5><h6 id="_1、点击编辑按钮" tabindex="-1"><a class="header-anchor" href="#_1、点击编辑按钮" aria-hidden="true">#</a> 1、点击编辑按钮</h6><p>点击<code>Spring Boot&#39;GulimallCouponApplication&#39;</code>，然后点击<code>Compound</code>里面的右边的框的左上角的编辑按钮</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.1.png" alt="image-20220601160037029" tabindex="0" loading="lazy"><figcaption>image-20220601160037029</figcaption></figure><h6 id="_2、限制单个模块最大内存" tabindex="-1"><a class="header-anchor" href="#_2、限制单个模块最大内存" aria-hidden="true">#</a> 2、限制单个模块最大内存</h6><p>在<code>GulimallCouponApplication</code>模块的运行配置里的<code>Environment</code>栏的<code>VM options</code>里的右方框里输入<code>-Xmx100m</code>，限制<code>GulimallCouponApplication</code>模块的最大内存占用为<code>100m</code></p><p>同理修改其他7个模块的最大内存占用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Xmx100m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.2.png" alt="image-20220601160256195" tabindex="0" loading="lazy"><figcaption>image-20220601160256195</figcaption></figure><p>在<code>GulimallGatewayApplication</code>模块的运行配置里的<code>Environment</code>栏的<code>VM options</code>里的右方框里输入<code>-Xmx100m</code>，限制<code>GulimallGatewayApplication</code>模块的最大内存占用为<code>100m</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.3.png" alt="image-20220601160348699" tabindex="0" loading="lazy"><figcaption>image-20220601160348699</figcaption></figure><p>在<code>GulimallMemberApplication</code>模块的运行配置里的<code>Environment</code>栏的<code>VM options</code>里的右方框里输入<code>-Xmx100m</code>，限制<code>GulimallMemberApplication</code>模块的最大内存占用为<code>100m</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.4.png" alt="image-20220601160419110" tabindex="0" loading="lazy"><figcaption>image-20220601160419110</figcaption></figure><p>在<code>GulimallOrderApplication</code>模块的运行配置里的<code>Environment</code>栏的<code>VM options</code>里的右方框里输入<code>-Xmx100m</code>，限制<code>GulimallOrderApplication</code>模块的最大内存占用为<code>100m</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.5.png" alt="image-20220601160507405" tabindex="0" loading="lazy"><figcaption>image-20220601160507405</figcaption></figure><p>在<code>GulimallProductApplication</code>模块的运行配置里的<code>Environment</code>栏的<code>VM options</code>里的右方框里输入<code>-Xmx100m</code>，限制<code>GulimallProductApplication</code>模块的最大内存占用为<code>100m</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.6.png" alt="image-20220601160536846" tabindex="0" loading="lazy"><figcaption>image-20220601160536846</figcaption></figure><p>在<code>GulimallThirdPartyApplication</code>模块的运行配置里的<code>Environment</code>栏的<code>VM options</code>里的右方框里输入<code>-Xmx100m</code>，限制<code>GulimallThirdPartyApplication</code>模块的最大内存占用为<code>100m</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.7.png" alt="image-20220601160602726" tabindex="0" loading="lazy"><figcaption>image-20220601160602726</figcaption></figure><p>在<code>GulimallWareApplication</code>模块的运行配置里的<code>Environment</code>栏的<code>VM options</code>里的右方框里输入<code>-Xmx100m</code>，限制<code>GulimallWareApplication</code>模块的最大内存占用为<code>100m</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.8.png" alt="image-20220601160630466" tabindex="0" loading="lazy"><figcaption>image-20220601160630466</figcaption></figure><p>在<code>RenrenApplication</code>模块的运行配置里的<code>Environment</code>栏的<code>VM options</code>里的右方框里输入<code>-Xmx100m</code>，限制<code>RenrenApplication</code>模块的最大内存占用为<code>100m</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.1.4.9.png" alt="image-20220601160655782" tabindex="0" loading="lazy"><figcaption>image-20220601160655782</figcaption></figure><h4 id="_2、添加断点" tabindex="-1"><a class="header-anchor" href="#_2、添加断点" aria-hidden="true">#</a> 2、添加断点</h4><h5 id="_1、打断点-1" tabindex="-1"><a class="header-anchor" href="#_1、打断点-1" aria-hidden="true">#</a> 1、打断点</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法的开头打一个断点，用于测试</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.1.png" alt="image-20220611235807652" tabindex="0" loading="lazy"><figcaption>image-20220611235807652</figcaption></figure><h5 id="_2、打开run-dashboard" tabindex="-1"><a class="header-anchor" href="#_2、打开run-dashboard" aria-hidden="true">#</a> 2、打开<code>Run Dashboard</code></h5><h6 id="_1、没有run-dashboard选项" tabindex="-1"><a class="header-anchor" href="#_1、没有run-dashboard选项" aria-hidden="true">#</a> 1、没有<code>Run Dashboard</code>选项</h6><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.2.1.png" alt="image-20220606232040208" tabindex="0" loading="lazy"><figcaption>image-20220606232040208</figcaption></figure><h6 id="_2、添加组件" tabindex="-1"><a class="header-anchor" href="#_2、添加组件" aria-hidden="true">#</a> 2、添加组件</h6><p>在<code>gulimall\\.idea\\workspace.xml</code>里添加组件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>RunDashboard<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>configurationTypes<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SpringBootApplicationConfigurationType<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ruleStates<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RuleState</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ConfigurationTypeDashboardGroupingRule<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RuleState</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RuleState</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>StatusDashboardGroupingRule<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RuleState</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.2.2.png" alt="image-20220606232154637" tabindex="0" loading="lazy"><figcaption>image-20220606232154637</figcaption></figure><h6 id="_3、添加的组件被删除了" tabindex="-1"><a class="header-anchor" href="#_3、添加的组件被删除了" aria-hidden="true">#</a> 3、添加的组件被删除了</h6><p>点别的文件，在返回<code>gulimall\\.idea\\workspace.xml</code>发现，刚刚添加的组件被删除了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.2.3.png" alt="image-20220606232544250" tabindex="0" loading="lazy"><figcaption>image-20220606232544250</figcaption></figure><h6 id="_4、改成services了" tabindex="-1"><a class="header-anchor" href="#_4、改成services了" aria-hidden="true">#</a> 4、改成<code>Services</code>了😥</h6><p>我这个版本的IDEA已经把<code>Run Dashboard</code>改成<code>Services</code>了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.2.4.png" alt="image-20220606232751462" tabindex="0" loading="lazy"><figcaption>image-20220606232751462</figcaption></figure><h5 id="_3、以debug方式启动gulimallproductapplication模块" tabindex="-1"><a class="header-anchor" href="#_3、以debug方式启动gulimallproductapplication模块" aria-hidden="true">#</a> 3、以<code>debug</code>方式启动<code>GulimallProductApplication</code>模块</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.3.png" alt="image-20220606232934382" tabindex="0" loading="lazy"><figcaption>image-20220606232934382</figcaption></figure><h5 id="_4、发送请求" tabindex="-1"><a class="header-anchor" href="#_4、发送请求" aria-hidden="true">#</a> 4、发送请求</h5><p>使用<code>Postman</code>发送以前新增商品时(保存的有<code>json</code>数据)的那个请求</p><p>url：http://localhost:88/api/product/spuinfo/save</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.4.1.png" alt="image-20220606235141570" tabindex="0" loading="lazy"><figcaption>image-20220606235141570</figcaption></figure><p>然后点击调试的<code>Step Over(步过)</code>按钮，直到执行<code>this.saveBaseSpuInfo(spuInfoEntity);</code>方法完毕</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.4.2.png" alt="image-20220612160514320" tabindex="0" loading="lazy"><figcaption>image-20220612160514320</figcaption></figure><h5 id="_5、修改事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_5、修改事务隔离级别" aria-hidden="true">#</a> 5、修改事务隔离级别</h5><p>查看<code>gulimall_pms</code>数据库的<code>pms_sou_info</code>表,发现并没有数据，这是因为事务没有提交，可以修改当前会话的隔离级别为<code>读未提交</code>这样就可以看到还未提交的数据了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.5.1.png" alt="image-20220606234532035" tabindex="0" loading="lazy"><figcaption>image-20220606234532035</figcaption></figure><p>//这个<code>isolation</code>少了一个<code>o</code>，果然百度的东西不靠谱</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session transaction isolatin level READ UNCOMMITTED;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个是正确的</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session transaction isolation level read uncommitted;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.5.2.png" alt="image-20220606234716582" tabindex="0" loading="lazy"><figcaption>image-20220606234716582</figcaption></figure><p>重新刷新<code>gulimall_pms</code>数据库下的<code>pms_spu_info</code>表，可以看到已经有数据了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.5.5.png" alt="image-20220607000248976" tabindex="0" loading="lazy"><figcaption>image-20220607000248976</figcaption></figure><h5 id="📝-如果没有数据" tabindex="-1"><a class="header-anchor" href="#📝-如果没有数据" aria-hidden="true">#</a> 📝 如果没有数据</h5><p>如果重新刷新发现还没有，这是navicate软件的问题😥</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.5.3.png" alt="image-20220607000740209" tabindex="0" loading="lazy"><figcaption>image-20220607000740209</figcaption></figure><p>选中<code>gulimall_pms</code>数据库，右键选择<code>新建查询</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.5.5.png" alt="image-20220606235935459" tabindex="0" loading="lazy"><figcaption>image-20220606235935459</figcaption></figure><p>在新创建的对话框内输入如下语句，查看<code>pms_spu_info</code>表，点击<code>运行</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM pms_spu_info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.5.6.png" alt="image-20220607000040075" tabindex="0" loading="lazy"><figcaption>image-20220607000040075</figcaption></figure><p>或者直接在设置<code>当前会话事务隔离级别</code>的命令行界面里执行也行</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.2.5.7.png" alt="image-20220607000145379" tabindex="0" loading="lazy"><figcaption>image-20220607000145379</figcaption></figure><h4 id="_3、spu-id异常" tabindex="-1"><a class="header-anchor" href="#_3、spu-id异常" aria-hidden="true">#</a> 3、spu_id异常</h4><h5 id="_1、报了个异常" tabindex="-1"><a class="header-anchor" href="#_1、报了个异常" aria-hidden="true">#</a> 1、报了个异常</h5><p>点击调试的<code>Step Over(步过)</code>按钮，直到执行<code>this.saveBaseSpuInfo(spuInfoEntity);</code>方法完毕</p><p>在执行<code>this.saveBaseSpuInfo(spuInfoEntity);</code>方法的时候，抛了个异常</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Error updating database.  Cause: java.sql.SQLException: Field &#39;spu_id&#39; doesn&#39;t have a default value
更新数据库时出错。 原因：java.sql.SQLException：字段 &#39;spu_id&#39; 没有默认值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.1.png" alt="image-20220612162902508" tabindex="0" loading="lazy"><figcaption>image-20220612162902508</figcaption></figure><p>可以看到，代码明明设置了<code>spuId</code>和<code>descipt</code>，但是执行的<code>sql</code>语句却只插入了<code>descipt</code>字段</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>INSERT INTO pms_spu_info_desc ( decript ) VALUES ( ? ) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、查看pms-spu-info-desc表结构" tabindex="-1"><a class="header-anchor" href="#_2、查看pms-spu-info-desc表结构" aria-hidden="true">#</a> 2、查看<code>pms_spu_info_desc</code>表结构</h5><p>查看<code>gulimall_pns</code>数据库的<code>pms_spu_info_desc</code>表的表结构</p><p>选中<code>gulimall_pns</code>数据库的<code>pms_spu_info_desc</code>表，右键选择<code>设计表</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.2.1.png" alt="image-20220612163500782" tabindex="0" loading="lazy"><figcaption>image-20220612163500782</figcaption></figure><p>可以看到<code>spu_id</code>字段不是<strong>自动递增</strong>的,这个字段是spu的id，是需要指定的</p><p>而<code>mybatis</code>当成了自增的，所以插入的时候只插入了<code>descipt</code>字段，所以就抛了个异常</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.2.2.png" alt="image-20220612163540243" tabindex="0" loading="lazy"><figcaption>image-20220612163540243</figcaption></figure><h5 id="_3、修改spuinfodescentity类的字段注解" tabindex="-1"><a class="header-anchor" href="#_3、修改spuinfodescentity类的字段注解" aria-hidden="true">#</a> 3、修改<code>SpuInfoDescEntity</code>类的字段注解</h5><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.entity.SpuInfoDescEntity</code>类的<code>spuId</code>字段的<code>@TableId</code>注解上添加参数，指出id为输入的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">INPUT</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> spuId<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.3.png" alt="image-20220612164332539" tabindex="0" loading="lazy"><figcaption>image-20220612164332539</figcaption></figure><h5 id="_4、重新测试-5" tabindex="-1"><a class="header-anchor" href="#_4、重新测试-5" aria-hidden="true">#</a> 4、重新测试</h5><p>重新以<code>debug</code>方式启动<code>GulimallProductApplication</code>模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.4.1.png" alt="image-20220612164854483" tabindex="0" loading="lazy"><figcaption>image-20220612164854483</figcaption></figure><p>重新在<code>Postman</code>里面发送请求</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.4.2.png" alt="image-20220612165111157" tabindex="0" loading="lazy"><figcaption>image-20220612165111157</figcaption></figure><p>继续点击调试的<code>Step Over(步过)</code>按钮，直到执行<code>this.saveBaseSpuInfo(spuInfoEntity);</code>方法完毕</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.4.3.png" alt="image-20220612165210715" tabindex="0" loading="lazy"><figcaption>image-20220612165210715</figcaption></figure><p>打开<code>navicat</code>，在命令行里查询<code>pms_spu_info_desc</code>表，可以看到执行成功了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select <span class="token operator">*</span> from pms_spu_info_desc<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.4.4.png" alt="image-20220612165408926" tabindex="0" loading="lazy"><figcaption>image-20220612165408926</figcaption></figure><p>可以看到，这次执行的sql语句就没有问题了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.3.4.5.png" alt="image-20220612165628681" tabindex="0" loading="lazy"><figcaption>image-20220612165628681</figcaption></figure><h4 id="_4、保存spu的图片集" tabindex="-1"><a class="header-anchor" href="#_4、保存spu的图片集" aria-hidden="true">#</a> 4、保存spu的图片集</h4><p>点击调试的<code>Step Over(步过)</code>按钮，直到执行<code>spuImagesService.saveImages(spuInfoEntity.getId(), images);</code>方法完毕</p><p>控制台可以看到插入了很多的数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.4.1.png" alt="image-20220612165941643" tabindex="0" loading="lazy"><figcaption>image-20220612165941643</figcaption></figure><p>打开<code>navicat</code>，在命令行里查询<code>pms_spu_info_desc</code>表，可以看到spu的图片集已经保存成功了</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_spu_images;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.4.2.png" alt="image-20220612170119892" tabindex="0" loading="lazy"><figcaption>image-20220612170119892</figcaption></figure><h4 id="_5、保存spu的规格参数" tabindex="-1"><a class="header-anchor" href="#_5、保存spu的规格参数" aria-hidden="true">#</a> 5、保存spu的规格参数</h4><p>在<code>productAttrValueService.saveProductAttr(productAttrValueEntities);</code>这段代码上打个断点</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.5.1.png" alt="image-20220612170714934" tabindex="0" loading="lazy"><figcaption>image-20220612170714934</figcaption></figure><p>点击<code>Resume Program</code>按钮，执行到下一个断点，到<code>productAttrValueService.saveProductAttr(productAttrValueEntities);</code>这条语句</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.5.2.png" alt="image-20220612171237828" tabindex="0" loading="lazy"><figcaption>image-20220612171237828</figcaption></figure><p>点击调试的<code>Step Over(步过)</code>按钮，执行<code>productAttrValueService.saveProductAttr(productAttrValueEntities);</code></p><p>控制台可以看到已经执行成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.5.3.png" alt="image-20220612171013680" tabindex="0" loading="lazy"><figcaption>image-20220612171013680</figcaption></figure><p>打开<code>navicat</code>，在命令行里查询<code>pms_product_attr_value;</code>表，可以看到执行成功了</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_product_attr_value;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.5.4.png" alt="image-20220612171503231" tabindex="0" loading="lazy"><figcaption>image-20220612171503231</figcaption></figure><h4 id="_6、远程保存spu的积分信息" tabindex="-1"><a class="header-anchor" href="#_6、远程保存spu的积分信息" aria-hidden="true">#</a> 6、远程保存spu的积分信息</h4><p>点击调试的<code>Step Over(步过)</code>按钮，执行<code>R r = couponFeignService.saveSpuBounds(spuBoundTo);</code></p><p>执行这一步时间稍微会长一些，大概几秒</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.6.1.1.png" alt="image-20220612173109279" tabindex="0" loading="lazy"><figcaption>image-20220612173109279</figcaption></figure><p>选择<code>gulimall_sms</code>数据库，右键选择<code>新建查询</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.6.1.2.png" alt="image-20220612183822411" tabindex="0" loading="lazy"><figcaption>image-20220612183822411</figcaption></figure><p>在里面输入sql语句，选中刚刚输入sql语句，点击<code>运行已选择的</code>，就可以看到已经执行成功了</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#设置事务隔离级别
set session transaction isolation level read uncommitted;
select * from sms_spu_bounds;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.6.1.3.png" alt="image-20220613172225685" tabindex="0" loading="lazy"><figcaption>image-20220613172225685</figcaption></figure><p>📝 如果抛了类型转换异常</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java.lang.classCastException: java.lang.Integer cannot be cast to java.lang.String
java.lang.classCastException：java.lang.Integer 不能转换为 java.lang.String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.6.2.1.png" alt="image-20220612173525024" tabindex="0" loading="lazy"><figcaption>image-20220612173525024</figcaption></figure><p>只需要修改<code>gulimall-common</code>模块的<code>com.atguigu.common.utils.R</code>类的<code>getCode</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.6.2.2.png" alt="image-20220612173828646" tabindex="0" loading="lazy"><figcaption>image-20220612173828646</figcaption></figure><p>📝如果请求超时了，可以在<code>gulimall-product</code>模块的<code>src\\main\\resources\\application.yml</code>配置文件里配置超时时间</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.6.3.png" alt="image-20220612194409602" tabindex="0" loading="lazy"><figcaption>image-20220612194409602</figcaption></figure><h4 id="_7、保存sku的基本信息" tabindex="-1"><a class="header-anchor" href="#_7、保存sku的基本信息" aria-hidden="true">#</a> 7、保存sku的基本信息</h4><p>在这些代码上添加断点</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>skuInfoService.saveSkuInfo(skuInfoEntity);
skuImagesService.saveBatch(skuImagesEntities);
skuSaleAttrValueService.saveBatch(skuSaleAttrValueEntities);
R r1 = couponFeignService.saveSkuReduction(skuReductionTo);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.7.1.png" alt="image-20220612184727878" tabindex="0" loading="lazy"><figcaption>image-20220612184727878</figcaption></figure><p>点击<code>Resume Program</code>按钮，执行到下一个断点，到<code>skuInfoService.saveSkuInfo(skuInfoEntity);</code>这里</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.7.2.png" alt="image-20220612184840945" tabindex="0" loading="lazy"><figcaption>image-20220612184840945</figcaption></figure><p>点击调试的<code>Step Over(步过)</code>按钮，执行<code>skuInfoService.saveSkuInfo(skuInfoEntity);</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.7.3.png" alt="image-20220612185003469" tabindex="0" loading="lazy"><figcaption>image-20220612185003469</figcaption></figure><p>在<code>gulimall_pms</code>数据库的命令行里查询<code>pms_sku_info</code>表，可以看到已经执行成功了</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_sku_info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.7.4.png" alt="image-20220612185214403" tabindex="0" loading="lazy"><figcaption>image-20220612185214403</figcaption></figure><h4 id="_8、保存sku的图片信息" tabindex="-1"><a class="header-anchor" href="#_8、保存sku的图片信息" aria-hidden="true">#</a> 8、保存sku的图片信息</h4><p>点击<code>Resume Program</code>按钮，执行到下一个断点，到<code>skuImagesService.saveBatch(skuImagesEntities);</code>这里</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.8.1.png" alt="image-20220612185351159" tabindex="0" loading="lazy"><figcaption>image-20220612185351159</figcaption></figure><p>点击调试的<code>Step Over(步过)</code>按钮，执行<code>skuImagesService.saveBatch(skuImagesEntities);</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.8.2.png" alt="image-20220612185428681" tabindex="0" loading="lazy"><figcaption>image-20220612185428681</figcaption></figure><p>在<code>gulimall_pms</code>数据库的命令行里查询<code>pms_sku_images</code>表，可以看到已经执行成功了，但是有很多空的<code>img_url</code>也被插入进来了</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code> select * from pms_sku_images;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.8.3.png" alt="image-20220612185714965" tabindex="0" loading="lazy"><figcaption>image-20220612185714965</figcaption></figure><p>在<code>skuImagesService.saveBatch(skuImagesEntities);</code>这里添加一个待办事项</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//TODO 没有图片；路径的无需保存
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.8.4.png" alt="image-20220612185924619" tabindex="0" loading="lazy"><figcaption>image-20220612185924619</figcaption></figure><h4 id="_9、保存sku的销售属性信息" tabindex="-1"><a class="header-anchor" href="#_9、保存sku的销售属性信息" aria-hidden="true">#</a> 9、保存sku的销售属性信息</h4><p>点击<code>Resume Program</code>按钮，执行到下一个断点，到<code> skuSaleAttrValueService.saveBatch(skuSaleAttrValueEntities);</code>这里</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.9.1.png" alt="image-20220612190054935" tabindex="0" loading="lazy"><figcaption>image-20220612190054935</figcaption></figure><p>点击调试的<code>Step Over(步过)</code>按钮，执行<code> skuSaleAttrValueService.saveBatch(skuSaleAttrValueEntities);</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.9.2.png" alt="image-20220612190159595" tabindex="0" loading="lazy"><figcaption>image-20220612190159595</figcaption></figure><p>在<code>gulimall_pms</code>数据库的命令行里查询<code>pms_sku_sale_attr_value</code>表，可以看到已经执行成功了</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_sku_sale_attr_value;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.9.3.png" alt="image-20220612190332004" tabindex="0" loading="lazy"><figcaption>image-20220612190332004</figcaption></figure><h4 id="_10、远程保存sku的优惠、满减、打折等信息" tabindex="-1"><a class="header-anchor" href="#_10、远程保存sku的优惠、满减、打折等信息" aria-hidden="true">#</a> 10、远程保存sku的优惠、满减、打折等信息</h4><p>点击<code>Resume Program</code>按钮，执行到下一个断点，到<code>R r1 = couponFeignService.saveSkuReduction(skuReductionTo);</code>这里</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.10.1.png" alt="image-20220612190433233" tabindex="0" loading="lazy"><figcaption>image-20220612190433233</figcaption></figure><p>点击调试的<code>Step Over(步过)</code>按钮，执行<code>R r1 = couponFeignService.saveSkuReduction(skuReductionTo);</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.10.2.png" alt="image-20220612190957155" tabindex="0" loading="lazy"><figcaption>image-20220612190957155</figcaption></figure><p>在<code>gulimall_sms</code>数据库的命令行里查询<code>sms_sku_full_reduction</code>表，可以看到已经执行成功了，但是有很多都为0的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from sms_sku_full_reduction;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.10.3.png" alt="image-20220612210049416" tabindex="0" loading="lazy"><figcaption>image-20220612210049416</figcaption></figure><p>在<code>gulimall_sms</code>数据库的命令行里查询<code>sms_sku_ladder</code>表，可以看到已经执行成功了，但是有很多都为0的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from sms_sku_ladder;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.10.4.png" alt="image-20220612205848035" tabindex="0" loading="lazy"><figcaption>image-20220612205848035</figcaption></figure><p>在<code>gulimall_sms</code>数据库的命令行里查询<code>sms_member_price</code>表，可以看到已经执行成功了，但是有很多都为0的数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select <span class="token operator">*</span> from sms_member_price<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.10.5.png" alt="image-20220612205651548" tabindex="0" loading="lazy"><figcaption>image-20220612205651548</figcaption></figure><h4 id="_11、保存所有spu信息" tabindex="-1"><a class="header-anchor" href="#_11、保存所有spu信息" aria-hidden="true">#</a> 11、保存所有spu信息</h4><p>点击<code>Resume Program</code>按钮，执行到下一个断点，到<code>skuInfoService.saveSkuInfo(skuInfoEntity);</code>这里,用于保存第二个spu信息</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.11.1.png" alt="image-20220612191302481" tabindex="0" loading="lazy"><figcaption>image-20220612191302481</figcaption></figure><p>一直点击<code>Resume Program</code>按钮，直到执行完所有</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.11.2.png" alt="image-20220612191443305" tabindex="0" loading="lazy"><figcaption>image-20220612191443305</figcaption></figure><p>在<code>gulimall_pms</code>数据库的命令行中执行sql语句，查询<code>pms_sku_info</code>信息，可以看到8条数据已成功插入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from pms_sku_info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.7.11.3.png" alt="image-20220612191706272" tabindex="0" loading="lazy"><figcaption>image-20220612191706272</figcaption></figure><h3 id="_4-6-8、商品保存其他问题" tabindex="-1"><a class="header-anchor" href="#_4-6-8、商品保存其他问题" aria-hidden="true">#</a> 4.6.8、商品保存其他问题</h3><h4 id="_1、图片的url为空时不保存到数据库" tabindex="-1"><a class="header-anchor" href="#_1、图片的url为空时不保存到数据库" aria-hidden="true">#</a> 1、图片的url为空时不保存到数据库</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法里，</p><p>在<code>skuImagesService.saveBatch(skuImagesEntities);</code>方法调用之前</p><p>收集数据之前，添加过滤条件，如果图片的url为空，就过滤掉；当图片的url不为空时才保留</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuImagesEntity</span><span class="token punctuation">&gt;</span></span> skuImagesEntities <span class="token operator">=</span> sku<span class="token punctuation">.</span><span class="token function">getImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>img <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">SkuImagesEntity</span> skuImagesEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuImagesEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuImagesEntity<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuImagesEntity<span class="token punctuation">.</span><span class="token function">setImgUrl</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span><span class="token function">getImgUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuImagesEntity<span class="token punctuation">.</span><span class="token function">setDefaultImg</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span><span class="token function">getDefaultImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> skuImagesEntity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entry<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//如果图片的url为空，就过滤掉</span>
    <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getImgUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
skuImagesService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>skuImagesEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.8.1.png" alt="image-20220613210153936" tabindex="0" loading="lazy"><figcaption>image-20220613210153936</figcaption></figure><h4 id="_2、当有打折或满减信息才调用远程服务" tabindex="-1"><a class="header-anchor" href="#_2、当有打折或满减信息才调用远程服务" aria-hidden="true">#</a> 2、当有<code>打折</code>或<code>满减</code>信息才调用远程服务</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法里，</p><p>在执行<code>R r1 = couponFeignService.saveSkuReduction(skuReductionTo);</code>方法之前，添加判断当有<code>打折</code>或<code>满减</code>信息时才调用远程服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//满几件打几折、满多少减多少，如果有一项有数据才调用远程服务</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">.</span><span class="token function">getFullCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">||</span> skuReductionTo<span class="token punctuation">.</span><span class="token function">getFullPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">R</span> r1 <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">saveSkuReduction</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;远程保存sku优惠信息失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.8.2.png" alt="image-20220612200805478" tabindex="0" loading="lazy"><figcaption>image-20220612200805478</figcaption></figure><p><code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的完整代码</p><p><a href="code/4.6.8.2.SpuInfoServiceImpl.java">点击查看<code>SpuInfoServiceImpl</code>类完整代码</a></p><h4 id="_3、设置会员价格也远程调用" tabindex="-1"><a class="header-anchor" href="#_3、设置会员价格也远程调用" aria-hidden="true">#</a> 3、设置会员价格也远程调用</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法里在<code>5.4</code>功能里修改代码，当有<code>打折</code>或<code>满减</code>或<code>设置会员价格</code>信息才调用远程服务</p><p><strong>这些价格应该与<code>BigDecimal.ZERO</code>比，之前代码写的有问题</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//5.4)、sku的优惠、满减、打折等信息；gulimall_sms-&gt;sms_sku_ladder\\sms_sku_full_reduction\\sms_ member_price</span>
<span class="token class-name">SkuReductionTo</span> skuReductionTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuReductionTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>sku<span class="token punctuation">,</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
skuReductionTo<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//查询是否有会员价格</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuReductionTo<span class="token punctuation">.</span>MemberPrice</span><span class="token punctuation">&gt;</span></span> memberPriceList <span class="token operator">=</span> skuReductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>memberPrice <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> memberPrice<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//满几件打几折、满多少减多少、会员价格，如果有一项有数据才调用远程服务</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">.</span><span class="token function">getFullCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span>
        <span class="token operator">||</span> skuReductionTo<span class="token punctuation">.</span><span class="token function">getFullPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
        <span class="token operator">||</span> memberPriceList<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">R</span> r1 <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">saveSkuReduction</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;远程保存sku优惠信息失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.8.3.png" alt="image-20220612205101515" tabindex="0" loading="lazy"><figcaption>image-20220612205101515</figcaption></figure><h4 id="_4、当有满减信息才保存" tabindex="-1"><a class="header-anchor" href="#_4、当有满减信息才保存" aria-hidden="true">#</a> 4、当有满减信息才保存</h4><p>修改<code>gulimall-coupon</code>模块的<code>com.atguigu.gulimall.coupon.service.impl.SkuFullReductionServiceImpl</code>类的<code>saveSkuReduction</code>方法，当有满减信息才保存</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//有满减信息才保存</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getFullPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//2、sku的 满减(满多少减多少) 信息；sms_sku_full_reduction</span>
    <span class="token class-name">SkuFullReductionEntity</span> skuFullReductionEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuFullReductionEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">,</span> skuFullReductionEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    skuFullReductionEntity<span class="token punctuation">.</span><span class="token function">setAddOther</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getPriceStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>skuFullReductionEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.8.4.png" alt="image-20220612203149627" tabindex="0" loading="lazy"><figcaption>image-20220612203149627</figcaption></figure><h4 id="_5、当会员价格大于0才保存" tabindex="-1"><a class="header-anchor" href="#_5、当会员价格大于0才保存" aria-hidden="true">#</a> 5、当会员价格大于0才保存</h4><p>修改<code>gulimall-coupon</code>模块<code>com.atguigu.gulimall.coupon.service.impl.SkuFullReductionServiceImpl</code>类里的<code>saveSkuReduction</code>方法，当会员价格大于0(修改了会员价格)才保存</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//3、sku的会员优惠信息；sms_ member_price</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuReductionTo<span class="token punctuation">.</span>MemberPrice</span><span class="token punctuation">&gt;</span></span> memberPrice <span class="token operator">=</span> reductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberPriceEntity</span><span class="token punctuation">&gt;</span></span> memberPriceEntities <span class="token operator">=</span> memberPrice<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>member<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> member<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>member <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">MemberPriceEntity</span> memberPriceEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberPriceEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>reductionTo<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setMemberLevelId</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setMemberLevelName</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setMemberPrice</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memberPriceEntity<span class="token punctuation">.</span><span class="token function">setAddOther</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> memberPriceEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    memberPriceService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>memberPriceEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.8.5.png" alt="image-20220612204104653" tabindex="0" loading="lazy"><figcaption>image-20220612204104653</figcaption></figure><h3 id="_4-6-9、重新测试" tabindex="-1"><a class="header-anchor" href="#_4-6-9、重新测试" aria-hidden="true">#</a> 4.6.9、重新测试</h3><h4 id="_1、重启项目" tabindex="-1"><a class="header-anchor" href="#_1、重启项目" aria-hidden="true">#</a> 1、重启项目</h4><p>选择IDEA下边选项框的<code>Services</code>选项，点击<code>GulimallProductApplication</code>,右键选择<code>Return</code>，重新以<code>debug</code>方式启动<code>GulimallProductApplication</code>项目</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.1.1.png" alt="image-20220612210946079" tabindex="0" loading="lazy"><figcaption>image-20220612210946079</figcaption></figure><p>点击<code>GulimallCouponApplication</code>,右键选择<code>Return</code>，重新以<code>debug</code>方式启动<code>GulimallCouponApplication</code>项目</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.1.2.png" alt="image-20220612211004238" tabindex="0" loading="lazy"><figcaption>image-20220612211004238</figcaption></figure><h4 id="_2、添加基本信息" tabindex="-1"><a class="header-anchor" href="#_2、添加基本信息" aria-hidden="true">#</a> 2、添加基本信息</h4><p>在<code>商品系统</code>-&gt;<code>商品维护</code>-&gt;<code>发布商品</code>里添加商品的基本信息</p><p><code>商品名称</code>里输入<code>Apple iPhoneXS 苹果XS手机</code></p><p><code>商品描述</code>输入<code>苹果手机</code></p><p><code>选择分类</code>选择<code>手机/手机通讯/手机</code></p><p><code>选择品牌</code>选择<code>Apple</code></p><p><code>商品重量(Kg)</code>输入<code>0.198</code></p><p><code>设置积分</code>里，<code>金币</code>输入<code>500</code>，<code>成长值</code>输入<code>500</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.2.1.png" alt="image-20220612211954522" tabindex="0" loading="lazy"><figcaption>image-20220612211954522</figcaption></figure><p><code>商品介绍</code>选以下两个图片</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.2.2.png" alt="image-20220612212014107" tabindex="0" loading="lazy"><figcaption>image-20220612212014107</figcaption></figure><p>然后点击<code>下一步：设置基本参数</code></p><h4 id="_3、添加规格参数" tabindex="-1"><a class="header-anchor" href="#_3、添加规格参数" aria-hidden="true">#</a> 3、添加规格参数</h4><p>在<code>规格参数</code>里,主体内的<code>入网型号</code>选择<code>A2100</code>，上市年份选择<code>2018</code>（基本信息和主芯片在这里我就不选了）</p><p>然后点击<code>下一步：设置销售属性</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.3.png" alt="image-20220612212342961" tabindex="0" loading="lazy"><figcaption>image-20220612212342961</figcaption></figure><h4 id="_4、添加销售属性" tabindex="-1"><a class="header-anchor" href="#_4、添加销售属性" aria-hidden="true">#</a> 4、添加销售属性</h4><p>在<code>销售属性</code>里的<code>选择销售属性</code>的<code>颜色</code>里，添加并选择<code>银色</code>、<code>深空灰色</code>、<code>金色</code></p><p><code>内存</code>选择<code>4G</code></p><p><code>版本</code>里，添加并选择<code>64GB</code>、<code>256GB</code>、<code>512GB</code></p><p>然后点击<code>下一步：设置SKU信息</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.4.png" alt="image-20220612212701344" tabindex="0" loading="lazy"><figcaption>image-20220612212701344</figcaption></figure><h4 id="_5、添加sku信息" tabindex="-1"><a class="header-anchor" href="#_5、添加sku信息" aria-hidden="true">#</a> 5、添加SKU信息</h4><h5 id="_1、添加基本信息" tabindex="-1"><a class="header-anchor" href="#_1、添加基本信息" aria-hidden="true">#</a> 1、添加基本信息</h5><p>在<code>销售属性</code>里添加如下信息，其中有些信息是已经自动生成好的(顺序可能不同)</p><table><thead><tr><th>颜色</th><th>版本</th><th>商品名称</th><th>标题</th><th>副标题</th><th>价格</th></tr></thead><tbody><tr><td>银色</td><td>64GB</td><td>Apple IPhoneXS 苹果XS手机 银色 64GB</td><td>Apple IPhoneXS 苹果XS手机 银色 64GB</td><td>国行正品【白条六期免息】</td><td>5999</td></tr><tr><td>银色</td><td>256GB</td><td>Apple IPhoneXS 苹果XS手机 银色 256GB</td><td>Apple IPhoneXS 苹果XS手机 银色 256GB</td><td>国行正品【白条六期免息】</td><td>6799</td></tr><tr><td>银色</td><td>512GB</td><td>Apple IPhoneXS 苹果XS手机 银色 512GB</td><td>Apple IPhoneXS 苹果XS手机 银色 512GB</td><td>国行正品【白条六期免息】苹果XS手机 银色 512GB</td><td>6999</td></tr><tr><td>深空灰色</td><td>64GB</td><td>Apple IPhoneXS 苹果XS手机 深空灰色 64GB</td><td>Apple IPhoneXS 苹果XS手机 深空灰色 64GB</td><td>国行正品【白条六期免息】</td><td>5999</td></tr><tr><td>深空灰色</td><td>256GB</td><td>Apple IPhoneXS 苹果XS手机 深空灰色 256GB</td><td>Apple IPhoneXS 苹果XS手机 深空灰色 256GB</td><td>国行正品【白条六期免息】</td><td>6799</td></tr><tr><td>深空灰色</td><td>512GB</td><td>Apple IPhoneXS 苹果XS手机 深空灰色 512GB</td><td>Apple IPhoneXS 苹果XS手机 深空灰色 512GB</td><td>国行正品【白条六期免息】</td><td>6999</td></tr><tr><td>金色</td><td>64GB</td><td>Apple IPhoneXS 苹果XS手机 金色 64GB</td><td>Apple IPhoneXS 苹果XS手机 金色 64GB</td><td>国行正品【白条六期免息】</td><td>5999</td></tr><tr><td>金色</td><td>256GB</td><td>Apple IPhoneXS 苹果XS手机 金色 256GB</td><td>Apple IPhoneXS 苹果XS手机 金色 256GB</td><td>国行正品【白条六期免息】</td><td>6799</td></tr><tr><td>金色</td><td>512GB</td><td>Apple IPhoneXS 苹果XS手机 金色 512GB</td><td>Apple IPhoneXS 苹果XS手机 金色 512GB</td><td>国行正品【白条六期免息】</td><td>6999</td></tr></tbody></table><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.5.1.png" alt="image-20220612213201736" tabindex="0" loading="lazy"><figcaption>image-20220612213201736</figcaption></figure><h5 id="_2、添加详细信息" tabindex="-1"><a class="header-anchor" href="#_2、添加详细信息" aria-hidden="true">#</a> 2、添加详细信息</h5><p>在<code>银色 64GB Apple IPhoneXS 苹果XS手机 银色 64GB Apple IPhoneXS 苹果XS手机 银色 64GB 国行正品【白条六期免息】 5999</code> (第一条信息)的<code>价格</code>右边，点击<code>&gt;</code>右箭头，在这里添加详细信息</p><p>点击<code>+</code>号，然后选择一张图片，以添加这个图片，选择一些图片作为这个<code>SKU</code>的图片集，并选择其中一个点击<code>设为默认</code>，用来做默认图片</p><p>在<code>设置折扣</code>里，满<code>2</code>件，打<code>0.98</code>折，并勾选<code>可叠加优惠</code></p><p>在<code>设置满减</code>里，满<code>10000</code>元，减<code>50</code>元，并勾选<code>可叠加优惠</code></p><p>在<code>设置会员价</code>里，<code>铜牌会员</code>设置会员价为<code>5980</code>元，<code>银牌会员</code>(这里前端字打错了)设置会员价为<code>5970</code>元</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.5.2.png" alt="image-20220612214656192" tabindex="0" loading="lazy"><figcaption>image-20220612214656192</figcaption></figure><p>按<code>f12</code>打开控制台，在控制台里选择<code>Console</code>，然后点击<code>下一步：保留商品信息</code>,先<strong>不</strong>要点击<code>提示</code>里的<code>确定</code></p><p>在控制台输出的信息那点击右键，选择<code>Save as...</code>，<strong>先放到记事本里保存，免得后面操作多了，不小心丢了</strong>(华为的那个也保留着，后面还用得上)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.5.3.png" alt="image-20220612214825166" tabindex="0" loading="lazy"><figcaption>image-20220612214825166</figcaption></figure><h5 id="_4、发送的完整json" tabindex="-1"><a class="header-anchor" href="#_4、发送的完整json" aria-hidden="true">#</a> 4、发送的完整json</h5><p>删除最开头的<code>spuadd.vue?c0e3:697 ~~~~~</code>，后面部分即为正确的、完整的json</p><p><a href="code/4.6.9.5.4.json">点击查看完整json</a></p><h5 id="_5、格式化后的json" tabindex="-1"><a class="header-anchor" href="#_5、格式化后的json" aria-hidden="true">#</a> 5、格式化后的json</h5><p><a href="code/4.6.9.5.5.json">点击查看格式后的json</a></p><h4 id="_6、抛出类型强转异常" tabindex="-1"><a class="header-anchor" href="#_6、抛出类型强转异常" aria-hidden="true">#</a> 6、抛出类型强转异常</h4><h5 id="_1、系统未知异常-1" tabindex="-1"><a class="header-anchor" href="#_1、系统未知异常-1" aria-hidden="true">#</a> 1、系统未知异常</h5><p>点击前端<code>提示</code>对话框的<code>确定按钮</code>后，提示<code>保存失败，原因【系统未知异常】</code>，查看请求，发现<code>msg</code>是<code>系统未知异常</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.1.png" alt="image-20220612215347322" tabindex="0" loading="lazy"><figcaption>image-20220612215347322</figcaption></figure><h5 id="_2、查看后端的控制台" tabindex="-1"><a class="header-anchor" href="#_2、查看后端的控制台" aria-hidden="true">#</a> 2、查看后端的控制台</h5><p>查看<code>GulimallProductApplication</code>模块的控制台，可以看到抛出了<code>.ClassCastException</code>(类强转)异常</p><p><code>com.atguigu.gulimall.product.vo.SpuSaveVo$MemberPrice</code>不能被强转为<code>com.atguigu.common.to.SkuReductionTo$MemberPrice</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java.lang.ClassCastException: com.atguigu.gulimall.product.vo.SpuSaveVo$MemberPrice cannot be cast to com.atguigu.common.to.SkuReductionTo$MemberPrice
	at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174) ~[na:1.8.0_301]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.2.1.png" alt="image-20220612234832710" tabindex="0" loading="lazy"><figcaption>image-20220612234832710</figcaption></figure><p>调试发现<code>BeanUtils.copyProperties(sku,skuReductionTo);</code>把<code>Skus</code>里的<code>MemberPrice</code>集合，赋给了<code>SkuReductionTo</code>里的<code>memberPrice</code>，这样就导致<code>memberPrice</code>是<code>com.atguigu.gulimall.product.vo.SpuSaveVo$MemberPrice</code>类型的集合，而不是本类的<code>com.atguigu.common.to.SkuReductionTo$MemberPrice</code>类型的集合，</p><p>所以当遍历时，编译器强转为本类的<code>com.atguigu.gulimall.product.vo.SpuSaveVo$MemberPrice</code>集合，就发生了类强转异常</p><p>(遍历时编译器检查的<code>memberPrice</code>集合类型为<code>com.atguigu.common.to.SkuReductionTo$MemberPrice</code>;而<code>BeanUtils.copyProperties(sku,skuReductionTo);</code>是在运行时执行的，编译器无法预知其类型，其把<code>com.atguigu.gulimall.product.vo.SpuSaveVo$MemberPrice</code>类型的集合赋给了<code>memberPrice</code>；在运行<code>memberPrice</code>遍历代码时发现与预期类型不一致，强转类型就发生了类强转异常)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.2.2.png" alt="image-20220613161427467" tabindex="0" loading="lazy"><figcaption>image-20220613161427467</figcaption></figure><h5 id="_3、尝试不显式获取返回类型会不会报错" tabindex="-1"><a class="header-anchor" href="#_3、尝试不显式获取返回类型会不会报错" aria-hidden="true">#</a> 3、尝试不显式获取返回类型会不会报错</h5><p>测试之前报错是不是因为以下代码显式获取了返回类型为<code>SkuReductionTo.MemberPrice</code>而报的错</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuReductionTo<span class="token punctuation">.</span>MemberPrice</span><span class="token punctuation">&gt;</span></span> memberPriceList <span class="token operator">=</span> skuReductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>memberPrice <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> memberPrice<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该代码前，添加代码，如下所示</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//5.4)、sku的优惠、满减、打折等信息；gulimall_sms-&gt;sms_sku_ladder\\sms_sku_full_reduction\\sms_ member_price</span>
<span class="token class-name">SkuReductionTo</span> skuReductionTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuReductionTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>sku<span class="token punctuation">,</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
skuReductionTo<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
skuReductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GulimallProductApplication</code>模块控制台打印<code>skuReductionTo.getMemberPrice()</code>可以看到<code>memberPrice()</code>为<code>SpuSaveVo$MemberPrice</code>类型的集合</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.3.1.png" alt="image-20220613001145096" tabindex="0" loading="lazy"><figcaption>image-20220613001145096</figcaption></figure><p>点击调试的<code>Step Over(步过)</code>按钮，继续向下运行。</p><p>在点击调试的<code>Step Over(步过)</code>按钮，步过<code>skuReductionTo.getMemberPrice().forEach(e-&gt;{</code>发现没有再向下运行了，这时应该是发生异常了，再次点击<code>Step Over(步过)</code>按钮，就跳到的捕获异常的类里去了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.3.2.png" alt="image-20220613165957636" tabindex="0" loading="lazy"><figcaption>image-20220613165957636</figcaption></figure><p>点击<code>Step Out(步出)</code>，直接执行到本类相应方法结束</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.3.3.png" alt="  " tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>多次点击<code>Step Out(步出)</code>，执行完所有异常捕获类，就看到了控制台异常信息</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.3.4.png" alt="image-20220613165144512" tabindex="0" loading="lazy"><figcaption>image-20220613165144512</figcaption></figure><h5 id="_4、解决方法" tabindex="-1"><a class="header-anchor" href="#_4、解决方法" aria-hidden="true">#</a> 4、解决方法</h5><p>📝 可以先把远程调用的先注释掉，因为没使用分布式事务，这些远程调用无法回滚，注释掉避免许多无用的数据被提交</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.4.0.png" alt="image-20220613163711487" tabindex="0" loading="lazy"><figcaption>image-20220613163711487</figcaption></figure><h6 id="方法一-1" tabindex="-1"><a class="header-anchor" href="#方法一-1" aria-hidden="true">#</a> 方法一</h6><p>不使用<code>BeanUtils.copyProperties(sku, skuReductionTo);</code>方法拷贝的<code>SkuReductionTo</code>类里的<code>memberPrice</code></p><p>直接使用原数据的<code>sku</code>对象的<code>memberPrice</code>进行判断</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//5.4)、sku的优惠、满减、打折等信息；gulimall_sms-&gt;sms_sku_ladder\\sms_sku_full_reduction\\sms_ member_price</span>
<span class="token class-name">SkuReductionTo</span> skuReductionTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuReductionTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>sku<span class="token punctuation">,</span> skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
skuReductionTo<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpuSaveVo<span class="token punctuation">.</span>MemberPrice</span><span class="token punctuation">&gt;</span></span> firstMemberPrice <span class="token operator">=</span> sku<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>memberPrice <span class="token operator">-&gt;</span> memberPrice<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//满几件打几折、满多少减多少、会员价格，如果有一项有数据才调用远程服务</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">.</span><span class="token function">getFullCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
        <span class="token operator">||</span> skuReductionTo<span class="token punctuation">.</span><span class="token function">getFullPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
        <span class="token operator">||</span> firstMemberPrice<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">R</span> r1 <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">saveSkuReduction</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;远程保存sku优惠信息失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.4.1.1.png" alt="image-20220613163009555" tabindex="0" loading="lazy"><figcaption>image-20220613163009555</figcaption></figure><p>可以看到<code>sku</code>里的<code>memberPrice</code>类型为<code>SpuSaveVo$MemberPrice</code>，就是它应该的类型，此时肯定不会报错</p><p>下面的方法在处理<code>skuReductionTo</code>里的错误的<code>SpuSaveVo$MemberPrice</code>类型没有报错的原因是：发生了远程调用，远程调用是通过<code>json</code>来传输数据，<code>SpuSaveVo$MemberPrice</code>类和<code>SkuReductionTo$MemberPrice</code>类的所有数据字段名称和类型都相同，所以转化的<code>json</code>数据都一样，在服务提供方接收<code>json</code>转化为<code>SkuReductionTo$MemberPrice</code>类型时也不会出错</p><p>(<code>SpuSaveVo$MemberPrice</code>类和<code>SkuReductionTo$MemberPrice</code>类的所有数据字段名称和类型都相同，但是类强转失败的原因是它们之间没有继承关系，所以这两个类不能强转)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.4.1.2.png" alt="image-20220613171053930" tabindex="0" loading="lazy"><figcaption>image-20220613171053930</figcaption></figure><h6 id="方法二-1" tabindex="-1"><a class="header-anchor" href="#方法二-1" aria-hidden="true">#</a> 方法二</h6><p><code>SpuSaveVo$MemberPrice</code>类和<code>SkuReductionTo$MemberPrice</code>类的所有数据字段名称和类型都相同，所以转化的<code>json</code>数据都一样，可以先将<code>SpuSaveVo$MemberPrice</code>类集合转化为<code>json</code>，再通过<code>json</code>转化为<code>SkuReductionTo$MemberPrice</code>类集合，最后再赋值给<code>skuReductionTo</code>类的<code>memberPrice</code>字段，然后进行处理</p><p>(不过没必要使用这种方法来回转，很影响性能，这里只提供一种思路)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//5.4)、sku的优惠、满减、打折等信息；gulimall_sms-&gt;sms_sku_ladder\\sms_sku_full_reduction\\sms_ member_price</span>
<span class="token class-name">SkuReductionTo</span> skuReductionTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuReductionTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>sku<span class="token punctuation">,</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
skuReductionTo<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>sku<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuReductionTo<span class="token punctuation">.</span>MemberPrice</span><span class="token punctuation">&gt;</span></span> memberPriceList <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token class-name">SkuReductionTo<span class="token punctuation">.</span>MemberPrice</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
skuReductionTo<span class="token punctuation">.</span><span class="token function">setMemberPrice</span><span class="token punctuation">(</span>memberPriceList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuReductionTo<span class="token punctuation">.</span>MemberPrice</span><span class="token punctuation">&gt;</span></span> firstMemberPrice <span class="token operator">=</span> skuReductionTo<span class="token punctuation">.</span><span class="token function">getMemberPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>memberPrice <span class="token operator">-&gt;</span> memberPrice<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//满几件打几折、满多少减多少、会员价格，如果有一项有数据才调用远程服务</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">.</span><span class="token function">getFullCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span>
        <span class="token operator">||</span> skuReductionTo<span class="token punctuation">.</span><span class="token function">getFullPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
        <span class="token operator">||</span> firstMemberPrice<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">R</span> r1 <span class="token operator">=</span> couponFeignService<span class="token punctuation">.</span><span class="token function">saveSkuReduction</span><span class="token punctuation">(</span>skuReductionTo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>r1<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;远程保存sku优惠信息失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.4.2.1.png" alt="image-20220613162718750" tabindex="0" loading="lazy"><figcaption>image-20220613162718750</figcaption></figure><p>调试可以看到<code>skuReductionTo</code>类的<code>memberPrice</code>字段已经变为正确的<code>SkuReductionTo$MemberPrice</code>集合</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.6.4.2.2.png" alt="image-20220613164406730" tabindex="0" loading="lazy"><figcaption>image-20220613164406730</figcaption></figure><h6 id="方法三-1" tabindex="-1"><a class="header-anchor" href="#方法三-1" aria-hidden="true">#</a> 方法三</h6><p>可以将新建一个<code>pubic</code>修饰的<code>MemberPrice</code>类，并删除<code>SpuSaveVo</code>类和<code>SkuReductionTo</code>类的<code>MemberPrice</code>内部类，</p><p>让<code>SpuSaveVo</code>类和<code>SkuReductionTo</code>类都使用新建的<code>MemberPrice</code>类，这样也不会有异常类</p><h4 id="_7、重新测试" tabindex="-1"><a class="header-anchor" href="#_7、重新测试" aria-hidden="true">#</a> 7、重新测试</h4><h5 id="_1、清空数据" tabindex="-1"><a class="header-anchor" href="#_1、清空数据" aria-hidden="true">#</a> 1、清空数据</h5><p>打开刚刚注释的远程调用，使其可以远程调用</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.1.1.png" alt="image-20220613171446817" tabindex="0" loading="lazy"><figcaption>image-20220613171446817</figcaption></figure><p>清空<code>gulimall_pms</code>数据库中<code>pms_product_attr_value</code>表的数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.1.2.png" alt="image-20220613200905318" tabindex="0" loading="lazy"><figcaption>image-20220613200905318</figcaption></figure><p>截断<code>gulimall_pms</code>数据库中<code>pms_product_attr_value</code>表的数据(其实可以不用清空，直接截断)</p><p>清空表只会删除表中的数据，插入时如果不指定<code>id</code>的话，<code>id</code>还是会继续向后递增；</p><p>而截断表不仅会删除表中的数据，<code>id</code>也会重新从<code>1</code>开始</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.1.3.png" alt="image-20220613200938323" tabindex="0" loading="lazy"><figcaption>image-20220613200938323</figcaption></figure><p>需要<code>清空</code>并<code>截断</code>如下表(可以不用清空，直接截断)，<strong>可以先备份这两个数据库，防止删错了</strong></p><p><strong><code>gulimall_pms</code>数据库</strong></p><ol><li>pms_product_attr_value</li><li>pms_sku_images</li><li>pms_sku_info</li><li>pms_sku_sale_attr_value</li><li>pms_spu_images</li><li>pms_spu_info</li><li>pms_spu_info_desc</li></ol><p><strong><code>gulimall_sms</code>数据库</strong></p><ol><li>sms_member_price</li><li>sms_sku_full_reduction</li><li>sms_sku_ladder</li><li>sms_spu_bounds</li></ol><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.1.4.png" alt="image-20220613173419233" style="zoom:67%;"><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.1.5.png" alt="image-20220613173527547" style="zoom:67%;"><p>点击<code>gulimall_pms</code>数据库，右键选择<code>转储 SQL 文件</code> ，然后选择<code>结构和数据...</code>，以复制<code>gulimall_pms</code>数据库，如果误删了可以恢复数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.1.6.png" alt="image-20220613203942743" tabindex="0" loading="lazy"><figcaption>image-20220613203942743</figcaption></figure><p>同理，点击<code>gulimall_sms</code>数据库，右键选择<code>转储 SQL 文件</code> ，然后选择<code>结构和数据...</code>，以复制<code>gulimall_sms</code>数据库，如果误删了可以恢复数据(还可以复制其他数据库<code>结构和数据...</code>，防止误删除其他数据库中的数据了)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.1.7.png" alt="image-20220613204017921" tabindex="0" loading="lazy"><figcaption>image-20220613204017921</figcaption></figure><h5 id="_2、重启模块" tabindex="-1"><a class="header-anchor" href="#_2、重启模块" aria-hidden="true">#</a> 2、重启模块</h5><p>重启<code>GulimallProductApplication</code>模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.2.1.png" alt="image-20220613204112485" tabindex="0" loading="lazy"><figcaption>image-20220613204112485</figcaption></figure><p>重启<code>GulimallCouponApplication</code>数据库</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.2.2.png" alt="image-20220613204145602" tabindex="0" loading="lazy"><figcaption>image-20220613204145602</figcaption></figure><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类的<code>saveSpuInfo</code>方法里，对所有操作数据库的代码都打断点(包括远程调用代码)，总共9处断点</p><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.2.3.png" alt="image-20220613211118601" style="zoom:50%;"><h5 id="_3、发送请求" tabindex="-1"><a class="header-anchor" href="#_3、发送请求" aria-hidden="true">#</a> 3、发送请求</h5><p>打开保存的苹果的请求，从<code>spuadd.vue?c0e3:697 ~~~~~</code>后面的第一个<code>{</code>开始复制，一直复制到最后</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.3.1.png" alt="image-20220613204932016" tabindex="0" loading="lazy"><figcaption>image-20220613204932016</figcaption></figure><p>打开<code>Postman</code></p><ol><li>输入&quot;http://localhost:88/api/product/spuinfo/save&quot;</li><li>请求方式选择&quot;POST&quot;</li><li>点击<code>Body</code></li><li>点击<code>raw</code></li><li>选择<code>JSON</code></li><li>粘贴刚刚复制的JSON</li><li>点击<code>Send</code></li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.3.2.png" alt="image-20220613204726065" tabindex="0" loading="lazy"><figcaption>image-20220613204726065</figcaption></figure><h5 id="_4、查看数据" tabindex="-1"><a class="header-anchor" href="#_4、查看数据" aria-hidden="true">#</a> 4、查看数据</h5><h6 id="_1、保存spu基本信息-pms-spu-info" tabindex="-1"><a class="header-anchor" href="#_1、保存spu基本信息-pms-spu-info" aria-hidden="true">#</a> 1、保存spu基本信息 pms_spu_info</h6><p>点击调试的<code>Step Over(步过)</code>按钮，执行<code>this.saveBaseSpuInfo(spuInfoEntity);</code>这段代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.1.1.png" alt="image-20220613211238135" tabindex="0" loading="lazy"><figcaption>image-20220613211238135</figcaption></figure><p>在<code>navicat</code>软件里点击<code>gulimall_pms</code>数据库，右键选择<code>新建查询</code></p><p>📝 以下<code>sql</code>为该<code>新建查询</code>用到的所有<code>sql</code>语句</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session transaction isolation level read uncommitted;
select * from pms_spu_info;
select * from pms_spu_info_desc;
select * from pms_spu_images;
select * from pms_product_attr_value;
select * from pms_sku_info;
select * from pms_sku_images;
select * from pms_sku_sale_attr_value;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.1.2.png" alt="image-20220613225416756" tabindex="0" loading="lazy"><figcaption>image-20220613225416756</figcaption></figure><p>输入以下<code>sql</code>，设置当前会话的隔离级别为<code>读未提交</code>,并查询<code>gulimall_pms</code>数据库里,<code>pms_spu_info</code>表中的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session transaction isolation level read uncommitted;
select * from pms_spu_info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.1.3.png" alt="image-20220613224818155" tabindex="0" loading="lazy"><figcaption>image-20220613224818155</figcaption></figure><h6 id="_2、保存spu的描述-pms-spu-info-desc" tabindex="-1"><a class="header-anchor" href="#_2、保存spu的描述-pms-spu-info-desc" aria-hidden="true">#</a> 2、保存Spu的描述 pms_spu_info_desc</h6><p>点击<code>Resume Program</code>按钮，执行到下一个断点停止(不执行该断点)，然后点击调试的<code>Step Over(步过)</code>按钮，执行<code>spuInfoDescService.saveSpuInfoDesc(spuInfoDescEntity);</code>这段代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.2.1.png" alt="image-20220613223914215" tabindex="0" loading="lazy"><figcaption>image-20220613223914215</figcaption></figure><p>在<code>gulimall_pms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_spu_info_desc;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.2.2.png" alt="image-20220613224920966" tabindex="0" loading="lazy"><figcaption>image-20220613224920966</figcaption></figure><h6 id="_3、保存spu的图片集-pms-spu-images" tabindex="-1"><a class="header-anchor" href="#_3、保存spu的图片集-pms-spu-images" aria-hidden="true">#</a> 3、保存spu的图片集 pms_spu_images</h6><p>点击<code>Resume Program</code>按钮，执行到下一个断点停止(不执行该断点)，然后点击调试的<code>Step Over(步过)</code>按钮，执行<code>spuImagesService.saveImages(spuInfoEntity.getId(), images);</code>这行代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.3.1.png" alt="image-20220613224052953" tabindex="0" loading="lazy"><figcaption>image-20220613224052953</figcaption></figure><p>在<code>gulimall_pms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_spu_images;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.3.2.png" alt="image-20220613225025623" tabindex="0" loading="lazy"><figcaption>image-20220613225025623</figcaption></figure><h6 id="_4、保存spu的规格参数-pms-product-attr-value" tabindex="-1"><a class="header-anchor" href="#_4、保存spu的规格参数-pms-product-attr-value" aria-hidden="true">#</a> 4、保存spu的规格参数；pms_product_attr_value</h6><p>点击<code>Resume Program</code>按钮，执行到下一个断点停止(不执行该断点)，然后点击调试的<code>Step Over(步过)</code>按钮，执行<code>productAttrValueService.saveProductAttr(productAttrValueEntities);</code>这行代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.4.1.png" alt="image-20220613224503399" tabindex="0" loading="lazy"><figcaption>image-20220613224503399</figcaption></figure><p>在<code>gulimall_pms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_product_attr_value;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.4.2.png" alt="image-20220613224716339" tabindex="0" loading="lazy"><figcaption>image-20220613224716339</figcaption></figure><h6 id="_5、远程保存spu的积分信息-gulimall-sms-sms-spu-bounds" tabindex="-1"><a class="header-anchor" href="#_5、远程保存spu的积分信息-gulimall-sms-sms-spu-bounds" aria-hidden="true">#</a> 5、远程保存spu的积分信息; gulimall_sms-&gt;sms_spu_bounds</h6><p>点击<code>Resume Program</code>按钮，执行到下一个断点停止(不执行该断点)，然后点击调试的<code>Step Over(步过)</code>按钮，执行<code>R r = couponFeignService.saveSpuBounds(spuBoundTo);</code>这行代码</p><p>由于该方法要进行远程调用，所以这这行代码要执行的久一点</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.0.1.png" alt="image-20220613225213723" tabindex="0" loading="lazy"><figcaption>image-20220613225213723</figcaption></figure><p>在<code>navicat</code>软件里点击<code>gulimall_sms</code>数据库，右键选择<code>新建查询</code></p><p>📝 以下<code>sql</code>为该<code>新建查询</code>用到的所有<code>sql</code>语句</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session transaction isolation level read uncommitted;
select * from sms_spu_bounds;
select * from sms_sku_ladder;
select * from sms_sku_full_reduction;
select * from sms_member_price;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.0.2.png" alt="image-20220613225452678" tabindex="0" loading="lazy"><figcaption>image-20220613225452678</figcaption></figure><p>输入以下<code>sql</code>，设置当前会话的隔离级别为<code>读未提交</code>,并查询<code>gulimall_sms</code>数据库里,<code>sms_spu_bounds</code>表中的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session transaction isolation level read uncommitted;
select * from sms_spu_bounds;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.0.3.png" alt="image-20220613225559481" tabindex="0" loading="lazy"><figcaption>image-20220613225559481</figcaption></figure><h6 id="_5-1、sku的基本信息-pms-sku-info" tabindex="-1"><a class="header-anchor" href="#_5-1、sku的基本信息-pms-sku-info" aria-hidden="true">#</a> 5.1、sku的基本信息; pms_sku_info</h6><p>点击<code>Resume Program</code>按钮，执行到下一个断点停止(不执行该断点)，然后点击调试的<code>Step Over(步过)</code>按钮，执行<code>skuInfoService.saveSkuInfo(skuInfoEntity);</code>这行代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.1.1.png" alt="image-20220613225814817" tabindex="0" loading="lazy"><figcaption>image-20220613225814817</figcaption></figure><p>在<code>gulimall_pms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><p>(不小心把<code>select * from pms_product_attr_value;</code>这行代码删了)</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_sku_info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.1.2.png" alt="image-20220613225728853" tabindex="0" loading="lazy"><figcaption>image-20220613225728853</figcaption></figure><h6 id="_5-2、sku的图片信息-pms-sku-images" tabindex="-1"><a class="header-anchor" href="#_5-2、sku的图片信息-pms-sku-images" aria-hidden="true">#</a> 5.2、sku的图片信息; pms_sku_images</h6><p>点击<code>Resume Program</code>按钮，执行到下一个断点停止(不执行该断点)，然后点击调试的<code>Step Over(步过)</code>按钮，执行<code>skuImagesService.saveBatch(skuImagesEntities);</code>这行代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.2.1.png" alt="image-20220613230444086" tabindex="0" loading="lazy"><figcaption>image-20220613230444086</figcaption></figure><p>在<code>gulimall_pms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_sku_images;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到这时没有<code>img_url</code>为<code>null</code>的数据了(<code>img_url</code>为<code>null</code>的数据都被过滤掉了，不会保存到数据库了)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.2.2.png" alt="image-20220613230557481" tabindex="0" loading="lazy"><figcaption>image-20220613230557481</figcaption></figure><h6 id="_5-3、sku的销售属性信息-pms-sku-sale-attr-value" tabindex="-1"><a class="header-anchor" href="#_5-3、sku的销售属性信息-pms-sku-sale-attr-value" aria-hidden="true">#</a> 5.3、sku的销售属性信息: pms_sku_sale_attr_value</h6><p>点击<code>Resume Program</code>按钮，执行到下一个断点停止(不执行该断点)，然后点击调试的<code>Step Over(步过)</code>按钮，执行<code>skuSaleAttrValueService.saveBatch(skuSaleAttrValueEntities);</code>这行代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.3.1.png" alt="image-20220613230754102" tabindex="0" loading="lazy"><figcaption>image-20220613230754102</figcaption></figure><p>在<code>gulimall_pms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from pms_sku_sale_attr_value;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.3.2.png" alt="image-20220613230855981" tabindex="0" loading="lazy"><figcaption>image-20220613230855981</figcaption></figure><h6 id="_5-4、远程保存sku的优惠、满减、打折等信息-gulimall-sms-sms-sku-ladder-sms-sku-full-reduction-sms-member-price" tabindex="-1"><a class="header-anchor" href="#_5-4、远程保存sku的优惠、满减、打折等信息-gulimall-sms-sms-sku-ladder-sms-sku-full-reduction-sms-member-price" aria-hidden="true">#</a> 5.4、远程保存sku的优惠、满减、打折等信息；gulimall_sms-&gt;sms_sku_ladder\\sms_sku_full_reduction\\sms_ member_price</h6><p>点击<code>Resume Program</code>按钮，执行到下一个断点停止(不执行该断点)，然后点击调试的<code>Step Over(步过)</code>按钮，执行<code>R r1 = couponFeignService.saveSkuReduction(skuReductionTo);</code>这行代码</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.4.1.png" alt="image-20220613231325398" tabindex="0" loading="lazy"><figcaption>image-20220613231325398</figcaption></figure><p>在<code>gulimall-coupon</code>模块的<code>com.atguigu.gulimall.coupon.service.impl.SkuFullReductionServiceImpl</code>类的<code>saveSkuReduction</code>方法里设置了<code>有打折信息才保存</code>、<code>有满减信息才保存</code>、<code>有会员优惠信息才保存</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.4.2.png" alt="image-20220613231505771" tabindex="0" loading="lazy"><figcaption>image-20220613231505771</figcaption></figure><p>在<code>gulimall_sms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from sms_sku_ladder;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到没有<code>打折信息</code>为空的数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.4.3.png" alt="image-20220613231951960" tabindex="0" loading="lazy"><figcaption>image-20220613231951960</figcaption></figure><p>在<code>gulimall_sms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from sms_sku_full_reduction;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到没有<code>满减信息</code>为空的数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.4.4.png" alt="image-20220613232056519" tabindex="0" loading="lazy"><figcaption>image-20220613232056519</figcaption></figure><p>在<code>gulimall_sms</code>数据库的<code>新建查询</code>里添加<code>sql</code>语句，并选中刚刚添加到<code>sql</code>语句，点击<code>运行已选择的</code>,即可查看刚刚保存的数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from sms_member_price;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到没有<code>会员优惠信息</code>为空的数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.4.5.4.5.png" alt="image-20220613232324450" tabindex="0" loading="lazy"><figcaption>image-20220613232324450</figcaption></figure><h5 id="_5、截断表-重新发送数据" tabindex="-1"><a class="header-anchor" href="#_5、截断表-重新发送数据" aria-hidden="true">#</a> 5、截断表，重新发送数据</h5><p>清空并截断表(其实可以不清空，直接截断)，删除<code>gulimall_pms</code>数据库<code>pms_product_attr_value</code>表里面的数据(含有大量垃圾数据)</p><p>同理清空并截断(其实可以不清空，直接截断)以下所有表</p><p><strong><code>gulimall_pms</code>数据库</strong></p><ol><li>pms_product_attr_value</li><li>pms_sku_images</li><li>pms_sku_info</li><li>pms_sku_sale_attr_value</li><li>pms_spu_images</li><li>pms_spu_info</li><li>pms_spu_info_desc</li></ol><p><strong><code>gulimall_sms</code>数据库</strong></p><ol><li>sms_member_price</li><li>sms_sku_full_reduction</li><li>sms_sku_ladder</li><li>sms_spu_bounds</li></ol><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.5.1.png" alt="image-20220613233757008" tabindex="0" loading="lazy"><figcaption>image-20220613233757008</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.5.2.png" alt="image-20220613233828662" tabindex="0" loading="lazy"><figcaption>image-20220613233828662</figcaption></figure><p>重新向后端发送<code>华为手机</code>和<code>苹果手机</code>商品的<code>json</code>数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.5.3.png" alt="image-20220619174732338" tabindex="0" loading="lazy"><figcaption>image-20220619174732338</figcaption></figure><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.6.9.7.5.4.png" alt="image-20220613233312152" tabindex="0" loading="lazy"><figcaption>image-20220613233312152</figcaption></figure><h5 id="_6、附录" tabindex="-1"><a class="header-anchor" href="#_6、附录" aria-hidden="true">#</a> 6、附录</h5><h6 id="_1、gulimall-pms数据库的新建查询里的所有sql语句" tabindex="-1"><a class="header-anchor" href="#_1、gulimall-pms数据库的新建查询里的所有sql语句" aria-hidden="true">#</a> 1、<code>gulimall_pms</code>数据库的<code>新建查询</code>里的所有<code>sql</code>语句</h6><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session transaction isolation level read uncommitted;
select * from pms_spu_info;
select * from pms_spu_info_desc;
select * from pms_spu_images;
select * from pms_product_attr_value;
select * from pms_sku_info;
select * from pms_sku_images;
select * from pms_sku_sale_attr_value;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、gulimall-sms数据库的新建查询里的所有sql语句" tabindex="-1"><a class="header-anchor" href="#_2、gulimall-sms数据库的新建查询里的所有sql语句" aria-hidden="true">#</a> 2、<code>gulimall_sms</code>数据库的<code>新建查询</code>里的所有<code>sql</code>语句</h6><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set session transaction isolation level read uncommitted;
select * from sms_spu_bounds;
select * from sms_sku_ladder;
select * from sms_sku_full_reduction;
select * from sms_member_price;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-7、商品服务-api-商品管理" tabindex="-1"><a class="header-anchor" href="#_4-7、商品服务-api-商品管理" aria-hidden="true">#</a> 4.7、商品服务-API-商品管理</h2><h3 id="_4-7-1、spu检索" tabindex="-1"><a class="header-anchor" href="#_4-7-1、spu检索" aria-hidden="true">#</a> 4.7.1、SPU检索</h3><h4 id="_1、查看请求-7" tabindex="-1"><a class="header-anchor" href="#_1、查看请求-7" aria-hidden="true">#</a> 1、查看请求</h4><p>在<code>商品系统</code>-&gt;<code>商品维护</code>-&gt;<code>spu管理</code>里，<code>分类</code>选择<code>手机/手机通讯/手机</code>，<code>品牌</code>选择<code>华为</code>,<code>状态</code>选择<code>上架</code>,</p><p>按<code>f12</code>选择<code>Network</code>，清空<code>Network</code>里的数据，然后点击<code>查询</code></p><p>然后查看请求url为</p><p><a href="">http:😕/localhost:88/api/product/spuinfo/list?t=1655170424813&amp;status=1&amp;key=&amp;brandId=1&amp;catelogId=225&amp;page=1&amp;limit=10</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.1.1.png" alt="image-20220614093602135" tabindex="0" loading="lazy"><figcaption>image-20220614093602135</figcaption></figure><p>点击<code>Payload</code>，查看发送的<code>json</code>数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.1.2.png" alt="image-20220614093637205" tabindex="0" loading="lazy"><figcaption>image-20220614093637205</figcaption></figure><p>接口文档在<code>商品系统/18、spu检索</code>里 : https://easydoc.net/s/78237135/ZUqEdvA4/9LISLvy7</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.1.3.png" alt="image-20220614093404399" tabindex="0" loading="lazy"><figcaption>image-20220614093404399</figcaption></figure><h4 id="_2、修改list方法" tabindex="-1"><a class="header-anchor" href="#_2、修改list方法" aria-hidden="true">#</a> 2、修改<code>list</code>方法</h4><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.SpuInfoController</code>类的<code>list</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 列表
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">PageUtils</span> page <span class="token operator">=</span> spuInfoService<span class="token punctuation">.</span><span class="token function">queryPageByCondition</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.2.png" alt="image-20220614094259175" tabindex="0" loading="lazy"><figcaption>image-20220614094259175</figcaption></figure><h4 id="_3、添加querypagebycondition抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、添加querypagebycondition抽象方法" aria-hidden="true">#</a> 3、添加<code>queryPageByCondition</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.SpuInfoService</code>接口里添加<code>queryPageByCondition</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageUtils</span> <span class="token function">queryPageByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.3.png" alt="image-20220614094320514" tabindex="0" loading="lazy"><figcaption>image-20220614094320514</figcaption></figure><h4 id="_4、实现querypagebycondition抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、实现querypagebycondition抽象方法" aria-hidden="true">#</a> 4、实现<code>queryPageByCondition</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SpuInfoServiceImpl</code>类里实现未实现的<code>queryPageByCondition</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据条件分页查询
 * <span class="token punctuation">{</span>
 *    page: 1,//当前页码
 *    limit: 10,//每页记录数
 *    sidx: &#39;id&#39;,//排序字段
 *    order: &#39;asc/desc&#39;,//排序方式
 *    key: &#39;华为&#39;,//检索关键字
 *    catelogId: 6,//三级分类id
 *    brandId: 1,//品牌id
 *    status: 0,//商品状态
 * <span class="token punctuation">}</span>
 * <span class="token keyword">@param</span> <span class="token parameter">params</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPageByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpuInfoEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据&quot;key&quot;，精确匹配商品id 或 模糊查询spu_name</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>wrapper<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SpuInfoEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">SpuInfoEntity</span><span class="token operator">::</span><span class="token function">getSpuName</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据status精确匹配状态</span>
    <span class="token class-name">String</span> status <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">SpuInfoEntity</span><span class="token operator">::</span><span class="token function">getPublishStatus</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据brandId精确匹配品牌id</span>
    <span class="token class-name">String</span> brandId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;brandId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>brandId<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">SpuInfoEntity</span><span class="token operator">::</span><span class="token function">getBrandId</span><span class="token punctuation">,</span>brandId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据catelogId精确匹配所属分类id（注意：前端发来的是catelogId,数据库写的是catalogId）</span>
    <span class="token class-name">String</span> catelogId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;catelogId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">SpuInfoEntity</span><span class="token operator">::</span><span class="token function">getCatalogId</span><span class="token punctuation">,</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpuInfoEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpuInfoEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
            lambdaQueryWrapper
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.4.png" alt="image-20220614112141228" tabindex="0" loading="lazy"><figcaption>image-20220614112141228</figcaption></figure><h4 id="_5、测试-11" tabindex="-1"><a class="header-anchor" href="#_5、测试-11" aria-hidden="true">#</a> 5、测试</h4><p>重启<code>gulimall-product</code>模块，打开前端页面进行测试</p><h5 id="测试一" tabindex="-1"><a class="header-anchor" href="#测试一" aria-hidden="true">#</a> 测试一</h5><p>打开<code>商品系统</code>-&gt;<code>商品维护</code>-&gt;<code>spu管理</code>,修改<code>状态</code>为<code>上架</code>，点击<code>查询</code>，可以看到没有数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.5.1.1.png" alt="image-20220614112300493" tabindex="0" loading="lazy"><figcaption>image-20220614112300493</figcaption></figure><p>查看<code>GulimallProductApplication</code>模块的控制台输出的<code>sql</code>语句，可以看到<code>sql</code>语句正常</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT COUNT(1) FROM pms_spu_info WHERE (publish_status = ? AND brand_id = ? AND catalog_id = ?) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.5.1.2.png" alt="image-20220614112931073" tabindex="0" loading="lazy"><figcaption>image-20220614112931073</figcaption></figure><h5 id="测试二" tabindex="-1"><a class="header-anchor" href="#测试二" aria-hidden="true">#</a> 测试二</h5><p>打开<code>商品系统</code>-&gt;<code>商品维护</code>-&gt;<code>spu管理</code>,修改<code>状态</code>为<code>新建</code>，点击<code>查询</code>，可以看到一条数据</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.5.2.1.png" alt="image-20220614112329904" tabindex="0" loading="lazy"><figcaption>image-20220614112329904</figcaption></figure><p>查看<code>GulimallProductApplication</code>模块的控制台输出的<code>sql</code>语句，可以看到<code>sql</code>语句正常</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT COUNT(1) FROM pms_spu_info WHERE (brand_id = ? AND catalog_id = ?) 
SELECT id,spu_description,spu_name,catalog_id,create_time,brand_id,weight,update_time,publish_status FROM pms_spu_info WHERE (brand_id = ? AND catalog_id = ?) LIMIT ?,? 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.5.2.2.png" alt="image-20220614113208157" tabindex="0" loading="lazy"><figcaption>image-20220614113208157</figcaption></figure><p>测试三</p><p>打开<code>商品系统</code>-&gt;<code>商品维护</code>-&gt;<code>spu管理</code>，<code>检索</code>的输入框中输入<code>1</code>，点击<code>查询</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.5.3.1.png" alt="image-20220614112545011" tabindex="0" loading="lazy"><figcaption>image-20220614112545011</figcaption></figure><p>查看<code>GulimallProductApplication</code>模块的控制台输出的<code>sql</code>语句，可以看到<code>sql</code>语句正常</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT COUNT(1) FROM pms_spu_info WHERE (((id = ? OR spu_name LIKE ?)) AND brand_id = ? AND catalog_id = ?) 

SELECT id,spu_description,spu_name,catalog_id,create_time,brand_id,weight,update_time,publish_status FROM pms_spu_info WHERE (( (id = ? OR spu_name LIKE ?) ) AND brand_id = ? AND catalog_id = ?) LIMIT ?,? 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.5.3.2.png" alt="image-20220614113252034" tabindex="0" loading="lazy"><figcaption>image-20220614113252034</figcaption></figure><h4 id="_6、状态异常问题" tabindex="-1"><a class="header-anchor" href="#_6、状态异常问题" aria-hidden="true">#</a> 6、状态异常问题</h4><p>如果<code>状态</code>为<code>新建</code>时，<code>status</code>为<code>1</code>则是前端和数据库的状态码没有对应起来</p><p>查看<code>src\\views\\modules\\product\\spuinfo.vue</code>文件的以下代码，这里指定了<code>新建</code>、<code>已上架</code>、<code>已下架</code>状态分别为<code>0</code>、<code>1</code>、<code>2</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>publishStatus<span class="token punctuation">&quot;</span></span> <span class="token attr-name">header-align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>上架状态<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope.row.publishStatus == 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>新建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope.row.publishStatus == 1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>已上架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tag</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scope.row.publishStatus == 2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>已下架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tag</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.6.1.png" alt="image-20220614114116404" tabindex="0" loading="lazy"><figcaption>image-20220614114116404</figcaption></figure><p>检索条件在<code>src\\views\\modules\\product\\spu.vue</code>文件里，可以看到<code>spu.vue</code>文件引用了<code>Spuinfo</code>文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.6.2.png" alt="image-20220614113806046" tabindex="0" loading="lazy"><figcaption>image-20220614113806046</figcaption></figure><p>修改<code>spu.vue</code>文件里的<code>状态</code>里的不同状态对应的值，<code>新建</code>、<code>已上架</code>、<code>已下架</code>状态分别为<code>0</code>、<code>1</code>、<code>2</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>状态<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>160px</span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataForm.status<span class="token punctuation">&quot;</span></span> <span class="token attr-name">clearable</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>新建<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>上架<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>下架<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.6.3.png" alt="image-20220614113850905" tabindex="0" loading="lazy"><figcaption>image-20220614113850905</figcaption></figure><h4 id="_7、修改时间格式和时区" tabindex="-1"><a class="header-anchor" href="#_7、修改时间格式和时区" aria-hidden="true">#</a> 7、修改时间格式和时区</h4><p>老师的时间<code>格式</code>不符合中国人习惯</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.7.1.png" alt="image-20220619200710866" tabindex="0" loading="lazy"><figcaption>image-20220619200710866</figcaption></figure><p>而我的项目<code>时区</code>不对</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.7.2.png" alt="image-20220614115448525" tabindex="0" loading="lazy"><figcaption>image-20220614115448525</figcaption></figure><p>修改<code>gulimall-product</code>模块的<code>src/main/resources/application.yml</code>配置文件，设置时间显示的格式</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">-</span>mm<span class="token punctuation">-</span>ss
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.7.3.png" alt="image-20220614114631103" tabindex="0" loading="lazy"><figcaption>image-20220614114631103</figcaption></figure><p>时区最好也设置一下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">-</span>mm<span class="token punctuation">-</span>ss
    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.1.7.4.png" alt="image-20220614114810747" tabindex="0" loading="lazy"><figcaption>image-20220614114810747</figcaption></figure><h3 id="_4-7-2、sku检索" tabindex="-1"><a class="header-anchor" href="#_4-7-2、sku检索" aria-hidden="true">#</a> 4.7.2、SKU检索</h3><h4 id="_1、查看接口" tabindex="-1"><a class="header-anchor" href="#_1、查看接口" aria-hidden="true">#</a> 1、查看接口</h4><p>在<code>商品系统/商品维护/商品管理</code>里点击查询，查看请求</p><p>url： http://localhost:88/api/product/skuinfo/list?t=1655193479594&amp;page=1&amp;limit=10&amp;key=&amp;catelogId=0&amp;brandId=0</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.1.1.png" alt="image-20220614155909254" tabindex="0" loading="lazy"><figcaption>image-20220614155909254</figcaption></figure><p>接口文档在<code>商品系统/21、sku检索</code>里：https://easydoc.net/s/78237135/ZUqEdvA4/ucirLq1D</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.1.2.png" alt="image-20220614115218657" tabindex="0" loading="lazy"><figcaption>image-20220614115218657</figcaption></figure><h4 id="_2、修改list方法-1" tabindex="-1"><a class="header-anchor" href="#_2、修改list方法-1" aria-hidden="true">#</a> 2、修改<code>list</code>方法</h4><p>修改<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.SkuInfoController</code>模块的<code>list</code>方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.2.png" alt="image-20220614115720234" tabindex="0" loading="lazy"><figcaption>image-20220614115720234</figcaption></figure><h4 id="_3、添加querypagebycondition抽象方法-1" tabindex="-1"><a class="header-anchor" href="#_3、添加querypagebycondition抽象方法-1" aria-hidden="true">#</a> 3、添加<code>queryPageByCondition</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.SkuInfoService</code>接口里添加<code>queryPageByCondition</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageUtils</span> <span class="token function">queryPageByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.3.png" alt="image-20220614115816925" tabindex="0" loading="lazy"><figcaption>image-20220614115816925</figcaption></figure><h4 id="_4、实现querypagebycondition抽象方法-1" tabindex="-1"><a class="header-anchor" href="#_4、实现querypagebycondition抽象方法-1" aria-hidden="true">#</a> 4、实现<code>queryPageByCondition</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.SkuInfoServiceImpl</code>类里实现未实现的<code>queryPageByCondition</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据条件分页查询
 * <span class="token punctuation">{</span>
 * page: 1,//当前页码
 * limit: 10,//每页记录数
 * sidx: &#39;id&#39;,//排序字段
 * order: &#39;asc/desc&#39;,//排序方式
 * key: &#39;华为&#39;,//检索关键字
 * catelogId: 0,
 * brandId: 0,
 * min: 0,
 * max: 0
 * <span class="token punctuation">}</span>
 *
 * <span class="token keyword">@param</span> <span class="token parameter">params</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPageByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuInfoEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据&quot;key&quot;，精确匹配商品id 或 模糊查询spu_name</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> wrapper <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SkuInfoEntity</span><span class="token operator">::</span><span class="token function">getSkuId</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">SkuInfoEntity</span><span class="token operator">::</span><span class="token function">getSkuName</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//根据catelogId精确匹配所属分类id（注意：前端发来的是catelogId,数据库写的是catalogId）</span>
    <span class="token class-name">String</span> catelogId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;catelogId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>catelogId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SkuInfoEntity</span><span class="token operator">::</span><span class="token function">getCatalogId</span><span class="token punctuation">,</span> catelogId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//根据brandId精确匹配品牌id</span>
    <span class="token class-name">String</span> brandId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;brandId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>brandId<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>brandId<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SkuInfoEntity</span><span class="token operator">::</span><span class="token function">getBrandId</span><span class="token punctuation">,</span> brandId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// price &gt;= min</span>
    <span class="token class-name">String</span> min <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;min&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">BigDecimal</span> mimBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>mimBigDecimal<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">SkuInfoEntity</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// price &lt;= max</span>
    <span class="token class-name">String</span> max <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;max&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">BigDecimal</span> maxBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span> maxBigDecimal<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">SkuInfoEntity</span><span class="token operator">::</span><span class="token function">getPrice</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuInfoEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SkuInfoEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
            lambdaQueryWrapper
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.4.png" alt="image-20220614174410390" tabindex="0" loading="lazy"><figcaption>image-20220614174410390</figcaption></figure><h4 id="_5、测试-12" tabindex="-1"><a class="header-anchor" href="#_5、测试-12" aria-hidden="true">#</a> 5、测试</h4><p>重启<code>gulimall-product</code>模块，打开<code>商品系统/商品维护/商品管理</code>,可以看到<code>价格</code>的两个输入框没输入时都为<code>0</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.5.1.png" alt="image-20220619220828891" tabindex="0" loading="lazy"><figcaption>image-20220619220828891</figcaption></figure><p>手动把<code>价格</code>的第二个输入框(最大值)的<code>0</code>删了；打开控制台，点击<code>vue</code>，最左边选择<code>APP 1</code>，</p><p>中间依次选择<code>Root</code>-&gt;<code>APP</code>-&gt;<code>Main</code>-&gt;<code>MainContent</code>-&gt;<code>ElTabs</code>-&gt;<code>ElPane</code>-&gt;<code>ElCard</code>-&gt;<code>Manager</code>,</p><p>可以看到当价格的输入框没有数据时，值为<code>undefined</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.5.2.png" alt="image-20220614155157775" tabindex="0" loading="lazy"><figcaption>image-20220614155157775</figcaption></figure><p>打卡<code>Vs Code</code>，点击<code>搜索框</code>(或使用快捷键<code>ctrl+shift+F</code>)，输入<code>价格</code>，然后点击<code>enter</code>,</p><p>选择<code>spu.vue</code>里的这个把<code>data</code>-&gt;<code>return</code>-&gt;<code>dataForm</code>-&gt;<code>price</code>里的<code>min</code>和<code>max</code>值都改为<code>undefined</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">catPathSub</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">brandIdSub</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataForm</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">brandId</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">catelogId</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
        <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">pageIndex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">totalPage</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataListLoading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataListSelections</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">addOrUpdateVisible</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">catelogPath</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.5.3.png" alt="image-20220619222303036" tabindex="0" loading="lazy"><figcaption>image-20220619222303036</figcaption></figure><p>修改后查看页面，可以看到<code>价格</code>的两个输入框没输入时都没有<code>0</code>了，就不显示数据了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.5.4.png" alt="image-20220614155349645" tabindex="0" loading="lazy"><figcaption>image-20220614155349645</figcaption></figure><p>这样修改后，没有设置的在发送请求时就不会就不会带上这个字段了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.7.2.5.5.png" alt="image-20220614155607613" tabindex="0" loading="lazy"><figcaption>image-20220614155607613</figcaption></figure><h2 id="_4-8、仓库服务-api-仓库管理" tabindex="-1"><a class="header-anchor" href="#_4-8、仓库服务-api-仓库管理" aria-hidden="true">#</a> 4.8、仓库服务-API-仓库管理</h2><p><code>仓库服务-API-仓库管理</code>对应于<code>gulimall_wms</code>数据库</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.0.1.png" alt="image-20220614160337441" tabindex="0" loading="lazy"><figcaption>image-20220614160337441</figcaption></figure><p><code>仓库服务-API-仓库管理</code>对应于<code>gulimall-ware</code>模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.0.2.png" alt="image-20220614160421031" tabindex="0" loading="lazy"><figcaption>image-20220614160421031</figcaption></figure><h3 id="_4-8-1、整合ware服务" tabindex="-1"><a class="header-anchor" href="#_4-8-1、整合ware服务" aria-hidden="true">#</a> 4.8.1、整合ware服务</h3><h4 id="_1、配置注册中心地址" tabindex="-1"><a class="header-anchor" href="#_1、配置注册中心地址" aria-hidden="true">#</a> 1、配置注册中心地址</h4><p>在<code>gulimall-ware</code>模块的<code>src/main/resources/application.yml</code>配置文件里，添加<code>配置注册中心地址</code>和<code>应用名</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>ware
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.1.1.png" alt="image-20220614160600771" tabindex="0" loading="lazy"><figcaption>image-20220614160600771</figcaption></figure><h4 id="_2、开启服务发现" tabindex="-1"><a class="header-anchor" href="#_2、开启服务发现" aria-hidden="true">#</a> 2、开启服务发现</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.GulimallWareApplication</code>启动类上添加<code>@EnableDiscoveryClient</code>服务发现注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableDiscoveryClient</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.1.2.png" alt="image-20220614160709664" tabindex="0" loading="lazy"><figcaption>image-20220614160709664</figcaption></figure><h4 id="_3、指定要扫描的mapper文件所在的包" tabindex="-1"><a class="header-anchor" href="#_3、指定要扫描的mapper文件所在的包" aria-hidden="true">#</a> 3、指定要扫描的<code>Mapper</code>文件所在的包</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.GulimallWareApplication</code>启动类上添加<code>@MapperScan(&quot;com.atguigu.gulimall.ware.dao&quot;)</code>注解，并指定要扫描的<code>Mapper</code>文件所在的包</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.gulimall.ware.dao&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.1.3.png" alt="image-20220614160821054" tabindex="0" loading="lazy"><figcaption>image-20220614160821054</figcaption></figure><h4 id="_4、开启事务管理" tabindex="-1"><a class="header-anchor" href="#_4、开启事务管理" aria-hidden="true">#</a> 4、开启事务管理</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.GulimallWareApplication</code>启动类上添加<code>@EnableTransactionManagement</code>注解，用于开启<code>事务管理</code>功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableTransactionManagement</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.1.4.png" alt="image-20220614160924438" tabindex="0" loading="lazy"><figcaption>image-20220614160924438</figcaption></figure><h3 id="_4-8-2、运行gulimall-ware-模块" tabindex="-1"><a class="header-anchor" href="#_4-8-2、运行gulimall-ware-模块" aria-hidden="true">#</a> 4.8.2、运行gulimall-ware\`模块</h3><h4 id="_1、将gulimall-ware模块添加到compond里" tabindex="-1"><a class="header-anchor" href="#_1、将gulimall-ware模块添加到compond里" aria-hidden="true">#</a> 1、将<code>gulimall-ware</code>模块添加到<code>Compond</code>里</h4><p>点击<code>Unnamed</code>，选择<code>Edit Configurations...</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.2.1.png" alt="image-20220614161220452" tabindex="0" loading="lazy"><figcaption>image-20220614161220452</figcaption></figure><p>点击右侧的<code>+</code>号，在弹出的选择框中选择<code>GulimallWareApplication</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.2.2.png" alt="image-20220614161055713" tabindex="0" loading="lazy"><figcaption>image-20220614161055713</figcaption></figure><p>可以看到，已经添加到名称为<code>Unnamed</code>的<code>compond</code>里了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.2.3.png" alt="image-20220614161149410" tabindex="0" loading="lazy"><figcaption>image-20220614161149410</figcaption></figure><h4 id="_2、启动gulimall-ware模块" tabindex="-1"><a class="header-anchor" href="#_2、启动gulimall-ware模块" aria-hidden="true">#</a> 2、启动<code>gulimall-ware</code>模块</h4><p>点击<code>IDEA</code>底部的<code>Services</code>，选择<code>GulimallWareApplication</code>,然后点击<code>Run</code>运行按钮</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.2.4.png" alt="image-20220614161339771" tabindex="0" loading="lazy"><figcaption>image-20220614161339771</figcaption></figure><p>可以看到<code>GulimallWareApplication</code>的控制台报错了,这里报错是因为加了<code>配置中心</code>的依赖，但是没有配置<code>配置中心地址</code>、<code>命名空间</code>等，这里可以先不用管</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.2.5.png" alt="image-20220614161420866" tabindex="0" loading="lazy"><figcaption>image-20220614161420866</figcaption></figure><p>打开<code>nacos</code>的前端页面，点击<code>服务管理</code>里的<code>服务列表</code>，可以看到<code>gulimall-ware</code>已经注册的<code>注册中心</code>里了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.2.6.png" alt="image-20220614161506499" tabindex="0" loading="lazy"><figcaption>image-20220614161506499</figcaption></figure><h3 id="_4-8-3、仓库管理打不开" tabindex="-1"><a class="header-anchor" href="#_4-8-3、仓库管理打不开" aria-hidden="true">#</a> 4.8.3、仓库管理打不开</h3><p>点击<code>库存系统</code>里的<code>仓库管理</code>，可以看到一直刷新不出来数据，打开控制台，点击失败的那个<code>list</code>的请求，右侧选择<code>Preview</code>,可以看到<code>path</code>的值为<code>/renren-fast/ware/wareinfo/list</code>，这表明网关路由给了<code>renren-fast</code>模块，而不是<code>gulimall-ware</code>模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.3.1.png" alt="image-20220614161724134" tabindex="0" loading="lazy"><figcaption>image-20220614161724134</figcaption></figure><p>在<code>gulimall-gateway</code>模块的<code>src/main/resources/application.yml</code>配置文件里添加配置，配置负载均衡到<code>gulimall-ware</code>模块的路径匹配规则(注意写到<code>admin_route</code>前面)</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> ware_route
  <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimall<span class="token punctuation">-</span>ware
  <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> Path=/api/ware/<span class="token important">**</span>
  <span class="token key atrule">filters</span><span class="token punctuation">:</span>
    <span class="token comment">#http://localhost:88/api/ware/wareinfo/list 变为 http://localhost:11000/ware/wareinfo/list</span>
    <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">&gt;</span>/<span class="token punctuation">?</span>.<span class="token important">*)</span><span class="token punctuation">,</span>/$\\<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.3.2.png" alt="image-20220614162009550" tabindex="0" loading="lazy"><figcaption>image-20220614162009550</figcaption></figure><p>重启<code>gulimall-ware</code>模块，刷新前端页面，可以看到请求已经成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.3.3.png" alt="image-20220614162150162" tabindex="0" loading="lazy"><figcaption>image-20220614162150162</figcaption></figure><h3 id="_4-8-4、添加测试数据" tabindex="-1"><a class="header-anchor" href="#_4-8-4、添加测试数据" aria-hidden="true">#</a> 4.8.4、添加测试数据</h3><h4 id="_1、添加一条测试数据" tabindex="-1"><a class="header-anchor" href="#_1、添加一条测试数据" aria-hidden="true">#</a> 1、添加一条测试数据</h4><p>在<code>库存系统</code>里的<code>仓库维护</code>里，点击<code>新建</code>，新建一条数据；<code>仓库名</code>为<code>1号仓库</code>，<code>仓库地址</code>为<code>北京</code>，<code>区域编码</code>为<code>124</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.4.1.1.png" alt="image-20220614162259394" tabindex="0" loading="lazy"><figcaption>image-20220614162259394</figcaption></figure><p>可以看到已经添加成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.4.1.2.png" alt="image-20220614162329695" tabindex="0" loading="lazy"><figcaption>image-20220614162329695</figcaption></figure><h4 id="_2、修改该测试数据的字段" tabindex="-1"><a class="header-anchor" href="#_2、修改该测试数据的字段" aria-hidden="true">#</a> 2、修改该测试数据的字段</h4><p>在<code>库存系统</code>里的<code>仓库维护</code>里，点击刚刚添加的数据右边的<code>修改</code>按钮，把<code>仓库地址</code>修改为<code>北京xx</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.4.2.1.png" alt="image-20220614162409669" tabindex="0" loading="lazy"><figcaption>image-20220614162409669</figcaption></figure><p>可以看到已经修改成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.4.2.2.png" alt="image-20220614162440788" tabindex="0" loading="lazy"><figcaption>image-20220614162440788</figcaption></figure><h4 id="_3、再添加一条测试数据" tabindex="-1"><a class="header-anchor" href="#_3、再添加一条测试数据" aria-hidden="true">#</a> 3、再添加一条测试数据</h4><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.4.3.png" alt="image-20220614162532455" tabindex="0" loading="lazy"><figcaption>image-20220614162532455</figcaption></figure><h3 id="_4-8-5、添加仓库维护查询功能" tabindex="-1"><a class="header-anchor" href="#_4-8-5、添加仓库维护查询功能" aria-hidden="true">#</a> 4.8.5、添加仓库维护查询功能</h3><h4 id="_1、查看接口-1" tabindex="-1"><a class="header-anchor" href="#_1、查看接口-1" aria-hidden="true">#</a> 1、查看接口</h4><p>先打开控制台，点击<code>Network</code>，清空数据，然后点击<code>库存系统</code>里的<code>仓库维护</code>里的查询按钮，查看发送请求url</p><p>url：http://localhost:88/api/ware/wareinfo/list?t=1655195182345&amp;page=1&amp;limit=10&amp;key=</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.1.png" alt="image-20220614162709471" tabindex="0" loading="lazy"><figcaption>image-20220614162709471</figcaption></figure><h4 id="_2、修改querypage方法" tabindex="-1"><a class="header-anchor" href="#_2、修改querypage方法" aria-hidden="true">#</a> 2、修改<code>queryPage</code>方法</h4><p>修改<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.WareInfoServiceImpl</code>类的<code>queryPage</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareInfoEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">WareInfoEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">WareInfoEntity</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">WareInfoEntity</span><span class="token operator">::</span><span class="token function">getAddress</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">WareInfoEntity</span><span class="token operator">::</span><span class="token function">getAreacode</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareInfoEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareInfoEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
            lambdaQueryWrapper
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.2.png" alt="image-20220614163435122" tabindex="0" loading="lazy"><figcaption>image-20220614163435122</figcaption></figure><h4 id="_3、修改日志级别为debug" tabindex="-1"><a class="header-anchor" href="#_3、修改日志级别为debug" aria-hidden="true">#</a> 3、修改日志级别为<code>debug</code></h4><p>在<code>gulimall-ware</code>模块的<code>src/main/resources/application.yml</code>配置文件里添加配置，修改<code>com.atguigu</code>包及其子包的输出日志的级别为<code>debug</code>级别</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.atguigu</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.3.png" alt="image-20220614163644567" tabindex="0" loading="lazy"><figcaption>image-20220614163644567</figcaption></figure><h4 id="_4、查看sql语句" tabindex="-1"><a class="header-anchor" href="#_4、查看sql语句" aria-hidden="true">#</a> 4、查看<code>sql</code>语句</h4><p>重启<code>gulimall-ware</code>模块，再次点击<code>库存系统</code>里的<code>仓库维护</code>里的查询按钮</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.4.1.png" alt="image-20220614163824115" tabindex="0" loading="lazy"><figcaption>image-20220614163824115</figcaption></figure><p>查看<code>GulimallWareApplication</code>模块的控制台输出的<code>sql</code>语句，可以看到<code>sql</code>语句正常</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT id,address,name,areacode FROM wms_ware_info WHERE (id = ? OR name LIKE ? OR address LIKE ? OR areacode LIKE ?) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.4.2.png" alt="image-20220614163937587" tabindex="0" loading="lazy"><figcaption>image-20220614163937587</figcaption></figure><h4 id="_5、分页还有问题" tabindex="-1"><a class="header-anchor" href="#_5、分页还有问题" aria-hidden="true">#</a> 5、分页还有问题</h4><p>复制<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.config.MyBatisConfig</code>类文件</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.5.1.png" alt="image-20220615210545460" tabindex="0" loading="lazy"><figcaption>image-20220615210545460</figcaption></figure><p>粘贴到<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.config</code>包下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.5.2.png" alt="image-20220615210644264" tabindex="0" loading="lazy"><figcaption>image-20220615210644264</figcaption></figure><p>剪切<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.GulimallWareApplication</code>启动类的<code>开启事务管理注解</code>和<code>Mapper包扫描注解</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.gulimall.ware.dao&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.5.3.png" alt="image-20220615210741669" tabindex="0" loading="lazy"><figcaption>image-20220615210741669</figcaption></figure><p>将刚刚粘贴的代码，替换到<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.config.MyBatisConfig</code>的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.gulimall.product.dao&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将其改为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.gulimall.ware.dao&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.5.4.png" alt="image-20220615210757239" tabindex="0" loading="lazy"><figcaption>image-20220615210757239</figcaption></figure><p>完整代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>product<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">PaginationInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableTransactionManagement</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/5/10
 * @Description:
 * @EnableTransactionManagement ：开启事务功能
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.atguigu.gulimall.product.dao&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 引入分页插件
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">PaginationInterceptor</span> <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">PaginationInterceptor</span> paginationInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置请求的页面大于最大页后操作，true调回到首页，false 继续请求 默认false</span>
        paginationInterceptor<span class="token punctuation">.</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置最大单页限制数量，默认500条，-1 不受限制</span>
        paginationInterceptor<span class="token punctuation">.</span><span class="token function">setLimit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> paginationInterceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、重新测试-3" tabindex="-1"><a class="header-anchor" href="#_6、重新测试-3" aria-hidden="true">#</a> 6、重新测试</h4><p>重启<code>gulimall-ware</code>模块，刷新前端界面</p><h5 id="_1、重新点击查询" tabindex="-1"><a class="header-anchor" href="#_1、重新点击查询" aria-hidden="true">#</a> 1、重新点击查询</h5><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.6.1.png" alt="image-20220619234648667" tabindex="0" loading="lazy"><figcaption>image-20220619234648667</figcaption></figure><h5 id="_2、查看sql语句" tabindex="-1"><a class="header-anchor" href="#_2、查看sql语句" aria-hidden="true">#</a> 2、查看<code>sql</code>语句</h5><p>查看<code>GulimallWareApplication</code>模块的控制台输出的<code>sql</code>语句，可以看到已近带上分页信息了</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT COUNT(1) FROM wms_ware_info WHERE (id = ? OR name LIKE ? OR address LIKE ? OR areacode LIKE ?) 

SELECT id,address,name,areacode FROM wms_ware_info WHERE (id = ? OR name LIKE ? OR address LIKE ? OR areacode LIKE ?) LIMIT ?,? 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.5.6.2.png" alt="image-20220619235039841" tabindex="0" loading="lazy"><figcaption>image-20220619235039841</figcaption></figure><h3 id="_4-8-6、商品库存" tabindex="-1"><a class="header-anchor" href="#_4-8-6、商品库存" aria-hidden="true">#</a> 4.8.6、商品库存</h3><h4 id="_1、查看接口-2" tabindex="-1"><a class="header-anchor" href="#_1、查看接口-2" aria-hidden="true">#</a> 1、查看接口</h4><p>先打开控制台，点击<code>Network</code>，清空数据，然后点击<code>库存系统/商品库存</code>，<code>仓库</code>选择<code>1号仓库</code>,<code>skuId</code>输入<code>1</code>，点击查询，可以看到请求的url为：http://localhost:88/api/ware/waresku/list?t=1655196148943&amp;page=1&amp;limit=10&amp;skuId=1&amp;wareId=1</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.1.1.png" alt="image-20220614164256829" tabindex="0" loading="lazy"><figcaption>image-20220614164256829</figcaption></figure><p>接口文档在<code>库存系统/02、查询商品库存</code>里: https://easydoc.net/s/78237135/ZUqEdvA4/hwXrEXBZ</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.1.2.png" alt="image-20220614164553204" tabindex="0" loading="lazy"><figcaption>image-20220614164553204</figcaption></figure><h4 id="_2、修改querypage方法-1" tabindex="-1"><a class="header-anchor" href="#_2、修改querypage方法-1" aria-hidden="true">#</a> 2、修改<code>queryPage</code>方法</h4><p>修改<code>gulimall-ware</code>模块里的<code>com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl</code>类的<code>queryPage</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span>
 *    page: 1,//当前页码
 *    limit: 10,//每页记录数
 *    sidx: &#39;id&#39;,//排序字段
 *    order: &#39;asc/desc&#39;,//排序方式
 *    wareId: 123,//仓库id
 *    skuId: 123//商品id
 * <span class="token punctuation">}</span>
 * <span class="token keyword">@param</span> <span class="token parameter">params</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareSkuEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> skuId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;skuId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>skuId<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">WareSkuEntity</span><span class="token operator">::</span><span class="token function">getSkuId</span><span class="token punctuation">,</span>skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> wareId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;wareId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>wareId<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">WareSkuEntity</span><span class="token operator">::</span><span class="token function">getWareId</span><span class="token punctuation">,</span>wareId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareSkuEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareSkuEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
            lambdaQueryWrapper
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.2.png" alt="image-20220614165103674" tabindex="0" loading="lazy"><figcaption>image-20220614165103674</figcaption></figure><h4 id="_3、重新发送请求" tabindex="-1"><a class="header-anchor" href="#_3、重新发送请求" aria-hidden="true">#</a> 3、重新发送请求</h4><p>重启<code>gulimall-ware</code>模块，刷新前端页面；打开控制台，点击<code>Network</code>，清空数据，然后点击<code>库存系统/商品库存</code>里的<code>查询</code></p><p>url：http://localhost:88/api/ware/waresku/list?t=1655196600891&amp;page=1&amp;limit=10&amp;skuId=1&amp;wareId=1</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.3.1.png" alt="image-20220614165026503" tabindex="0" loading="lazy"><figcaption>image-20220614165026503</figcaption></figure><p>查看<code>GulimallWareApplication</code>模块的控制台打印的<code>sql</code>语句</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT id,sku_name,ware_id,stock_locked,stock,sku_id FROM wms_ware_sku WHERE (sku_id = ? AND ware_id = ?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.3.2.png" alt="image-20220614165215365" tabindex="0" loading="lazy"><figcaption>image-20220614165215365</figcaption></figure><h4 id="_4、新增商品库存" tabindex="-1"><a class="header-anchor" href="#_4、新增商品库存" aria-hidden="true">#</a> 4、新增商品库存</h4><p>点击<code>库存系统/商品库存</code>里的<code>新增</code>按钮，新增一个商品库存</p><p><code>sku_id</code>输入<code>1</code>，<code>仓库</code>选择<code>1号仓库</code>，<code>库存数</code>输入<code>10</code>，<code>sku_name</code>输入<code>华为</code>，<code>锁定库存</code>输入<code>0</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.4.1.png" alt="image-20220614165300900" tabindex="0" loading="lazy"><figcaption>image-20220614165300900</figcaption></figure><p>可以看到已经新增成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.4.2.png" alt="image-20220614165328584" tabindex="0" loading="lazy"><figcaption>image-20220614165328584</figcaption></figure><h4 id="_5、修改商品库存" tabindex="-1"><a class="header-anchor" href="#_5、修改商品库存" aria-hidden="true">#</a> 5、修改商品库存</h4><p>点击刚刚添加的那行数据的<code>修改</code>按钮，把<code>库存数</code>修改为<code>100</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.5.1.png" alt="image-20220614165400506" tabindex="0" loading="lazy"><figcaption>image-20220614165400506</figcaption></figure><p>可以看到已经修改成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.5.2.png" alt="image-20220614165425437" tabindex="0" loading="lazy"><figcaption>image-20220614165425437</figcaption></figure><h4 id="_6、商品管理跳转到库存管理携带skuid" tabindex="-1"><a class="header-anchor" href="#_6、商品管理跳转到库存管理携带skuid" aria-hidden="true">#</a> 6、<code>商品管理</code>跳转到<code>库存管理</code>携带<code>skuId</code></h4><p>选择<code>商品系统/商品维护/商品管理</code>，点击一条数据的<code>更多</code>按钮，再<code>更多</code>里面选择<code>库存管理</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.6.1.png" alt="image-20220614165640587" tabindex="0" loading="lazy"><figcaption>image-20220614165640587</figcaption></figure><p>可以看到跳转到<code>库存管理</code>时已自动携带刚刚选择的那个<code>商品管理</code>的那条数据的<code>skuId</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.6.2.png" alt="image-20220614165720231" tabindex="0" loading="lazy"><figcaption>image-20220614165720231</figcaption></figure><h4 id="_7、采购需求添加数据" tabindex="-1"><a class="header-anchor" href="#_7、采购需求添加数据" aria-hidden="true">#</a> 7、<code>采购需求</code>添加数据</h4><p>在<code>库存系统/采购单维护/采购需求</code>里点击<code>新增</code>，<code>采购商品id</code>输入<code>3</code>，<code>采购数量</code>输入<code>2</code>，<code>仓库</code>选择<code>1号仓库</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.7.1.png" alt="image-20220614165934717" tabindex="0" loading="lazy"><figcaption>image-20220614165934717</figcaption></figure><p>在<code>库存系统/采购单维护/采购需求</code>里点击<code>新增</code>，<code>采购商品id</code>输入<code>1</code>，<code>采购数量</code>输入<code>10</code>，<code>仓库</code>选择<code>1号仓库</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.7.2.png" alt="image-20220614170034342" tabindex="0" loading="lazy"><figcaption>image-20220614170034342</figcaption></figure><h4 id="_8、合并整单" tabindex="-1"><a class="header-anchor" href="#_8、合并整单" aria-hidden="true">#</a> 8、合并整单</h4><p>选中表头中<code>id</code>左侧的可选按钮，以全选所有采购需求，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code>，稍后完成这个功能</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.6.8.png" alt="image-20220614170203075" tabindex="0" loading="lazy"><figcaption>image-20220614170203075</figcaption></figure><h3 id="_4-8-7、查询采购需求" tabindex="-1"><a class="header-anchor" href="#_4-8-7、查询采购需求" aria-hidden="true">#</a> 4.8.7、查询采购需求</h3><h4 id="_1、查看接口-3" tabindex="-1"><a class="header-anchor" href="#_1、查看接口-3" aria-hidden="true">#</a> 1、查看接口</h4><p>先打开控制台，点击<code>Network</code>，清空数据，然后点击<code>库存系统/采购单维护/采购需求</code>，在采购需求里，<code>仓库</code>选择<code>1号仓库</code>，<code>状态</code>选择<code>已分配</code>，点击查询，可以看到请求的url为</p><p>http://localhost:88/api/ware/purchasedetail/list?t=1655197388337&amp;page=1&amp;limit=10&amp;key=&amp;status=1&amp;wareId=1</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.7.1.1.png" alt="image-20220614170329492" tabindex="0" loading="lazy"><figcaption>image-20220614170329492</figcaption></figure><p>接口文档在<code>库存系统/03.查询采购需求</code>里: https://easydoc.net/s/78237135/ZUqEdvA4/Ss4zsV7R</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.7.1.2.png" alt="image-20220614170424163" tabindex="0" loading="lazy"><figcaption>image-20220614170424163</figcaption></figure><h4 id="_2、修改querypage方法-2" tabindex="-1"><a class="header-anchor" href="#_2、修改querypage方法-2" aria-hidden="true">#</a> 2、修改<code>queryPage</code>方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseDetailServiceImpl</code>类里修改<code>queryPage</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token punctuation">{</span>
 *    page: 1,//当前页码
 *    limit: 10,//每页记录数
 *    sidx: &#39;id&#39;,//排序字段
 *    order: &#39;asc/desc&#39;,//排序方式
 *    key: &#39;华为&#39;,//检索关键字
 *    status: 0,//状态
 *    wareId: 1,//仓库id
 * <span class="token punctuation">}</span>
 * <span class="token keyword">@param</span> <span class="token parameter">params</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>wrapper <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailEntity</span><span class="token operator">::</span><span class="token function">getSkuId</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailEntity</span><span class="token operator">::</span><span class="token function">getPurchaseId</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> status <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">PurchaseDetailEntity</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> wareId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;wareId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>wareId<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">PurchaseDetailEntity</span><span class="token operator">::</span><span class="token function">getWareId</span><span class="token punctuation">,</span>wareId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
            lambdaQueryWrapper
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.7.2.png" alt="image-20220614183804323" tabindex="0" loading="lazy"><figcaption>image-20220614183804323</figcaption></figure><h4 id="_3、测试-4" tabindex="-1"><a class="header-anchor" href="#_3、测试-4" aria-hidden="true">#</a> 3、测试</h4><p>重启<code>gulimall-ware</code>模块，点击<code>库存系统/采购单维护/采购需求</code>，在采购需求里，<code>仓库</code>选择<code>1号仓库</code>，<code>状态</code>选择<code>已分配</code>，点击查询</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.7.3.1.png" alt="image-20220614184255818" tabindex="0" loading="lazy"><figcaption>image-20220614184255818</figcaption></figure><p>查看<code>GulimallWareApplication</code>模块的控制台打印的<code>sql</code>语句</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT id,ware_id,purchase_id,sku_price,sku_num,sku_id,status FROM wms_purchase_detail WHERE (( (sku_id = ? OR purchase_id = ?) ) AND status = ? AND ware_id = ?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.7.3.2.png" alt="image-20220614184415655" tabindex="0" loading="lazy"><figcaption>image-20220614184415655</figcaption></figure><h3 id="_4-8-8、合并采购需求-1-查询采购单" tabindex="-1"><a class="header-anchor" href="#_4-8-8、合并采购需求-1-查询采购单" aria-hidden="true">#</a> 4.8.8、合并采购需求(1.查询<code>采购单</code>)</h3><h4 id="_1、采购简要流程" tabindex="-1"><a class="header-anchor" href="#_1、采购简要流程" aria-hidden="true">#</a> 1、采购简要流程</h4><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.1.png" alt="image-20220614184722625" style="zoom:67%;"><h4 id="_2、新增采购单" tabindex="-1"><a class="header-anchor" href="#_2、新增采购单" aria-hidden="true">#</a> 2、新增采购单</h4><p>在<code>库存系统/采购单维护/采购单</code>里，点击<code>新增</code>，<code>优先级</code>输入<code>1</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.2.png" alt="image-20220614184928961" tabindex="0" loading="lazy"><figcaption>image-20220614184928961</figcaption></figure><h4 id="_3、查询采购单接口" tabindex="-1"><a class="header-anchor" href="#_3、查询采购单接口" aria-hidden="true">#</a> 3、查询<code>采购单</code>接口</h4><p>先打开控制台，点击<code>Network</code>，清空数据；选中表头中<code>id</code>左侧的可选按钮，以全选所有采购需求，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.3.1.png" alt="image-20220614185015067" tabindex="0" loading="lazy"><figcaption>image-20220614185015067</figcaption></figure><p>在<code>合并到整单</code>的对话框中需要查询<code>新建</code>或<code>已分配</code>的<code>采购单</code>，可以看到url为</p><p>http://localhost:88/api/ware/purchase/unreceive/list?t=1655203843040</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.3.2.png" alt="image-20220614185105320" tabindex="0" loading="lazy"><figcaption>image-20220614185105320</figcaption></figure><p><code>新建</code>或<code>已分配</code>的<code>采购单</code>在<code>库存系统/采购单维护/采购单</code>里的<code>状态</code>中可以看到</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.3.3.png" alt="image-20220614185229357" tabindex="0" loading="lazy"><figcaption>image-20220614185229357</figcaption></figure><p>接口文档在<code>库存系统/05、查询未领取的采购单</code>里：https://easydoc.net/s/78237135/ZUqEdvA4/hI12DNrH</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.3.4.png" alt="image-20220614185453482" tabindex="0" loading="lazy"><figcaption>image-20220614185453482</figcaption></figure><h4 id="_4、添加unreceivelist方法" tabindex="-1"><a class="header-anchor" href="#_4、添加unreceivelist方法" aria-hidden="true">#</a> 4、添加<code>unreceiveList</code>方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.controller.PurchaseController</code>里添加<code>unreceiveList</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 分页查询未领取的采购单
 */</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/unreceive/list&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">unreceiveList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">PageUtils</span> page <span class="token operator">=</span> purchaseService<span class="token punctuation">.</span><span class="token function">queryPageUnreceivePurchase</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;page&quot;</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.4.png" alt="image-20220614190152959" tabindex="0" loading="lazy"><figcaption>image-20220614190152959</figcaption></figure><h4 id="_5、添加querypageunreceivepurchase抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、添加querypageunreceivepurchase抽象方法" aria-hidden="true">#</a> 5、添加<code>queryPageUnreceivePurchase</code>抽象方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.PurchaseService</code>接口里添加<code>queryPageUnreceivePurchase</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageUtils</span> <span class="token function">queryPageUnreceivePurchase</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.5.png" alt="image-20220614190254861" tabindex="0" loading="lazy"><figcaption>image-20220614190254861</figcaption></figure><h4 id="_6、实现querypageunreceivepurchase抽象方法" tabindex="-1"><a class="header-anchor" href="#_6、实现querypageunreceivepurchase抽象方法" aria-hidden="true">#</a> 6、实现<code>queryPageUnreceivePurchase</code>抽象方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>里实现未实现的<code>queryPageUnreceivePurchase</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPageUnreceivePurchase</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//查询状态为0(新建) 或 1(已分配) 的采购单</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">PurchaseEntity</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">PurchaseEntity</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseEntity</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>
            lambdaQueryWrapper
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.6.png" alt="image-20220614190912851" tabindex="0" loading="lazy"><figcaption>image-20220614190912851</figcaption></figure><h4 id="_7、测试-5" tabindex="-1"><a class="header-anchor" href="#_7、测试-5" aria-hidden="true">#</a> 7、测试</h4><p>点击以前创建<code>库存系统/采购单维护/采购单</code>里的<code>采购单id</code>为<code>1</code>的<code>操作</code>里的<code>分配</code>按钮，在弹出的<code>分配采购人员</code>里选择<code>admin</code>，然后点击确定，即可分配采购人员</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.7.1.png" alt="image-20220614191038467" tabindex="0" loading="lazy"><figcaption>image-20220614191038467</figcaption></figure><p>在<code>库存系统/采购单维护/采购需求</code>里，选中表头中<code>id</code>左侧的可选按钮，以全选所有采购需求，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.7.2.png" alt="image-20220614191329442" tabindex="0" loading="lazy"><figcaption>image-20220614191329442</figcaption></figure><p>然后就可以看到以前创建的<code>库存系统/采购单维护/采购单</code>里的采购单状态为<code>新建</code>或<code>已分配</code>的<code>采购单</code>，如果分配了采购人员，就可以在下拉列表中的<code>采购单id</code>的右边显示对应的分配的<code>采购人员姓名</code>和<code>采购人员电话</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.7.3.png" alt="image-20220614191349478" tabindex="0" loading="lazy"><figcaption>image-20220614191349478</figcaption></figure><h4 id="_8、修改分配的采购人员" tabindex="-1"><a class="header-anchor" href="#_8、修改分配的采购人员" aria-hidden="true">#</a> 8、修改分配的采购人员</h4><p>在<code>系统管理/管理员列表</code>里新建管理员；<code>用户名</code>选择<code>leifengyang</code>，<code>密码</code>输入<code>123456</code>，<code>确认密码</code>里输入<code>123456</code>，<code>邮箱</code>输入<code>aaa@qq.com</code>，<code>手机号</code>输入<code>12345678912</code>，<code>状态</code>默认<code>正常</code>不用管，然后点击<code>确定</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.8.1.png" alt="image-20220614191547642" tabindex="0" loading="lazy"><figcaption>image-20220614191547642</figcaption></figure><p>然后点击<code>库存系统/采购单维护/采购单</code>里的上次创建的<code>采购单id</code>为<code>1</code>的那行数据的<code>操作</code>里的<code>分配</code>按钮，在弹出的<code>分配采购人员</code>里就可以看到刚刚<code>添加管理员</code>里添加的管理员了，这些管理员就是可以分配的采购人员</p><p>选择刚刚创建的<code>leifengyang</code>，然后点击<code>确定</code>按钮</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.8.2.png" alt="image-20220614191715258" tabindex="0" loading="lazy"><figcaption>image-20220614191715258</figcaption></figure><p>这样上次创建的<code>采购单id</code>为<code>1</code>的那行数据的<code>采购人名</code>就变成了<code>leifengyang</code>，联系电话就变为了<code>12345678912</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.8.3.png" alt="image-20220614191740042" tabindex="0" loading="lazy"><figcaption>image-20220614191740042</figcaption></figure><p>选中表头中<code>id</code>左侧的可选按钮，以全选所有采购需求，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code>，然后就可以看到<code>采购单id</code>为<code>1</code>的<code>采购人员姓名</code>已经修改为<code>leifengyang</code>了，联系电话已经被修改为<code>12345678912</code>了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.8.8.4.png" alt="image-20220614191939490" tabindex="0" loading="lazy"><figcaption>image-20220614191939490</figcaption></figure><h3 id="_4-8-9、合并采购需求-2-完成合并" tabindex="-1"><a class="header-anchor" href="#_4-8-9、合并采购需求-2-完成合并" aria-hidden="true">#</a> 4.8.9、合并采购需求(2.完成合并)</h3><h4 id="_1、查看接口-4" tabindex="-1"><a class="header-anchor" href="#_1、查看接口-4" aria-hidden="true">#</a> 1、查看接口</h4><h5 id="_1、选择想要合并的采购单id" tabindex="-1"><a class="header-anchor" href="#_1、选择想要合并的采购单id" aria-hidden="true">#</a> 1、选择想要合并的采购单id</h5><p>选择<code>1 leifengyang: 12345678912</code>后 ，先打开控制台，点击<code>Network</code>，清空数据，然后点击确定</p><p>可以看到请求的url为： http://localhost:88/api/ware/purchase/merge</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.1.1.1.png" alt="image-20220614192020545" tabindex="0" loading="lazy"><figcaption>image-20220614192020545</figcaption></figure><p>发送到<code>json</code>数据为<code>{purchaseId: 1, items: {1, 2}}</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.1.1.2.png" alt="image-20220614192448552" tabindex="0" loading="lazy"><figcaption>image-20220614192448552</figcaption></figure><p>接口文档在<code>库存系统/04、合并采购需求</code>里：https://easydoc.net/s/78237135/ZUqEdvA4/cUlv9QvK</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.1.1.3.png" alt="image-20220614192149087" tabindex="0" loading="lazy"><figcaption>image-20220614192149087</figcaption></figure><h5 id="_2、不选择想要合并的采购单id" tabindex="-1"><a class="header-anchor" href="#_2、不选择想要合并的采购单id" aria-hidden="true">#</a> 2、不选择想要合并的采购单id</h5><p>在<code>合并到整单</code>里可以不选择想要合并的采购单，直接点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.1.2.1.png" alt="image-20220614192556641" tabindex="0" loading="lazy"><figcaption>image-20220614192556641</figcaption></figure><p>在弹出的<code>提示</code>对话框里点击<code>确定</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.1.2.2.png" alt="image-20220614192615039" tabindex="0" loading="lazy"><figcaption>image-20220614192615039</figcaption></figure><p>这时提交的<code>json</code>数据，没有<code>purchaseId</code>(采购单id)，只有<code>item</code>,这时需要自动创建一个新的采购单</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.1.2.3.png" alt="image-20220614192702323" tabindex="0" loading="lazy"><figcaption>image-20220614192702323</figcaption></figure><h4 id="_2、新建mergevo类" tabindex="-1"><a class="header-anchor" href="#_2、新建mergevo类" aria-hidden="true">#</a> 2、新建<code>MergeVo</code>类</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware</code>包下，新建<code>vo</code>文件夹，在刚刚新建的<code>com.atguigu.gulimall.ware.vo</code>文件夹里新建<code>MergeVo</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>ware<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/6/14
 * @Description:
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeVo</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 采购单id
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> purchaseId<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 要合并的采购项集合
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.2.png" alt="image-20220614193510395" tabindex="0" loading="lazy"><figcaption>image-20220614193510395</figcaption></figure><h4 id="_3、添加merge方法" tabindex="-1"><a class="header-anchor" href="#_3、添加merge方法" aria-hidden="true">#</a> 3、添加<code>merge</code>方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.controller.PurchaseController</code>类里添加<code>merge</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 合并采购需求
 * <span class="token keyword">@param</span> <span class="token parameter">mergeVo</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/merge&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">MergeVo</span> mergeVo<span class="token punctuation">)</span><span class="token punctuation">{</span>
    purchaseService<span class="token punctuation">.</span><span class="token function">mergePurchase</span><span class="token punctuation">(</span>mergeVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.3.png" alt="image-20220614193952336" tabindex="0" loading="lazy"><figcaption>image-20220614193952336</figcaption></figure><h4 id="_4、添加mergepurchase抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加mergepurchase抽象方法" aria-hidden="true">#</a> 4、添加<code>mergePurchase</code>抽象方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.PurchaseService</code>接口里添加<code>mergePurchase</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">mergePurchase</span><span class="token punctuation">(</span><span class="token class-name">MergeVo</span> mergeVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.4.png" alt="image-20220614194027812" tabindex="0" loading="lazy"><figcaption>image-20220614194027812</figcaption></figure><h4 id="_5、调整常量类的代码结构" tabindex="-1"><a class="header-anchor" href="#_5、调整常量类的代码结构" aria-hidden="true">#</a> 5、调整常量类的代码结构</h4><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.constant</code>包下新建<code>product</code>文件夹,把<code>ProductConstant</code>枚举类移动到<code>product</code>文件夹下</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.5.1.png" alt="image-20220614200450052" tabindex="0" loading="lazy"><figcaption>image-20220614200450052</figcaption></figure><p>选中<code>ProductConstant</code>枚举类，右键选择<code>Refactor</code>(重构)，然后选择<code>Rename...</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.5.2.png" alt="image-20220614200633959" tabindex="0" loading="lazy"><figcaption>image-20220614200633959</figcaption></figure><p>在弹出的框内，修改名字为<code>AttrEnum</code>，然后点击<code>Refactor</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.5.3.png" alt="image-20220614200617454" tabindex="0" loading="lazy"><figcaption>image-20220614200617454</figcaption></figure><h4 id="_6、新建采购商品枚举类" tabindex="-1"><a class="header-anchor" href="#_6、新建采购商品枚举类" aria-hidden="true">#</a> 6、新建采购商品枚举类</h4><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.constant</code>包下新建<code>ware</code>文件夹，在<code>com.atguigu.common.constant.ware</code>文件夹下新建<code>PurchaseStatusEnum</code>(采购商品的采购单完成状态)枚举类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constant<span class="token punctuation">.</span>ware</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/6/14
 * @Description:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PurchaseStatusEnum</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 刚新建状态
     */</span>
    <span class="token function">CREATED</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;新建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 已分配给采购员
     */</span>
    <span class="token function">ASSIGNED</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;已分配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 采购员已领取
     */</span>
    <span class="token function">RECEIVE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;已领取&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 采购员已完成采购
     */</span>
    <span class="token function">FINISHED</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;已完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 采购异常
     */</span>
    <span class="token function">HASERROR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&quot;有异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>

    <span class="token class-name">PurchaseStatusEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.6.1.png" alt="image-20220614202825301" tabindex="0" loading="lazy"><figcaption>image-20220614202825301</figcaption></figure><p>在<code>gulimall-common</code>模块的<code>com.atguigu.common.constant.ware</code>包下新建<code>PurchaseStatusEnum</code>(采购单具体采购的商品的完成状态)枚举类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constant<span class="token punctuation">.</span>ware</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/6/14
 * @Description:
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PurchaseDetailStatusEnum</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 刚新建状态
     */</span>
    <span class="token function">CREATED</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;新建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 已分配给采购员
     */</span>
    <span class="token function">ASSIGNED</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;已分配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 采购员正在采购
     */</span>
    <span class="token function">BUYING</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;正在采购&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 采购员已完成采购
     */</span>
    <span class="token function">FINISHED</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;已完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 采购员采购失败
     */</span>
    <span class="token function">HASERROR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&quot;采购失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>

    <span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> status<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.6.2.png" alt="image-20220614203245139" tabindex="0" loading="lazy"><figcaption>image-20220614203245139</figcaption></figure><h4 id="_7、实现mergepurchase抽象方法" tabindex="-1"><a class="header-anchor" href="#_7、实现mergepurchase抽象方法" aria-hidden="true">#</a> 7、实现<code>mergePurchase</code>抽象方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类里修改空的<code>mergePurchase</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergePurchase</span><span class="token punctuation">(</span><span class="token class-name">MergeVo</span> mergeVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Long</span> purchaseId <span class="token operator">=</span> mergeVo<span class="token punctuation">.</span><span class="token function">getPurchaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>purchaseId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">PurchaseEntity</span> purchaseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseStatusEnum</span><span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>purchaseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseId <span class="token operator">=</span> purchaseEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> mergeVo<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> finalPurchaseId <span class="token operator">=</span> purchaseId<span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> purchaseDetailEntities <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setPurchaseId</span><span class="token punctuation">(</span>finalPurchaseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">ASSIGNED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> purchaseDetailEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    purchaseDetailService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>purchaseDetailEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.7.png" alt="image-20220614204427993" tabindex="0" loading="lazy"><figcaption>image-20220614204427993</figcaption></figure><h4 id="_8、在purchaseentity类添加注解" tabindex="-1"><a class="header-anchor" href="#_8、在purchaseentity类添加注解" aria-hidden="true">#</a> 8、在<code>PurchaseEntity</code>类添加注解</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.entity.PurchaseEntity</code>类里的<code>createTime</code>字段上添加<code>@TableField(fill = FieldFill.INSERT)</code>注解，当在<code>插入</code>时向该字段插入当前系统时间；在<code>updateTime</code>字段上添加<code>@TableField(fill = FieldFill.INSERT_UPDATE)</code>注解，当在<code>插入</code>或<code>更新</code>时向该字段插入或更新为当前系统时间</p><p><a href="code/4.8.9.8.PurchaseEntity.java">点击查看<code>PurchaseEntity</code>类完整代码</a></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.8.png" alt="image-20220614204518437" tabindex="0" loading="lazy"><figcaption>image-20220614204518437</figcaption></figure><h4 id="_9、设置时间格式和时区" tabindex="-1"><a class="header-anchor" href="#_9、设置时间格式和时区" aria-hidden="true">#</a> 9、设置<code>时间格式</code>和<code>时区</code></h4><p>在<code>gulimall-ware</code>模块的<code>src/main/resources/application.yml</code>配置文件里设置<code>时间格式</code>和<code>时区</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">-</span>mm<span class="token punctuation">-</span>ss
    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.9.png" alt="image-20220614205149464" tabindex="0" loading="lazy"><figcaption>image-20220614205149464</figcaption></figure><h4 id="_10、修改mergepurchase方法" tabindex="-1"><a class="header-anchor" href="#_10、修改mergepurchase方法" aria-hidden="true">#</a> 10、修改<code>mergePurchase</code>方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类里修改<code>mergePurchase</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">PurchaseDetailService</span> purchaseDetailService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergePurchase</span><span class="token punctuation">(</span><span class="token class-name">MergeVo</span> mergeVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Long</span> purchaseId <span class="token operator">=</span> mergeVo<span class="token punctuation">.</span><span class="token function">getPurchaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>purchaseId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">PurchaseEntity</span> purchaseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseStatusEnum</span><span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//自动更新PurchaseEntity的更新时间</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>purchaseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseId <span class="token operator">=</span> purchaseEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//更新PurchaseEntity(采购单)的更新时间</span>
        <span class="token class-name">PurchaseEntity</span> purchaseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>purchaseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseEntity<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>purchaseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> mergeVo<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> finalPurchaseId <span class="token operator">=</span> purchaseId<span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> purchaseDetailEntities <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setPurchaseId</span><span class="token punctuation">(</span>finalPurchaseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">ASSIGNED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> purchaseDetailEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//合并采购需求，分派到指定采购单</span>
    purchaseDetailService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>purchaseDetailEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.10.png" alt="image-20220614210320804" tabindex="0" loading="lazy"><figcaption>image-20220614210320804</figcaption></figure><h4 id="_11、测试一" tabindex="-1"><a class="header-anchor" href="#_11、测试一" aria-hidden="true">#</a> 11、测试一</h4><p>重启<code>gulimall-ware</code>模块,点击<code>库存系统/采购单维护/采购需求</code>，选中表头中<code>id</code>左侧的可选按钮，以全选所有采购需求，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code>,然后选择<code>1 leifengyang: 12345678912</code>后 ，点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.11.1.png" alt="image-20220614210524845" tabindex="0" loading="lazy"><figcaption>image-20220614210524845</figcaption></figure><p>可以看到，刚刚全选的两个<code>采购需求</code>的<code>采购单id</code>和<code>状态</code>都已经更新了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.11.2.png" alt="image-20220614210635314" tabindex="0" loading="lazy"><figcaption>image-20220614210635314</figcaption></figure><p>点击\`\`库存系统/采购单维护/采购\`单已经更新了，设置时区后，更新的时间也是系统时间了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.11.3.png" alt="image-20220614211030868" tabindex="0" loading="lazy"><figcaption>image-20220614211030868</figcaption></figure><h4 id="_12、测试二" tabindex="-1"><a class="header-anchor" href="#_12、测试二" aria-hidden="true">#</a> 12、测试二</h4><p>在<code>库存系统/采购单维护/采购需求</code>里，点击<code>新增</code>，在<code>采购商品id</code>里输入<code>2</code>，<code>采购数量</code>输入<code>20</code>，<code>仓库</code>选择<code>2号仓库</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.12.1.png" alt="image-20220614211131709" tabindex="0" loading="lazy"><figcaption>image-20220614211131709</figcaption></figure><p>在<code>库存系统/采购单维护/采购需求</code>里，点击<code>新建</code>,在<code>新增</code>对话框里，<code>采购商品id</code>输入<code>2</code>，<code>采购数量</code>输入<code>20</code>，<code>仓库</code>选择<code>2号仓库</code></p><p>然后选中刚刚创建的<code>id</code>为<code>3</code>的采购需求的左侧按钮，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.12.2.png" alt="image-20220614211230326" tabindex="0" loading="lazy"><figcaption>image-20220614211230326</figcaption></figure><p>在<code>合并到整单</code>里可以不选择想要合并的采购单，直接点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.12.3.png" alt="image-20220614211309852" tabindex="0" loading="lazy"><figcaption>image-20220614211309852</figcaption></figure><p>在弹出的<code>提示</code>对话框里点击<code>确定</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.12.4.png" alt="image-20220614211325353" tabindex="0" loading="lazy"><figcaption>image-20220614211325353</figcaption></figure><p>可以看到在<code>库存系统/采购单维护/采购需求</code>里，刚刚创建的<code>id</code>为<code>3</code>的<code>采购需求</code>的<code>状态</code>已变为<code>已分配</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.12.5.png" alt="image-20220614211354619" tabindex="0" loading="lazy"><figcaption>image-20220614211354619</figcaption></figure><p>在<code>库存系统/采购单维护/采购单</code>里，可以看到已自动创建了一个<code>采购单</code>，这个采购单的<code>状态</code>为<code>新建</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.12.6.png" alt="image-20220614211426208" tabindex="0" loading="lazy"><figcaption>image-20220614211426208</figcaption></figure><p>点击这个<code>采购单</code>的<code>操作</code>里的<code>分配</code>按钮，在<code>分配采购人员</code>的对话框中选择<code>admin</code>，然后点击<code>确定</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.12.7.png" alt="image-20220614211502224" tabindex="0" loading="lazy"><figcaption>image-20220614211502224</figcaption></figure><h4 id="_13、修改没有自动创建时间的bug" tabindex="-1"><a class="header-anchor" href="#_13、修改没有自动创建时间的bug" aria-hidden="true">#</a> 13、修改没有自动创建时间的bug</h4><p>可以看到刚刚自动创建的那个<code>采购单</code>的<code>创建时间</code>和<code>更新时间</code>没有自动创建</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.13.1.png" alt="image-20220614211426208" tabindex="0" loading="lazy"><figcaption>image-20220614211426208</figcaption></figure><p>调试后，发现<code>create_time</code>和<code>update_time</code>传入的参数都为<code>null</code></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>INSERT INTO wms_ purchase ( create_time，update_time，status ) VALUES ( ?， ? ，? )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.13.2.png" alt="image-20220614211753133" tabindex="0" loading="lazy"><figcaption>image-20220614211753133</figcaption></figure><p>原因是没有设置<code>mybatisPlus</code>的属性自动填充配置</p><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware</code>包里新建<code>config</code>文件夹，</p><p>复制<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.config.MyMetaObjectHandler</code>类，粘贴到<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.config</code>包里</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>ware<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">MetaObjectHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span><span class="token class-name">MetaObject</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/6/14
 * @Description:
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;start insert fill...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;createTime&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;updateTime&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;start update fill...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">&quot;updateTime&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.13.3.png" alt="image-20220614212341199" tabindex="0" loading="lazy"><figcaption>image-20220614212341199</figcaption></figure><h4 id="_14、重新测试" tabindex="-1"><a class="header-anchor" href="#_14、重新测试" aria-hidden="true">#</a> 14、重新测试</h4><p>重启<code>gulimall-ware</code>模块，刷新前端界面，在<code>库存系统/采购单维护/采购单</code>里，点击<code>新增</code>，在弹出的<code>新增</code>对话框里的<code>优先级</code>里输入<code>3</code>，然后点击<code>确定</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.14.1.png" alt="image-20220614212524728" tabindex="0" loading="lazy"><figcaption>image-20220614212524728</figcaption></figure><p>可以看到<code>create_time</code>和<code>update_time</code>都已经成功插入进去了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.9.14.2.png" alt="image-20220614212551163" tabindex="0" loading="lazy"><figcaption>image-20220614212551163</figcaption></figure><h3 id="_4-8-10、领取采购单" tabindex="-1"><a class="header-anchor" href="#_4-8-10、领取采购单" aria-hidden="true">#</a> 4.8.10、领取采购单</h3><h4 id="_1、查看接口-5" tabindex="-1"><a class="header-anchor" href="#_1、查看接口-5" aria-hidden="true">#</a> 1、查看接口</h4><p><code>领取采购单</code>为采购员使用app领取，不属于后台管理系统，所以可以使用<code>Postman</code>模拟采购员<code>领取采购单</code></p><p>接口文档在<code>库存系统/06、领取采购单</code>里: https://easydoc.net/s/78237135/ZUqEdvA4/vXMBBgw1</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.1.1.png" alt="image-20220614213006277" tabindex="0" loading="lazy"><figcaption>image-20220614213006277</figcaption></figure><p>在<code>Postman</code>里新建一个请求，url输入<code>http://localhost:88/api/ware/purchase/received</code>,请求方式选择<code>POST</code>，然后按<code>ctrl+s</code>保存</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.1.2.png" alt="image-20220614213232724" tabindex="0" loading="lazy"><figcaption>image-20220614213232724</figcaption></figure><p>在弹出的<code>SAVE REQUEST</code>对话框里，<code>Request name</code>里输入<code>领取采购单</code>，然后点击下面的<code>Create a collection</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.1.3.png" alt="image-20220614213431165" tabindex="0" loading="lazy"><figcaption>image-20220614213431165</figcaption></figure><p>在<code>SAVE REQUEST</code>对话框里的<code>Save to</code>里输入<code>采购人员app</code>，点击右侧的<code>Create</code>按钮</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.1.4.png" alt="image-20220614213539031" tabindex="0" loading="lazy"><figcaption>image-20220614213539031</figcaption></figure><p>然后点击<code>Save</code>按钮</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.1.5.png" alt="image-20220614213552521" tabindex="0" loading="lazy"><figcaption>image-20220614213552521</figcaption></figure><p>在刚刚新建的请求中，点击<code>Body</code>、然后点击<code>raw</code>，在<code>GraphQL</code>右侧的下拉列表中选择<code>JSON</code>，然后在下方输入框中输入<code>[3,4]</code>，最后点击<code>Send</code>(输入<code>[3,4]</code>表示要领取id为<code>3</code>和<code>4</code>的采购单)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.1.6.png" alt="image-20220615104015989" tabindex="0" loading="lazy"><figcaption>image-20220615104015989</figcaption></figure><h4 id="_2、创建received方法" tabindex="-1"><a class="header-anchor" href="#_2、创建received方法" aria-hidden="true">#</a> 2、创建<code>received</code>方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.controller.PurchaseController</code>类中创建<code>received</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 采购员领取采购单
 * <span class="token keyword">@param</span> <span class="token parameter">purchaseIds</span> 采购单id
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/received&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">received</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> purchaseIds<span class="token punctuation">)</span><span class="token punctuation">{</span>
    purchaseService<span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span>purchaseIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.2.png" alt="image-20220615083311741" tabindex="0" loading="lazy"><figcaption>image-20220615083311741</figcaption></figure><h4 id="_3、新建received抽象方法" tabindex="-1"><a class="header-anchor" href="#_3、新建received抽象方法" aria-hidden="true">#</a> 3、新建<code>received</code>抽象方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.PurchaseService</code>接口里新建<code>received</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">received</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> purchaseIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.3.png" alt="image-20220615083427579" tabindex="0" loading="lazy"><figcaption>image-20220615083427579</figcaption></figure><h4 id="_4、实现received抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、实现received抽象方法" aria-hidden="true">#</a> 4、实现<code>received</code>抽象方法</h4><p>需要完成的效果为：</p><p>1、首先需要修改刚刚领取的所有采购单状态，把采购单状态修改为<code>已领取</code></p><p>(这里我把<code>采购单id</code>为3的采购单分配给<code>admin</code>用户了，点击<code>采购单id</code>为3的右侧的分配，选择<code>admin</code>即可)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.4.1.png" alt="image-20220615083759255" tabindex="0" loading="lazy"><figcaption>image-20220615083759255</figcaption></figure><p>2、这些采购单对应的所有采购需求都要改为<code>正在采购</code></p><p>(我先把id为3的采购需求的<code>采购单id</code>修改为3了，选中该数据左侧的按钮，点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code>,在弹出的<code>分配采购人员</code>里选择<code>admin</code>，然后点击<code>确定</code>按钮)</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.4.2.png" alt="image-20220615083915584" tabindex="0" loading="lazy"><figcaption>image-20220615083915584</figcaption></figure><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类里实现未实现的<code>received</code>抽象方法</p><p>在<code>streat</code>的<code>map</code>那，IDEA提示建议使用<code>peek</code>来代替<code>map</code>；<code>java.util.Stream.peek()</code>主要用于支持调试。如果流管道不包含终端操作，则不会使用任何元素，并且根本不会调用peek()操作。所以最好不要使用<code>peek</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 采购员领取采购单
 *
 * <span class="token keyword">@param</span> <span class="token parameter">purchaseIds</span> 采购单id
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">received</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> purchaseIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//1、确认当前采购单的id是&quot;新建&quot;或者是&quot;已分配&quot;状态</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseEntity</span><span class="token punctuation">&gt;</span></span> purchaseQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    purchaseQueryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>wrapper <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">PurchaseEntity</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span> <span class="token class-name">PurchaseStatusEnum</span><span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">PurchaseEntity</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span> <span class="token class-name">PurchaseStatusEnum</span><span class="token punctuation">.</span><span class="token constant">ASSIGNED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">PurchaseEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> purchaseIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseEntity</span><span class="token punctuation">&gt;</span></span> purchaseEntities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>purchaseQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2、改变采购单状态(已使用注解在更新字段时自动更新updateTime)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseEntity</span><span class="token punctuation">&gt;</span></span> newPurchaseEntities <span class="token operator">=</span> purchaseEntities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>purchaseEntity <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        purchaseEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseStatusEnum</span><span class="token punctuation">.</span><span class="token constant">RECEIVE</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> purchaseEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>newPurchaseEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3、改变采购项状态</span>
    <span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">BUYING</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    purchaseDetailService<span class="token punctuation">.</span><span class="token function">updatePurchaseDetailBatchByPurchaseId</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">,</span>newPurchaseEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.4.3.png" alt="image-20220615095031917" tabindex="0" loading="lazy"><figcaption>image-20220615095031917</figcaption></figure><h4 id="_5、新建批量修改采购需求抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、新建批量修改采购需求抽象方法" aria-hidden="true">#</a> 5、新建批量修改采购需求抽象方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.PurchaseDetailService</code>接口里新建<code>updatePurchaseDetailBatchByPurchaseId</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">updatePurchaseDetailBatchByPurchaseId</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseEntity</span><span class="token punctuation">&gt;</span></span> purchaseEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.5.png" alt="image-20220615100049272" tabindex="0" loading="lazy"><figcaption>image-20220615100049272</figcaption></figure><h4 id="_6、实现批量修改采购需求抽象方法" tabindex="-1"><a class="header-anchor" href="#_6、实现批量修改采购需求抽象方法" aria-hidden="true">#</a> 6、实现批量修改采购需求抽象方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseDetailServiceImpl</code>类里实现未实现的<code>updatePurchaseDetailBatchByPurchaseId</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.6.png" alt="image-20220615100252009" tabindex="0" loading="lazy"><figcaption>image-20220615100252009</figcaption></figure><h4 id="_7、给这些具体方法添加事务注解" tabindex="-1"><a class="header-anchor" href="#_7、给这些具体方法添加事务注解" aria-hidden="true">#</a> 7、给这些具体方法添加事务注解</h4><p>给<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类的<code>received</code>方法添加事务注解，并指定有异常就回滚事务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.7.1.png" alt="image-20220615100748683" tabindex="0" loading="lazy"><figcaption>image-20220615100748683</figcaption></figure><p>给<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseDetailServiceImpl</code>类的<code>updatePurchaseDetailBatchByPurchaseId</code>方法添加事务注解，并指定有异常就回滚事务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.7.2.png" alt="image-20220615100803171" tabindex="0" loading="lazy"><figcaption>image-20220615100803171</figcaption></figure><h4 id="_8、测试-1" tabindex="-1"><a class="header-anchor" href="#_8、测试-1" aria-hidden="true">#</a> 8、测试</h4><p>给<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类的<code>received</code>方法里的第一条语句打断点，然后点击<code>IDEA</code>底部的<code>Service</code>按钮，选择<code>GulimallWareApplication</code>，右键选择<code>Return in Debug Mode</code>，以<code>debug</code>方式重新启动<code>GulimallWareApplication</code>模块</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.1.png" alt="image-20220615100934480" tabindex="0" loading="lazy"><figcaption>image-20220615100934480</figcaption></figure><p>将<code>gulimall_wms</code>数据库中的<code>wms_purchase</code>表中修改<code>id</code>为<code>3</code>的<code>status</code>为<code>2</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.2.png" alt="image-20220615104336853" tabindex="0" loading="lazy"><figcaption>image-20220615104336853</figcaption></figure><p>刷新前端页面，可以看到在<code>库存系统/采购单维护/采购单</code>里，<code>id</code>为<code>3</code>的<code>采购需求</code>的<code>状态</code>已变为<code>已领取</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.3.png" alt="image-20220615104512089" tabindex="0" loading="lazy"><figcaption>image-20220615104512089</figcaption></figure><p>打开<code>Postman</code>，发送领取采购单的请求</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.4.png" alt="image-20220615104045438" tabindex="0" loading="lazy"><figcaption>image-20220615104045438</figcaption></figure><p>切换到<code>IDEA</code>，可以看到已经接收到<code>purchase_id</code>为<code>3</code>和<code>4</code>的两条数据了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.5.png" alt="image-20220615104124184" tabindex="0" loading="lazy"><figcaption>image-20220615104124184</figcaption></figure><p>继续向下执行，直到<code>确认当前采购单的id是&quot;新建&quot;或者是&quot;已分配&quot;状态</code>完成，到<code>改变采购单状态(已使用注解在更新字段时自动更新updateTime)</code>停止，可以看到刚刚修改的<code>id</code>为<code>3</code>的状态为<code>已领取</code>的那条数据已经被过滤掉了，只剩下<code>id</code>为<code>4</code>的状态为<code>新建</code>的那条数据了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.6.png" alt="image-20220615104627577" tabindex="0" loading="lazy"><figcaption>image-20220615104627577</figcaption></figure><p>选择<code>GulimallWareApplication</code>模块的控制台，此时的<code>sql</code>语句也正确</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT id, amount , ware_id, create_time, phone, assignee_name , update_time, priority, assignee_id, status FROM wms_purchase WHERE ( (status = ? OR status = ?) ) AND id IN (?,?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.7.png" alt="image-20220615104801580" tabindex="0" loading="lazy"><figcaption>image-20220615104801580</figcaption></figure><p>继续向下执行，直到映射结束，停在<code>this.updateBatchById(newPurchaseEntities);</code>方法上，可以看到此时的<code>newPurchaseEntities</code>的<code>status</code>已修改为<code>2</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.8.png" alt="image-20220615104859953" tabindex="0" loading="lazy"><figcaption>image-20220615104859953</figcaption></figure><p>继续向下执行，执行完<code>this.updateBatchById(newPurchaseEntities);</code>方法，查看<code>GulimallWareApplication</code>模块的控制台，此时的<code>sql</code>语句也正确</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE wms_purchase SET create_time=?, phone=?, assignee_name=?，update_time=?，priority=?, status=? WHERE id=?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.9.png" alt="image-20220615105044203" tabindex="0" loading="lazy"><figcaption>image-20220615105044203</figcaption></figure><p>继续向下执行，直到<code>改变采购项状态</code>所有代码都执行完，可以看到<code>PurchaseDetailEntity</code>的<code>status</code>为<code>2</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.10.png" alt="image-20220615105320878" tabindex="0" loading="lazy"><figcaption>image-20220615105320878</figcaption></figure><p>查看<code>GulimallWareApplication</code>模块的控制台，此时的<code>sql</code>语句也正确</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE wms_purchase_detail SET status=? WHERE (purchase_id IN (?))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.8.11.png" alt="image-20220615105420470" tabindex="0" loading="lazy"><figcaption>image-20220615105420470</figcaption></figure><h4 id="_9、添加待办事项" tabindex="-1"><a class="header-anchor" href="#_9、添加待办事项" aria-hidden="true">#</a> 9、添加待办事项</h4><p>在<code>库存系统/采购单维护/采购需求</code>里，选中表头中<code>id</code>左侧的可选按钮，以全选所有采购需求，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code>，在<code>合并到整单</code>的下拉列表里选择<code>1 leifengyang 12345678912</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.9.1.png" alt="image-20220615105740827" tabindex="0" loading="lazy"><figcaption>image-20220615105740827</figcaption></figure><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类里的<code>mergePurchase</code>里添加待办事项，后面完成<code>确认采购单状态是0，1才可以合并</code>功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//TODO 确认采购单状态是0，1才可以合并</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.9.2.png" alt="image-20220615110011514" tabindex="0" loading="lazy"><figcaption>image-20220615110011514</figcaption></figure><p>可以看到在领取到采购单后，这些被领取的<code>采购单</code>，并没有修改<code>采购人id</code>，<code>采购人名</code>、<code>联系方式</code>，这个功能目前由于没有登录，所以目前实现不了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.9.3.png" alt="image-20220615155836991" tabindex="0" loading="lazy"><figcaption>image-20220615155836991</figcaption></figure><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类里的<code>received</code>方法里添加待办事项，后面完成<code>设置采购人id，采购人名、联系方式</code>功能</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//TODO 设置采购人id，采购人名、联系方式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.10.9.4.png" alt="image-20220615160034810" tabindex="0" loading="lazy"><figcaption>image-20220615160034810</figcaption></figure><h3 id="_4-8-11、完成采购" tabindex="-1"><a class="header-anchor" href="#_4-8-11、完成采购" aria-hidden="true">#</a> 4.8.11、完成采购</h3><h4 id="_1、查看接口-6" tabindex="-1"><a class="header-anchor" href="#_1、查看接口-6" aria-hidden="true">#</a> 1、查看接口</h4><p><code>完成采购</code>为采购员使用app领取，不属于后台管理系统，所以可以使用<code>Postman</code>模拟采购员<code>完成采购</code></p><p>接口文档在<code>库存系统/07、完成采购</code>里： https://easydoc.net/s/78237135/ZUqEdvA4/cTQHGXbK</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.1.1.png" alt="image-20220615155034336" tabindex="0" loading="lazy"><figcaption>image-20220615155034336</figcaption></figure><p>在<code>库存系统/采购单维护/采购需求</code>里，<code>id</code>为<code>3</code>的采购需求的<code>采购单id</code>为<code>3</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.1.2.png" alt="image-20220615160507927" tabindex="0" loading="lazy"><figcaption>image-20220615160507927</figcaption></figure><p>在<code>gulimall_wms</code>数据库的<code>wms_purchase_detail</code>表里将<code>id</code>为<code>3</code>的<code>purchase_id</code>修改为<code>4</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.1.3.png" alt="image-20220615160630004" tabindex="0" loading="lazy"><figcaption>image-20220615160630004</figcaption></figure><p>再新增一条数据,<code>id</code>输入<code>4</code>，<code>purchase_id</code>输入<code>4</code>，<code>sku_id</code>输入<code>4</code>，<code>sku_num</code>输入<code>30</code>，<code>ware_id</code>输入<code>2</code>，<code>status</code>输入<code>2</code>，然后点击下面的<code>√</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.1.4.png" alt="image-20220615160917672" tabindex="0" loading="lazy"><figcaption>image-20220615160917672</figcaption></figure><p>发送的请求中<code>id</code>对应<code>库存系统/采购单维护/采购需求</code>里的<code>id</code>，<code>items</code>里的<code>itemId</code>对应<code>库存系统/采购单维护/采购需求</code>里的<code>采购单id</code>，即为完成某个采购单的部分或全部<code>采购项(采购需求)</code></p><p>请求的url为: http://localhost:88/api/ware/purchase/done ，请求方式为<code>POST</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
   <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
       <span class="token punctuation">{</span><span class="token property">&quot;itemId&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">&quot;reason&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span><span class="token property">&quot;itemId&quot;</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token property">&quot;reason&quot;</span><span class="token operator">:</span><span class="token string">&quot;无货&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.1.5.png" alt="image-20220615162226790" tabindex="0" loading="lazy"><figcaption>image-20220615162226790</figcaption></figure><h4 id="_2、新建purchasedonevo类" tabindex="-1"><a class="header-anchor" href="#_2、新建purchasedonevo类" aria-hidden="true">#</a> 2、新建<code>PurchaseDoneVo</code>类</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.vo</code>包里新建<code>PurchaseDoneVo</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>ware<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> 无名氏
 * <span class="token keyword">@date</span> 2022/6/15
 * @Description: 采购完成
 *
 * <span class="token punctuation">{</span>
 *    &quot;id&quot;: 4,
 *    &quot;items&quot;: [
 *        <span class="token punctuation">{</span>&quot;itemId&quot;:3,&quot;status&quot;:3,&quot;reason&quot;:&quot;&quot;<span class="token punctuation">}</span>,
 *        <span class="token punctuation">{</span>&quot;itemId&quot;:4,&quot;status&quot;:4,&quot;reason&quot;:&quot;无货&quot;<span class="token punctuation">}</span>
 *     ]
 * <span class="token punctuation">}</span>
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PurchaseDoneVo</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 采购单id
     */</span>
    <span class="token annotation punctuation">@NotNull</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span>  id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseItemDone</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 采购项
     */</span>
    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PurchaseItemDone</span><span class="token punctuation">{</span>
        <span class="token doc-comment comment">/**
         * 采购项id
         */</span>
        <span class="token keyword">private</span> <span class="token class-name">Long</span> itemId<span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 采购状态(3:采购完成 ; 4:采购失败)
         */</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>
        <span class="token doc-comment comment">/**
         * 失败原因
         */</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> reason<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.2.png" alt="image-20220615163320567" tabindex="0" loading="lazy"><figcaption>image-20220615163320567</figcaption></figure><h4 id="_3、新建finish方法" tabindex="-1"><a class="header-anchor" href="#_3、新建finish方法" aria-hidden="true">#</a> 3、新建<code>finish</code>方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.controller.PurchaseController</code>类里新建<code>finish</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 采购员完成采购
 * /ware/purchase/done
 * <span class="token keyword">@param</span> <span class="token parameter">purchaseDoneVo</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/done&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">PurchaseDoneVo</span> purchaseDoneVo<span class="token punctuation">)</span><span class="token punctuation">{</span>
    purchaseService<span class="token punctuation">.</span><span class="token function">donePurchase</span><span class="token punctuation">(</span>purchaseDoneVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.3.png" alt="image-20220615163521858" tabindex="0" loading="lazy"><figcaption>image-20220615163521858</figcaption></figure><h4 id="_4、新建donepurchase抽象接口" tabindex="-1"><a class="header-anchor" href="#_4、新建donepurchase抽象接口" aria-hidden="true">#</a> 4、新建<code>donePurchase</code>抽象接口</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.PurchaseService</code>接口里新建<code>donePurchase</code>抽象接口</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.4.png" alt="image-20220615163603585" tabindex="0" loading="lazy"><figcaption>image-20220615163603585</figcaption></figure><h4 id="_5、实现donepurchase抽象接口" tabindex="-1"><a class="header-anchor" href="#_5、实现donepurchase抽象接口" aria-hidden="true">#</a> 5、实现<code>donePurchase</code>抽象接口</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类里实现未实现的<code>donePurchase</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">WareSkuService</span> wareSkuService<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 采购员完成采购
 * <span class="token keyword">@param</span> <span class="token parameter">purchaseDoneVo</span>
 */</span>
<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">donePurchase</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDoneVo</span> purchaseDoneVo<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">AtomicBoolean</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//1、改变采购项状态</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> purchaseDetailEntities <span class="token operator">=</span> purchaseDoneVo<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>purchaseItemDone <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>purchaseItemDone<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">HASERROR</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">HASERROR</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>purchaseItemDone<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">BUYING</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">FINISHED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>purchaseItemDone<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> purchaseDetailEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    purchaseDetailService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>purchaseDetailEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//2、改变采购单状态</span>
    <span class="token class-name">Long</span> purchaseId <span class="token operator">=</span> purchaseDoneVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PurchaseEntity</span> purchaseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    purchaseEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>purchaseId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> status <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token class-name">PurchaseStatusEnum</span><span class="token punctuation">.</span><span class="token constant">FINISHED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">PurchaseStatusEnum</span><span class="token punctuation">.</span><span class="token constant">HASERROR</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    purchaseEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>purchaseEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//3、将成功采购的进行入库</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> purchaseDetailIds <span class="token operator">=</span> purchaseDoneVo<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>purchaseItemDone <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> purchaseItemDone<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">BUYING</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDoneVo<span class="token punctuation">.</span>PurchaseItemDone</span><span class="token operator">::</span><span class="token function">getItemId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> purchaseDetailList <span class="token operator">=</span> purchaseDetailService<span class="token punctuation">.</span><span class="token function">listByIds</span><span class="token punctuation">(</span>purchaseDetailIds<span class="token punctuation">)</span><span class="token punctuation">;</span>

    wareSkuService<span class="token punctuation">.</span><span class="token function">addOrUpdateStockBatchByskuIdAndwareId</span><span class="token punctuation">(</span>purchaseDetailList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.5.png" alt="image-20220615200305836" tabindex="0" loading="lazy"><figcaption>image-20220615200305836</figcaption></figure><h4 id="_6、新建添加或更新库存抽象接口" tabindex="-1"><a class="header-anchor" href="#_6、新建添加或更新库存抽象接口" aria-hidden="true">#</a> 6、新建添加或更新库存抽象接口</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.WareSkuService</code>接口里新建<code>addOrUpdateStockBatchByskuIdAndwareId</code>抽象接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">addOrUpdateStockBatchByskuIdAndwareId</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> purchaseDetailList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.6.png" alt="image-20220615200456324" tabindex="0" loading="lazy"><figcaption>image-20220615200456324</figcaption></figure><h4 id="_7、实现添加或更新库存抽象接口" tabindex="-1"><a class="header-anchor" href="#_7、实现添加或更新库存抽象接口" aria-hidden="true">#</a> 7、实现添加或更新库存抽象接口</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl</code>类里实现未实现的<code>addOrUpdateStockBatchByskuIdAndwareId</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">WareSkuDao</span> wareSkuDao<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrUpdateStockBatchByskuIdAndwareId</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> purchaseDetailList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    purchaseDetailList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">addOrUpdateStockByskuIdAndwareId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrUpdateStockByskuIdAndwareId</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WareSkuEntity</span> wareSkuEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WareSkuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wareSkuEntity<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wareSkuEntity<span class="token punctuation">.</span><span class="token function">setWareId</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getWareId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareSkuEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">WareSkuEntity</span><span class="token operator">::</span><span class="token function">getSkuId</span><span class="token punctuation">,</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">WareSkuEntity</span><span class="token operator">::</span><span class="token function">getWareId</span><span class="token punctuation">,</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getWareId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">WareSkuEntity</span> query <span class="token operator">=</span> wareSkuDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            wareSkuEntity<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            wareSkuDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>wareSkuEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuDao<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>wareSkuEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.7.png" alt="image-20220615204549277" tabindex="0" loading="lazy"><figcaption>image-20220615204549277</figcaption></figure><h4 id="_8、测试-2" tabindex="-1"><a class="header-anchor" href="#_8、测试-2" aria-hidden="true">#</a> 8、测试</h4><p>重启<code>gulimall-ware</code>模块，打开<code>Postman</code></p><p>选择请求的url为: http://localhost:88/api/ware/purchase/done的对话框，按<code>ctrl+S</code>快捷键保存，在弹出的<code>SAVE REQUEST</code>对话框里，<code>Request name</code>里输入<code>完成采购</code>，点击<code>Save to</code>里的<code>采购人员app</code>，把<code>完成采购</code>放到<code>采购人员app</code>里面，然后点击<code>Save</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.1.gif" alt="GIF 2022-6-15 23-10-02" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-15 23-10-02</figcaption></figure><p>点击<code>Send</code>后，显示报了<code>400</code>的错误</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.2.png" alt="image-20220615231715243" tabindex="0" loading="lazy"><figcaption>image-20220615231715243</figcaption></figure><p>查看<code>GulimallWareApplication</code>模块的控制台，可以发现已经报错了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot construct instance of \`com.atguigu.gulimall.ware.vo.PurchaseDoneVo$PurchaseItemDone\` (although at least one Creator exists): can only instantiate non-static inner class by using default, no-argument

已解决 [org.springframework.http.converter.HttpMessageNotReadableException：JSON 解析错误：无法构造 \`com.atguigu.gulimall.ware.vo.PurchaseDoneVo$PurchaseItemDone\` 的实例（尽管至少存在一个 Creator）：只能实例化非静态 使用默认的无参数的内部类
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.3.png" alt="image-20220615231358244" tabindex="0" loading="lazy"><figcaption>image-20220615231358244</figcaption></figure><p>把<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.vo.PurchaseDoneVo</code>类的<code>PurchaseItemDone</code>内部类上添加<code>static</code>关键字</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.4.png" alt="image-20220615231750046" tabindex="0" loading="lazy"><figcaption>image-20220615231750046</figcaption></figure><p>重启<code>gulimall-ware</code>模块，打开<code>Postman</code>，再次发送请求，这次报了<code>500</code>的错误</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.5.png" alt="image-20220615233005159" tabindex="0" loading="lazy"><figcaption>image-20220615233005159</figcaption></figure><p>查看<code>GulimallWareApplication</code>模块的控制台，查看<code>sql</code>语句可以看到执行<code>update</code>操作时只有更新条件，却没有更新的字段</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE wms_ purchase_ detail WHERE id=?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.6.png" alt="image-20220615233148420" tabindex="0" loading="lazy"><figcaption>image-20220615233148420</figcaption></figure><p>调试发现，<code>purchaseDetailEntities</code>中<code>id</code>为<code>3</code>的数据的<code>status</code>为<code>null</code>，整条数据只有<code>id</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.7.png" alt="image-20220615233304771" tabindex="0" loading="lazy"><figcaption>image-20220615233304771</figcaption></figure><p>在该<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类的<code>donePurchase</code>方法里添加过滤条件,只有<code>purchaseDetailEntity.getStatus()!=null</code>的数据才保留</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1、改变采购项状态</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">&gt;</span></span> purchaseDetailEntities <span class="token operator">=</span> purchaseDoneVo<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>purchaseItemDone <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseDetailEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>purchaseItemDone<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">HASERROR</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">HASERROR</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>purchaseItemDone<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">FINISHED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailStatusEnum</span><span class="token punctuation">.</span><span class="token constant">FINISHED</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>purchaseItemDone<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> purchaseDetailEntity<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
purchaseDetailService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span>purchaseDetailEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.8.png" alt="image-20220615233734194" tabindex="0" loading="lazy"><figcaption>image-20220615233734194</figcaption></figure><p>重启<code>gulimall-ware</code>模块，再次发送请求又报错了，再次调试</p><p>查看<code>GulimallWareApplication</code>模块的控制台，查看<code>sql</code>语句,可以看到在<code>in()</code>里面没有传递数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT id,ware_id, purchase_id, sku_price, sku_num,sku_id, status FROM wms_purchase_detail WHERE id IN ( )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.9.png" alt="image-20220615234429118" tabindex="0" loading="lazy"><figcaption>image-20220615234429118</figcaption></figure><p>在该<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.PurchaseServiceImpl</code>类的<code>donePurchase</code>方法里，修改<code>purchaseItemDone.getStatus()</code>与<code>PurchaseDetailStatusEnum.FINISHED.getStatus();</code>相比，并判断<code>purchaseDetailIds</code>不为空才添加或更新库存</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.8.10.png" alt="image-20220615234255037" tabindex="0" loading="lazy"><figcaption>image-20220615234255037</figcaption></figure><p><a href="code/4.8.11.8.PurchaseServiceImpl.java">点击查看<code>PurchaseServiceImpl</code>类完整代码</a></p><h4 id="_9、重新测试一" tabindex="-1"><a class="header-anchor" href="#_9、重新测试一" aria-hidden="true">#</a> 9、重新测试一</h4><p>重启<code>gulimall-ware</code>模块，再次发送请求，可以看到这次成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.9.1.png" alt="image-20220615234546911" tabindex="0" loading="lazy"><figcaption>image-20220615234546911</figcaption></figure><p>在<code>库存系统/采购单维护/采购单</code>里，<code>采购单id</code>为<code>4</code>的<code>状态</code>已正确变为<code>有异常</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.9.2.png" alt="image-20220615234624963" tabindex="0" loading="lazy"><figcaption>image-20220615234624963</figcaption></figure><p>在<code>库存系统/采购单维护/采购需求</code>里，<code>id</code>为<code>3</code>的<code>状态</code>已正确变为<code>已完成</code>，<code>id</code>为<code>4</code>的<code>状态</code>已正确变为<code>采购失败</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.9.3.png" alt="image-20220615234706291" tabindex="0" loading="lazy"><figcaption>image-20220615234706291</figcaption></figure><h4 id="_10、重新测试二" tabindex="-1"><a class="header-anchor" href="#_10、重新测试二" aria-hidden="true">#</a> 10、重新测试二</h4><p>在<code>库存系统/采购单维护/采购需求</code>里，点击<code>新建</code>，在<code>采购商品id</code>里输入<code>2</code>，<code>采购数量</code>里输入<code>10</code>，<code>仓库</code>里选择<code>1号仓库</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.1.png" alt="image-20220615234821431" tabindex="0" loading="lazy"><figcaption>image-20220615234821431</figcaption></figure><p>在<code>库存系统/采购单维护/采购需求</code>里，点击<code>新建</code>，在<code>采购商品id</code>里输入<code>3</code>，<code>采购数量</code>里输入<code>15</code>，<code>仓库</code>里选择<code>1号仓库</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.2.png" alt="image-20220615234903216" tabindex="0" loading="lazy"><figcaption>image-20220615234903216</figcaption></figure><p>在<code>库存系统/采购单维护/采购需求</code>里，点击<code>新建</code>，在<code>采购商品id</code>里输入<code>4</code>，<code>采购数量</code>里输入<code>5</code>，<code>仓库</code>里选择<code>1号仓库</code>，然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.3.png" alt="image-20220615234940017" tabindex="0" loading="lazy"><figcaption>image-20220615234940017</figcaption></figure><p>在<code>库存系统/采购单维护/采购需求</code>里选择刚刚新建的<code>采购单id</code>为<code>5</code>、<code>6</code>、<code>7</code>的三个采购单，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code>；在<code>合并到整单</code>里不选择想要合并的采购单，直接点击确定，在弹出的<code>提示</code>对话框里点击<code>确定</code></p><p>在<code>库存系统/采购单维护/采购单</code>里，点击刚刚自动创建的<code>采购单</code>的右侧<code>修改</code>按钮,在弹出的<code>合并到整单</code>的对话框中的下拉列表中选择<code>admin</code>,然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.4.gif" alt="GIF 2022-6-15 23-51-32" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-15 23-51-32</figcaption></figure><p>使用<code>Postma</code>发送<code>领取采购单</code>，在<code>json</code>的输入框里输入刚刚自动创建的采购单的id：<code>[5]</code>，然后点击<code>Send</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.5.png" alt="image-20220615235334954" tabindex="0" loading="lazy"><figcaption>image-20220615235334954</figcaption></figure><p>可以看到在<code>库存系统/采购单维护/采购单</code>里，<code>采购单id</code>为<code>5</code>的状态已经变为<code>已领取</code>了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.6.png" alt="image-20220615235441128" tabindex="0" loading="lazy"><figcaption>image-20220615235441128</figcaption></figure><p>点击<code>库存系统/采购单维护/采购需求</code>，可以看到刚刚新建的<code>采购单id</code>为<code>5</code>、<code>6</code>、<code>7</code>的三个采购单的状态已全部变为<code>正在采购</code>了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.7.png" alt="image-20220615235505421" tabindex="0" loading="lazy"><figcaption>image-20220615235505421</figcaption></figure><p>使用<code>Postma</code>发送<code>完成采购</code>，在<code>json</code>的输入框里输入以下<code>json</code>，然后点击<code>Send</code></p><p>发送的请求中<code>id</code>对应<code>库存系统/采购单维护/采购需求</code>里的<code>id</code>，<code>items</code>里的<code>itemId</code>对应<code>库存系统/采购单维护/采购需求</code>里的<code>采购单id</code>，即为完成某个采购单的部分或全部<code>采购项(采购需求)</code></p><p>这里将<code>采购单id</code>为<code>5</code>的所有<code>采购项(采购需求)</code>的状态都变为<code>3</code>，表示全部采购成功</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
   <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
       <span class="token punctuation">{</span><span class="token property">&quot;itemId&quot;</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">&quot;reason&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span><span class="token property">&quot;itemId&quot;</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">&quot;reason&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token punctuation">{</span><span class="token property">&quot;itemId&quot;</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">&quot;reason&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.8.png" alt="image-20220616000426342" tabindex="0" loading="lazy"><figcaption>image-20220616000426342</figcaption></figure><p>可以看到在<code>库存系统/采购单维护/采购单</code>里，<code>采购单id</code>为<code>5</code>的状态已经变为<code>已完成</code>了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.9.png" alt="image-20220616002409091" tabindex="0" loading="lazy"><figcaption>image-20220616002409091</figcaption></figure><p>点击<code>库存系统/采购单维护/采购需求</code>，可以看到刚刚新建的<code>采购单id</code>为<code>5</code>、<code>6</code>、<code>7</code>的三个采购单的状态已全部变为<code>已完成</code>了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.11.10.10.png" alt="image-20220616002426774" tabindex="0" loading="lazy"><figcaption>image-20220616002426774</figcaption></figure><h3 id="_4-8-12、远程调用gulimall-product模块" tabindex="-1"><a class="header-anchor" href="#_4-8-12、远程调用gulimall-product模块" aria-hidden="true">#</a> 4.8.12、远程调用<code>gulimall-product</code>模块</h3><h4 id="_1、查出sku-name" tabindex="-1"><a class="header-anchor" href="#_1、查出sku-name" aria-hidden="true">#</a> 1、查出<code>sku_name</code></h4><p>想查出<code>库存系统/商品库存</code>里，每条数据的<code>sku_name</code>的值</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.1.png" alt="image-20220618181715170" tabindex="0" loading="lazy"><figcaption>image-20220618181715170</figcaption></figure><h4 id="_2、查看远程提供的服务接口" tabindex="-1"><a class="header-anchor" href="#_2、查看远程提供的服务接口" aria-hidden="true">#</a> 2、查看远程提供的服务接口</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl</code>类的<code>addOrUpdateStockByskuIdAndwareId</code>方法里添加代办事项，稍后完成<code>远程查询sku的名字</code>这个功能</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.2.1.png" alt="image-20220616233031996" tabindex="0" loading="lazy"><figcaption>image-20220616233031996</figcaption></figure><p>此时想要调用<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.SkuInfoController</code>类的<code>info</code>这个方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.2.2.png" alt="image-20220616233341069" tabindex="0" loading="lazy"><figcaption>image-20220616233341069</figcaption></figure><h4 id="_3、新建couponfeignservice接口" tabindex="-1"><a class="header-anchor" href="#_3、新建couponfeignservice接口" aria-hidden="true">#</a> 3、新建<code>CouponFeignService</code>接口</h4><p>在<code>gulimall-ware</code>模块里<code>com.atguigu.gulimall.ware</code>包下新建<code>feign</code>文件夹，在这个文件夹里新建<code>CouponFeignService</code>接口</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.3.1.png" alt="image-20220616233614305" tabindex="0" loading="lazy"><figcaption>image-20220616233614305</figcaption></figure><p>添加上一些注释</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>gulimall<span class="token punctuation">.</span>ware<span class="token punctuation">.</span>feign</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">R</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span>  无名氏
 * <span class="token keyword">@date</span>  2022/6/16
 * @Description:
 */</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;gulimall-gateway&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductFeignService</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 1)、让所有请求过网关;
     *    1、@FeignClient( &quot;gulimall-gateway&quot;):给gulimall-gateway所在的机器发请求
     *    2、/api/product/skuinfo/info/<span class="token punctuation">{</span>skuId<span class="token punctuation">}</span>
     * 2)、直接让后台指定服务处理
     *    1、@FeignClient( &quot;gulimall-gateway&quot;)
     *    2、/product/skuinfo/info/<span class="token punctuation">{</span>skuId<span class="token punctuation">}</span>
     * <span class="token keyword">@param</span> <span class="token parameter">skuId</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/product/skuinfo/info/{skuId}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;skuId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> skuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.3.2.png" alt="image-20220616233927770" tabindex="0" loading="lazy"><figcaption>image-20220616233927770</figcaption></figure><h4 id="_4、修改添加或更新库存方法" tabindex="-1"><a class="header-anchor" href="#_4、修改添加或更新库存方法" aria-hidden="true">#</a> 4、修改<code>添加或更新库存</code>方法</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl</code>类里修改<code>addOrUpdateStockByskuIdAndwareId</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">ProductFeignService</span> productFeignService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrUpdateStockByskuIdAndwareId</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WareSkuEntity</span> wareSkuEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WareSkuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wareSkuEntity<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wareSkuEntity<span class="token punctuation">.</span><span class="token function">setWareId</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getWareId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareSkuEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">WareSkuEntity</span><span class="token operator">::</span><span class="token function">getSkuId</span><span class="token punctuation">,</span> purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">WareSkuEntity</span><span class="token operator">::</span><span class="token function">getWareId</span><span class="token punctuation">,</span> purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getWareId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">WareSkuEntity</span> query <span class="token operator">=</span> wareSkuDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>query <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setStockLocked</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//远程查询sku的名字；如果失败，整个事务不回滚</span>
        <span class="token comment">//1、 自己catch异常</span>
        <span class="token comment">//TODO 还可以用什么办法让异常出现以后不回滚?高级</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">R</span> info <span class="token operator">=</span> productFeignService<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>wareSkuEntity<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> skuInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> info<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;skuInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                wareSkuEntity<span class="token punctuation">.</span><span class="token function">setSkuName</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> skuInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;skuName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>wareSkuEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuDao<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>wareSkuEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.4.png" alt="image-20220616235351460" tabindex="0" loading="lazy"><figcaption>image-20220616235351460</figcaption></figure><p>最后经过优化，改成了这样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">ProductFeignService</span> productFeignService<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrUpdateStockByskuIdAndwareId</span><span class="token punctuation">(</span><span class="token class-name">PurchaseDetailEntity</span> purchaseDetailEntity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WareSkuEntity</span> wareSkuEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WareSkuEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wareSkuEntity<span class="token punctuation">.</span><span class="token function">setSkuId</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wareSkuEntity<span class="token punctuation">.</span><span class="token function">setWareId</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getWareId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WareSkuEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">WareSkuEntity</span><span class="token operator">::</span><span class="token function">getSkuId</span><span class="token punctuation">,</span> purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">WareSkuEntity</span><span class="token operator">::</span><span class="token function">getWareId</span><span class="token punctuation">,</span> purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getWareId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">WareSkuEntity</span> query <span class="token operator">=</span> wareSkuDao<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> query<span class="token punctuation">.</span><span class="token function">getSkuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//远程查询sku的名字；如果失败，整个事务不回滚</span>
        <span class="token comment">//1、 自己catch异常</span>
        <span class="token comment">//TODO 还可以用什么办法让异常出现以后不回滚?高级</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">R</span> info <span class="token operator">=</span> productFeignService<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>wareSkuEntity<span class="token punctuation">.</span><span class="token function">getSkuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> skuInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> info<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;skuInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                wareSkuEntity<span class="token punctuation">.</span><span class="token function">setSkuName</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> skuInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;skuName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>query <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setStockLocked</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span>purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>wareSkuEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuEntity<span class="token punctuation">.</span><span class="token function">setStock</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> purchaseDetailEntity<span class="token punctuation">.</span><span class="token function">getSkuNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wareSkuDao<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>wareSkuEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、解决idea报红" tabindex="-1"><a class="header-anchor" href="#_5、解决idea报红" aria-hidden="true">#</a> 5、解决<code>IDEA</code>报红</h4><p>可以看到在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl</code>类里注入的<code>productFeignService</code>对象报红，这个报红属于<code>IDEA</code>的问题，是<code>IDEA</code>检测到无法注入所以报红</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.5.1.png" alt="image-20220618175013156" tabindex="0" loading="lazy"><figcaption>image-20220618175013156</figcaption></figure><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.feign.ProductFeignService</code>接口上添加<code>@Service</code>注解</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.5.2.png" alt="image-20220618175103940" tabindex="0" loading="lazy"><figcaption>image-20220618175103940</figcaption></figure><p>这样<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl</code>类里注入的<code>productFeignService</code>对象就不报红了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.5.3.png" alt="image-20220618224651290" tabindex="0" loading="lazy"><figcaption>image-20220618224651290</figcaption></figure><h4 id="_6、启动gulimall-ware模块失败" tabindex="-1"><a class="header-anchor" href="#_6、启动gulimall-ware模块失败" aria-hidden="true">#</a> 6、启动<code>gulimall-ware</code>模块失败</h4><p>重启<code>gulimall-ware</code>模块时，控制台报错</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;purchaseController&#39;: Unsatisfied dependency expressed through field &#39;purchaseService&#39;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;purchaseService&#39;: Unsatisfied dependency expressed through field &#39;wareSkuService&#39;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;wareSkuService&#39;: Unsatisfied dependency expressed through field &#39;productFeignService&#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &#39;com.atguigu.gulimall.ware.feign.ProductFeignService&#39; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}

ConfigServletWebServerApplicationContext：上下文初始化期间遇到异常 - 取消刷新尝试：org.springframework.beans.factory.UnsatisfiedDependencyException：创建名称为“purchaseController”的bean时出错：通过字段“purchaseService”表示不满足的依赖关系；嵌套异常是 org.springframework.beans.factory.UnsatisfiedDependencyException：创建名称为“purchaseService”的 bean 时出错：通过字段“wareSkuService”表示的依赖关系不满足；嵌套异常是 org.springframework.beans.factory.UnsatisfiedDependencyException：创建名为 &#39;wareSkuService&#39; 的 bean 时出错：通过字段 &#39;productFeignService&#39; 表达的依赖关系不满足；嵌套异常是 org.springframework.beans.factory.NoSuchBeanDefinitionException：没有“com.atguigu.gulimall.ware.feign.ProductFeignService”类型的合格 bean 可用：预计至少有 1 个有资格作为自动装配候选者的 bean。依赖注解：{@org.springframework.beans.factory.annotation.Autowired(required=true)}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code> &#39;com.atguigu.gulimall.ware.feign.ProductFeignService&#39; that could not be found</code>这句话说得很清楚了，就是<code>ProductFeignService</code>这个接口没有找到(准确的说是它的实现类没有找到，不能成功注入，<code>Spring</code>中不能注入接口)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Field productFeignService in com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl required a bean of type &#39;com.atguigu.gulimall.ware.feign.ProductFeignService&#39; that could not be found.

com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl 中的字段 productFeignService 需要类型为“com.atguigu.gulimall.ware.feign.ProductFeignService”的 bean。但是没有找到
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.6.png" alt="image-20220618174435966" tabindex="0" loading="lazy"><figcaption>image-20220618174435966</figcaption></figure><p>完整报错信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2022-06-18 17:43:29.843  WARN 18808 --- [           main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;purchaseController&#39;: Unsatisfied dependency expressed through field &#39;purchaseService&#39;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;purchaseService&#39;: Unsatisfied dependency expressed through field &#39;wareSkuService&#39;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;wareSkuService&#39;: Unsatisfied dependency expressed through field &#39;productFeignService&#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &#39;com.atguigu.gulimall.ware.feign.ProductFeignService&#39; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2022-06-18 17:43:29.845  INFO 18808 --- [           main] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2022-06-18 17:43:29.856  INFO 18808 --- [           main] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with &#39;debug&#39; enabled.
2022-06-18 17:43:29.944 ERROR 18808 --- [           main] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field productFeignService in com.atguigu.gulimall.ware.service.impl.WareSkuServiceImpl required a bean of type &#39;com.atguigu.gulimall.ware.feign.ProductFeignService&#39; that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type &#39;com.atguigu.gulimall.ware.feign.ProductFeignService&#39; in your configuration.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、开启远程调用" tabindex="-1"><a class="header-anchor" href="#_7、开启远程调用" aria-hidden="true">#</a> 7、开启远程调用</h4><p>在<code>gulimall-ware</code>模块的<code>com.atguigu.gulimall.ware.GulimallWareApplication</code>启动类上添加注解，以开启远程调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.atguigu.gulimall.ware.feign&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.7.png" alt="image-20220618224737308" tabindex="0" loading="lazy"><figcaption>image-20220618224737308</figcaption></figure><h4 id="_8、重新测试-1" tabindex="-1"><a class="header-anchor" href="#_8、重新测试-1" aria-hidden="true">#</a> 8、重新测试</h4><p>重启<code>gulimall-ware</code>模块，刷新前端页面</p><p>在<code>库存系统/采购单维护/采购需求</code>里，点击<code>新建</code>，在<code>采购商品id</code>里输入<code>7</code>，<code>采购数量</code>里输入<code>7</code>，<code>仓库</code>里选择<code>1号仓库</code>，然后点击确定，</p><p>选中刚刚新建的<code>id</code>为<code>8</code>的采购需求按钮，然后点击<code>批量操作</code>，在<code>批量操作</code>里选择<code>合并整单</code>；在<code>合并到整单</code>里不选择想要合并的采购单，直接点击确定，在弹出的<code>提示</code>对话框里点击<code>确定</code></p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.8.1.gif" alt="GIF 2022-6-18 22-03-49" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-18 22-03-49</figcaption></figure><p>在<code>库存系统/采购单维护/采购单</code>里，点击刚刚自动创建的<code>采购单</code>的右侧<code>分配</code>按钮,在弹出的<code>分配采购人员</code>的对话框中的下拉列表中选择<code>admin</code>,然后点击确定</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.8.2.gif" alt="GIF 2022-6-18 22-05-31" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-18 22-05-31</figcaption></figure><p>打开<code>Postman</code>，在<code>领取采购单</code>的<code>json</code>输入框里输入<code>[6]</code>，点击<code>Send</code></p><p>在<code>完成采购</code>的<code>json</code>输入框里输入如下<code>json</code>，点击<code>Send</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
   <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
       <span class="token punctuation">{</span><span class="token property">&quot;itemId&quot;</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token property">&quot;reason&quot;</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.8.3.png" alt="GIF 2022-6-18 22-06-55" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-18 22-06-55</figcaption></figure><p>可以看到，此时可以看到已经成功插入<code>sku_name</code>字段了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.8.12.8.4.png" alt="image-20220618224951824" tabindex="0" loading="lazy"><figcaption>image-20220618224951824</figcaption></figure><h2 id="_4-9、商品服务-api-商品管理" tabindex="-1"><a class="header-anchor" href="#_4-9、商品服务-api-商品管理" aria-hidden="true">#</a> 4.9、商品服务-API-商品管理</h2><h4 id="_1、无法访问" tabindex="-1"><a class="header-anchor" href="#_1、无法访问" aria-hidden="true">#</a> 1、无法访问</h4><p>点击<code>商品系统/商品维护/spu管理</code>，随便点击一条数据的右边的<code>规格</code>按钮，可以看到报了<code>400</code>的异常</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.1.1.gif" alt="GIF 2022-6-18 22-57-00" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-18 22-57-00</figcaption></figure><p>可以在选中<code>gulimall_admin</code>数据库，右键选择<code>新建查询</code>，输入以下<code>sql</code>，手动创建一个路由的路径</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>INSERT INTO sys_menu (menu_id, parent_id, name, url, perms, type, icon, order_num) VALUES (76, 37, &#39;规格维护&#39;, &#39;product/attrupdate&#39;, &#39;&#39;, 2, &#39;log&#39;, 0);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.1.2.gif" alt="GIF 2022-6-18 22-59-57" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-18 22-59-57</figcaption></figure><p>点击<code>商品系统/商品维护/spu管理</code>，再随便点击一条数据的右边的<code>规格</code>按钮，可以看到已经可以正常显示出来<code>规格维护</code>了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.1.3.png" alt="GIF 2022-6-18 23-01-32" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-18 23-01-32</figcaption></figure><p>如果还是无法访问，可以在<code>navicat</code>里选择<code>gulimall_admin</code>数据库中的<code>sys_menu</code>表，在里面把刚刚插入<code>name</code>为规格维护的那条数据的<code>type</code>把<code>2</code>改成<code>1</code>就可以了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.1.4.png" alt="image-20220618232306790" tabindex="0" loading="lazy"><figcaption>image-20220618232306790</figcaption></figure><p>如果还是无法访问，可以打开<code>VS Code</code>，在<code>src\\router\\index.js</code>文件里的<code>mainRoutes</code>里的<code>children</code>里添加一条路径</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> path<span class="token operator">:</span> &#39;/product-attrupdate&#39;<span class="token punctuation">,</span> component<span class="token operator">:</span> _import(&#39;modules/product/attrupdate&#39;)<span class="token punctuation">,</span> name<span class="token operator">:</span> &#39;attr-update&#39;<span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> &#39;规格维护&#39;<span class="token punctuation">,</span> isTab<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.1.5.png" alt="image-20220618232119164" tabindex="0" loading="lazy"><figcaption>image-20220618232119164</figcaption></figure><h4 id="_2、查看接口" tabindex="-1"><a class="header-anchor" href="#_2、查看接口" aria-hidden="true">#</a> 2、查看接口</h4><p>接口文档在<code>商品系统/22、获取spu规格</code>里：https://easydoc.net/s/78237135/ZUqEdvA4/GhhJhkg7</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.2.png" alt="image-20220616235801916" tabindex="0" loading="lazy"><figcaption>image-20220616235801916</figcaption></figure><h4 id="_3、添加baseattrlistforspu方法" tabindex="-1"><a class="header-anchor" href="#_3、添加baseattrlistforspu方法" aria-hidden="true">#</a> 3、添加<code>baseAttrlistforspu</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrController</code>类里添加<code>baseAttrlistforspu</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * /product/attr/base/listforspu/<span class="token punctuation">{</span>spuId<span class="token punctuation">}</span>
 * <span class="token keyword">@param</span> <span class="token parameter">spuId</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/base/listforspu/{spuId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">baseAttrlistforspu</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;spuId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> spuId<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> productAttrValueService<span class="token punctuation">.</span><span class="token function">baseAttrlistforspu</span><span class="token punctuation">(</span>spuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.3.png" alt="image-20220618234506140" tabindex="0" loading="lazy"><figcaption>image-20220618234506140</figcaption></figure><h4 id="_4、添加baseattrlistforspu抽象方法" tabindex="-1"><a class="header-anchor" href="#_4、添加baseattrlistforspu抽象方法" aria-hidden="true">#</a> 4、添加<code>baseAttrlistforspu</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.ProductAttrValueService</code>类里添加<code>baseAttrlistforspu</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">baseAttrlistforspu</span><span class="token punctuation">(</span><span class="token class-name">Long</span> spuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.4.png" alt="image-20220618233809045" tabindex="0" loading="lazy"><figcaption>image-20220618233809045</figcaption></figure><h4 id="_5、实现baseattrlistforspu抽象方法" tabindex="-1"><a class="header-anchor" href="#_5、实现baseattrlistforspu抽象方法" aria-hidden="true">#</a> 5、实现<code>baseAttrlistforspu</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里实现未实现的<code>baseAttrlistforspu</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">baseAttrlistforspu</span><span class="token punctuation">(</span><span class="token class-name">Long</span> spuId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ProductAttrValueEntity</span><span class="token operator">::</span><span class="token function">getSpuId</span><span class="token punctuation">,</span>spuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.5.png" alt="image-20220618234037898" tabindex="0" loading="lazy"><figcaption>image-20220618234037898</figcaption></figure><h4 id="_6、无法回显数据" tabindex="-1"><a class="header-anchor" href="#_6、无法回显数据" aria-hidden="true">#</a> 6、无法回显数据</h4><p>重启<code>gulimall-product</code>模块，如果前端无法回显数据，可以修改<code>src\\views\\modules\\product\\spuinfo.vue</code>里的<code>attrUpdateShow</code>方法的名为<code>query</code>的<code>catalogId</code>为<code>row.catalogId</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">attrUpdateShow</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/product-attrupdate&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">spuId</span><span class="token operator">:</span> row<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">catalogId</span><span class="token operator">:</span> row<span class="token punctuation">.</span>catalogId <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>数据库中 与商品spu sku有关的两张表 pms_spu_info 和 pms_sku_info中关于商品分类的字段catelog_id在建表时都打成了catalog_id，如果要矫正那么除了修改数据库，对应由工具生成的实体类Entity，controller,service和mapper中的字段配置都要改。此外，表的catelog_id没有错误。点击“规格”报404是因为在规格点击后，前端不会做路由跳转，需要参照评论回复中的小伙伴的方法在前端src/router/index.js中添加对应配置(你们找一找把)。这个“spu管理”界面对应vue的spuinfo.vue，他在跳转时会把选中行的id和分类id都封装进去做跳转，承接开头，找到spuinfo.vue的101行，把 【query: {spuId: row.id, catelogId: row.catelogId}】中的row.catelogId改成row.catalogId即可，因为是从pms_spu_info表中来的catalog_id字段去和pms_attr_group中欧冠的catelog_id字段做逻辑上的关联查询的。字段不对应查不出结果就只剩下一个确认修改，其他组件也不会渲染出来。</p></blockquote><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.6.1.png" alt="image-20220618235131788" tabindex="0" loading="lazy"><figcaption>image-20220618235131788</figcaption></figure><p>如果遇到多选无法回显问题可以在<code>src\\views\\modules\\product\\attrupdate.vue</code>文件的<code>showBaseAttrs</code>方法里加一个判断</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> attr<span class="token punctuation">.</span>valueType <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          v <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外当属性分组中，有的分组没有任何属性时候，也会报Cannot read property &#39;forEach&#39; of null。 因为该分组的attrs会查出null值。</p><p>可以修改为以下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//先对表单的baseAttrs进行初始化</span>
data<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> attrArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>attrs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    item<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>spuAttrsMap<span class="token punctuation">[</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span>attrId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        v <span class="token operator">=</span> _this<span class="token punctuation">.</span>spuAttrsMap<span class="token punctuation">[</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span>attrId<span class="token punctuation">]</span><span class="token punctuation">.</span>attrValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> attr<span class="token punctuation">.</span>valueType <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          v <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      attrArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">attrId</span><span class="token operator">:</span> attr<span class="token punctuation">.</span>attrId<span class="token punctuation">,</span>
        <span class="token literal-property property">attrName</span><span class="token operator">:</span> attr<span class="token punctuation">.</span>attrName<span class="token punctuation">,</span>
        <span class="token literal-property property">attrValues</span><span class="token operator">:</span> v<span class="token punctuation">,</span>
        <span class="token literal-property property">showDesc</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>spuAttrsMap<span class="token punctuation">[</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span>attrId<span class="token punctuation">]</span>
          <span class="token operator">?</span> _this<span class="token punctuation">.</span>spuAttrsMap<span class="token punctuation">[</span><span class="token string">&quot;&quot;</span> <span class="token operator">+</span> attr<span class="token punctuation">.</span>attrId<span class="token punctuation">]</span><span class="token punctuation">.</span>quickShow
          <span class="token operator">:</span> attr<span class="token punctuation">.</span>showDesc<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dataResp<span class="token punctuation">.</span>baseAttrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attrArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>dataResp<span class="token punctuation">.</span>attrGroups <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.6.2.png" alt="image-20220619000414268" tabindex="0" loading="lazy"><figcaption>image-20220619000414268</figcaption></figure><h4 id="_7、查看接口" tabindex="-1"><a class="header-anchor" href="#_7、查看接口" aria-hidden="true">#</a> 7、查看接口</h4><p>点击<code>商品系统/商品维护/spu管理</code>，随便点击一条数据的右边的<code>规格</code>按钮，先打开控制台，点击<code>Network</code>，清空数据，然后点击<code>确认修改</code>查看接口为： http://localhost:88/api/product/attr/update/1</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.7.1.png" alt="image-20220619001237932" tabindex="0" loading="lazy"><figcaption>image-20220619001237932</figcaption></figure><p>接口文档在<code>商品系统/23、修改商品规格</code>里： https://easydoc.net/s/78237135/ZUqEdvA4/GhnJ0L85</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.7.2.png" alt="image-20220619083101912" tabindex="0" loading="lazy"><figcaption>image-20220619083101912</figcaption></figure><h4 id="_8、新建updatespuattr方法" tabindex="-1"><a class="header-anchor" href="#_8、新建updatespuattr方法" aria-hidden="true">#</a> 8、新建<code>updateSpuAttr</code>方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrController</code>类里新建<code>updateSpuAttr</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据spuid修改规格参数
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/update/{spuId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">updateSpuAttr</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;spuId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> spuId<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> productAttrValueEntities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    productAttrValueService<span class="token punctuation">.</span><span class="token function">updateSpuAttr</span><span class="token punctuation">(</span>spuId<span class="token punctuation">,</span>productAttrValueEntities<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.8.png" alt="image-20220619083218353" tabindex="0" loading="lazy"><figcaption>image-20220619083218353</figcaption></figure><h4 id="_9、新建updatespuattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_9、新建updatespuattr抽象方法" aria-hidden="true">#</a> 9、新建<code>updateSpuAttr</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.ProductAttrValueService</code>接口里新建<code>updateSpuAttr</code>抽象方法</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.9.png" alt="image-20220619083256215" tabindex="0" loading="lazy"><figcaption>image-20220619083256215</figcaption></figure><h4 id="_10、实现updatespuattr抽象方法" tabindex="-1"><a class="header-anchor" href="#_10、实现updatespuattr抽象方法" aria-hidden="true">#</a> 10、实现<code>updateSpuAttr</code>抽象方法</h4><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.service.impl.ProductAttrValueServiceImpl</code>类里实现未实现的<code>updateSpuAttr</code>抽象方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateSpuAttr</span><span class="token punctuation">(</span><span class="token class-name">Long</span> spuId<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> productAttrValueEntities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ProductAttrValueEntity</span><span class="token operator">::</span><span class="token function">getSpuId</span><span class="token punctuation">,</span>spuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lambdaQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAttrValueEntity</span><span class="token punctuation">&gt;</span></span> collect <span class="token operator">=</span> productAttrValueEntities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>productAttrValueEntity <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        productAttrValueEntity<span class="token punctuation">.</span><span class="token function">setSpuId</span><span class="token punctuation">(</span>spuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> productAttrValueEntity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.10.png" alt="image-20220619084026551" tabindex="0" loading="lazy"><figcaption>image-20220619084026551</figcaption></figure><h4 id="_11、测试" tabindex="-1"><a class="header-anchor" href="#_11、测试" aria-hidden="true">#</a> 11、测试</h4><p>选择<code>商品系统/商品维护/spu管理</code>，点击<code>id</code>为<code>1</code>的那条数据的右边的<code>规格</code>按钮，将<code>基本信息</code>中的<code>机身颜色</code>修改为<code>黑色</code>，然后点击确认修改，在弹出的<code>提示</code>对话框中点击<code>确定</code>,再次从<code>spu管理</code>里进入该页面，可以发现并没有修改成功</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.11.1.gif" alt="GIF 2022-6-19 8-48-41" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-19 8-48-41</figcaption></figure><p>查看<code>GulimallProductApplication</code>控制台，可以看到已经报错了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>No primary or default constructor found for interface java.util.List
未找到接口 java.util.List 的主构造函数或默认构造函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.11.2.png" alt="image-20220619085027587" tabindex="0" loading="lazy"><figcaption>image-20220619085027587</figcaption></figure><p>在<code>gulimall-product</code>模块的<code>com.atguigu.gulimall.product.controller.AttrController</code>类的<code>updateSpuAttr</code>方法的<code>List&lt;ProductAttrValueEntity&gt; productAttrValueEntities</code>这个参数左边添加<code>@RequestBody</code>注解，指明该数据在请求体里面</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.11.3.png" alt="image-20220619085149599" tabindex="0" loading="lazy"><figcaption>image-20220619085149599</figcaption></figure><p>重启<code>gulimall-product</code>模块，刷新前端页面</p><p>再次选择<code>商品系统/商品维护/spu管理</code>，点击<code>id</code>为<code>1</code>的那条数据的右边的<code>规格</code>按钮，将<code>基本信息</code>中的<code>机身颜色</code>修改为<code>黑色</code>，然后点击确认修改，在弹出的<code>提示</code>对话框中点击<code>确定</code>,再次从<code>spu管理</code>里进入该页面，可以发现已经修改成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.11.4.gif" alt="GIF 2022-6-19 8-52-52" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-19 8-52-52</figcaption></figure><h2 id="_4-10、分布式基础篇总结" tabindex="-1"><a class="header-anchor" href="#_4-10、分布式基础篇总结" aria-hidden="true">#</a> 4.10、分布式基础篇总结</h2><p><strong>1</strong>、分布式基础概念</p><p>•微服务、注册中心、配置中心、远程调用、Feign、网关</p><p><strong>2</strong>、基础开发</p><p>再次选择<code>商品系统/商品维护/spu管理</code>，点击<code>id</code>为<code>1</code>的那条数据的右边的<code>规格</code>按钮，将<code>基本信息</code>中的<code>机身颜色</code>修改为<code>黑色</code>，然后点击确认修改，在弹出的<code>提示</code>对话框中点击<code>确定</code>,再次从<code>spu管理</code>里进入该页面，可以发现已经修改成功了</p><figure><img src="https://gitlab.com/apzs/image/-/raw/master/image/4.9.11.4.gif" alt="GIF 2022-6-19 8-52-52" tabindex="0" loading="lazy"><figcaption>GIF 2022-6-19 8-52-52</figcaption></figure><h2 id="_4-10、分布式基础篇总结-1" tabindex="-1"><a class="header-anchor" href="#_4-10、分布式基础篇总结-1" aria-hidden="true">#</a> 4.10、分布式基础篇总结</h2><p><strong>1</strong>、分布式基础概念</p><p>•微服务、注册中心、配置中心、远程调用、Feign、网关</p><p><strong>2</strong>、基础开发</p><p>•SpringBoot2.0、SpringCloud、Mybatis-Plus、Vue组件化、阿里云对象存储</p><p><strong>3</strong>、环境</p><p>•Vagrant、Linux、Docker、MySQL、Redis、逆向工程&amp;人人开源</p><p><strong>4</strong>、开发规范</p><p>•数据校验JSR303、全局异常处理、全局统一返回、全局跨域处理</p><p>•枚举状态、业务状态码、VO与TO与PO划分、逻辑删除</p><p>•Lombok：@Data、@Slf4j</p>`,1520);function Ya(an,nn){const s=o("ExternalLinkIcon");return c(),i("div",null,[u,a("blockquote",null,[a("p",null,[n("Spring Boot 中如何解决跨域问题:"),a("a",r,[n("参考链接"),t(s)]),n(" ?")]),d]),k,a("p",null,[n("在"),m,n("文件内使用element-ui中的Tree 树形组件 => "),a("a",g,[n("组件 | Element"),t(s)])]),v,a("p",null,[n("以下代码为模板 "),a("a",b,[n("组件 | Element"),t(s)])]),h,a("p",null,[n("参考文档: "),a("a",f,[n("组件 | Element"),t(s)])]),y,a("p",null,[n("参考"),w,n("的"),x,n("里的"),_,n("："),a("a",z,[n("组件 | Element"),t(s)])]),q,a("p",null,[n("参考"),S,n("的"),I,n("里的"),E,n("中的"),j,n("："),a("a",A,[n("组件 | Element"),t(s)])]),P,a("p",null,[n("参考"),R,n("的"),C,n("里"),D,n(":"),a("a",B,[n("组件 | Element"),t(s)])]),T,a("p",null,[n("参考"),L,n("的"),G,n("里的"),M,n("："),a("a",O,[n("组件 | Element"),t(s)])]),N,a("table",null,[V,a("tbody",null,[F,U,a("tr",null,[W,Q,a("td",H,[n("地域表示 OSS 的数据中心所在物理位置。您可以根据费用、请求来源等综合选择数据存储的地域。详情请查看"),a("a",$,[n("OSS已经开通的Region"),t(s)]),n("。")])]),a("tr",null,[K,X,a("td",J,[n("Endpoint 表示OSS对外服务的访问域名。OSS以HTTP RESTful API的形式对外提供服务，当访问不同地域的时候，需要不同的域名。通过内网和外网访问同一个地域所需要的域名也是不同的。具体的内容请参见"),a("a",Z,[n("各个Region对应的Endpoint"),t(s)]),n("。")])]),Y])]),aa,a("p",null,[n("参考文档："),a("a",na,[n("aliyun-spring-boot/README-zh.md at master · alibaba/aliyun-spring-boot (github.com)"),t(s)])]),sa,a("p",null,[n("依赖文件: "),a("a",ta,[n("Central Repository: org/springframework/boot/spring-boot-parent/2.2.1.RELEASE (maven.org)"),t(s)])]),ea,a("p",null,[pa,n("中"),oa,n("组件："),a("a",ca,[n("组件 | Element"),t(s)])]),ia,a("p",null,[la,n("自定义列模板："),a("a",ua,[n("组件 | Element"),t(s)])]),ra,a("p",null,[da,n("里的基础用法中的contain："),a("a",ka,[n("组件 | Element"),t(s)])]),ma,a("p",null,[ga,n("组件："),a("a",va,[n("组件 | Element"),t(s)])]),ba,a("p",null,[ha,n("中的自定义校验规则："),a("a",fa,[n("组件 | Element"),t(s)])]),ya,a("p",null,[wa,n("里面的"),xa,n("下的"),_a,n(": "),a("a",za,[n("组件 | Element"),t(s)])]),qa,a("p",null,[Sa,n("中的"),Ia,n(": "),a("a",Ea,[n("组件 | Element"),t(s)])]),ja,a("p",null,[Aa,n("中"),Pa,n("中的事件："),a("a",Ra,[n("组件 | Element"),t(s)])]),Ca,a("p",null,[Da,n("的"),Ba,n("里面的"),Ta,n("："),a("a",La,[n("组件 | Element"),t(s)])]),Ga,a("p",null,[n("接口文档："),a("a",Ma,[n("05、获取分类规格参数 - 谷粒商城 - 易文档 (easydoc.net)"),t(s)])]),Oa,a("p",null,[n("接口文档: "),a("a",Na,[n("09、获取分类销售属性 - 谷粒商城 - 易文档 (easydoc.net)"),t(s)])]),Va,a("p",null,[n("接口文档："),a("a",Fa,[n("10、获取属性分组的关联的所有属性 - 谷粒商城 - 易文档 (easydoc.net)"),t(s)])]),Ua,a("p",null,[n("接口文档："),a("a",Wa,[n("12、删除属性与分组的关联关系 - 谷粒商城 - 易文档 (easydoc.net)"),t(s)])]),Qa,a("p",null,[n("接口地址："),a("a",Ha,[n("13、获取属性分组没有关联的其他属性 - 谷粒商城 - 易文档 (easydoc.net)"),t(s)])]),$a,a("p",null,[n("接口文档："),a("a",Ka,[n("11、添加属性与分组关联关系 - 谷粒商城 - 易文档 (easydoc.net)"),t(s)])]),Xa,a("p",null,[n("url: "),a("a",Ja,[n("在线JSON校验格式化工具（Be JSON）"),t(s)])]),Za])}const en=p(l,[["render",Ya],["__file","base2.html.vue"]]);export{en as default};
