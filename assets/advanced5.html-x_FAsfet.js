const t=JSON.parse('{"key":"v-cbacac46","path":"/gulimall/advanced5.html","title":"六、订单","lang":"zh-CN","frontmatter":{"description":"5.8.RabbitMQ 5.8.1、RabbitMQ 基本使用 1、基本概念 主流的消息队列对比 特性 ActiveMQ RabbitMQ RocketMQ Kafka 单机吞吐量 万级，比 RocketMQ、Kafka 低一个数量级 同 ActiveMQ 10 万级，支撑高吞吐 10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景 topic 数量对吞吐量的影响 topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源 时效性 ms 级 微秒级，这是 RabbitMQ 的一大特点，延迟最低 ms 级 延迟在 ms 级以内 可用性 高，基于主从架构实现高可用 同 ActiveMQ 非常高，分布式架构 非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 消息可靠性 有较低的概率丢失数据 基本不丢 经过参数优化配置，可以做到 0 丢失 同 RocketMQ 功能支持 MQ 领域的功能极其完备 基于 erlang 开发，并发能力很强，性能极好，延时很低 MQ 功能较为完善，还是分布式的，扩展性好 功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用","head":[["meta",{"property":"og:url","content":"https://apzs.github.io/gulimall/advanced5.html"}],["meta",{"property":"og:site_name","content":"apzs"}],["meta",{"property":"og:title","content":"六、订单"}],["meta",{"property":"og:description","content":"5.8.RabbitMQ 5.8.1、RabbitMQ 基本使用 1、基本概念 主流的消息队列对比 特性 ActiveMQ RabbitMQ RocketMQ Kafka 单机吞吐量 万级，比 RocketMQ、Kafka 低一个数量级 同 ActiveMQ 10 万级，支撑高吞吐 10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景 topic 数量对吞吐量的影响 topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源 时效性 ms 级 微秒级，这是 RabbitMQ 的一大特点，延迟最低 ms 级 延迟在 ms 级以内 可用性 高，基于主从架构实现高可用 同 ActiveMQ 非常高，分布式架构 非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用 消息可靠性 有较低的概率丢失数据 基本不丢 经过参数优化配置，可以做到 0 丢失 同 RocketMQ 功能支持 MQ 领域的功能极其完备 基于 erlang 开发，并发能力很强，性能极好，延时很低 MQ 功能较为完善，还是分布式的，扩展性好 功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-05T06:05:15.000Z"}],["meta",{"property":"article:author","content":"apzs"}],["meta",{"property":"article:modified_time","content":"2024-03-05T06:05:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"六、订单\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-05T06:05:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"apzs\\",\\"url\\":\\"https://apzs.eu.org\\"}]}"]]},"headers":[{"level":2,"title":"5.8.RabbitMQ","slug":"_5-8-rabbitmq","link":"#_5-8-rabbitmq","children":[{"level":3,"title":"5.8.1、RabbitMQ 基本使用","slug":"_5-8-1、rabbitmq-基本使用","link":"#_5-8-1、rabbitmq-基本使用","children":[]},{"level":3,"title":"5.8.2、整合RabbitMQ","slug":"_5-8-2、整合rabbitmq","link":"#_5-8-2、整合rabbitmq","children":[]},{"level":3,"title":"5.8.3、基本页面准备","slug":"_5-8-3、基本页面准备","link":"#_5-8-3、基本页面准备","children":[]}]},{"level":2,"title":"6.1、订单模块","slug":"_6-1、订单模块","link":"#_6-1、订单模块","children":[{"level":3,"title":"6.1.1、编写基本功能","slug":"_6-1-1、编写基本功能","link":"#_6-1-1、编写基本功能","children":[]},{"level":3,"title":"6.1.2、Feign丢失请求头","slug":"_6-1-2、feign丢失请求头","link":"#_6-1-2、feign丢失请求头","children":[]},{"level":3,"title":"6.1.3、完善结算页","slug":"_6-1-3、完善结算页","link":"#_6-1-3、完善结算页","children":[]},{"level":3,"title":"6.1.4、接口幂等性","slug":"_6-1-4、接口幂等性","link":"#_6-1-4、接口幂等性","children":[]}]},{"level":2,"title":"6.2、分布式事务","slug":"_6-2、分布式事务","link":"#_6-2、分布式事务","children":[{"level":3,"title":"6.2.1、分布式事务理论","slug":"_6-2-1、分布式事务理论","link":"#_6-2-1、分布式事务理论","children":[]},{"level":3,"title":"6.2.2、Seata做分布式事务","slug":"_6-2-2、seata做分布式事务","link":"#_6-2-2、seata做分布式事务","children":[]},{"level":3,"title":"6.2.3、延时队列","slug":"_6-2-3、延时队列","link":"#_6-2-3、延时队列","children":[]},{"level":3,"title":"6.2.4、其他服务整合RabbitMQ","slug":"_6-2-4、其他服务整合rabbitmq","link":"#_6-2-4、其他服务整合rabbitmq","children":[]}]}],"git":{"createdTime":1709618715000,"updatedTime":1709618715000,"contributors":[{"name":"zhaoshuo","email":"apzs@foxmaill.com","commits":1}]},"readingTime":{"minutes":174.44,"words":52333},"filePathRelative":"gulimall/advanced5.md","localizedDate":"2024年3月5日","excerpt":"<h2> 5.8.RabbitMQ</h2>\\n<h3> 5.8.1、RabbitMQ 基本使用</h3>\\n<h4> 1、基本概念</h4>\\n<h5> 主流的消息队列对比</h5>\\n<table>\\n<thead>\\n<tr>\\n<th>特性</th>\\n<th>ActiveMQ</th>\\n<th>RabbitMQ</th>\\n<th>RocketMQ</th>\\n<th>Kafka</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>单机吞吐量</td>\\n<td>万级，比 RocketMQ、Kafka 低一个数量级</td>\\n<td>同 ActiveMQ</td>\\n<td>10 万级，支撑高吞吐</td>\\n<td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td>\\n</tr>\\n<tr>\\n<td>topic 数量对吞吐量的影响</td>\\n<td></td>\\n<td></td>\\n<td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td>\\n<td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td>\\n</tr>\\n<tr>\\n<td>时效性</td>\\n<td>ms 级</td>\\n<td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td>\\n<td>ms 级</td>\\n<td>延迟在 ms 级以内</td>\\n</tr>\\n<tr>\\n<td>可用性</td>\\n<td>高，基于主从架构实现高可用</td>\\n<td>同 ActiveMQ</td>\\n<td>非常高，分布式架构</td>\\n<td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td>\\n</tr>\\n<tr>\\n<td>消息可靠性</td>\\n<td>有较低的概率丢失数据</td>\\n<td>基本不丢</td>\\n<td>经过参数优化配置，可以做到 0 丢失</td>\\n<td>同 RocketMQ</td>\\n</tr>\\n<tr>\\n<td>功能支持</td>\\n<td>MQ 领域的功能极其完备</td>\\n<td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td>\\n<td>MQ 功能较为完善，还是分布式的，扩展性好</td>\\n<td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
